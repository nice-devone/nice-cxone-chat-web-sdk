{"version":3,"file":"index.js","mappings":";CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,sBAC7B,GAAqB,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,gBAAiBJ,OACrB,CACJ,IAAIM,EAAuB,iBAAZL,QAAuBD,EAAQG,QAAQ,iBAAmBH,EAAQD,EAAK,iBACtF,IAAI,IAAIQ,KAAKD,GAAuB,iBAAZL,QAAuBA,QAAUF,GAAMQ,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,MAAOC,2CCPgCR,EAAQ,QAAgK,EACjM,EAAQ,KACZ,EAAQ,KA2DrBA,EAAQ,GAPR,SAAuBS,GACnB,IAAIC,EAAeC,KAAKC,MAAMH,GAI9B,OAHII,MAAMH,KACNA,EAKR,SAAyCD,GACrC,IAAIK,EAEAC,EADK,gEACWC,KAAKP,IAAc,GACvC,GAAIM,EAAW,GAAI,CAKf,IAJAD,EAAMC,EAAW,GAAGE,MAAM,MAAMC,KAAI,SAAUC,GAAO,OAAOC,SAASD,EAAK,KAAO,CAAG,KAChF,IAAM,IAEVL,EAAM,IAAIH,KAAKA,KAAKU,IAAIC,MAAMX,KAAMG,KAC3BS,UACL,OAAOC,IAEX,GAAIT,EAAW,GAAI,CACf,IAAIU,EAAmC,GAA9BL,SAASL,EAAW,GAAI,IAC7BA,EAAW,KACXU,GAAML,SAASL,EAAW,GAAI,KAEZ,MAAlBA,EAAW,KACXU,IAAO,GAEPA,GACAX,EAAIY,cAAcZ,EAAIa,gBAAkBF,EAEhD,CACA,OAAOX,EAAIc,SACf,CACA,OAAOJ,GACX,CAhCuBK,CAAgCpB,IAE5C,IAAIE,KAAKD,EACpB,eC7DAoB,OAAOC,eAAe/B,EAAS,aAAc,CAAEgC,OAAO,IACtDhC,EAAQiC,iBAAmBjC,EAAQkC,sBAAwBlC,EAAQmC,iBAAmBnC,EAAQoC,qBAAkB,EAKhHpC,EAAQoC,gBAJc,SAAUC,GAC5B,IAAIC,EAAOC,KAAKC,IAAID,KAAKE,MAA8B,iBAAjBJ,EAA4BK,OAAOL,GAAgBA,IACzF,OAAQC,EAAO,GAAK,IAAM,IAAMA,CACpC,EAMAtC,EAAQmC,iBAJe,SAAUQ,GAC7B,IAAIC,EAAKD,EAAGE,MAAOA,OAAe,IAAPD,EAAgB,EAAIA,EAAIE,EAAKH,EAAGI,QAASA,OAAiB,IAAPD,EAAgB,EAAIA,EAAIE,EAAKL,EAAGM,QAC9G,OAAe,GAARJ,EAAa,GAAe,GAAVE,QAD+G,IAAPC,EAAgB,EAAIA,EAEzJ,EAMAhD,EAAQkC,sBAJoB,SAAUS,GAClC,IAAIC,EAAKD,EAAGE,MAAOA,OAAe,IAAPD,EAAgB,EAAIA,EAAIE,EAAKH,EAAGI,QAASA,OAAiB,IAAPD,EAAgB,EAAIA,EAAIE,EAAKL,EAAGM,QAASA,OAAiB,IAAPD,EAAgB,EAAIA,EAAIE,EAAKP,EAAGjC,aAAcA,OAAsB,IAAPwC,EAAgB,EAAIA,EAClN,OAA6F,KAAtF,EAAIlD,EAAQmC,kBAAkB,CAAEU,MAAOA,EAAOE,QAASA,EAASE,QAASA,IAAoBvC,CACxG,EAMAV,EAAQiC,iBAJe,SAAUU,GAC7B,IAAIC,EAAKD,EAAGE,MAAOA,OAAe,IAAPD,EAAgB,EAAIA,EAAIE,EAAKH,EAAGI,QAASA,OAAiB,IAAPD,EAAgB,EAAIA,EAAIE,EAAKL,EAAGM,QAASA,OAAiB,IAAPD,EAAgB,EAAIA,EACrJ,OAAO,EAAIhD,EAAQmC,kBAAkB,CAAEU,MAAOA,EAAOE,QAASA,EAASE,QAASA,IAAa,EACjG,iBCpBAnB,OAAOC,eAAe/B,EAAS,aAAc,CAAEgC,OAAO,IACtDhC,EAAQmD,0BAAuB,EAC/B,IAAIC,EAAS,EAAQ,KAOrBpD,EAAQmD,qBANmB,SAAUE,QACpB,IAATA,IAAmBA,EAAO,IAAI1C,MAClC,IAAI2C,EAAMD,EAAKE,oBAEf,MAAO,GAAGC,OADAF,EAAM,EAAI,IAAM,KACJE,QAAO,EAAIJ,EAAOhB,iBAAiBkB,EAAM,IAAK,KAAKE,QAAO,EAAIJ,EAAOhB,iBAAiBkB,EAAM,IACtH,cCPAtD,EAAQ,OAAgC,EASxCA,EAAQ,EARR,SAAuCyD,GACnC,OAAO3B,OAAO4B,KAAKD,GACdE,QAAO,SAAUC,GAAO,OAAgC,OAAzBH,EAAgBG,EAAe,IAC9D1C,KAAI,SAAU0C,GACf,MAAO,CAACA,EAAKH,EAAgBG,IAAM1C,IAAI2C,oBAAoBC,KAAK,IACpE,IACKA,KAAK,IACd,eCNA,IAAWC,EAHXjC,OAAOC,eAAe/B,EAAS,aAAc,CAAEgC,OAAO,IACtDhC,EAAQ+D,eAAY,GAETA,EAII/D,EAAQ+D,YAAc/D,EAAQ+D,UAAY,CAAC,IAHrC,MAAI,QACrBA,EAAgB,KAAI,OACpBA,EAAgB,KAAI,oBCNxBjC,OAAOC,eAAe/B,EAAS,aAAc,CAAEgC,OAAO,IACtDhC,EAAQgE,yBAAsB,EAC9B,IAAIA,EAAuB,WACvB,SAASA,IACLC,KAAKC,UAAY,CAAC,CACtB,CA6BA,OA5BAF,EAAoBG,UAAUC,iBAAmB,SAAUC,EAAMC,GACvDD,KAAQJ,KAAKC,YACfD,KAAKC,UAAUG,GAAQ,IAE3BJ,KAAKC,UAAUG,GAAME,KAAKD,EAC9B,EACAN,EAAoBG,UAAUK,oBAAsB,SAAUH,EAAMC,GAChE,GAAMD,KAAQJ,KAAKC,UAInB,IADA,IAAIO,EAAQR,KAAKC,UAAUG,GAClB/D,EAAI,EAAGoE,EAAID,EAAME,OAAQrE,EAAIoE,EAAGpE,IACrC,GAAImE,EAAMnE,KAAOgE,EAEb,YADAG,EAAMG,OAAOtE,EAAG,EAI5B,EACA0D,EAAoBG,UAAUU,cAAgB,SAAUC,GACpD,KAAMA,EAAMT,QAAQJ,KAAKC,WACrB,OAAO,EAGX,IADA,IAAIO,EAAQR,KAAKC,UAAUY,EAAMT,MAAMU,QAC9BzE,EAAI,EAAGoE,EAAID,EAAME,OAAQrE,EAAIoE,EAAGpE,IACrCmE,EAAMnE,GAAG0E,KAAKf,KAAMa,GAExB,OAAQA,EAAMG,gBAClB,EACOjB,CACX,CAjC0B,GAkC1BhE,EAAQgE,oBAAsBA,iBCnC9BhE,EAAQ,GAAwBA,EAAQ,QAAwG,EACzH,EAAQ,KAEH,EAAQ,KAEZ,EAAQ,KAJhC,IAMIkF,EAAyB,EAAQ,KACrCpD,OAAOC,eAAe/B,EAAS,KAA/B,CAAyDmF,YAAY,EAAMC,IAAK,WAAc,OAAOF,EAAuBG,oBAAsB,IAClJ,IAAIC,EAAwB,EAAQ,KACpCxD,OAAOC,eAAe/B,EAAS,KAA/B,CAA0DmF,YAAY,EAAMC,IAAK,WAAc,OAAOE,EAAsBC,qBAAuB,yBCXnJ,IAAIC,EAAYvB,MAAQA,KAAKuB,UAAa,WAStC,OARAA,EAAW1D,OAAO2D,QAAU,SAASC,GACjC,IAAK,IAAIC,EAAGrF,EAAI,EAAGsF,EAAIC,UAAUlB,OAAQrE,EAAIsF,EAAGtF,IAE5C,IAAK,IAAIwF,KADTH,EAAIE,UAAUvF,GACOwB,OAAOqC,UAAU4B,eAAef,KAAKW,EAAGG,KACzDJ,EAAEI,GAAKH,EAAEG,IAEjB,OAAOJ,CACX,EACOF,EAASlE,MAAM2C,KAAM4B,UAChC,EACIG,EAAU/B,MAAQA,KAAK+B,QAAW,SAAUL,EAAGM,GAC/C,IAAIP,EAAI,CAAC,EACT,IAAK,IAAII,KAAKH,EAAO7D,OAAOqC,UAAU4B,eAAef,KAAKW,EAAGG,IAAMG,EAAEC,QAAQJ,GAAK,IAC9EJ,EAAEI,GAAKH,EAAEG,IACb,GAAS,MAALH,GAAqD,mBAAjC7D,OAAOqE,sBACtB,KAAI7F,EAAI,EAAb,IAAgBwF,EAAIhE,OAAOqE,sBAAsBR,GAAIrF,EAAIwF,EAAEnB,OAAQrE,IAC3D2F,EAAEC,QAAQJ,EAAExF,IAAM,GAAKwB,OAAOqC,UAAUiC,qBAAqBpB,KAAKW,EAAGG,EAAExF,MACvEoF,EAAEI,EAAExF,IAAMqF,EAAEG,EAAExF,IAF4B,CAItD,OAAOoF,CACX,EACA5D,OAAOC,eAAe/B,EAAS,aAAc,CAAEgC,OAAO,IACtDhC,EAAQqG,uBAAyBrG,EAAQuF,2BAAwB,EACjE,IAAIe,EAAoB,EAAQ,KAC5BC,EAAwB,EAAQ,KAChCC,EAAW,EAAQ,KACnBC,EAAoB,EAAQ,KAC5BC,EAAS,KAgBTC,EAA2B,CAC3BC,qBAAqB,EACrBC,yBAAyB,EACzBC,WAAY,GACZC,qBAAsB,KAgB1B/G,EAAQuF,sBAdoB,SAAUyB,EAAaC,GAE/C,QADgB,IAAZA,IAAsBA,EAAU,CAAC,GACd,iBAAZA,EACP,MAAM,IAAIC,UAAU,6CAA6C1D,cAAcyD,IAEnF,IAAIE,EAAoB3B,EAASA,EAAS,CAAC,EAAGmB,GAA2BM,GACrEL,EAAsBO,EAAkBP,oBAAqBC,EAA0BM,EAAkBN,wBAAyBO,EAAWD,EAAkBC,SAAUC,EAASF,EAAkBE,OAAQC,EAAUH,EAAkBG,QAASC,EAAavB,EAAOmB,EAAmB,CAAC,sBAAuB,0BAA2B,WAAY,SAAU,YAMrW,MAL2B,iBAAhBH,IACPA,EA7BR,SAAwCQ,EAA6BZ,EAAqBa,QACxE,IAAVA,IAAoBA,EAAQ,CAAC,GACjC,IAAIC,GAAc,EAAIpB,EAAkBqB,gCAA+B,EAAInB,EAASoB,6BAA6BH,IAC7GI,EAAWjB,GAAoD,WAA7BkB,OAAOC,SAASF,SAChD,OACA,MACN,OAA2B,IAAvBH,EAAY/C,OACL,GAAGnB,OAAOqE,EAAU,MAAMrE,OAAOgE,GAElC,IAAIQ,IAAI,GAAGxE,OAAOqE,EAAU,MAAMrE,OAAOgE,IAC3CS,OAAOtD,OAAS,EACb,GAAGnB,OAAOqE,EAAU,MAAMrE,OAAOgE,EAA6B,KAAKhE,OAAOkE,GAE9E,GAAGlE,OAAOqE,EAAU,MAAMrE,OAAOgE,EAA6B,KAAKhE,OAAOkE,EACrF,CAesBQ,CAA+BlB,EAAaJ,EAAqB,CAAEQ,SAAUA,EAAUC,OAAQA,EAAQC,QAASA,KAElIZ,EAAS,IAAID,EAAkB0B,gBAAgBnB,OAAaoB,EAAWb,IACvE,EAAIhB,EAAsB8B,qBAAqBxB,EAAyBH,EAAQO,GACzEP,CACX,EAGA1G,EAAQqG,uBADqB,WAAc,OAAOK,CAAQ,eC9D1D,IAAW4B,EAHXxG,OAAOC,eAAe/B,EAAS,aAAc,CAAEgC,OAAO,IACtDhC,EAAQsI,oBAAiB,GAEdA,EAIStI,EAAQsI,iBAAmBtI,EAAQsI,eAAiB,CAAC,IAHhD,KAAI,OACzBA,EAAsB,MAAI,QAC1BA,EAAuB,OAAI,4BCA/B,IAAIC,EAAYtE,MAAQA,KAAKsE,UAAa,SAASC,GAC/C,IAAI7C,EAAsB,mBAAX8C,QAAyBA,OAAOC,SAAUC,EAAIhD,GAAK6C,EAAE7C,GAAIrF,EAAI,EAC5E,GAAIqI,EAAG,OAAOA,EAAE3D,KAAKwD,GACrB,GAAIA,GAAyB,iBAAbA,EAAE7D,OAAqB,MAAO,CAC1CiE,KAAM,WAEF,OADIJ,GAAKlI,GAAKkI,EAAE7D,SAAQ6D,OAAI,GACrB,CAAExG,MAAOwG,GAAKA,EAAElI,KAAMuI,MAAOL,EACxC,GAEJ,MAAM,IAAItB,UAAUvB,EAAI,0BAA4B,kCACxD,EACImD,EAAU7E,MAAQA,KAAK6E,QAAW,SAAUN,EAAG5C,GAC/C,IAAI+C,EAAsB,mBAAXF,QAAyBD,EAAEC,OAAOC,UACjD,IAAKC,EAAG,OAAOH,EACf,IAAmBO,EAAY9C,EAA3B3F,EAAIqI,EAAE3D,KAAKwD,GAAOQ,EAAK,GAC3B,IACI,WAAc,IAANpD,GAAgBA,KAAM,MAAQmD,EAAIzI,EAAEsI,QAAQC,MAAMG,EAAGzE,KAAKwE,EAAE/G,MACxE,CACA,MAAOiH,GAAShD,EAAI,CAAEgD,MAAOA,EAAS,CACtC,QACI,IACQF,IAAMA,EAAEF,OAASF,EAAIrI,EAAU,SAAIqI,EAAE3D,KAAK1E,EAClD,CACA,QAAU,GAAI2F,EAAG,MAAMA,EAAEgD,KAAO,CACpC,CACA,OAAOD,CACX,EACIE,EAAiBjF,MAAQA,KAAKiF,eAAkB,SAAUC,EAAIC,EAAMC,GACpE,GAAIA,GAA6B,IAArBxD,UAAUlB,OAAc,IAAK,IAA4BqE,EAAxB1I,EAAI,EAAGoE,EAAI0E,EAAKzE,OAAYrE,EAAIoE,EAAGpE,KACxE0I,GAAQ1I,KAAK8I,IACRJ,IAAIA,EAAKM,MAAMnF,UAAUY,MAAMC,KAAKoE,EAAM,EAAG9I,IAClD0I,EAAG1I,GAAK8I,EAAK9I,IAGrB,OAAO6I,EAAG3F,OAAOwF,GAAMM,MAAMnF,UAAUY,MAAMC,KAAKoE,GACtD,EACAtH,OAAOC,eAAe/B,EAAS,aAAc,CAAEgC,OAAO,IACtDhC,EAAQuJ,2BAAwB,EAChC,IAAIC,EAAU,CACVzC,qBAAsB,IACtB0C,qBAAsB,IAAuB,IAAhBlH,KAAKmH,SAClCC,UAAW,IACXC,4BAA6B,IAC7BC,kBAAmB,IACnB/C,WAAYgD,IACZC,oBAAqBD,IACrBE,aAAa,EACbC,OAAO,GAEPV,EAAyB,WACzB,SAASA,EAAsBW,EAAKC,EAAWlD,QAC3B,IAAZA,IAAsBA,EAAU,CAAC,GACrC,IAAImD,EAAQnG,KACZA,KAAKoG,QAAU,KACfpG,KAAKqG,QAAU,KACfrG,KAAKsG,UAAY,KACjBtG,KAAKuG,OAAS,KACdvG,KAAKwG,WAAa,CACdxB,MAAO,GACPyB,QAAS,GACTC,KAAM,GACNC,MAAO,IAEX3G,KAAK4G,kBAAmB,EACxB5G,KAAK6G,cAAe,EACpB7G,KAAK8G,cAAe,EACpB9G,KAAK+G,cAAgB,GACrB/G,KAAKgH,aAAe,EACpBhH,KAAKiH,YAAc,OACnBjH,KAAKkH,YAAc,SAAUrG,GACzBsF,EAAMgB,OAAO,cACb,IAAIzI,EAAKyH,EAAMiB,SAAS1B,UAAWA,OAAmB,IAAPhH,EAAgB6G,EAAQG,UAAYhH,EACnF2I,aAAalB,EAAMmB,iBACnBnB,EAAMoB,eAAiB1D,OAAO2D,YAAW,WAAc,OAAOrB,EAAMsB,aAAe,GAAG/B,GACtFS,EAAMuB,IAAIC,WAAaxB,EAAMc,YAC7Bd,EAAMY,cAAca,SAAQ,SAAUnB,GAAW,IAAI/H,EAAI,OAA4B,QAApBA,EAAKyH,EAAMuB,WAAwB,IAAPhJ,OAAgB,EAASA,EAAGmJ,KAAKpB,EAAU,IACxIN,EAAMY,cAAgB,GAClBZ,EAAMI,QACNJ,EAAMI,OAAO1F,GAEjBsF,EAAMK,WAAWE,KAAKkB,SAAQ,SAAUE,GACpC,OAAO3B,EAAM4B,mBAAmBlH,EAAOiH,EAC3C,GACJ,EACA9H,KAAKgI,eAAiB,SAAUnH,GAC5BsF,EAAMgB,OAAO,iBACThB,EAAMG,WACNH,EAAMG,UAAUzF,GAEpBsF,EAAMK,WAAWC,QAAQmB,SAAQ,SAAUE,GACvC,OAAO3B,EAAM4B,mBAAmBlH,EAAOiH,EAC3C,GACJ,EACA9H,KAAKiI,aAAe,SAAUpH,GAC1BsF,EAAMgB,OAAO,cAAetG,GAC5BsF,EAAM+B,cACF/B,EAAME,SACNF,EAAME,QAAQxF,GAElBsF,EAAMgB,OAAO,wBACbhB,EAAMK,WAAWxB,MAAM4C,SAAQ,SAAUE,GACrC,OAAO3B,EAAM4B,mBAAmBlH,EAAOiH,EAC3C,IACA3B,EAAMgC,UACV,EACAnI,KAAKoI,aAAe,SAAUvH,GAC1BsF,EAAMgB,OAAO,eACbhB,EAAMkC,iBACFlC,EAAMS,kBACNT,EAAMgC,WAENhC,EAAMC,SACND,EAAMC,QAAQvF,GAElBsF,EAAMK,WAAWG,MAAMiB,SAAQ,SAAUE,GACrC,OAAO3B,EAAM4B,mBAAmBlH,EAAOiH,EAC3C,GACJ,EACA9H,KAAKsI,KAAOrC,EACZjG,KAAKuI,WAAarC,EAClBlG,KAAKoH,SAAWpE,EAChBhD,KAAKwI,YAC6B,iBAAvBxF,EAAQH,WACTG,EAAQH,WACR0C,EAAQ1C,WACd7C,KAAKoH,SAASrB,cACd/F,KAAK4G,kBAAmB,GAE5B5G,KAAKmI,UACT,CAqRA,OApRAtK,OAAOC,eAAewH,EAAsBpF,UAAW,aAAc,CACjEiB,IAAK,WACD,OAAO7C,KAAKmK,IAAIzI,KAAKgH,YAAa,EACtC,EACA9F,YAAY,EACZwH,cAAc,IAElB7K,OAAOC,eAAewH,EAAsBpF,UAAW,aAAc,CACjEiB,IAAK,WACD,OAAOnB,KAAK0H,IAAM1H,KAAK0H,IAAIC,WAAa3H,KAAKiH,WACjD,EACA0B,IAAK,SAAU5K,GACXiC,KAAKiH,YAAclJ,EACfiC,KAAK0H,MACL1H,KAAK0H,IAAIC,WAAa5J,EAE9B,EACAmD,YAAY,EACZwH,cAAc,IAElB7K,OAAOC,eAAewH,EAAsBpF,UAAW,iBAAkB,CACrEiB,IAAK,WAaD,OAZYnB,KAAK+G,cAAc6B,QAAO,SAAUC,EAAKpC,GAUjD,MATuB,iBAAZA,EACPoC,GAAOpC,EAAQ/F,OAEV+F,aAAmBqC,KACxBD,GAAOpC,EAAQsC,KAGfF,GAAOpC,EAAQuC,WAEZH,CACX,GAAG,IACa7I,KAAK0H,IAAM1H,KAAK0H,IAAIuB,eAAiB,EACzD,EACA/H,YAAY,EACZwH,cAAc,IAElB7K,OAAOC,eAAewH,EAAsBpF,UAAW,aAAc,CACjEiB,IAAK,WACD,OAAOnB,KAAK0H,IAAM1H,KAAK0H,IAAIwB,WAAa,EAC5C,EACAhI,YAAY,EACZwH,cAAc,IAElB7K,OAAOC,eAAewH,EAAsBpF,UAAW,WAAY,CAC/DiB,IAAK,WACD,OAAOnB,KAAK0H,IAAM1H,KAAK0H,IAAI9D,SAAW,EAC1C,EACA1C,YAAY,EACZwH,cAAc,IAElB7K,OAAOC,eAAewH,EAAsBpF,UAAW,aAAc,CACjEiB,IAAK,WACD,OAAInB,KAAK0H,IACE1H,KAAK0H,IAAIyB,WAEbnJ,KAAKoH,SAASrB,YAAcqD,UAAUC,OAASD,UAAUE,UACpE,EACApI,YAAY,EACZwH,cAAc,IAElB7K,OAAOC,eAAewH,EAAsBpF,UAAW,MAAO,CAC1DiB,IAAK,WACD,OAAOnB,KAAK0H,IAAM1H,KAAK0H,IAAIzB,IAAM,EACrC,EACA/E,YAAY,EACZwH,cAAc,IAElBpD,EAAsBpF,UAAUyG,MAAQ,SAAU4C,EAAMC,QACvC,IAATD,IAAmBA,EAAO,KAC9BvJ,KAAK8G,cAAe,EACpB9G,KAAK4G,kBAAmB,EACxB5G,KAAKqI,iBACArI,KAAK0H,IAIN1H,KAAK0H,IAAIyB,aAAeC,UAAUC,OAItCrJ,KAAK0H,IAAIf,MAAM4C,EAAMC,GAHjBxJ,KAAKmH,OAAO,yBAJZnH,KAAKmH,OAAO,iCAQpB,EACA7B,EAAsBpF,UAAUuJ,UAAY,SAAUF,EAAMC,GACxDxJ,KAAK4G,kBAAmB,EACxB5G,KAAK8G,cAAe,EACpB9G,KAAKgH,aAAe,EACfhH,KAAK0H,KAAO1H,KAAK0H,IAAIyB,aAAeC,UAAUC,QAI/CrJ,KAAKkI,YAAYqB,EAAMC,GACvBxJ,KAAKmI,YAJLnI,KAAKmI,UAMb,EACA7C,EAAsBpF,UAAU2H,KAAO,SAAU6B,GAC7C,GAAI1J,KAAK0H,KAAO1H,KAAK0H,IAAIyB,aAAeC,UAAUO,KAC9C3J,KAAKmH,OAAO,OAAQuC,GACpB1J,KAAK0H,IAAIG,KAAK6B,OAEb,CACD,IAAIhL,EAAKsB,KAAKoH,SAAStB,oBAAqBA,OAA6B,IAAPpH,EAAgB6G,EAAQO,oBAAsBpH,EAC5GsB,KAAK+G,cAAcrG,OAASoF,IAC5B9F,KAAKmH,OAAO,UAAWuC,GACvB1J,KAAK+G,cAAczG,KAAKoJ,GAEhC,CACJ,EACApE,EAAsBpF,UAAUC,iBAAmB,SAAUC,EAAM0H,GAC3D9H,KAAKwG,WAAWpG,IAChBJ,KAAKwG,WAAWpG,GAAME,KAAKwH,EAEnC,EACAxC,EAAsBpF,UAAUU,cAAgB,SAAUC,GACtD,IAAI+I,EAAKlL,EACLuB,EAAYD,KAAKwG,WAAW3F,EAAMT,MACtC,GAAIH,EACA,IACI,IAAK,IAAI4J,EAAcvF,EAASrE,GAAY6J,EAAgBD,EAAYlF,QAASmF,EAAclF,KAAMkF,EAAgBD,EAAYlF,OAAQ,CACrI,IAAImD,EAAWgC,EAAc/L,MAC7BiC,KAAK+H,mBAAmBlH,EAAOiH,EACnC,CACJ,CACA,MAAOiC,GAASH,EAAM,CAAE5E,MAAO+E,EAAS,CACxC,QACI,IACQD,IAAkBA,EAAclF,OAASlG,EAAKmL,EAAYG,SAAStL,EAAGqC,KAAK8I,EACnF,CACA,QAAU,GAAID,EAAK,MAAMA,EAAI5E,KAAO,CACxC,CAEJ,OAAO,CACX,EACAM,EAAsBpF,UAAUK,oBAAsB,SAAUH,EAAM0H,GAC9D9H,KAAKwG,WAAWpG,KAChBJ,KAAKwG,WAAWpG,GAAQJ,KAAKwG,WAAWpG,GAAMV,QAAO,SAAUe,GAAK,OAAOA,IAAMqH,CAAU,IAEnG,EACAxC,EAAsBpF,UAAU+J,cAAgB,SAAUpH,GACtD7C,KAAKwI,YAAc3F,CACvB,EACAyC,EAAsBpF,UAAUiH,OAAS,WAErC,IADA,IAAI+C,EAAO,GACFC,EAAK,EAAGA,EAAKvI,UAAUlB,OAAQyJ,IACpCD,EAAKC,GAAMvI,UAAUuI,GAErBnK,KAAKoH,SAASpB,OACdoE,QAAQC,IAAIhN,MAAM+M,QAASnF,EAAc,CAAC,QAASJ,EAAOqF,IAAO,GAEzE,EACA5E,EAAsBpF,UAAUoK,cAAgB,WAC5C,IAAI5L,EAAKsB,KAAKoH,SAAUzI,EAAKD,EAAGiH,4BAA6BA,OAAqC,IAAPhH,EAAgB4G,EAAQI,4BAA8BhH,EAAIE,EAAKH,EAAG8G,qBAAsBA,OAA8B,IAAP3G,EAAgB0G,EAAQC,qBAAuB3G,EAAIE,EAAKL,EAAGoE,qBAAsBA,OAA8B,IAAP/D,EAAgBwG,EAAQzC,qBAAuB/D,EAC7VwL,EAAQ,EAUZ,OATIvK,KAAKgH,YAAc,IACnBuD,EACI/E,EACIlH,KAAKkM,IAAI7E,EAA6B3F,KAAKgH,YAAc,IACrDlE,IACRyH,EAAQzH,GAGhB9C,KAAKmH,OAAO,aAAcoD,GACnBA,CACX,EACAjF,EAAsBpF,UAAUuK,MAAQ,WACpC,IAAItE,EAAQnG,KACZ,OAAO,IAAI0K,SAAQ,SAAUC,GACzBnD,WAAWmD,EAASxE,EAAMmE,gBAC9B,GACJ,EACAhF,EAAsBpF,UAAU0K,YAAc,SAAU7H,GACpD,GAA2B,iBAAhBA,EACP,OAAO2H,QAAQC,QAAQ5H,GAE3B,GAA2B,mBAAhBA,EAA4B,CACnC,IAAIkD,EAAMlD,IACV,GAAmB,iBAARkD,EACP,OAAOyE,QAAQC,QAAQ1E,GAE3B,QAAwB,IAAbA,EAAI4E,KACX,OAAO5E,CAEf,CACA,MAAM6E,MAAM,cAChB,EACAxF,EAAsBpF,UAAUiI,SAAW,WACvC,IAAIhC,EAAQnG,KACZ,IAAIA,KAAK6G,cAAiB7G,KAAK4G,iBAA/B,CAGA5G,KAAK6G,cAAe,EACpB,IAAInI,EAAKsB,KAAKoH,SAASxB,kBAAmBA,OAA2B,IAAPlH,EAAgB6G,EAAQK,kBAAoBlH,EACtGsB,KAAKgH,aAAehH,KAAKwI,YACzBxI,KAAKmH,OAAO,sBAAuBnH,KAAKgH,YAAa,KAAMhH,KAAKwI,cAGpExI,KAAKgH,cACLhH,KAAKmH,OAAO,UAAWnH,KAAKgH,aAC5BhH,KAAK+K,mBACL/K,KAAKyK,QACAI,MAAK,WAAc,OAAO1E,EAAMyE,YAAYzE,EAAMmC,KAAO,IACzDuC,MAAK,SAAU5E,GACZE,EAAMW,aACNX,EAAMU,cAAe,GAGzBV,EAAMgB,OAAO,UAAW,CAAElB,IAAKA,EAAKC,UAAWC,EAAMoC,aACrDpC,EAAMuB,IAAMvB,EAAMoC,WACZ,IAAIa,UAAUnD,EAAKE,EAAMoC,YACzB,IAAIa,UAAUnD,GACpBE,EAAMuB,IAAIC,WAAaxB,EAAMc,YAC7Bd,EAAMU,cAAe,EACrBV,EAAM6E,gBACN7E,EAAMmB,gBAAkBzD,OAAO2D,YAAW,WAAc,OAAOrB,EAAM8E,gBAAkB,GAAGrF,GAC9F,IACKsF,OAAM,SAAUC,GACjBhF,EAAMU,cAAe,EACrBV,EAAM8B,aAAa,IAAImD,WAAWD,EAAI1E,SAC1C,IA7BA,CA8BJ,EACAnB,EAAsBpF,UAAU+K,eAAiB,WAC7CjL,KAAKmH,OAAO,iBACZnH,KAAKiI,aAAa,IAAImD,WAAW,WACrC,EACA9F,EAAsBpF,UAAUgI,YAAc,SAAUqB,EAAMC,GAG1D,QAFa,IAATD,IAAmBA,EAAO,KAC9BvJ,KAAKqI,iBACArI,KAAK0H,IAAV,CAGA1H,KAAK+K,mBACL,IACI/K,KAAK0H,IAAIf,MAAM4C,EAAMC,GACrBxJ,KAAKoI,aAAa,IAAIiD,WAAW,QAAS,CAAE9B,KAAMA,EAAMC,OAAQA,IACpE,CACA,MAAOxE,GACP,CAPA,CAQJ,EACAM,EAAsBpF,UAAUuH,YAAc,WAC1CzH,KAAKmH,OAAO,eACZnH,KAAKgH,YAAc,CACvB,EACA1B,EAAsBpF,UAAU6H,mBAAqB,SAAUlH,EAAOiH,GAC9D,gBAAiBA,EACjBA,EAASwD,YAAYzK,GAGrBiH,EAASjH,EAEjB,EACAyE,EAAsBpF,UAAU6K,iBAAmB,WAC1C/K,KAAK0H,MAGV1H,KAAKmH,OAAO,mBACZnH,KAAK0H,IAAInH,oBAAoB,OAAQP,KAAKkH,aAC1ClH,KAAK0H,IAAInH,oBAAoB,QAASP,KAAKoI,cAC3CpI,KAAK0H,IAAInH,oBAAoB,UAAWP,KAAKgI,gBAC7ChI,KAAK0H,IAAInH,oBAAoB,QAASP,KAAKiI,cAC/C,EACA3C,EAAsBpF,UAAU8K,cAAgB,WACvChL,KAAK0H,MAGV1H,KAAKmH,OAAO,gBACZnH,KAAK0H,IAAIvH,iBAAiB,OAAQH,KAAKkH,aACvClH,KAAK0H,IAAIvH,iBAAiB,QAASH,KAAKoI,cACxCpI,KAAK0H,IAAIvH,iBAAiB,UAAWH,KAAKgI,gBAC1ChI,KAAK0H,IAAIvH,iBAAiB,QAASH,KAAKiI,cAC5C,EACA3C,EAAsBpF,UAAUmI,eAAiB,WAC7ChB,aAAarH,KAAKsH,iBAClBD,aAAarH,KAAKuH,eACtB,EACOjC,CACX,CAtW4B,GAuW5BvJ,EAAQuJ,sBAAwBA,uBC9ZhC,IACQiG,EADJC,EAAaxL,MAAQA,KAAKwL,YACtBD,EAAgB,SAAUE,EAAGC,GAI7B,OAHAH,EAAgB1N,OAAO8N,gBAClB,CAAEC,UAAW,cAAgBvG,OAAS,SAAUoG,EAAGC,GAAKD,EAAEG,UAAYF,CAAG,GAC1E,SAAUD,EAAGC,GAAK,IAAK,IAAI7J,KAAK6J,EAAO7N,OAAOqC,UAAU4B,eAAef,KAAK2K,EAAG7J,KAAI4J,EAAE5J,GAAK6J,EAAE7J,GAAI,EAC7F0J,EAAcE,EAAGC,EAC5B,EACO,SAAUD,EAAGC,GAChB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIzI,UAAU,uBAAyB4I,OAAOH,GAAK,iCAE7D,SAASI,IAAO9L,KAAK+L,YAAcN,CAAG,CADtCF,EAAcE,EAAGC,GAEjBD,EAAEvL,UAAkB,OAANwL,EAAa7N,OAAOmO,OAAON,IAAMI,EAAG5L,UAAYwL,EAAExL,UAAW,IAAI4L,EACnF,GAEJjO,OAAOC,eAAe/B,EAAS,aAAc,CAAEgC,OAAO,IACtDhC,EAAQmI,gBAAkBnI,EAAQkQ,yBAA2BlQ,EAAQmQ,yBAAsB,EAC3F,IAAIC,EAAW,EAAQ,KACnBC,EAA0B,EAAQ,KAClCC,EAAwB,EAAQ,KAChCC,EAAmB,EAAQ,KAC3BrL,EAAyB,EAAQ,KACrClF,EAAQmQ,oBAAsB,KAC9BnQ,EAAQkQ,yBAAyD,EAA9BlQ,EAAQmQ,oBAC3C,IAEIhI,EAAmB,SAAUqI,GAE7B,SAASrI,EAAgB+B,EAAKC,EAAWlD,GACrC,IAAImD,EAAQoG,EAAOxL,KAAKf,OAASA,KA4EjC,OA3EAmG,EAAMqG,iBAAmB,KACzBrG,EAAMsG,sBAAwB,KAC9BtG,EAAMuG,gBAAkB,WACfvG,EAAMwG,WACPxG,EAAMkE,IAAI8B,EAASrM,UAAU8M,KAAM,yCAEvCzG,EAAMwG,WAAY,CACtB,EACAxG,EAAM0G,iBAAmB,WACrB1G,EAAMwG,WAAY,CACtB,EACAxG,EAAMkE,IAAM,SAAUyC,EAAOrG,EAASyD,GAC9B/D,EAAMwG,WAAaxG,EAAM4G,QACzB5G,EAAM4G,OAAOD,GAAOrG,EAASyD,EAErC,EACA/D,EAAM6G,cAAgB,WAClB7G,EAAMkE,IAAI8B,EAASrM,UAAU8M,KAAM,yCACnCzG,EAAM0B,KAAKoF,KAAKC,UAAU,CAAEC,OAvBX,cAwBrB,EACAhH,EAAMiH,wBAA0B,WACxBjH,EAAMkH,iBAAmBf,EAAiBjI,eAAeiJ,QACzDnH,EAAMkH,eAAiBf,EAAiBjI,eAAekJ,OACvDpH,EAAMqH,0BAEVrH,EAAMsH,0BACV,EACAtH,EAAMsH,yBAA2B,WACO,OAAhCtH,EAAMsG,uBACNpF,aAAalB,EAAMsG,uBAEvBtG,EAAMsG,sBAAwBjF,YAAW,WACrCrB,EAAMkH,eAAiBf,EAAiBjI,eAAeiJ,MACvDnH,EAAMqH,wBACV,GAAGzR,EAAQkQ,yBACf,EACA9F,EAAMqH,uBAAyB,WAC3BrH,EAAMkE,IAAI8B,EAASrM,UAAU8M,KAAM,iDAAkD,CACjF,CAAEc,eAAgBvH,EAAMkH,kBAEC,OAAzBlH,EAAMkH,gBACNlH,EAAMvF,cAAc,IAAI+M,YAAYxH,EAAMkH,gBAElD,EACAlH,EAAMyH,kBAAoB,WAAc,OAAgC,OAAzBzH,EAAMkH,cAAyB,EAC9ElH,EAAMkH,eAAiB,KACvBlH,EAAMwG,WAAY,EAClBxG,EAAM1D,OAAS,IAAI2J,EAAwB9G,sBAAsBW,EAAKC,EAAWlD,GACjFmD,EAAM1D,OAAO8D,OAAS,WAClBJ,EAAMvF,cAAc,IAAI+M,YAAY1M,EAAuBG,qBAAqBuI,MACpF,GACI3G,aAAyC,EAASA,EAAQ+J,UAC1D5G,EAAM4G,OAAS/J,EAAQ+J,QAE3B5G,EAAM1D,OAAO2D,QAAU,SAAUyH,GACzB1H,EAAM1D,OAAOqL,cAAgB9K,aAAyC,EAASA,EAAQH,YACvFsD,EAAMkH,eAAiBf,EAAiBjI,eAAe0J,KAGvD5H,EAAMkH,eAAiBf,EAAiBjI,eAAeiJ,MAE3DnH,EAAMqH,yBACNrH,EAAMvF,cAAc,IAAI+M,YAAY1M,EAAuBG,qBAAqB4M,MAAO,CAAEC,OAAQJ,IACrG,EACA1H,EAAM1D,OAAO6D,UAAY,SAAUzF,GAC/BsF,EAAMiH,0BAvEQ,SAwEVH,KAAKtQ,MAAMkE,EAAM6I,QACjBvD,EAAMkE,IAAI8B,EAASrM,UAAU8M,KAAM,oCAAqC,CAAC/L,IACzEsF,EAAMvF,cAAc,IAAI+M,YAAY1M,EAAuBG,qBAAqB8M,QAAS,CAAED,OAAQpN,KAE3G,EACAsF,EAAM1D,OAAO4D,QAAU,SAAUxF,GAC7BsF,EAAMkE,IAAI8B,EAASrM,UAAUqO,MAAO,kCAAmC,CAACtN,IACxEsF,EAAMvF,cAAc,IAAI+M,YAAY1M,EAAuBG,qBAAqB+M,MAAO,CAAEF,OAAQpN,IACrG,EACOsF,CACX,CA4BA,OA3GAqF,EAAUtH,EAAiBqI,GAgF3BrI,EAAgBhE,UAAU2H,KAAO,SAAU6B,GACvC1J,KAAKyC,OAAOoF,KAAK6B,EACrB,EACAxF,EAAgBhE,UAAUkO,eAAiB,WACvC,IAAIjI,EAAQnG,KACZA,KAAKqK,IAAI8B,EAASrM,UAAU8M,KAAM,yCAA0C,CACxE,CAAEyB,SAAUtS,EAAQmQ,uBAExB,IAAIoC,EAAoB,WACpBnI,EAAMkE,IAAI8B,EAASrM,UAAU8M,KAAM,6CACnCzG,EAAM6G,gBACN7G,EAAMqG,iBAAmBhF,WAAW8G,EAAmBvS,EAAQmQ,oBACnE,EACAlM,KAAKyN,2BACLa,IACAtO,KAAKqN,eAAiBf,EAAiBjI,eAAekJ,MAC1D,EACArJ,EAAgBhE,UAAUqO,cAAgB,WACtCvO,KAAKqK,IAAI8B,EAASrM,UAAU8M,KAAM,yCACJ,OAA1B5M,KAAKwM,kBACLnF,aAAarH,KAAKwM,kBAEa,OAA/BxM,KAAKyM,uBACLpF,aAAarH,KAAKyM,uBAEtBzM,KAAKqN,eAAiB,IAC1B,EACOnJ,CACX,CA7GsB,CA6GpBmI,EAAsBtM,qBACxBhE,EAAQmI,gBAAkBA,eCrI1B,IAAW9C,EAHXvD,OAAOC,eAAe/B,EAAS,aAAc,CAAEgC,OAAO,IACtDhC,EAAQqF,0BAAuB,GAEpBA,EAMerF,EAAQqF,uBAAyBrF,EAAQqF,qBAAuB,CAAC,IAL3D,MAAI,QAChCA,EAA4B,MAAI,QAChCA,EAA8B,QAAI,UAClCA,EAA2B,KAAI,OAC/BA,EAA2C,qBAAI,qCCRnDvD,OAAOC,eAAe/B,EAAS,aAAc,CAAEgC,OAAO,IACtDhC,EAAQqI,yBAAsB,EAC9B,IAAInD,EAAyB,EAAQ,KAqBrClF,EAAQqI,oBApBR,SAA6BxB,EAAyBH,EAAQS,GAC1D,GAAKN,EAAL,CAIA,IAAI4L,EAAgB,SAAU3N,GAC1B,IAAInC,EACJ,IACI,IAAI+P,EAAUxB,KAAKtQ,MAAMkE,EAAMoN,OAAOvE,MACkD,gBAAnF+E,aAAyC,EAASA,EAAQC,uBAC3DjM,EAAO2L,iBACP3L,EAAOlC,oBAAoBU,EAAuBG,qBAAqB8M,QAASM,GAExF,CACA,MAAOxJ,GACuG,QAAzGtG,EAAKwE,aAA6D,EAASA,EAAkB6J,cAA2B,IAAPrO,GAAyBA,EAAGiQ,KAAK,qEACvJ,CACJ,EACAlM,EAAOtC,iBAAiBc,EAAuBG,qBAAqB8M,QAASM,EAd7E,MAFI/L,EAAO2L,gBAiBf,eCtBAvQ,OAAOC,eAAe/B,EAAS,aAAc,CAAEgC,OAAO,IACtDhC,EAAQ4H,iCAA8B,EAatC5H,EAAQ4H,4BAZR,SAAqCiL,GACjC,OAAO/Q,OAAOgR,QAAQD,GACjBlP,QAAO,SAAUhB,GAElB,OADUA,EAAG,GACNX,MADkBW,EAAG,EAEhC,IACKkK,QAAO,SAAUkG,EAAQpQ,GAC1B,IAAIiB,EAAMjB,EAAG,GAAIX,EAAQW,EAAG,GAE5B,OADAoQ,EAAOnP,GAAO5B,EACP+Q,CACX,GAAG,CAAC,EACR,eCbAjR,OAAOC,eAAe/B,EAAS,aAAc,CAAEgC,OAAO,IACtDhC,EAAQ2H,mCAAgC,EASxC3H,EAAQ2H,8BARR,SAAuClE,GACnC,OAAO3B,OAAO4B,KAAKD,GACdE,QAAO,SAAUC,GAAO,OAAgC,OAAzBH,EAAgBG,EAAe,IAC9D1C,KAAI,SAAU0C,GACf,MAAO,CAACA,EAAKH,EAAgBG,IAAM1C,IAAI2C,oBAAoBC,KAAK,IACpE,IACKA,KAAK,IACd,eCPA,IAAWkP,KAGwBhT,EAAQ,IAAkCA,EAAQ,EAAgC,CAAC,IAFjE,kBAAI,kBACrDgT,EAAwC,SAAI,wBCkChD,IAAWC,EApCAC,KAkCYlT,EAAQ,KAAsBA,EAAQ,GAAoB,CAAC,IAjCrC,sBAAI,sBAC7CkT,EAAuC,oBAAI,oBAC3CA,EAAsC,mBAAI,mBAC1CA,EAAoC,iBAAI,kBACxCA,EAAkC,eAAI,gBACtCA,EAAgC,aAAI,cACpCA,EAAiC,cAAI,eACrCA,EAAwC,qBAAI,qBAC5CA,EAAmC,gBAAI,gBACvCA,EAA+C,4BAAI,0BACnDA,EAAqD,kCAAI,iCACzDA,EAAgC,aAAI,wBACpCA,EAAmC,gBAAI,iBACvCA,EAAqC,kBAAI,kBACzCA,EAA+B,YAAI,aACnCA,EAAmC,gBAAI,iBACvCA,EAAsC,mBAAI,oBAC1CA,EAAsC,mBAAI,oBAC1CA,EAAsC,mBAAI,oBAC1CA,EAAiC,cAAI,eACrCA,EAAkC,eAAI,gBACtCA,EAAwC,qBAAI,qBAC5CA,EAAiC,cAAI,eACrCA,EAAiC,cAAI,eACrCA,EAAwC,qBAAI,qBAC5CA,EAA4C,yBAAI,8BAChDA,EAAmD,gCAAI,iCACvDA,EAAmC,gBAAI,gBACvCA,EAAoC,iBAAI,iBACxCA,EAAgD,6BAAI,6BACpDA,EAAoC,iBAAI,iBACxCA,EAAuC,oBAAI,oBAC3CA,EAAwC,qBAAI,sBAGrCD,EAgBejT,EAAQ,KAAyBA,EAAQ,GAAuB,CAAC,IAf9C,mBAAI,oBAC7CiT,EAA2C,qBAAI,qBAC/CA,EAA2C,qBAAI,qBAC/CA,EAA0C,oBAAI,oBAC9CA,EAAuC,iBAAI,kBAC3CA,EAAsC,gBAAI,iBAC1CA,EAA0C,oBAAI,qBAC9CA,EAA6C,uBAAI,uBACjDA,EAA4C,sBAAI,qBAChDA,EAAgD,0BAAI,+BACpDA,EAA6C,uBAAI,iCACjDA,EAAwC,kBAAI,kBAC5CA,EAAsC,gBAAI,iBAC1CA,EAAoD,8BAAI,8BACxDA,EAAsC,gBAAI,8BCnD9C,IAAWE,KAGcnT,EAAQ,IAAwBA,EAAQ,EAAsB,CAAC,IAFxD,OAAI,SAChCmT,EAA6B,QAAI,uBCKrC,IAPWC,KAKKpT,EAAQ,KAAeA,EAAQ,GAAa,CAAC,IAJrC,QAAI,UACxBoT,EAAmB,OAAI,SACvBA,EAAkB,MAAI,QACtBA,EAAmB,OAAI,UAKNpT,EAAQ,KAAoBA,EAAQ,GAAkB,CAAC,IAD/C,QAAI,yBCTjC,IAAIqT,EAAe,EAAQ,KAC3BrT,EAAQ,EAAgBqT,EAAaC,wBCDrCtT,EAAQ,GAAoB,oCCC5B,SAAWuT,GACPA,EAA0B,QAAI,UAC9BA,EAA2B,SAAI,UAClC,CAHD,CAGsBvT,EAAQ,IAAqBA,EAAQ,EAAmB,CAAC,kBCH/E,SAAWwT,GACPA,EAAkB,KAAI,OACtBA,EAAkB,KAAI,OACtBA,EAAkB,KAAI,OACtBA,EAAoB,OAAI,SACxBA,EAAsB,SAAI,WAC1BA,EAA2B,cAAI,gBAC/BA,EAAuB,UAAI,YAC3BA,EAAyB,YAAI,cAC7BA,EAA2B,cAAI,gBAC/BA,EAAyB,YAAI,aAChC,CAXD,CAWiBxT,EAAQ,IAAgBA,EAAQ,EAAc,CAAC,iBCXhE,IAAWsT,EAFXxR,OAAOC,eAAe/B,EAAS,aAAc,CAAEgC,OAAO,KAE3CsR,EAQKtT,EAAQsT,aAAetT,EAAQsT,WAAa,CAAC,IAPzC,IAAI,MACpBA,EAAiB,KAAI,OACrBA,EAAoB,QAAI,UACxBA,EAAsB,UAAI,YAC1BA,EAAqB,SAAI,WACzBA,EAAmB,OAAI,SACvBA,EAAoB,QAAI,sBCP5B,SAAWG,GACPA,EAAwC,mBAAI,oBAE5CA,EAAkC,aAAI,cAEtCA,EAAiD,4BAAI,2BAErDA,EAAyC,oBAAI,oBAE7CA,EAA8D,yCAAI,sCAClEA,EAAqC,gBAAI,cACzCA,EAA4C,uBAAI,2BAChDA,EAA4C,uBAAI,oBAChDA,EAAiE,4CAAI,sCACrEA,EAAoD,+BAAI,8BACxDA,EAAiD,4BAAI,4BACrDA,EAA8C,yBAAI,yBAClDA,EAAkC,aAAI,cACtCA,EAAqC,gBAAI,iBACzCA,EAAqC,gBAAI,iBACzCA,EAAqC,gBAAI,iBACzCA,EAA6C,wBAAI,uBACjDA,EAAqC,gBAAI,iBACzCA,EAAmD,8BAAI,4BACvDA,EAA+C,0BAAI,yBACnDA,EAAqD,gCAAI,+BACzDA,EAA0C,qBAAI,qBAC9CA,EAA0C,qBAAI,qBAC9CA,EAA0C,qBAAI,qBAC9CA,EAA0C,qBAAI,qBAC9CA,EAA8C,yBAAI,uBAClDA,EAA0C,qBAAI,oBAC9CA,EAA0C,qBAAI,qBAC9CA,EAAkC,aAAI,cACtCA,EAAqC,gBAAI,iBACzCA,EAAuC,kBAAI,kBAC3CA,EAA2C,sBAAI,sBAC/CA,EAA2C,sBAAI,sBAC/CA,EAA2C,sBAAI,sBAC/CA,EAAwD,mCAAI,iCAC5DA,EAA0D,qCAAI,qCAC9DA,EAAoD,+BAAI,6BACxDA,EAAyC,oBAAI,oBAC7CA,EAAwD,mCAAI,iCAC5DA,EAA2C,sBAAI,sBAC/CA,EAAyC,oBAAI,oBAC7CA,EAA2C,sBAAI,sBAC/CA,EAAyC,oBAAI,oBAC7CA,EAAoC,eAAI,sBACxCA,EAAwD,mCAAI,yCAC5DA,EAAgD,2BAAI,2BACpDA,EAA6C,wBAAI,wBACjDA,EAAiC,YAAI,WACxC,CArDD,CAqDyBzT,EAAQ,IAAwBA,EAAQ,EAAsB,CAAC,aCxDxFC,EAAOD,QAAUQ,ICCbkT,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBxL,IAAjByL,EACH,OAAOA,EAAa7T,QAGrB,IAAIC,EAASyT,EAAyBE,GAAY,CAGjD5T,QAAS,CAAC,GAOX,OAHA8T,EAAoBF,GAAU5O,KAAK/E,EAAOD,QAASC,EAAQA,EAAOD,QAAS2T,GAGpE1T,EAAOD,OACf,CCrBA2T,EAAoB/N,EAAK3F,IACxB,IAAI8T,EAAS9T,GAAUA,EAAO+T,WAC7B,IAAO/T,EAAiB,QACxB,IAAM,EAEP,OADA0T,EAAoBjE,EAAEqE,EAAQ,CAAE1T,EAAG0T,IAC5BA,CAAM,ECLdJ,EAAoBjE,EAAI,CAAC1P,EAASiU,KACjC,IAAI,IAAIrQ,KAAOqQ,EACXN,EAAoBnL,EAAEyL,EAAYrQ,KAAS+P,EAAoBnL,EAAExI,EAAS4D,IAC5E9B,OAAOC,eAAe/B,EAAS4D,EAAK,CAAEuB,YAAY,EAAMC,IAAK6O,EAAWrQ,IAE1E,ECND+P,EAAoBnL,EAAI,CAAC0L,EAAKC,IAAUrS,OAAOqC,UAAU4B,eAAef,KAAKkP,EAAKC,GCClFR,EAAoB5K,EAAK/I,IACH,oBAAXyI,QAA0BA,OAAO2L,aAC1CtS,OAAOC,eAAe/B,EAASyI,OAAO2L,YAAa,CAAEpS,MAAO,WAE7DF,OAAOC,eAAe/B,EAAS,aAAc,CAAEgC,OAAO,GAAO,i6DCgB9D,QAJA,SAAgBA,GACd,OAAiB,OAAVA,CACT,ECeaqS,EAAsD,CAAC,EC7B7D,SAASC,EAAeC,GAC7BF,EAAmBG,aAAeD,EAAYE,MAC9CJ,EAAmBK,wBAA0BH,EAAYI,SAC3D,CAKO,SAASC,YACd,MAAMH,EAAuC,QAA/B,EAAAJ,EAAmBG,oBAAY,QAAI,KAC3CG,EAAsD,QAA1C,EAAAN,EAAmBK,+BAAuB,QAAI,KAEhE,OAAI,EAAOD,IAAU,EAAOE,GACnB,KAGF,CACLF,QACAE,UAAWjS,OAAOiS,GAEtB,CCzBO,MAAM,UAAqB5F,MAIhC,WAAAiB,CAAY/G,EAAgB0E,GAK1B,GAJAkH,QAJF,KAAAC,KAAe,eAMb7Q,KAAK0J,KAAOA,EAER1E,aAAiB,EAKnB,OAJAhF,KAAKyG,QAAUzB,EAAMyB,QACrBzG,KAAKQ,MAAQwE,EAAMxE,WACnBR,KAAK8Q,MAAQ9L,EAAM8L,OAKrB9Q,KAAKyG,QAAU,mBAAmBzG,KAAK+Q,iBAAiB/L,KAEpDA,aAAiB8F,QACnB9K,KAAKQ,MAAQwE,EAAMxE,MAEvB,CAEQ,gBAAAuQ,CAAiB/L,GACvB,OAAIA,aAAiB8F,MACZ9F,EAAMyB,QAEM,iBAAVzB,EACFA,EAGFiI,KAAKC,UAAUlI,EACxB,EC9BK,MAAMgM,UAA2B,EAGtC,WAAAjF,CACEtF,EACAiD,GAEAkH,MAAMnK,EAASiD,QAEFvF,IAATuF,IACF1J,KAAKyG,QAAU,GAAGA,iBAAuBiD,EAAKuH,gBAElD,ECfK,MAAMC,EAAsD,OAA3B,gBAA+B,ICAhE,SAASC,IACd,OAAOC,OAAOC,WAAaD,OAAOC,aAG7B,WACL,MAAMC,EAAe,IAAIC,WAAW,IAGpC,OAAOH,OAAOI,gBAAgBF,GAAc1I,QAAO,CAAC6I,EAAM1T,EAAO2T,KAC3D,CAAC,EAAG,EAAG,EAAG,IAAIC,SAASD,KACzBD,GAAQ,KAIRA,GACW,IAAVC,EAEY,GAAR3T,EAAgB,GACP,IAAV2T,EAES,GAAR3T,EAAgB,IACjBA,GAED6T,SAAS,IACTC,SAAS,EAAG,OAEhB,GACL,CA1BmDC,EACnD,CCKO,SAASC,EAAqBC,GACnC,MAAO,CACLC,QAAS,CACPC,GAAIF,GAGV,CCZA,IAAIG,EAActU,OAAOqC,UAgBzB,QAPA,SAAqBnC,GACnB,IAAIqU,EAAOrU,GAASA,EAAMgO,YAG1B,OAAOhO,KAFqB,mBAARqU,GAAsBA,EAAKlS,WAAciS,EAG/D,ECVA,GCGiBE,EDLQxU,OAAO4B,KCKT6S,EDLezU,OCM7B,SAAS0U,GACd,OAAOF,EAAKC,EAAUC,GACxB,GAHF,IAAiBF,EAAMC,ECDnB,EAHczU,OAAOqC,UAGQ4B,eAsBjC,MC1BA,EAFkC,iBAAV0Q,QAAsBA,QAAUA,OAAO3U,SAAWA,QAAU2U,OCEpF,IAAIC,EAA0B,iBAARnW,MAAoBA,MAAQA,KAAKuB,SAAWA,QAAUvB,KAK5E,QAFW,GAAcmW,GAAYC,SAAS,cAATA,GCDrC,EAFa,EAAKlO,OCAlB,IAAI,EAAc3G,OAAOqC,UAGrB,EAAiB,EAAY4B,eAO7B6Q,EAAuB,EAAYf,SAGnCgB,EAAiB,EAAS,EAAOzC,iBAAchM,ECfnD,IAOI,EAPctG,OAAOqC,UAOc0R,SCHvC,IAII,EAAiB,EAAS,EAAOzB,iBAAchM,EAkBnD,QATA,SAAoBpG,GAClB,OAAa,MAATA,OACeoG,IAAVpG,EAdQ,qBADL,gBAiBJ,GAAkB,KAAkBF,OAAOE,GFGrD,SAAmBA,GACjB,IAAI8U,EAAQ,EAAe9R,KAAKhD,EAAO6U,GACnCE,EAAM/U,EAAM6U,GAEhB,IACE7U,EAAM6U,QAAkBzO,EACxB,IAAI4O,GAAW,CACjB,CAAE,MAAO/Q,GAAI,CAEb,IAAI8M,EAAS6D,EAAqB5R,KAAKhD,GAQvC,OAPIgV,IACEF,EACF9U,EAAM6U,GAAkBE,SAEjB/U,EAAM6U,IAGV9D,CACT,CEpBM,CAAU/Q,GDNhB,SAAwBA,GACtB,OAAO,EAAqBgD,KAAKhD,EACnC,CCKM,CAAeA,EACrB,ECKA,EALA,SAAkBA,GAChB,IAAIqC,SAAcrC,EAClB,OAAgB,MAATA,IAA0B,UAARqC,GAA4B,YAARA,EAC/C,ECQA,EAVA,SAAoBrC,GAClB,IAAK,EAASA,GACZ,OAAO,EAIT,IAAI+U,EAAM,EAAW/U,GACrB,MA5BY,qBA4BL+U,GA3BI,8BA2BcA,GA7BZ,0BA6B6BA,GA1B7B,kBA0BgDA,CAC/D,EC7BA,EAFiB,EAAK,sBCAtB,IACME,EADFC,GACED,EAAM,SAASjW,KAAK,GAAc,EAAW0C,MAAQ,EAAWA,KAAKyT,UAAY,KACvE,iBAAmBF,EAAO,GCJ1C,IAGIG,EAHYT,SAASxS,UAGI0R,SAqB7B,QAZA,SAAkBS,GAChB,GAAY,MAARA,EAAc,CAChB,IACE,OAAOc,EAAapS,KAAKsR,EAC3B,CAAE,MAAOrQ,GAAI,CACb,IACE,OAAQqQ,EAAO,EACjB,CAAE,MAAOrQ,GAAI,CACf,CACA,MAAO,EACT,ECdA,IAGIoR,EAAe,8BAGf,EAAYV,SAASxS,UACrB,EAAcrC,OAAOqC,UAGrB,EAAe,EAAU0R,SAGzB,EAAiB,EAAY9P,eAG7BuR,EAAaC,OAAO,IACtB,EAAavS,KAAK,GAAgBwS,QAjBjB,sBAiBuC,QACvDA,QAAQ,yDAA0D,SAAW,KAmBhF,QARA,SAAsBxV,GACpB,SAAK,EAASA,IFxBhB,SAAkBsU,GAChB,QAASY,GAAeA,KAAcZ,CACxC,CEsB0B,CAAStU,MAGnB,EAAWA,GAASsV,EAAaD,GAChCI,KAAK,EAASzV,GAC/B,EC5BA,EALA,SAAmB0V,EAAQ9T,GACzB,IAAI5B,ECJN,SAAkB0V,EAAQ9T,GACxB,OAAiB,MAAV8T,OAAiBtP,EAAYsP,EAAO9T,EAC7C,CDEc,CAAS8T,EAAQ9T,GAC7B,OAAO,EAAa5B,GAASA,OAAQoG,CACvC,EERA,EAFe,EAAU,EAAM,YCE/B,EAFU,EAAU,EAAM,OCE1B,EAFc,EAAU,EAAM,WCE9B,EAFU,EAAU,EAAM,OCE1B,GAFc,EAAU,EAAM,WCK9B,IAAIuP,GAAS,eAETC,GAAa,mBACbC,GAAS,eACTC,GAAa,mBAEbC,GAAc,oBAGdC,GAAqB,EAAS,GAC9BC,GAAgB,EAAS,GACzBC,GAAoB,EAAS,GAC7BC,GAAgB,EAAS,GACzBC,GAAoB,EAAS,IAS7BC,GAAS,GAGR,GAAYA,GAAO,IAAI,EAAS,IAAIC,YAAY,MAAQP,IACxD,GAAOM,GAAO,IAAI,IAAQV,IAC1B,GAAWU,GAAO,EAAQzJ,YAAcgJ,IACxC,GAAOS,GAAO,IAAI,IAAQR,IAC1B,IAAWQ,GAAO,IAAI,KAAYP,MACrCO,GAAS,SAASrW,GAChB,IAAI+Q,EAAS,EAAW/Q,GACpBqU,EA/BQ,mBA+BDtD,EAAsB/Q,EAAMgO,iBAAc5H,EACjDmQ,EAAalC,EAAO,EAASA,GAAQ,GAEzC,GAAIkC,EACF,OAAQA,GACN,KAAKP,GAAoB,OAAOD,GAChC,KAAKE,GAAe,OAAON,GAC3B,KAAKO,GAAmB,OAAON,GAC/B,KAAKO,GAAe,OAAON,GAC3B,KAAKO,GAAmB,OAAON,GAGnC,OAAO/E,CACT,GAGF,YC7BA,GAJA,SAAsB/Q,GACpB,OAAgB,MAATA,GAAiC,iBAATA,CACjC,ECTA,GAJA,SAAyBA,GACvB,OAAO,GAAaA,IAVR,sBAUkB,EAAWA,EAC3C,ECXA,IAAI,GAAcF,OAAOqC,UAGrB,GAAiB,GAAY4B,eAG7BK,GAAuB,GAAYA,qBAyBvC,SALkB,GAAgB,WAAa,OAAOP,SAAW,CAA/B,IAAsC,GAAkB,SAAS7D,GACjG,OAAO,GAAaA,IAAU,GAAegD,KAAKhD,EAAO,YACtDoE,GAAqBpB,KAAKhD,EAAO,SACtC,ECRA,GAFcsH,MAAMkP,QCWpB,GALA,SAAkBxW,GAChB,MAAuB,iBAATA,GACZA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,GA9Bb,gBA+BvB,EC5BA,IAAIyW,GAAgC,iBAAXzY,SAAuBA,UAAYA,QAAQ0Y,UAAY1Y,QAG5E2Y,GAAaF,IAAgC,iBAAVxY,QAAsBA,SAAWA,OAAOyY,UAAYzY,OAMvF2Y,GAHgBD,IAAcA,GAAW3Y,UAAYyY,GAG5B,EAAKG,YAASxQ,EAwB3C,UArBqBwQ,GAASA,GAAOC,cAAWzQ,ICHhD,WACE,OAAO,CACT,ECVA,IA2BI0Q,GAAiB,CAAC,EACtBA,GAZiB,yBAYYA,GAXZ,yBAYjBA,GAXc,sBAWYA,GAVX,uBAWfA,GAVe,uBAUYA,GATZ,uBAUfA,GATsB,8BASYA,GARlB,wBAShBA,GARgB,yBAQY,EAC5BA,GAjCc,sBAiCYA,GAhCX,kBAiCfA,GApBqB,wBAoBYA,GAhCnB,oBAiCdA,GApBkB,qBAoBYA,GAhChB,iBAiCdA,GAhCe,kBAgCYA,GA/Bb,qBAgCdA,GA/Ba,gBA+BYA,GA9BT,mBA+BhBA,GA9BgB,mBA8BYA,GA7BZ,mBA8BhBA,GA7Ba,gBA6BYA,GA5BT,mBA6BhBA,GA5BiB,qBA4BY,EC1C7B,IAAI,GAAgC,iBAAX9Y,SAAuBA,UAAYA,QAAQ0Y,UAAY1Y,QAG5E,GAAa,IAAgC,iBAAVC,QAAsBA,SAAWA,OAAOyY,UAAYzY,OAMvF8Y,GAHgB,IAAc,GAAW/Y,UAAY,IAGtB,EAAWgZ,QAG1CC,GAAY,WACd,IAIE,OAFY,IAAc,GAAW/Y,SAAW,GAAWA,QAAQ,QAAQgZ,OAOpEH,IAAeA,GAAYI,SAAWJ,GAAYI,QAAQ,OACnE,CAAE,MAAOlT,GAAI,CACf,CAZe,GCVXmT,GDwBJ,OCxB4CC,aAqB5C,SAFmBD,GCjBnB,SAAmB9C,GACjB,OAAO,SAAStU,GACd,OAAOsU,EAAKtU,EACd,CACF,CDasC,CAAUoX,IF8BhD,SAA0BpX,GACxB,OAAO,GAAaA,IAClB,GAASA,EAAM2C,WAAamU,GAAe,EAAW9W,GAC1D,EI/CA,IAOI,GAHcF,OAAOqC,UAGQ4B,eA2DjC,SAxBA,SAAiB/D,GACf,GAAa,MAATA,EACF,OAAO,EAET,GC5BF,SAAqBA,GACnB,OAAgB,MAATA,GAAiB,GAASA,EAAM2C,UAAY,EAAW3C,EAChE,CD0BM,CAAYA,KACX,GAAQA,IAA0B,iBAATA,GAA4C,mBAAhBA,EAAM4C,QAC1D,GAAS5C,IAAU,GAAaA,IAAU,GAAYA,IAC1D,OAAQA,EAAM2C,OAEhB,IAAIoS,EAAM,GAAO/U,GACjB,GApDW,gBAoDP+U,GAnDO,gBAmDUA,EACnB,OAAQ/U,EAAMgL,KAEhB,GAAI,EAAYhL,GACd,OhClDJ,SAAkB0V,GAChB,IAAK,EAAYA,GACf,OAAO,EAAWA,GAEpB,IAAI3E,EAAS,GACb,IAAK,IAAInP,KAAO9B,OAAO4V,GACjB,EAAe1S,KAAK0S,EAAQ9T,IAAe,eAAPA,GACtCmP,EAAOxO,KAAKX,GAGhB,OAAOmP,CACT,CgCuCY,CAAS/Q,GAAO2C,OAE1B,IAAK,IAAIf,KAAO5B,EACd,GAAI,GAAegD,KAAKhD,EAAO4B,GAC7B,OAAO,EAGX,OAAO,CACT,EExEa0V,GAAe,IAAIC,ICSnBC,GAAcC,MACzB3U,EACA4U,KAEA,GAAI,EAAOA,GACT,MAAM,IAAI,EAAa,sCAMzB,OAJI,GAAQ5U,EAAM6U,WAChB7U,EAAM6U,QAAUvE,KAGX,IAAIzG,SAAwBC,IACjC0K,GAAa1M,IAAI9H,EAAM6U,QAAS/K,GAChC8K,SAAAA,EAAU5N,KAAKhH,EAAM,GACrB,ECzBG,SAAS8U,GAAU9E,GACxB,MAAO+E,KAAcC,GAAShF,EAAK7T,MAAM,KAGzC,MAAO,CAAC4Y,EAFSC,EAAMhW,KAAK,KAG9B,CCMO,SAASiW,GACdC,EACApN,EAA0B,CAAC,GAE3B,IAAK,MAAMkI,KAAQhT,OAAO4B,KAAKkJ,GAC7BoN,EAAOpN,IAAIkI,EAAMlI,EAAIkI,GAEzB,CAEO,SAASmF,GACdD,EACApN,EAA0B,IAE1B,IAAK,MAAM,MAAEsN,EAAK,MAAElY,KAAW4K,EAC7BoN,EAAOpN,IAAIsN,EAAOlY,EAEtB,CAcO,SAASmY,GAAgBH,GAC9B,OAAOlY,OAAOsY,YAAYJ,EAC5B,CAEO,SAASK,GACdL,GAEA,OAAO1Q,MAAMF,KAAK4Q,GAAQ9Y,KAAiB,EAAEgZ,EAAOlY,MAAW,CAC7DkY,QACAlY,WAEJ,oqBChCO,SAASsY,GACdC,EACAC,GAEA,MAAM,qBACJC,EAAoB,UACpBZ,EAAY,GAAE,SACda,EAAW,GAAE,MACbC,EAAK,aACLC,GACEJ,EACJD,EAASM,MAAMJ,IAEXZ,GAAaa,IACfH,EAASO,QAAQ,GAAGjB,QAAAA,EAAa,MAAMa,QAAAA,EAAY,KAAKK,QAGtDJ,GACFJ,EAASS,SAASL,GAGhB,GAAQC,IACVL,EAASN,yBAAyBW,EAEtC,CAEO,MAAMK,GAQX,WAAAjL,CACEmG,EACArB,EACA6F,EACAO,GAXF,oBACA,YAAiC,IAAI3B,KACrC,aAAU,GACV,KAAApD,GAAkD,KAClD,KAAArB,KAAsB,KACtB,KAAA6F,MAAuB,KAQrB,GAAA1W,KAAI,GAAoBiX,QAAAA,EAAmB,KAAI,KAE3C/E,GACFlS,KAAK4W,MAAM1E,GAETrB,GACF7Q,KAAK6W,QAAQhG,GAEX6F,GACF1W,KAAK+W,SAASL,EAElB,CAEO,mBAAAQ,GACL,IAAIC,EAAanX,KAAKoX,QAOtB,OALKD,IACHA,EAAahG,IACbnR,KAAKkS,GAAKiF,GAGLA,CACT,CAEO,OAAAE,GACLrX,KAAKkS,GAAK,KACVlS,KAAK6Q,KAAO,KACZ7Q,KAAK0W,MAAQ,KACb,GAAA1W,KAAI,GAAiB,IAAIsV,IAAK,IAChC,CAEO,KAAA8B,SACL,OAAc,QAAP,EAAApX,KAAKkS,UAAE,QAAI,IACpB,CAEO,KAAA0E,CACLU,GAEAtX,KAAKkS,GAAKoF,CACZ,CAEO,OAAAC,GACL,OAAOvX,KAAK6Q,IACd,CAEO,OAAAgG,CAAQhG,GACb7Q,KAAK6Q,KAAOA,CACd,CAEO,QAAA2G,SACL,OAAiB,QAAV,EAAAxX,KAAK0W,aAAK,QAAI,IACvB,CAEO,QAAAK,CAASL,GACd1W,KAAK0W,MAAQA,CACf,CAEO,SAAAe,CAAUC,GACf,GAAA1X,KAAI,GAAW0X,EAAM,IACvB,CAEO,kBAAAC,CAAmBV,GACxB,GAAAjX,KAAI,GAAoBiX,EAAe,IACzC,CAOO,cAAAW,CACL/G,EACA9S,GAEA,OAAOiC,KAAK8V,gBAAgB,CAAE,CAACjF,GAAO9S,GACxC,CAOO,eAAA+X,CACLa,GAIA,GAFAb,GAAgB,GAAA9V,KAAI,QAAgB2W,GAEhC,GAAA3W,KAAI,QACN,OAAOA,KAAK6X,kBAEhB,CAKO,eAAA3B,GACL,OAAOA,GAAgB,GAAAlW,KAAI,QAC7B,CAMO,wBAAAgW,CAAyBW,GAC9BX,GAAyB,GAAAhW,KAAI,QAAgB2W,EAC/C,CAKO,oBAAAP,GACL,OAAOA,GAAqB,GAAApW,KAAI,QAClC,CAOO,sBAAM6X,GC3KR,IACLlB,ED+KE,OAAOmB,IC/KTnB,ED4KIP,GAAqB,GAAApW,KAAI,SC1KtB,CACL+X,UAAW,KAAkBC,4BAC7BtO,KAAM,CACJiN,kBD0KgC,GAAA3W,KAAI,QACxC,+CEnLK,MAAMiY,GAGJ,WAAOC,CACZhG,EACArB,EACA6F,EACAO,GAIA,OAFAgB,GAAiBE,SAAW,IAAInB,GAAS9E,EAAIrB,EAAM6F,EAAOO,GAEnDgB,GAAiBE,QAC1B,CAEO,kBAAOC,GACZ,IAAKH,GAAiBE,SACpB,MAAM,IAAIrN,MAAM,wBAGlB,OAAOmN,GAAiBE,QAC1B,EClBK,SAASE,GACdxH,EACA6F,GAEA,MAAMJ,EAAW2B,GAAiBG,cAC5BE,EAAazH,QAAAA,EAAQyF,EAASiB,UAC9BgB,EAAc7B,QAAAA,EAASJ,EAASkB,WAEtC,IAAIgB,EAAgE,CAAC,EACrE,GAA0B,iBAAfF,GAA2BA,EAAW5X,OAAS,EAAG,CAC3D,MAAOkV,EAAWa,GAAYd,GAAU2C,GACxCE,EAA8B,CAAE5C,YAAWa,YAO7C,OAJI8B,IACFC,EAA4B9B,MAAQ6B,GAG/B,OAAP,QACE/B,qBAAsBF,EAASY,uBAC5BsB,EAEP,CCNA,SAJA,SAAeza,GACb,OAAgB,MAATA,CACT,ECdO,SAAS0a,KAId,MAAMpV,EAAU+M,EAAmBsI,SAC7BC,EAAYvI,EAAmBwI,WAErC,GAAI,GAAMvV,IAAYzG,MAAMyG,IAAY,GAAMsV,GAC5C,MAAM,IAAI,EACR,4EACWtV,0BACEsV,MAIjB,MAAO,CACLtV,UACAsV,YAEJ,CCNA,SAJA,SAAqB5a,GACnB,YAAiBoG,IAAVpG,CACT,ECoBO,SAAS8a,GACdC,GAEA,MAAMC,EAAsB3I,EAAmB4I,YACzCC,EAAgB7I,EAAmB8I,SACnCC,EAAkB/I,EAAmBgJ,YAErC,UACJrB,EAAS,KACTrO,EAAI,iBACJ2P,EAAmBhB,KAA+B,YAClDiB,GAAcP,EAAsB,CAAE7G,GAAI6G,GAAwB,CAAC,GAAC,QACpE9G,GAAUkH,EAAkB,CAAEjH,GAAIiH,GAAoB,CAAC,GAAC,MACxDI,GAAQN,EAAgB,CAAE/G,GAAI+G,GAAkB,CAAC,IAC/CH,GACE,QAAEzV,EAAO,UAAEsV,GAAcF,KAE/B,GAAI,GAAYV,GACd,MAAM,IAAI,EACR,gEAAgEA,MAIpE,MAAO,CACLA,YACAyB,MAAO,CACLtH,GAAIzT,OAAO4E,IAEboW,QAAS,CACPvH,GAAIyG,GAENU,mBACA3P,OACA4P,cACArH,UACAsH,QAEJ,CAEO,SAASG,GACdjL,EACAiH,EAAkBvE,IAClBwI,EAAgCC,EAAA,EAA8BC,mBAE9D,MAAO,CACL1M,OAAQwM,EACRjE,UACAjH,UAEJ,CCvEO+G,eAAesC,GACpBgC,EACAC,GAEA,MAAMlZ,EAAQ6Y,GAAYb,GAAmBiB,IAE7C,OAAOvE,GAAY1U,EAAOkZ,EAC5B,CCfO,SAASC,GACd1J,EACA0B,GAEA,OAAO,OAAP,sCACKD,EAAqBC,IACrBqG,MAA+B,CAClCN,UAAW,KAAkBkC,mBAC7BvQ,KAAM,CACJ4G,YAAa,CACXE,MAAOF,EAAYE,SAI3B,CCvBA,IAAI0J,GAA+C,KAc5C,SAASC,GACd3J,EACA4J,GAE8B,OAA1BF,IACF7S,aAAa6S,IAGfA,GAAwB1S,WACtB4S,EAC6D,IAtB1D,SACLC,GAEA,MAAMC,EAAgChc,KAAKic,MAA6B,GAAvBF,GAEjD,OAAIC,EAAgC,GAC3B,GAGFA,CACT,CAYIE,CAA0ChK,EAAME,WAEpD,CCxBO,MCIM+J,GACXhM,UAEA,MAAMiM,EAAiE,QAAvD,EAAAjM,aAAO,EAAPA,EAAmD/E,YAAI,eACnEgR,OAGJ,OAFajM,aAAO,EAAPA,EAASrO,QAGX,KAAqBua,qBAAkC,YAAXD,CACtD,ECPI,SAASE,GACdC,WAEA,OACGA,aAAQ,EAARA,EAA4Cza,QAC3C,KAAqB0a,sBAErB3W,KAD2D,QAA7D,EAAgD,QAAhD,EAAC0W,EAA2CnR,YAAI,eAAE4G,mBAAW,eAAEE,MAGnE,oCCFO,MAAMuK,GAAqB,IAAcC,UAAUC,SAC7CC,GAAqB,IAChCC,KAAKC,iBAAiBC,kBAAkBC,SAMnC,SAASC,GAAcC,GAC5B,OAAQA,GACN,IAAK,SACH,OAAO,MAAWC,OACpB,IAAK,SACH,OAAO,MAAWC,OACpB,QACE,OAAO,MAAWC,QAExB,CAMO,MAAMC,GAAwB,CACnC5Y,EAAqC,CAAC,iBAEtC,MAAM6Y,EAA0B,IAAI,KAAJ,CAAab,UAAUc,YAEjD,QACJC,EAAU,GAAE,SACZjY,EAAWoX,KAAoB,SAC/BD,EAAWF,KAAoB,GAC/BiB,EAAK,MACHhZ,EAEJ,MAAO,CACLiZ,QAAkD,QAAzC,EAAAJ,EAAwBK,aAAarL,YAAI,QAAI,KACtDsL,eAA4D,QAA5C,EAAAN,EAAwBK,aAAaE,eAAO,QAAI,KAChEL,UACAC,KACAf,WACAnX,WACAuY,GAAwC,QAApC,EAAAR,EAAwBS,QAAQzL,YAAI,QAAI,KAC5C0L,UAAkD,QAAvC,EAAAV,EAAwBS,QAAQF,eAAO,QAAI,KACtDZ,WAAYD,GAAcM,EAAwBW,YAAYpc,MAC9Dqc,gBAAiB,MAAgBC,QAClC,EC7DUC,GAAuC,yBAE7C,MAAMC,WAA+B9R,MAA5C,kCACE,KAAA+F,KAAO8L,GACP,KAAAlW,QAAU,6CACZ,ECCO,SAASoW,GAA8Bhc,SAC5C,OACiC,QAA/B,EAACA,aAAK,EAALA,EAAyBmE,aAAK,eAAE8X,aACjCH,EAEJ,CAEO,SAASI,GAAgBlc,GAC9B,GAAIgc,GAA8Bhc,GAChC,MAAM,IAAI+b,GAGZ,OAAO/b,CACT,eCNO,MAAMmc,GAAoB,WAAsB,OACrDC,OAAQ,mBACR,eAAgB,mBAChB,CAAC,OAA+C,QAA3B,EAAA7M,EAAmB8M,gBAAQ,QAAI,GACpD,iBAAkB,MAClB,gBAAiBhM,EACjB,ECnBKsE,eAAe2H,GACpBtC,GAEA,IAAInR,EAEJ,IACEA,QAAamR,EAASuC,OACtB,MAAOpY,GACP0E,EAAOmR,EAASwC,WAGlB,OAAO3T,CACT,CCAO8L,eAAe8H,GACpBja,EACAsV,EACAsC,EAAWF,MAEX,MAAMwC,EAAiB,GAAGtC,IAAWje,MAAM,KAAK6C,KAAK,KAC/C2d,EAA0BpN,EAAmBqN,cAE7C5C,QAAiB6C,MACrB,GAAGF,oBAA0Cna,aAAmBsV,YAAoB4E,IACpF,CACEI,OAAQ,MACRC,QAAS,OAAF,UACFZ,QAKT,IAAKnC,EAASgD,GAAI,CAGhB,GAAIhB,SAFoBM,GAAqBtC,IAG3C,MAAM,IAAI+B,GAGZ,MAAM,IAAI,EACR,yCAAyC/B,EAASH,UAClD,CAAEG,aAIN,OAAOA,EAASuC,MAClB,CC5CA,IAAYU,IAAZ,SAAYA,GACV,wBACA,mCACA,0BACD,CAJD,CAAYA,KAAAA,GAAc,KCMnB,MAAMC,GAAwB,KAAyB,MAC5D,OAAkC,QAAlC,EAAA3N,EAAmB4N,uBAAe,QAAI,IAAI,EAE/BC,GAA0C,IACrD7N,EAAmB4N,kBAAoBF,GAAeI,UAE3CC,GAAmB,IAA2C,OAA5BJ,KCV/C,IAAYK,IAAZ,SAAYA,GACV,YACA,YACA,YACA,YACA,YACA,YACA,iBACD,CARD,CAAYA,KAAAA,GAAe,KCEpB,MAAMC,GACXC,IAEAlO,EAAmBmO,iBAAmBD,EAAUE,QAChDpO,EAAmBqN,cAAgBa,EAAUG,KAC7CrO,EAAmBsO,mBAAqBJ,EAAUK,SAAS,cCHtD,MAAMC,GAAY,6CACpBpP,GAAA,GACA,MAAoB,CACvBqP,qBAAsB,qBACtBC,mBAAoB,mBACpBC,uBAAwB,uBACxBC,gBAAiB,iBACjBC,uBAAwB,uBACxBC,4CACE,2CAGG,MAAMC,WAEHxR,aCZH,MAAMyR,GAAb,cACE,KAAAC,YAAsC,EAsBxC,CApBE,QAAAC,CAASC,GACPvf,KAAKqf,YAAY/e,KAAKif,EACxB,CAEA,OAAAxK,CAAQlU,GACN,GAAI,GAAMA,GACR,OAAO,KAGT,IAAI2e,EAAuC3e,EAE3C,IAAK,MAAM0e,KAAcvf,KAAKqf,YAAa,CACzC,GAAuB,OAAnBG,EACF,OAAO,KAETA,EAAiBD,EAAWC,GAG9B,OAAOA,CACT,ECFK,MAAMC,GAAkBC,YCxB/B,SAASC,GAAWjW,GAClB,MAAgD,cAAxCA,aAAI,EAAJA,EAA0BkW,UACpC,4VCyBA,MAAMC,GAAc,CAClB3N,GAAI,GACJxI,KAAM,KACNtJ,UAAM+D,EACN2b,UAAW,IAAIpjB,MAuBV,SAASqjB,GAAelf,SAC7B,IAfiB,CAACA,GAClB,YAAcA,EAcTmf,CAAWnf,GACd,OAAOgf,GAGT,GAtBe,CAAChf,GAChB,UAAYA,EAqBRof,CAASpf,GACX,MAAO,CACLif,WAAW,SAA6B,QAAf,EAAAjf,EAAMif,iBAAS,SAAI,IAAIpjB,MAAOkV,YACvDlI,KAAM,KACN1E,MAAOnE,EAAMmE,MACbkN,GAAIrR,EAAM6U,SAId,MAAMqC,EAzBa,CAAClX,GACpB,cAAgBA,EAwBEqf,CAAarf,GAASA,EAAMkX,eAAY5T,EAE1D,GApCc,CAACtD,GACf,SAAWA,EAmCPsf,CAAQtf,GACV,MAAO,CACLif,WAAW,SAAcjf,EAAMif,WAC/BM,QAASvf,EAAMuf,QACf1W,KAAM7I,EAAM6I,KACZwI,GAAIrR,EAAM6U,QACVtV,KAAM2X,GAIV,GAlCyB,CACzBsI,IAEA,MAAMC,EAAYD,aAAe,EAAfA,EAA2CC,SAE7D,OAA6B,IAAtB,GAAQA,EAAmB,EA6B9BC,CAAmB1f,GAAQ,CAC7B,MACEyf,UAAY5W,KAAM8W,EAAczI,UAAW0I,GAC3C/K,QAASgL,GAEP7f,EADC8f,EAAa,GACd9f,EAJE,wBAMN,MAAO,CACLT,KAAMqgB,EACN/W,KAAM,OAAF,wBACCiX,GACAH,GAELV,WAAW,SAAcjf,EAAMif,WAC/B5N,GAAIwO,GAIR,MAAM,QAAEhL,GAA0B7U,EAAd+f,EAAS,GAAK/f,EAA5B,aAEN,OAAO,OAAP,sBACE6I,UAAMvF,GACHyc,GAAS,CACZ1O,GAAIwD,EACJtV,KAAM2X,EACN+H,WAAW,SAAcjf,EAAMif,YAEnC,CCrGA,MAAMe,GAAgD,CACpD,CAACjC,GAAUkC,uBFHN,SAA4BjgB,GACjC,OAAI8e,GAAW9e,EAAM6I,MACZ,OAAP,wBACK7I,GAAK,CACRT,KAAMwe,GAAUC,uBAIbhe,CACT,EELE,CAAC+d,GAAUmC,qBFON,SAA0BlgB,GAC/B,OAAI8e,GAAW9e,EAAM6I,MACZ,OAAP,wBACK7I,GAAK,CACRT,KAAMwe,GAAUE,qBAIbje,CACT,EEfE,CAAC+d,GAAUoC,6BCXN,SAA8BngB,GACnC,OAAO,OAAP,wBACKA,GAAK,CACRT,KAAMwe,GAAUG,wBAEpB,EDOE,CAACH,GAAUqC,cEHN,SAAwBpgB,GAC7B,OAAO,OAAP,wBACKA,GAAK,CACRT,KAAMwe,GAAUI,iBAEpB,EFDE,CAACJ,GAAUsC,qBGbN,SAA8BrgB,GACnC,OAAO,OAAP,wBACKA,GAAK,CACRT,KAAMwe,GAAUK,wBAEpB,EHSE,CAACL,GAAUuC,0CIZN,SACLtgB,GAEA,OAAO,OAAP,wBACMA,GAAyD,CAC7DT,KAAMwe,GAAUM,6CAEpB,EJOE,CAACN,GAAUwC,oBKbN,SAA2BvgB,GAChC,MAAMwgB,EACHxgB,EAAM6I,KACJ4X,eACHrkB,IAAI8iB,IAEN,OAAO,OAAP,wBACKlf,GAAK,CACR6I,KAAM,OAAF,wBACE7I,EAAM6I,MAAgC,CAC1C4X,eAAgBD,KAGtB,ELCE,CAACzC,GAAU2C,kBMdN,SAAyB1gB,GAC9B,MAAMwgB,EACHxgB,EAAM6I,KACJ4X,eACHrkB,IAAI8iB,IAEN,OAAO,OAAP,wBACKlf,GAAK,CACR6I,KAAM,OAAF,wBACE7I,EAAM6I,MAAgC,CAC1C4X,eAAgBD,KAGtB,GNIO,SAASG,GAAgB3gB,GAC9B,OAAIA,EAAMT,WAAqC+D,IAA7B0c,GAAahgB,EAAMT,MAC5BygB,GAAahgB,EAAMT,MAAMS,GAG3BA,CACT,CObO,SAAS4gB,GACd5gB,GAEA,MAAMmf,GACoD,IAAxD,GAAanf,aAAK,EAALA,EAAmCqR,IAKlD,OAAoB,KAFuC,IAAzD,GAAarR,EAAiCmE,SAEnBgb,CAC/B,CCvBO,MAAM0B,WAA+B,iBCOrC,MCLDC,GAA8B,sBCJvBC,GAAmC,gCACnCC,GACX,kCCwDKrM,eAAesM,GACpBC,EACAC,EACAhf,GAEA,OAnDKwS,eACLuM,EACA/e,GAEA,MAAMif,EAAc,OAAH,QACfrE,QAAS,OAAF,UACFZ,OAEFha,GAEC6X,QAAiB6C,MAAMqE,EAAUE,GAEvC,IAAKpH,EAASgD,GACZ,MAAMhD,EAGR,OAAOA,EAASuC,MAClB,CAkCS8E,CAAUH,EAAU,OAAF,QACvBpE,OAAQ,OACRqE,KAAM/U,KAAKC,UAAU8U,QAAAA,EAAQ,CAAC,IAC3Bhf,GAEP,CChEO,SAASmf,aACd,IAAK/R,EAAmBsO,mBACtB,MAAM,IAAI,EAAakD,IAGzB,MAAMQ,EAAe,IAAIre,IAAIqM,EAAmBsO,oBAehD,OAdA0D,EAAaC,SAAW,eACxBD,EAAaE,aAAaC,OACxB,UACA1W,OAAOuE,EAAmBsI,WAE5B0J,EAAaE,aAAaC,OACxB,YAC6B,QAA7B,EAAAnS,EAAmBwI,kBAAU,QAAI,IAEnCwJ,EAAaE,aAAaC,OACxB,YAC6B,QAA7B,EAAAnS,EAAmBgJ,kBAAU,QAAI,IAG5BgJ,EAAaxQ,UACtB,CClBO,SAAS4Q,WACd,OAA2C,QAApC,EAAApS,EAAmBqS,yBAAiB,QAAI,IACjD,CCCOjN,eAAekN,KACpB,MAAMlS,EAAQgS,KACd,GAAI,EAAOhS,GACT,MAAM,IAAI,EAAaqR,IAGzB,MAAMc,EAAaR,KACnB,IACE,MAAM,WAAES,SAAqBd,GAC3Ba,EACA,CACEC,WAAY,CACVC,WAAY,gBACZC,cAAetS,EAAMsS,gBAGzB,CACEC,YAAa,YAIjB,IAAKH,EACH,MAAM,IAAI,EAAaf,IAGzB,OAAOmB,GAAyBJ,GAChC,MAAO5d,GACP,GAAIA,aAAiB,EACnB,MAAMA,EAGR,MAAM,IAAI,EAAa6c,GAAwC7c,GAEnE,CCrCO,SAASge,GAAyBxS,IFFlC,SAA4BA,GACjCJ,EAAmBqS,kBAAoBjS,CACzC,CECEyS,CAAmBzS,GACnB2J,GAAmB,CAAEzJ,UAAWF,EAAM0S,YAAcR,GACtD,CCTO,MAAMS,WAA6BrY,MAGxC,WAAAiB,CAAYtF,EAAiB+C,EAAiB,IAE5CoH,MAAM,2BAA2BnK,IADX+C,EAAS,KAAKA,KAAY,MAHlD,KAAAqH,KAAe,sBAKf,ECFK,MAAMuS,GAAgB1D,wrBC2BtB,MAAMxb,GAKX,WAAA6H,CACUsX,EACAC,GADA,KAAAD,QAAAA,EACA,KAAAC,gBAAAA,eANV,YAAyC,MACzC,oBACA,aAA6B,GAkJ7B,aACEziB,IAEA,GAAAb,KAAI,QAAcY,cAAcC,EAAM,IA/ItC,GAAAb,KAAI,GAAgB,IAAIojB,GAAe,IACzC,CAKA,aAAMG,WACJ,GAAAvjB,KAAI,WAAiB,KAArBA,MAEwB,QAAxB,EAAgB,QAAhB,KAAAA,KAAI,eAAY,eAAEyC,cAAM,SAAEgH,WAC5B,CAKA,UAAA+Z,SACkB,QAAhB,KAAAxjB,KAAI,eAAY,SAAEyC,OAAOkE,OAC3B,CAKA,SAAA8C,SACE,GAAAzJ,KAAI,WAAiB,KAArBA,MACgB,QAAhB,KAAAA,KAAI,eAAY,SAAEyC,OAAOgH,WAC3B,CAMA,IAAA5B,CAAK6B,SACH,MAAM+Z,EAAaxW,KAAKC,UAAUxD,GAClB,QAAhB,KAAA1J,KAAI,eAAY,SAAE6H,KAAK4b,EACzB,CAOA,EAAAC,CACE3L,EACA4L,GAEA,GAAA3jB,KAAI,QAAcG,iBAAiB4X,EAAW4L,EAChD,CAOA,GAAAC,CACE7L,EACA4L,GAEA,GAAA3jB,KAAI,QAAcO,oBAAoBwX,EAAW4L,EACnD,CAKQ,aAAAE,CACNhjB,GAEA,MAAMijB,EAAajjB,EAAMoN,OACzB,IAAIjJ,EAYJ,GAVI8e,aAAsB1Y,aACxBpG,EAAQ,IAAIme,GAAqB,mBAAoBW,EAAWrd,UAE9Dqd,aAAsBzY,aACxBrG,EAAQ,IAAIme,GAAqB,oBAAqBW,EAAWta,cAE9C,IAAVxE,IACTA,EAAQ,IAAIme,GAAqB,gBAAiBW,EAAW1jB,OAGnC,mBAAjBJ,KAAKqjB,QAGd,MAAMre,EAFNhF,KAAKqjB,QAAQre,EAIjB,2GAIE,MAAMpC,GAA2Bub,KAG3Bxb,GAD8C,QAAnC,EAAAyN,EAAmBmO,wBAAgB,QAAI,IACnBwF,WAAW,OAEhD,GAAA/jB,KAAI,IAAe,QAAsBA,KAAKsjB,gBAAiB,CAC7D3gB,sBACAoD,aAAa,EACbnD,0BACAC,WAAY,IACZ,KAEF,MAAMmhB,EAAoBhkB,KAAK6jB,cAAcI,KAAKjkB,MAClC,QAAhB,KAAAA,KAAI,eAAY,SAAEG,iBAChB,KAAgC6N,MAChCgW,GAEc,QAAhB,KAAAhkB,KAAI,eAAY,SAAEG,iBAChB,KAAgCgO,MAChC6V,GAGc,QAAhB,KAAAhkB,KAAI,eAAY,SAAEG,iBAChB,KAAgCwJ,MAC/B9I,UACiB,QAAhB,KAAAb,KAAI,eAAY,SAAEyC,OAAOwH,cA/HI,IAgI7B,GAAAjK,KAAI,IAAqB,EAAI,KAC7B,GAAAA,KAAI,QAAoB,KAAxBA,KAAyBa,EAAM,IAGnB,QAAhB,KAAAb,KAAI,eAAY,SAAEG,iBAChB,KAAgC6N,OAC/BnN,IACM,GAAAb,KAAI,SAGP,GAAAA,KAAI,QAAcY,cAChB,IAAI+M,YACF,KAAgCuW,uBAKtC,GAAAlkB,KAAI,QAAoB,KAAxBA,KAAyBa,EAAM,IAGnB,QAAhB,KAAAb,KAAI,eAAY,SAAEG,iBAChB,KAAgC+N,QAChC,GAAAlO,KAAI,QAER,gBChLK,MAAMmkB,WAA8B,GCmBpC,MAAMC,GAA0B5O,MACrC6O,EACAhhB,EACAsV,KAEA,MAAM2L,OChBwC9O,OAC9C6O,IAEA,MAAME,QCbD,SAA+BF,GACpC,OAAO,IAAI3Z,SAAQ,CAACC,EAAS6Z,KAC3B,MAAMD,EAAS,IAAIE,WACnBF,EAAOG,UAAY,KACjB/Z,EAAQ4Z,EAAO,EAEjBA,EAAOle,QAAWse,IAA+C,QAC/D,OAAAH,EAA+B,QAAxB,EAAiB,QAAjB,EAAAG,EAAWC,cAAM,eAAE5f,aAAK,eAAEyB,QAAQ,EAC3C8d,EAAOM,cAAcR,EAAK,GAE9B,CDGuBS,CAAsBT,GAE3C,GAAqB,OAAjBE,EAAOvf,MACT,MAAM,IAAI,EACR,iEAAiEuf,EAAOvf,MAAMyB,YAIlF,GAA6B,iBAAlB8d,EAAOzV,OAChB,MAAM,IAAI,EACR,yFACiByV,EAAOzV,WAI5B,MAAO,CACL7I,IAAKse,EAAOzV,OACZ+B,KAAMwT,EAAKxT,KACXkU,SAAUV,EAAKjkB,KAChB,EDNwB4kB,CAAiCX,GACpDY,QGSDzP,eACLnS,EACAsV,EACA2L,GAEA,MAAM,IAAEre,EAAK4K,KAAMqU,EAAQ,SAAEH,GAAaT,EAEpCa,EAAc,CAAEC,QADNnf,EAAIjJ,MAAM,YAAY,GACPkoB,WAAUH,YACnClK,QAAiB6C,MACrB,GAAGtN,EAAmBqN,gCAAgCpa,aAAmBsV,eACzE,CACEgF,OAAQ,OACRqE,KAAM/U,KAAKC,UAAUiY,GACrBvH,QAAS,OAAF,UACFZ,QAKT,IAAKnC,EAASgD,GAAI,CAGhB,GAAIhB,SAFoBM,GAAqBtC,IAG3C,MAAM,IAAI+B,GAGZ,MAAM,IAAI,EACR,yCAAyC/B,EAASH,WAItD,OAAOG,EAASuC,MAClB,CHzCyCiI,CACrChiB,EACAsV,EACA2L,GAGF,IGNiE,IAA1D,GAAa5a,OAFpBA,EHQ4Bub,QGNJ,EAAJvb,EAAgC4b,SHOlD,MAAO,CACLrf,IAAKgf,EAAyBK,QAC9BC,aAAcjB,EAAWzT,MGZxB,IACLnH,EHeA,GGVK,SACLA,GAEA,OAAsE,IAA/D,GAAaA,aAAI,EAAJA,EAA6B8b,gBACnD,CHMMC,CAAqBR,GACvB,MAAM,IAAId,GACR,2BACAc,GAIJ,MAAM,IAAI,EACR,iCAAiCA,KAClC,EAGUS,GACXC,GAEoDtgB,MAAMF,KAExDwgB,GAE8CC,OAC7CvB,GAAS,QAASA,GAAQ,iBAAkBA,IAIpCwB,GAAmCrQ,MAC9CmQ,EACAtiB,EACAsV,IAEAjO,QAAQob,IACNzgB,MAAMF,KAAKwgB,GAAO1oB,KAAKonB,GACrBD,GAAwBC,EAAMhhB,EAASsV,MAIhCoN,GAAoCvQ,MAC/CmQ,EACAK,EACAhjB,EAA8B,CAAC,KAE/B,MAAM,QAAEK,EAAO,UAAEsV,GAAcF,KAE/B,IACE,MAAMwN,EAAcP,GAAmBC,GACnCA,QACME,GAAiCF,EAAOtiB,EAASsV,IAErD,UACJuN,EAAY/U,IAAY,mBACxBgV,EAAqBvK,MACnB5Y,EAEJ,MAAO,CACLojB,eAAgB,CACdhmB,KAAMmP,GAAA,EAAY8W,KAClB5X,QAAS,CACP6X,KAAM,KAGVL,cACAE,qBACAI,OAAQ,CACN/P,qBAAsBwP,GAExBxP,qBAAsB0P,EACtBM,SAAU,CACR7P,aAAc,IAEhB8P,gBAAiB,CACf9P,aAAc,KAGlB,MAAO3R,GACP,GAAIA,aAAiBmf,GACnB,MAAMnf,EAGR,GAAIA,aAAiB8F,MACnB,MAAM,IAAI,EACR,sCAAsC9F,EAAMyB,YAIhD,MAAM,IAAI,EAAa,sCIhHpB,SAASigB,GACd7lB,WAEA,OACEA,EAAMT,OAASwe,GAAUK,6BACmC9a,KAAT,QAAnD,EAA6C,QAA7C,EAACtD,EAAwC6I,YAAI,eAAEid,YAAI,eAAEzU,GAEzD,CCdO,SAAS0U,GACd/lB,WAEA,OACEA,EAAMT,OAASwe,GAAUI,sBAC6B7a,KAAT,QAA7C,EAAuC,QAAvC,EAACtD,EAAkC6I,YAAI,eAAEid,YAAI,eAAEzU,GAEnD,CCDO,SAAS2U,GACdhmB,WAEA,OACEA,EAAMT,OAASwe,GAAUM,kDAEd/a,KAD0D,QAArE,EAA+D,QAA/D,EAACtD,EAA0D6I,YAAI,eAAEid,YAAI,eACjEzU,GAER,CCRO,SAAS4U,GACdjmB,GAEA,OACGA,EAA4CT,OAC7CoP,GAAA,EAAoBuX,0BAExB,CCRO,MAAMC,GAAoB,CAC/BZ,EACAF,EACAF,EACAG,EAAyCvK,QAChB,CACzBwK,iBACAD,qBACA3P,qBAAsB0P,EACtBK,OAAQ,CACN/P,qBAAsBwP,GAExBQ,SAAU,CACR7P,aAAc,IAEhB8P,gBAAiB,CACf9P,aAAc,IAEhBsP,YAAa,KClBR,SAASgB,GACdpmB,SAEA,OACGA,EAAkCT,OACjC,KAAqB8mB,2BACgC/iB,KAAf,QAAxC,EAACtD,aAAK,EAALA,EAAmC6I,YAAI,eAAEyd,SAE9C,CCZO,MAAMC,GACXC,IACgD,CAChDtP,UAAW,KAAkBuP,mBAC7B5d,KAAM2d,ICTD,MAAME,WAAmBzc,MAC9B,WAAAiB,CAAYtF,EAAkB,WAC5BmK,MAAMnK,GACNzG,KAAK6Q,KAAO,YACd,ECkBK,MAAM2W,WAA4B9c,QAGvC,WAAAqB,CAAY0b,GACV,MAAMC,EAAkB,IAAIC,gBACtBC,EAAcF,EAAgBG,OAUpCjX,OAR4C,CAACjG,EAAS6Z,KACpDoD,EAAYznB,iBAAiB,SAAS,KACpCqkB,EAAO,IAAI+C,GAAWvnB,KAAK8nB,aAAa,IAG1CL,SAAAA,EAAW9c,EAAS6Z,EAAQoD,EAAY,IAI1C5nB,KAAK+nB,MAASve,IACZxJ,KAAKgoB,aAAexe,QAAAA,EAAU,UAC9Bke,EAAgBK,OAAO,CAE3B,CAIA,eAAWD,GACT,OAAO9nB,KAAKgoB,YACd,EAEO,GAAA7iB,KAAW8iB,GAEZA,aAAmBT,GACdS,EAGF,IAAIT,IAAoB,CAAC7c,EAAS6Z,KACvCyD,EAAQpd,KAAKF,GAASO,MAAMsZ,EAAO,ICvDlC,MAAM0D,WAAiC,iBCMvC,MAAMC,GAAa1hB,oBACxB,OAAAA,EAAQmZ,YAActQ,GAAA,EAAiB8Y,QACI,QAAvC,EAA6B,QAA7B,EAAA3hB,EAAQ4hB,6BAAqB,eAAEC,gBAAQ,QAAI,GAC3C,GAAgC,QAA7B,EAAkB,QAAlB,EAAA7hB,EAAQ8hB,kBAAU,eAAE3S,iBAAS,QAAI,MACP,QAA3B,EAAkB,QAAlB,EAAAnP,EAAQ8hB,kBAAU,eAAEC,eAAO,QAAI,KAC9B1R,MAAM,ECTR,SAAS2R,GAAUC,GACxB,MAAMC,GAA8C,IAAtC,GAAaD,EAAiBxW,IACtC0W,GAA4D,IAA7C,GAAaF,EAAiB9I,WAC7CiJ,GAC8C,IAAlD,GAAaH,EAAiBtC,gBAEhC,OAAOuC,GAASC,GAAgBC,CAClC,CCDO,SAASC,GACdjoB,GAEA,OACGA,EAA8BT,OAASoP,GAAA,EAAoBuZ,eAEhE,CCNO,SAASC,GAAmBnoB,GACjC,OAAQA,EAA2BT,OAASoP,GAAA,EAAoByZ,YAClE,CCFO,SAASC,GACdroB,GAEA,OACGA,EAAkCT,OACnCoP,GAAA,EAAoB2Z,oBAExB,CCfO,MAAMC,WAA+B,GCQrC,MAAMC,GACXxO,GAECA,EAAyCza,OACxC,KAAqBkpB,6BACwCnlB,IAA9D0W,EAAyCnR,KAAK6f,YCLpCC,GACX3O,IAEA,MAAM4O,EAAmB5O,EAASnR,KAGlC,OAAwB,KAD4B,IAA5B,GAAM+f,OAMV,KADsC,IAAtC,GAAMA,aAAgB,EAAhBA,EAAkBtC,cAQjB,IAFzBtM,EAASza,OAAS,KAAqBmhB,kBACvC1G,EAASza,OAAS,KAAqBghB,uBAMtB,IADA,GAAMvG,EAAS7V,SAMd,KADoC,IAApC,GAAMykB,aAAgB,EAAhBA,EAAkBlD,WAKjC,EClCN,SAASmD,GACd7O,GAEA,OACGA,EAAiCza,OAClC,KAAqBupB,eAEzB,CCbO,MAAMC,WAAoC,GCI1C,SAASC,GACd7D,GAEA,MAAM8D,EAAY,CAChB/R,UAAW,KAAkBgS,eAC7BrgB,KAAM,CAAC,GAGT,YAAmCvF,IAA/B6hB,EACK8D,EAGF,OAAP,wBACKA,GAAS,CACZpgB,KAAM,CACJ6c,OAAQ,CAAE/P,qBAAsBwP,KAGtC,CCtBO,MAAMgE,WAAiC,GCAvC,MAAMC,WAAiC,GCiFvC,MAAMC,GAeX,WAAAne,CACEyK,EACAS,EACAkT,EACA7T,EACAK,EAAmC,CAAC,EACpCyT,GAAkC,GAjB1B,KAAAC,SAAmB,EAGnB,KAAAC,sBACRnmB,EACQ,KAAAomB,yBAAmC,EAEnC,KAAAC,cAAiC,IAAIlV,IAEvC,KAAAmV,mBAA6B,GAUnCzqB,KAAKwW,qBAAuBA,EAC5BxW,KAAK0qB,iBAAmBzT,EACxBjX,KAAK2qB,gBAAkBR,EACvBnqB,KAAK4qB,UAAYtU,EACjBtW,KAAKuqB,wBAA0BH,EAE/BtU,GAAgB9V,KAAKwqB,cAAe7T,GACpC3W,KAAK6qB,wBACP,CAQO,OAAAC,GACL,OAAO,IAAItD,IAAiBhS,MAAO7K,EAAS6Z,KAC1C,MAAM3J,QAAiB/C,GACrB+R,GAA+B7pB,KAAKwW,sBACpCxW,KAAK0qB,kBAGP,GAAIlB,GAAwB3O,GAAW,CACrC,MAAM,EAA4CA,EAASnR,MAArD,QAAEqhB,EAAO,gBAAEtE,GAAe,EAAKuE,2UAAQ,GAAvC,+BAENrgB,EAAQ,OAAD,wBACFqgB,GAAQ,CACXD,QAASA,QAAAA,EAAWtE,UAGtBjC,EAAO,IAAIyF,GAAyB,sBAAuBpP,MAGjE,CAQO,iBAAMoQ,CACXC,IC/IG,SACLA,GAEA,GAAIA,EAAY9E,eAAehmB,OAASmP,GAAA,EAAY8W,QAIhD6E,EAAYjF,YAAYvlB,OAAS,KAIoB,IAArD,GAAQwqB,EAAY9E,eAAe3X,QAAQ6X,MAI/C,MAAM,IAAI5E,GACR,mDAEJ,CD+HIyJ,CAAiCD,GAKjC,MEhJuB1V,OACzB0V,EACAjU,KAEA,MAAMmU,GCVN/D,EDU4D6D,ECTjB,CAC3CnT,UAAW,KAAkBsT,aAC7B3hB,KAAM2d,IAJoC,IAC1CA,EDYA,MAAMxM,QAAiB/C,GAAcsT,EAAwBnU,GAE7D,GAAIwK,GAA8B5G,GAChC,OAAOA,EAGT,MAAM,IAAI6G,GAAuB,sBAAuB7G,EAAS,EFoIxDoQ,CAFLjrB,KAAKsrB,gDAAgDJ,GAAa,GAEpBlrB,KAAK0qB,iBACvD,CAOO,qBAAMa,CACXC,EACAxoB,EAA8B,CAAC,GAE/B,MAAM,UACJkjB,EAAY/U,IAAY,mBACxBgV,EAAqBvK,MACnB5Y,EAEEyoB,EIzKH,SAA+BD,GACpC,MAAO,CACL/c,QAAS,CACP6X,KAAMkF,GAERprB,KAAMmP,GAAA,EAAY8W,KAEtB,CJkK+BqF,CAAsBF,GAC3CN,EAAclE,GAClByE,EACAvF,EACAlmB,KAAKwW,qBACL2P,GAGF,OAAOnmB,KAAKirB,YAAYC,EAC1B,CAQO,yBAAMS,CACXrL,EACAkL,EACAxoB,EAA8B,CAAC,GAE/B,MAAM,UACJkjB,EAAY/U,IAAY,mBACxBgV,EAAqBvK,MACnB5Y,EAEE4oB,EKpMH,SACLtL,EACAkL,GAEA,MAAO,CACL/c,QAAS,CACP6X,KAAMkF,EACNlL,YAEFA,WACAlgB,KAAMmP,GAAA,EAAY8W,KAEtB,CLwLmCwF,CAC7BvL,EACAkL,GAEIN,EAAclE,GAClB4E,EACA1F,EACAlmB,KAAKwW,qBACL2P,GAGF,OAAOnmB,KAAKirB,YAAYC,EAC1B,CAQO,yBAAMY,CACXZ,GAKA,MMtN+B1V,OACjC0V,EACAjU,KAEA,MAAM8U,GCVN1E,EDWuC6D,ECVK,CAC5CnT,UAAW,KAAkBiU,cAC7BtiB,KAAM2d,IAJ4C,IAClDA,EDaA,MAAMxM,QAAiB/C,GACrBiU,EACA9U,GAGF,GAAIwK,GAA8B5G,GAChC,OAAOA,EAGT,MAAM,IAAI6G,GAAuB,+BAAgC7G,EAAS,ENsMjEiR,CAFL9rB,KAAKsrB,gDAAgDJ,GAAa,GAIlElrB,KAAK0qB,iBAET,CAQO,sBAAMuB,SACX,MAAM,YAAEC,EAAW,sBAAEC,GACW,QAA9B,EAAA/b,EAAmBgc,mBAAW,QAAI,CAAC,EAErC,GAAI,GAAQF,GACV,OAAO,KAGT,MAAMG,EAAuD,CAC3DH,YAAargB,OAAOqgB,GAEpBC,wBACA5F,OAAQ,CAAE/P,qBAAsBxW,KAAKwW,uBAGjCqE,QAAiB/C,GACrBsP,GAAkCiF,GAClCrsB,KAAK0qB,kBAGP,GAAIzD,GAA4BpM,GAC9B,OAAOA,EAGT,MAAM,IAAI+O,GACR,4BACA/O,EAEJ,CAKO,qBAAMyR,GQ1QR,IACLtG,ER8QE,OAAOlO,IQ9QTkO,ER2QIhmB,KAAKwW,qBQzQF,CACLuB,UAAW,KAAkBwU,aAC7B7iB,KAAM,CACJ6c,OAAQ,CAAE/P,qBAAsBwP,MRyQAhmB,KAAK0qB,iBACzC,CAWO,qBAAM8B,CACX7G,EACA3iB,EAA8B,CAAC,GAE/B,GAAI,GAAY2iB,IAA2B,IAAjBA,EAAMjlB,OAC9B,MAAM,IAAI,EACR,sDAIJ,MAAMwqB,QAAoBnF,GACxBJ,EACA3lB,KAAKwW,qBACLxT,GAGF,OAAOhD,KAAKirB,YAAYC,EAC1B,CAOO,SAAAuB,CAAUC,EAAU,IAAMC,GSjT5B,IACL3G,ETiTOhmB,KAAKsqB,kBACRxS,ISlTJkO,ETmTwChmB,KAAKwW,qBSjTtC,CACLuB,UAAW,KAAkB+I,sBAC7BpX,KAAM,CACJ6c,OAAQ,CACN/P,qBAAsBwP,MT8StBhmB,KAAK0qB,kBAITrjB,aAAarH,KAAKsqB,kBAClBtqB,KAAKsqB,iBAAmB9iB,YAAW,KACjCxH,KAAK4sB,oBAAoBD,EAAe,GACvCD,EACL,CAKO,UAAAG,GACL7sB,KAAK4sB,qBACP,CAEQ,mBAAAA,CAAoBD,GSzTvB,IACL3G,ETyTE3e,aAAarH,KAAKsqB,kBAClBtqB,KAAKsqB,sBAAmBnmB,EACxB2T,IS3TFkO,ET4TqChmB,KAAKwW,qBS1TnC,CACLuB,UAAW,KAAkBgJ,oBAC7BrX,KAAM,CACJ6c,OAAQ,CACN/P,qBAAsBwP,MTuTxBhmB,KAAK0qB,kBAEuB,mBAAnBiC,GACTA,GAEJ,CASA,mBAAAG,CAAoBC,EAAqBL,EAAU,MACjD1sB,KAAKyqB,mBAAqBsC,EACtB/sB,KAAKgtB,6BAIThtB,KAAKgtB,2BAA6BxlB,YAAW,KAC3CxH,KAAKitB,sBAAsB,GAC1BP,GACL,CAQA,oBAAAO,CAAqBC,GAAoB,GACvC7lB,aAAarH,KAAKgtB,4BAClBhtB,KAAKgtB,gCAA6B7oB,EAClC,MAAMgpB,EAAqBntB,KAAKyqB,mBAChCzqB,KAAKyqB,mBAAqB,IAEA,IAAtByC,GAGJltB,KAAKotB,mBAAmBD,EAC1B,CAQO,iBAAME,GACX,MAAMxS,QAAiB/C,IU7XzBkO,EV8X6ChmB,KAAKwW,qBU5X3C,CACLuB,UAAW,KAAkBuV,qBAC7B5jB,KAAM,CACJ6c,OAAQ,CACN/P,qBAAsBwP,MVyXxBhmB,KAAK0qB,kBUhYJ,IACL1E,EVkYE,GAAIqD,GAA6BxO,GAC/B,OAAOA,EAGT,MAAM,IAAIuO,GAAuB,sBAAuBvO,EAC1D,CAEO,aAAA0S,CACLntB,EACAotB,GAEA,MAAMC,EWpXR,EAACC,EAAsCF,IACtC3sB,IACC,MAEM8sB,EAhBU,CAACjkB,sBACnB,MAAMkkB,EAAiBlkB,EAEvB,OAGqD,QAFnD,EACgD,QADhD,EAA4C,QAA5C,EAAsB,QAAtB,EAAAkkB,aAAc,EAAdA,EAAgBrH,cAAM,eAAE/P,4BAAoB,QACxB,QAApB,EAAAoX,aAAc,EAAdA,EAAgBjH,YAAI,eAAEX,kCAA0B,QACzB,QAAvB,EAAA4H,aAAc,EAAdA,EAAgBnnB,eAAO,eAAEuf,kCAA0B,QACrB,QAA9B,EAAA4H,aAAc,EAAdA,EAAgBC,sBAAc,eAAE7H,0BACjC,EAQuB8H,CAFJjtB,EAAMoN,OAAOvE,MAI3BikB,IAAkBD,GACpBF,EAAQ3sB,IX6WmBktB,CAC3B/tB,KAAKwW,qBACLgX,GAKF,OAFAxtB,KAAK2qB,gBAAgBxqB,iBAAiBC,EAAMqtB,GAErC,KACLztB,KAAK2qB,gBAAgBpqB,oBAAoBH,EAAMqtB,EAAqB,CAExE,CAMO,sBAAM5V,CACXmW,GY9ZG,IACLrX,EACAqP,EZ6aE,OAAOlO,IY9aTnB,EZ+Z4BP,GAAqBpW,KAAKwqB,eAAe9qB,QAChEuuB,IACKD,GACKA,EAAiBrc,SAASsc,EAAYhY,SYjarD+P,EZ0aIhmB,KAAKwW,qBYxaF,CACLuB,UAAW,KAAkBmW,kCAC7BxkB,KAAM,CACJiN,eACA4P,OAAQ,CACN/P,qBAAsBwP,MZsaahmB,KAAK0qB,iBAC9C,CAOO,qBAAM5U,CACXa,GAEAb,GAAgB9V,KAAKwqB,cAAe7T,IAEf,IAAjB3W,KAAKqqB,eAKHrqB,KAAK6X,iBAAiBha,OAAO4B,KAAKkX,GAC1C,CAOO,cAAAiB,CACL/G,EACA9S,GAEA,OAAOiC,KAAK8V,gBAAgB,CAAE,CAACjF,GAAO9S,GACxC,CAQO,aAAMowB,GACX,MAAMtT,QAAiB/C,IavdzBkO,EbwdwChmB,KAAKwW,qBatdtC,CACLuB,UAAW,KAAkBqW,eAC7B1kB,KAAM,CACJ6c,OAAQ,CACN/P,qBAAsBwP,MbmdxBhmB,KAAK0qB,kBa1dJ,IACL1E,Eb4dE,GAAI0D,GAA+B7O,GACjC,OAAO,EAGT,MAAM,IAAIqN,GAAyB,wBAAyBrN,EAC9D,CASO,aAAMhE,CAAQhG,GACnB,MAAMwd,GczeRrI,Ed0eIhmB,KAAKwW,qBczeT8X,Ed0eIzd,EcxeG,CACLkH,UAAW,KAAkBwW,cAC7B7kB,KAAM,CACJ6c,OAAQ,CACN/P,qBAAsBwP,EACtBsI,iBATD,IACLtI,EACAsI,Ed6eE,MAAMzT,QAAiB/C,GACrBuW,EACAruB,KAAK0qB,kBAGP,GcreG,SAA+B7P,GACpC,OAAO,GAAYA,EAAS7V,MAC9B,CdmeQwpB,CAAsB3T,GACxB,OAAO,EAGT,MAAM,IAAImP,GAAyB,yBAA0BnP,EAC/D,CAMO,wBAAMuS,CAAmB9G,GAC9B,MAAMxM,EejgByC,EACjDkM,EACAM,KACkD,CAClDvO,UAAW,KAAkB0W,qBAC7B/kB,KAAM,CACJ6c,OAAQ,CACN/P,qBAAsBwP,GAExBI,eAAgB,CACd3X,QAAS,CAAE6X,QACXlmB,KAAMmP,GAAA,EAAY8W,SfsfAqI,CAClB1uB,KAAKwW,qBACL8P,SAGIxO,GAAcgC,EAAa9Z,KAAK0qB,iBACxC,CAKO,oBAAMiE,CACXC,EACAC,GAEA,MAAM/U,EgBjhBqC,EAC7C8U,EACAC,KACwC,CACxC9W,UAAW,KAAkB+W,gBAC7BplB,KAAM,CACJ+c,gBAAiB,CACfvU,GAAI0c,GAENG,mBAAoB,CAClB,CACEvY,qBAAsBqY,OhBsgBNG,CAAgCJ,EAAeC,GAEnE,OAAO/W,GAAcgC,EAAa9Z,KAAK0qB,iBACzC,CAEU,2BAAAuE,SACRjvB,KAAKqqB,SAAU,EACD,QAAd,EAAArqB,KAAK4qB,iBAAS,SAAEnT,WAAU,EAC5B,CAEU,gDAAAyX,CACRruB,GAEA,MAAMsuB,EAActuB,EAAMoN,OAErByY,GAA4ByI,IAI7BA,EAAYzlB,KAAKid,KAAKjM,SAAW0U,GAAA,EAAc/lB,QAEjDrJ,KAAKwqB,cAAc6E,OAEvB,CAEQ,+CAAA/D,CAENJ,EAAgBvL,mBAEhB,IAAIrP,EAEJ,MAAMgf,EAAwB9M,KACxB+M,EAAoB5e,IAGxB3Q,KAAKuqB,0BACJ+E,GAAyBC,KAE1Bjf,EAAc,CACZE,MAA0C,QAAnC,EAAA8e,aAAqB,EAArBA,EAAuBE,oBAAY,QAAID,aAAiB,EAAjBA,EAAmB/e,QAKrEwF,GACEhW,KAAKwqB,cACLU,EAAYzE,gBAAgB9P,cAG9B,MAAM8P,EAAkB,CACtB9P,aAAcP,GAAqBpW,KAAKwqB,gBAI1C,IAAIhE,EAUJ,OATK7G,IACW,QAAd,EAAA3f,KAAK4qB,iBAAS,SAAE5U,yBAC8C,QAA3D,EAA6C,QAA9C,EAACkV,EAAqC1E,gBAAQ,eAAE7P,oBAAY,QAAI,IAElE6P,EAAW,CACT7P,aAAoD,QAAtC,EAAc,QAAd,EAAA3W,KAAK4qB,iBAAS,eAAExU,8BAAsB,QAAI,KAIrD,OAAP,wBACK8U,GAAW,CACd5a,cACAkW,WACAC,mBAEJ,CAEQ,sBAAAoE,GACN7qB,KAAKutB,cAAc3O,GAAUqC,cAAc,IACzCjhB,KAAKivB,gCAEPjvB,KAAKutB,cAAc3O,GAAUI,iBAAiB,IAC5Chf,KAAKivB,gCAEPjvB,KAAKutB,cAAc3O,GAAU2C,kBAAkB,IAC7CvhB,KAAKivB,gCAEPjvB,KAAKutB,cAAc3O,GAAUK,wBAAyBpe,GACpDb,KAAKkvB,iDAAiDruB,IAE1D,EiBtmBK,SAAS4uB,GACdzJ,GAEA,MAAM8D,EAAY,CAChB/R,UAAW,KAAkB2X,iBAC7BhmB,KAAM,CAAC,GAGT,YAAmCvF,IAA/B6hB,EACK8D,EAGF,OAAP,wBACKA,GAAS,CACZpgB,KAAM,CACJ6c,OAAQ,CAAE/P,qBAAsBwP,KAGtC,CCKO,MAAM2J,WAAuBzF,GAIlC,WAAAne,CACEyK,EACAS,EACAkT,EACA7T,EACAK,EAAmC,CAAC,EACpCyT,GAAkC,GAElCxZ,MACE4F,EACAS,EACAkT,EACA7T,EACAK,EACAyT,GAjBM,KAAAwF,gBAA0B,EAC1B,KAAAC,iBAA2B,EAmBnC7vB,KAAK8vB,gCACP,CAQgB,OAAAhF,GACd,OAAO,IAAItD,IAAiBhS,MAAO7K,EAAS6Z,KAC1C,MAAM3J,QAAiB/C,GACrB2X,GAAuCzvB,KAAKwW,sBAC5CxW,KAAK0qB,kBAGP,GAAIlB,GAAwB3O,GAAW,CACrC,MAAM,EAA4CA,EAASnR,MAArD,QAAEqhB,EAAO,gBAAEtE,GAAe,EAAKuE,2UAAQ,GAAvC,+BAENrgB,EAAQ,OAAD,wBACFqgB,GAAQ,CACXD,QAASA,QAAAA,EAAWtE,UAGtBjC,EAAO,IAAIyF,GAAyB,sBAAuBpP,MAGjE,CAEgB,iBAAMoQ,CACpBC,GAEA,IAA6B,IAAzBlrB,KAAK6vB,gBACP,MAAM,IAAI,EAAa,wCAGzB,OAAOjf,MAAMqa,YAAYC,EAC3B,CAMO,eAAM6E,CACXC,EAAqB,sBAErB,GAAIhwB,KAAK4vB,eACP,MAAM,IAAI,EAAa,+BAGzB,IACE,MAAM9gB,QAAe9O,KAAKurB,gBAAgByE,GAG1C,OAFAhwB,KAAK4vB,gBAAiB,EAEf9gB,EACP,MAAO9J,GACP,GAAIA,aAAiB8F,MACnB,MAAM,IAAI,EACR,8CAA8C9F,EAAMyB,YAIxD,OAEJ,CAEO,aAAMwpB,SACX,MAAMC,EAA2C,QAA9B,EAAA9f,EAAmBgc,mBAAW,QAAI,CAAC,EAChD+D,EAAYD,aAAU,EAAVA,EAAYC,UAE9B,GAAI,GAAYA,GACd,MAAM,IAAI,EACR,qEAIErY,GCvHH,SACLkO,EACAmK,GAEA,MAAO,CACLpY,UAAW,KAAkBqY,YAC7B1mB,KAAM,CACJ6c,OAAQ,CAAE/P,qBAAsBwP,GAChC+E,QAAS,CAAE7Y,GAAIie,IAGrB,CD6GME,CAA2BrwB,KAAKwW,qBAAsB2Z,GACtDnwB,KAAK0qB,iBAIT,CAQO,sBAAMuB,SACX,MAAM,YAAEC,EAAW,sBAAEC,EAAqB,UAAEgE,GACZ,QAA9B,EAAA/f,EAAmBgc,mBAAW,QAAI,CAAC,EAErC,GAAI,GAAQF,IAAgB,GAAQiE,GAClC,OAAO,KAGT,MAAM9D,EAAuD,CAC3DH,YAAargB,OAAOqgB,GAEpBC,wBACA5F,OAAQ,CAAE/P,qBAAsBxW,KAAKwW,sBAErCuU,QAAS,CACP7Y,GAAIie,IAIFtV,QAAiB/C,GACrBsP,GAAkCiF,GAClCrsB,KAAK0qB,kBAGP,GAAIzD,GAA4BpM,GAC9B,OAAOA,EAGT,MAAM,IAAI+O,GACR,4BACA/O,EAEJ,CAEQ,8BAAAiV,GACN9vB,KAAKutB,cACH3O,GAAUwC,oBACTvgB,IACM2oB,GAAwB3oB,EAAMoN,SAInCjO,KAAKivB,6BAA6B,GAGxC,EErLK,MAAMqB,GACX5mB,IAEI,EAAOA,IAIJ,YAAcA,ECPhB,SAAS6mB,GAAeJ,SAC7B,MAAMK,EAAmD,QAA9B,EAAApgB,EAAmBgc,mBAAW,QAAI,CAAC,EAE9Dhc,EAAmBgc,YAAc,OAAH,wBACzBoE,GAAkB,CACrBL,aAEJ,CCHO,SAASM,GACdpJ,aAeA,OAbIT,GAAsBS,IAGxBkJ,GAFkBlJ,EAAU3d,KAAKid,KAAKzU,IAKpCsX,GAAwBnC,IAI1BkJ,GAHyD,QAAtC,EAA8B,QAA9B,EAAAlJ,EAAU3d,KAAK+c,uBAAe,eAAEiK,cAAM,QACjC,QAAtB,EAAArJ,EAAU3d,KAAKqhB,eAAO,eAAE7Y,IAKrBmV,CACT,CCNA,SALA,SAAcsJ,GACZ,IAAIjwB,EAAkB,MAATiwB,EAAgB,EAAIA,EAAMjwB,OACvC,OAAOA,EAASiwB,EAAMjwB,EAAS,QAAKyD,CACtC,ECPO,SAASysB,GAAsBC,WACpC,MAAM1E,EAA4D,QAApC,KAAgB0E,EAAW1J,iBAAS,eAAErH,UAE9DgR,EAA8C,QAA9B,EAAA1gB,EAAmBgc,mBAAW,QAAI,CAAC,EAEzDhc,EAAmBgc,YAAc,OAAH,wBACzB0E,GAAa,CAChB5E,YAAa2E,EAAW3E,YACxBC,sBAAuB,GAAYA,GAC/B,GACAA,GAER,CChBO,SAAS4E,GACd1J,GAEA,GAAImC,GAAwBnC,GAAY,CACtC,MAAM,SAAEF,EAAQ,oBAAE6J,GAAwB3J,EAAU3d,KAEpDknB,GAAsB,CACpBzJ,WACA+E,YAAa8E,IAIjB,GAAI/J,GAA4BI,GAAY,CAC1C,MAAM,YAAE6E,EAAW,SAAE/E,GAAaE,EAAU3d,KAE5CknB,GAAsB,CAAE1E,cAAa/E,aAGvC,OAAOE,CACT,CChBO,SAAS4J,GACdlzB,GAEA,GAAqB,mBAAVA,EACT,MAAM+M,MAAM,qCAAqC/M,IAErD,itBCuFO,MAAMmzB,GAsBX,WAAAnlB,CAAY/I,aACV,gBAnBK,KAAA2V,UAAuB,GAE9B,oBACA,oBACA,oBACA,oBACA,oBACA,YAA2C,MAE3C,YAAsD,IAAIrD,KAC1D,YAGI,IAAIA,KACR,YAAwC,IAAI8J,IAC5C,oBACA,YCpHK,WACL,IAAIzU,EAAS6Z,EAMb,MAAO,CAAEyD,QALO,IAAIvd,SAAQ,CAACymB,EAAKC,KAChCzmB,EAAUwmB,EACV3M,EAAS4M,CAAG,IAGIzmB,UAAS6Z,SAC7B,CD4GoB6M,IAqnBlB,aAAyB7b,UACvB,MAAMlF,EAAcK,IACpB,GAAI,EAAOL,GACT,OAGF,MAAMghB,QAA6BxZ,IE/uBrCtH,EFgvB8BF,EAAYE,ME9uBnC,CACLuH,UAAW,KAAkBwZ,cAC7B7nB,KAAM,CACJ4G,YAAa,CACXE,YF2uBF,GAAAxQ,KAAI,SElvBH,IACLwQ,EFovBE,GAAIoK,GAAgC0W,GAQlC,OAPAjhB,EAAeihB,EAAqB5nB,KAAK4G,kBAEzC6J,GACEmX,EAAqB5nB,KAAK4G,YAC1B,GAAAtQ,KAAI,SAMR,MAAM,IAAIgR,EACR,sDACAsgB,EAAqBtsB,MACtB,SA3oBeb,IAAZnB,EACF,MAAM,IAAI,EACR,yDAIJ,GAAAhD,KAAI,GAAkBgD,EAAQwuB,cAAa,KAC3C,GAAAxxB,KAAI,GAAiBgD,EAAQyuB,aAAY,KACzC,GAAAzxB,KAAI,GAAegD,EAAQmU,WAAU,KAErC/G,EAAmBshB,mBAAqB1uB,EAAQ2uB,kBAChDvhB,EAAmBsI,SAAW1V,EAAQK,QACtC+M,EAAmBwI,WAAa5V,EAAQ2V,UACxCvI,EAAmB8M,SAA0B,QAAf,EAAAla,EAAQ4uB,eAAO,QG1IzB,eH2IpBxhB,EAAmByhB,YAAc,GAAqB,QAAlB,EAAA7uB,EAAQ8uB,kBAAU,QAAI,IAE1D1hB,EAAmB4I,YAAchW,EAAQ+uB,cACzC3hB,EAAmB8I,SAAWlW,EAAQgvB,QACtC5hB,EAAmBgJ,WAAapW,EAAQgP,UACxC5B,EAAmB6hB,SAA2B,QAAhB,EAAAjvB,EAAQiY,gBAAQ,QAAIF,KAClD3K,EAAmB4N,gBnFnIyB,CAC9CkU,IAEA,GAAI,GAAMA,GACR,OAAO,KAOT,IAA0B,IAJAr0B,OAAOs0B,OAAOrU,IAAgBnM,SACtDugB,GAIA,MAAM,IAAI,EACR,wCAAwCA,KAI5C,OAAOA,CAAsC,EmFkHNE,CACnCpvB,EAAQqvB,gBAGV,GAAAryB,KAAI,GAAaiY,GAAiBC,OAAM,UAEN,IAAvBlV,EAAQmU,YI/IhB,SAAkCmb,GACvC,GACEnU,OAC8C,IAA9CF,WAC4B,IAArBqU,EAEP,MAAM,IAAI,EACR,kEAI4B,iBAArBA,GACTra,GAAiBG,cAAcxB,MAAM0b,EAEzC,CJkIMC,CAAyBvvB,EAAQmU,YAG/BnU,EAAQwvB,eACVvB,GAAiBjuB,EAAQwvB,aAAaC,SACtCxB,GAAiBjuB,EAAQwvB,aAAaE,SACtCzB,GAAiBjuB,EAAQwvB,aAAaG,YACtCviB,EAAmBwiB,cAAgB5vB,EAAQwvB,cAG7C,MAAM,QAAEnvB,EAAO,UAAEsV,GAAcF,KAE/BzY,KAAKqjB,QAAUrgB,EAAQqgB,QACvBrjB,KAAK6yB,WAAa7vB,EAAQ6vB,WAG1B,GAAA7yB,KAAI,QAA8Bsf,SAASkC,IAC3C,GAAAxhB,KAAI,QAA8Bsf,SAASvC,IAC3C,GAAA/c,KAAI,QAA8Bsf,SAASyR,IAC3C,GAAA/wB,KAAI,QAA8Bsf,SAASmR,IAE3C,GAAAzwB,KAAI,GAAmB,IAAIyf,GAAiB,KAE5C,IACE,GAAI7iB,MAAMyG,GACR,MAAM,IAAIyH,MAAM,mBAElB,QAAkB3G,IAAdwU,EACF,MAAM,IAAI7N,MAAM,qBAElB,QAA2B3G,IAAvBnB,EAAQmU,aAA6BgH,KACvC,MAAM,IAAIrT,MAAM,sBAGlB9K,KAAK2Y,UAAYA,EACjB3Y,KAAK8yB,WAAa9vB,EAAQ8vB,WAC1B,GAAA9yB,KAAI,GACF+d,OAA4BD,GAAeiV,aAC3C/vB,EAAQonB,uBAAsB,KAEhC,GAAApqB,KAAI,WAAiB,KAArBA,KAAsBgD,GACtB,MAAOgC,GACP,GAAAhF,KAAI,WAAgB,KAApBA,KAAqBgF,GAEzB,CAQO,aAAMue,CAAQoO,GAKnB,OAJIA,IACFvhB,EAAmBshB,mBAAqBC,GAGZ,OAA1B,GAAA3xB,KAAI,gBAGF,GAAAA,KAAI,WAAkB,KAAtBA,MAEFme,YACIne,KAAKgzB,aAIY7uB,IAArB,GAAAnE,KAAI,SACN,GAAAA,KAAI,QAAW4W,MAAM,GAAA5W,KAAI,cAGAmE,IAAvB,GAAAnE,KAAI,SACN,GAAAA,KAAI,QAAW6W,QAAQ,GAAA7W,KAAI,cAGDmE,IAAxB,GAAAnE,KAAI,SACN,GAAAA,KAAI,QAAW+W,SAAS,GAAA/W,KAAI,SAGA,OAA1B,GAAAA,KAAI,SACN,GAAAA,KAAI,QAAW2X,mBAAmB,GAAA3X,KAAI,SAIxC,GAAAA,KAAI,QAAQ2K,WAEL,EACT,CAEO,WAAMqoB,GACX,OAAO,GAAAhzB,KAAI,QAAQioB,OACrB,CAoBO,oBAAMgL,GACX,OAAO3V,GACLlN,EAAmBsI,SACnBtI,EAAmBwI,WACnBxI,EAAmB6hB,SAEvB,CAQO,4BAAMiB,GACX,OKvQG1d,eACLnS,EACAsV,GAEA,MAAM6E,EAA0BpN,EAAmBqN,cAE7C5C,QAAiB6C,MACrB,GAAGF,oBAA0Cna,aAAmBsV,iBAChE,CACEgF,OAAQ,MACRC,QAAS,OAAF,UACFZ,QAKT,IAAKnC,EAASgD,GAAI,CAGhB,GAAIhB,SAFoBM,GAAqBtC,IAG3C,MAAM,IAAI+B,GAGZ,MAAM,IAAI,EACR,iDAAiD/B,EAASH,UAC1D,CAAEG,aAIN,OAAOA,EAASuC,MAClB,CLyOW+V,CACL/iB,EAAmBsI,SACnBtI,EAAmBwI,WAEvB,CAUO,eAAM+F,CACXgT,EACA3f,qBAKMhS,KAAKgzB,QAEX,MAAM1iB,EAAcK,IAGpB,GAAoB,OAAhBL,EACF,IACE,MAAM8iB,QMxSP5d,eACLyB,EACAoc,EACA/iB,EACA0B,GAEA,MAAMshB,EAAmBtZ,GAA2B1J,EAAa0B,GAE3D6I,QAAiB/C,GAAcwb,EAAkBrc,GAIvD,QAFoC9S,IAAnB0W,EAAS7V,MAGxB,MAAM,IAAIgM,EACR,iCACA6J,EAAS7V,OAUb,OAFAmV,GAAmB7J,EAAa+iB,GAJsC,CACpEE,aAAa,EAMjB,CN8QwCC,CAC9B,GAAAxzB,KAAI,QACJ,GAAAA,KAAI,QACJsQ,EACA0B,GAGF,OAAOohB,EACP,MAAOpuB,IAKX,MAAMyuB,EOvTHje,eACL4U,EACA0I,GAKA,IAAK,GAAY1I,KAA4B,GAAY0I,GACvD,MAAO,CACL1I,yBACA0I,cAIJ,MAAMY,QAAoBpW,GACxBlN,EAAmBsI,SACnBtI,EAAmBwI,YAGrB,MAAO,CACLwR,uBAAwBsJ,EAAYtJ,uBACpC0I,WAAYY,EAAYC,WAE5B,CPgSoCC,CAC9B,GAAA5zB,KAAI,QACJA,KAAK8yB,YAIDe,EQ5TH,SACLlC,EACA3f,EAAuBb,KAEvB,OAAO,OAAP,QACE4G,UAAW,KAAkB+b,mBAC7BpqB,KAAM,CACJqqB,cAAe,CACbpC,qBAEFqC,oBAAoB,EACpBC,WAAY/iB,EACZgjB,YAAa,QAEZniB,EAAqBC,GAE5B,CR4SqCmiB,CAC2B,QAA1D,EAAAxC,QAAAA,EAAqBvhB,EAAmBshB,0BAAkB,QAAI,KAC9D1f,GAGIoiB,EAAY1a,GAChBb,GAAmBgb,GACnB1iB,IACAyI,EAAA,EAA8Bya,UAG1BC,EAAuB/e,GAAY6e,EAAW,GAAAp0B,KAAI,UAEjDu0B,EAAcC,SAA0B9pB,QAAQob,IAAI,CACzDwO,EACAb,IAGF,IAAKhZ,GAAmB8Z,GAGtB,MAFqB,QAArB,KAAAv0B,KAAI,eAAiB,SAAEwjB,aAEjB,IAAIxS,EAAmB,uBAAwBujB,EAAavvB,OAIpE,MAAM,iBAAEqU,EAAgB,SAAE/C,EAAQ,QAAEyU,GAAYwJ,EAAa7qB,KAGvDyN,EAAakC,aAAgB,EAAhBA,EAAkB7C,qBACrC,GSxVC,GALHc,ET6ViCH,ISvVU,KAAzCG,ET0VE,MAFqB,QAArB,KAAAtX,KAAI,eAAiB,SAAEwjB,aAEjB,IAAI,EAAa,6BSjWtB,IACLlM,ET8XE,OA3BAjB,GAAoB,GAAArW,KAAI,QAAYqZ,IAEhC/C,aAAQ,EAARA,EAAUK,eACZ,GAAA3W,KAAI,QAAWgW,yBAAyBM,EAASK,eAI/CoU,aAAO,EAAPA,EAASpU,eACXX,GACE,GAAAhW,KAAI,QACJ+qB,EAAQpU,cAKZ,GAAA3W,KAAI,GAA2Bw0B,EAAiBpK,uBAAsB,KACtEpqB,KAAK8yB,WAAa0B,EAAiB1B,gBAGU3uB,KAAZ,QAA7B,EAAAowB,EAAa7qB,KAAK4G,mBAAW,eAAEE,SACjCH,EAAekkB,EAAa7qB,KAAK4G,aACjC6J,GACEoa,EAAa7qB,KAAK4G,YAClB,GAAAtQ,KAAI,UAIDu0B,EAAa7qB,IACtB,CAQO,gCAAM+qB,CACXzO,EACA/f,GAEA,MAAM6I,QAAegJ,GU1YlB,SACL4V,EACAznB,GAEA,MAAO,CACL8R,UAAW,KAAkB2c,6BAC7BhrB,KAAM,CACJ6c,OAAQ,CACN/P,qBAAsBkX,GAExBznB,OAGN,CV8XM0uB,CACE3O,EACA/f,GAEF,GAAAjG,KAAI,SAGN,K7FnZF,uB6FmZiD8O,EAAOpF,MACpD,MAAM,IAAI,EACR,mFAIJ,MAAM,mBAAEkrB,GAAuB9lB,EAAOpF,KAEtC,OAAOkrB,CACT,CASO,WAAAC,CACLz0B,EACAotB,GAIA,OAFA,GAAAxtB,KAAI,QAAiBG,iBAAiBC,EAAMotB,GAErC,KACL,GAAAxtB,KAAI,QAAiBO,oBAAoBH,EAAMotB,EAAQ,CAE3D,CAKO,WAAAsH,GACL,OAAO,GAAA90B,KAAI,OACb,CAOO,SAAA+0B,CAAU7iB,GACf,GAAI,EAAO,GAAAlS,KAAI,SACb,MAAM,IAAI,EACR,uDAIJ,GAAI,GAAMkS,GACR,MAAM,IAAI,EAAa,6CAGzB,MAAM8iB,EAAe,GAAAh1B,KAAI,QAAcmB,IAAI+Q,GAC3C,IAAK,GAAY8iB,GACf,OAAOA,EAGT,IAAwB,IAApBh1B,KAAK8yB,WAAqB,CAC5B,MAAMmC,EAAa,IAAItF,GACrBzd,EACA,GAAAlS,KAAI,QACJ,GAAAA,KAAI,QACJ,GAAAA,KAAI,QACJA,KAAKk1B,mCACL,GAAAl1B,KAAI,SAIN,OAFA,GAAAA,KAAI,QAAc2I,IAAIuJ,EAAI+iB,GAEnBA,EAGT,MAAM1O,EAAS,IAAI2D,GACjBhY,EACA,GAAAlS,KAAI,QACJ,GAAAA,KAAI,QACJ,GAAAA,KAAI,QACJA,KAAKk1B,mCACL,GAAAl1B,KAAI,SAIN,OAFA,GAAAA,KAAI,QAAc2I,IAAIuJ,EAAIqU,GAEnBA,CACT,CAMO,mBAAM4O,GACX,GAAI,EAAO,GAAAn1B,KAAI,SACb,MAAM,IAAI,EACR,4DAIJ,MAAMo1B,EAAe,CACnBrd,UAAW,KAAkBsd,kBAC7B3rB,KAAM,CAAC,GAGHoF,QAAegJ,GAAcsd,EAAc,GAAAp1B,KAAI,SAErD,IAAKswB,GAAgCxhB,EAAOpF,MAC1C,MAAM,IAAI,EACR,2DAIJ,OAAOoF,EAAOpF,KAAK4rB,OACrB,CAMO,kBAAAC,GACL,OAAO,GAAAv1B,KAAI,OACb,CASO,wBAAMw1B,CACXC,GAEA,MWzgB8BjgB,OAChCigB,EACAxe,KAEA,MAAMye,E7EX2C,CACjDD,IAEA,MAAOhf,KAAaZ,GAAS4f,EAAmB5kB,KAAK7T,MAAM,KAAK24B,UAC1D/f,EAAYC,EAAM8f,UAAU91B,KAAK,KAEjC+1B,EAAyB,CAC7Bpf,qBACEif,EAAmB5G,MACrBjZ,YACAa,YAGI/M,EAAO,CACX0c,eAAgB,CACdhmB,KAAMmP,GAAA,EAAY8W,KAClB5X,QAAS,CACP6X,KAAMmP,EAAmBhvB,UAG7BmvB,0BAGF,MAAO,CACL7d,UAAW,KAAkB8d,qBAC7BnsB,OACD,E6EdCosB,CAAoCL,GAEhC5a,QAAiB/C,GACrB4d,EACAze,GAGF,GAAIwK,GAA8B5G,GAChC,OAAOA,EAGT,MAAM,IAAI6G,GAAuB,8BAA+B7G,EAAS,EXyfhE2a,CAAmBC,EAAoB,GAAAz1B,KAAI,QACpD,CAOO,iBAAA+1B,CACL/P,OAEgB7hB,GAEhB,OAAO,IAAIqjB,IAAiBhS,MAAO7K,EAAS6Z,KAC1C,MAAMwR,EAAenM,GACnB7D,GAEIiQ,QAAwBne,GAC5Bke,EACA,GAAAh2B,KAAI,SAGFwpB,GAAwByM,IAE1Bj2B,KAAK+0B,UAAUkB,EAAgBvsB,KAAK6c,OAAO/P,sBAE3C,GAAAxW,KAAI,QAAiBY,cACnB,IAAIue,GAAgBP,GAAU2C,iBAAkB,CAC9CtT,OAAQgoB,KAIZtrB,EAAQsrB,IAERzR,EACE,IAAI,EAAa,oDAIzB,CAOO,yBAAA0R,CACLlQ,OAEgB7hB,GAEhB,OAAO,IAAIqjB,IAAiBhS,MAAO7K,EAAS6Z,KAC1C,MAAMwR,EAAevG,GACnBzJ,GAEIiQ,QAAwBne,GAC5Bke,EACA,GAAAh2B,KAAI,SAGFwpB,GAAwByM,IAE1Bj2B,KAAK+0B,UAAUkB,EAAgBvsB,KAAK6c,OAAO/P,sBAE3C,GAAAxW,KAAI,QAAiBY,cACnB,IAAIue,GAAgBP,GAAUwC,mBAAoB,CAChDnT,OAAQgoB,KAIZtrB,EAAQsrB,IAERzR,EACE,IAAI,EAAa,oDAIzB,CAOO,kBAAM2R,CACXhf,EAAmDhG,IACnDsgB,EAAuB,GACvBD,EAAwB,GACxBxf,EAAuB,GACvBggB,EAAmB7gB,WAGE,QAArB,KAAAnR,KAAI,eAAiB,SAAEwjB,aACvB,GAAAxjB,KAAI,GAAoB,KAAI,KAC5B,GAAAA,KAAI,QAAcqvB,QAClB,GAAArvB,KAAI,QAA2BqvB,QvJ5lBjCjf,EAAmBG,kBAAepM,EAClCiM,EAAmBK,6BAA0BtM,E0FlB7CiM,EAAmBqS,uBAAoBte,EJmBlCiM,EAAmBwiB,eAIxBxiB,EAAmBwiB,cAAcD,WAAWhR,IiE2lB1C,GAAA3hB,KAAI,QAAWqX,UAGfjH,EAAmB8I,SAAW8Y,EAC9B5hB,EAAmBgJ,WAAapH,EAEhC,UACQ,GAAAhS,KAAI,WAAkB,KAAtBA,MACN,GAAAA,KAAI,GAAa,IAAIgX,GACnBG,EACAsa,EACAD,EACA,GAAAxxB,KAAI,SACL,KACD,MAAOgC,GACP,GAAAhC,KAAI,WAAgB,KAApBA,KAAqBgC,GAEzB,CAmFA,gCAAAkzB,GACE,GAAI,GAAAl1B,KAAI,QAA2B+I,KAAO,EAAG,CAC3C,MAAMgN,EAASG,GAAgB,GAAAlW,KAAI,SAGnC,OAFA,GAAAA,KAAI,QAA2BqvB,QAExBtZ,EAGT,MAAO,CAAC,CACV,EYjuBK,SAASqgB,GACdv1B,WAEA,OACEA,EAAMT,OAASwe,GAAUG,6BAC+B5a,KAAT,QAA/C,EAAyC,QAAzC,EAACtD,EAAoC6I,YAAI,eAAEid,YAAI,eAAEzU,GAErD,CCLO,SAASmkB,GACdx1B,WAEA,OACEA,EAAMT,OAASwe,GAAUC,2BAEvB1a,KAD6C,QAA/C,EAAuC,QAAvC,EAACtD,EAAkC6I,YAAI,eAAE6c,cAAM,eAAE/P,qBAGrD,CCRO,SAAS8f,GACdz1B,WAEA,OACEA,EAAMT,OAASwe,GAAUE,yBAEvB3a,KAD2C,QAA7C,EAAqC,QAArC,EAACtD,EAAgC6I,YAAI,eAAE6c,cAAM,eAAE/P,qBAGnD,gNdkOkBxR,GACd,MAAMuxB,EAAW,IAAI,EAAavxB,GAElC,GAA4B,mBAAjBhF,KAAKqjB,QAMhB,MAAMkT,EALJv2B,KAAKqjB,QAAQkT,EAMjB,EAAC,GAiZD/gB,uBACE,MAAM,QAAEnS,EAAO,UAAEsV,GAAcF,KACzB+d,EAAWpmB,EAAmBmO,iBAC9BuT,EAAa1hB,EAAmByhB,YACtC,IAAIvhB,GDppBD,SACLvS,GAEA,GAAI,MAAOA,EACT,MAAM+M,MAAM,mCAAmC/M,IAEnD,CCgpBI04B,CAAkBD,GAElB,MAAMxkB,EAAyC,QAA7B,EAAA5B,EAAmBgJ,kBAAU,QAAI,GAEnD,GAAI+E,KAAoB,CACtB,MAAMhH,EAAa8G,KACf,GAAAje,KAAI,QAAWoX,QACf,KACEua,EAAoB,GAAA3xB,KAAI,QAC1BoQ,EAAmBshB,wBACnBvtB,EACEuyB,EAAW3Y,OAA4BD,GAAeiV,YAE5D,IACE,MAAM4D,Oe5mBqBnhB,OACjCmc,EACAra,EACAof,GAAoB,KAGpB,GAAIA,EAAU,CACZ,MAAME,EhFxDHxmB,EAAmBwiB,cAIjBxiB,EAAmBwiB,cAAcH,QAAQ9Q,IAHvC,KgFwDP,GAAIiV,EACF,MAAO,CAAEtmB,YAAasmB,EAAwBC,QAAQ,GAI1D,MAAMzU,EAAeD,KACrB,IACE,MAAMzY,QAAaoY,GACjBM,EAtCN,SACEuP,EACAra,GAEA,MAAM7I,EAAU,CAAC,EAejB,OAbIkjB,IACDljB,EAAuCmU,WAAa,CACnDkU,mBAAoBnF,EACpB9O,WAAY,uBAIX,GAAMvL,KACR7I,EAA0C8H,iBAAmB,CAC5DC,qBAAsBc,IAInB7I,CACT,CAmBMsoB,CACEpF,EACAra,GAEF,CACEyL,YAAa,YAMjB,OhFrEFvS,EgFmEwB9G,EAAK4G,YhFlE7BI,EgFkE0ChH,EAAKgH,UhFhE1CN,EAAmBwiB,eAIxBxiB,EAAmBwiB,cAAcF,QAC/B/Q,GACAnR,EACY,IAAZE,GgF2DOhH,EACP,MAAO1E,GACP,GAAIA,aAAiB,EACnB,MAAMA,EAGR,MAAM,IAAI,E/ErFZ,oC+EqF+DA,GhF5E5B,IACnCwL,EACAE,GiEopB6CsmB,CACrCrF,EACAxa,EACAuf,GAEFpmB,EAAcqmB,EAAyBrmB,YAEvC,MAAM,iBAAEiG,EAAgB,WAAEqM,EAAU,QAAEmI,GACpC4L,EAEEpgB,GACFF,GAAoB,GAAArW,KAAI,QAAYuW,GAGlCqM,GACFI,GAAyBJ,IAGvBmI,aAAO,EAAPA,EAASpU,eACXX,GACE,GAAAhW,KAAI,QACJ+qB,EAAQpU,cAGZ,MAAO3R,GACP,GAAAhF,KAAI,WAAgB,KAApBA,KAAqBgF,IAKzB,GAAAhF,KAAI,QAAQ2K,UAEZ,MAAMnL,EAAkB,OAAH,oCACnBy3B,EAAGnF,EACHoC,YAAa,MACbD,WAAY/iB,EACZ7N,UACAsV,aACIwF,KAAqB,CAAC,EAAI,CAAEhH,WAAY,GAAAnX,KAAI,QAAWoX,UAAU,CACrEpF,cACImM,KAAqB,CAAE+Y,iBAAkB5mB,GAAgB,CAAC,GAG1D6mB,GACJ,OAA8B33B,GAE1ByG,EAAM,IAAIlC,IAAIyyB,GAGpB,OAFAvwB,EAAIjC,OAASmzB,EAENlxB,EAAI2L,UACb,EAAC,GAED4D,iBACE,IACE,GAAAxV,KAAI,GAAoB,GAAAA,KAAI,WAAQ,KAAZA,MAAc,WAChC,GAAAA,KAAI,QAAkBujB,UAC5B,MAAOve,GACP,GAAAhF,KAAI,WAAgB,KAApBA,KAAqBgF,GAEzB,EAAC,YA+CgBhC,GAEf,GAAIA,EAAQo0B,cAAgBhZ,GAAgBiZ,OAAQ,CAClD,GACE,GAAQr0B,EAAQs0B,oBAChB,GAAMt0B,EAAQs0B,mBAEd,MAAM,IAAI,EACR,0EAMJ,YAFAjZ,GAAwBrb,EAAQs0B,mBAMlC,MAAMhZ,ElF7wBH,SACL8Y,GAEA,KAAMA,KAAehZ,IACnB,MAAM,IAAI,EAAa,wBAAwBgZ,KAGjD,GAAIA,IAAgBhZ,GAAgBiZ,OAClC,MAAM,IAAI,EACR,iFAYJ,MAAO,CACL5Y,KARA,uBAAuB2Y,sBAAgCG,cASvD1mB,KANWumB,EAOX5Y,QARA,yBAAyB4Y,sBAAgCG,cASzD5Y,UANA,4BAA4ByY,sBAAgCG,cAQhE,CkFkvBsBC,CAA0Bx0B,EAAQo0B,aACpD/Y,GAAwBC,EAC1B,EAAC,cAGC,MAAMmZ,EAAS,IAAIvzB,GACjBlE,KAAKqjB,QACL,GAAArjB,KAAI,WAAkBikB,KAAKjkB,OA8B7B,OA3BAy3B,EAAO/T,GAAG,KAAqBxV,SAASsH,MAAO3U,IAC7C,IACiC,mBAApBb,KAAK6yB,YACd7yB,KAAK6yB,WAAWhyB,GAGlB,MAAMwmB,OgBzyBc7R,OAC1B6R,IAEA,GAAI,GAAMA,GACR,OAAO,KAGT,GAAmBA,ECHWjnB,OAASoP,GAAA,EAAoBkoB,YDIzD,OAAOrQ,EAGT,MAAMphB,EAAMohB,EAAU3d,KAAKiuB,SAAS1xB,IAE9B4U,QAAiB6C,MAAMzX,GAE7B,GAAI4U,EAASgD,GAGX,OAAOkC,SAFoBlF,EAASuC,QAKtC,MAAM,IAAI,EAAa,gCAAgC,EhBoxBzBwa,CkB3yBG,CACjC/2B,IAEA,MAAMsuB,EAActuB,aAAK,EAALA,EAAOoN,OAE3B,IAAKkhB,EACH,OAGF,IAAI9H,EAEJ,IACEA,EAAYpa,KAAKtQ,MAAMwyB,EAAYzlB,MACnC,MAAO1E,GACP,OAGF,OAAO+a,GAAesH,EAAU,ElB0xBWwQ,CAAoBh3B,IAEnDi3B,EACJ,GAAA93B,KAAI,QAA8B+U,QAAQsS,GAE5C,IAAK,GAAMyQ,GAAc,CACvB,MAAM,KAAE13B,GAAS03B,EkB7xBK,CAACj3B,IAC/B,MAAM,GAAEqR,GAAOrR,EAEf,GAAIwU,GAAa0iB,IAAI7lB,GAAK,CACxB,MAAMvH,EAAU0K,GAAalU,IAAI+Q,GAEV,mBAAZvH,GACTA,EAAQ9J,GAGVwU,GAAa2iB,OAAO9lB,KlBqxBd+lB,CAAiBH,GAEjB,GAAA93B,KAAI,QAAiBY,cACnB,IAAIue,GAAgB/e,QAAAA,EAAQ,GAAI,CAC9B6N,OAAQ6pB,MAId,MAAO9yB,GACP,GAAAhF,KAAI,WAAgB,KAApBA,KAAqBgF,OAIlByyB,CACT,EmBzzBK,MAAMS,GACXr3B,IAEA,MAAMs3B,EAA0Bt3B,EAEhC,OACEpC,OAAO25B,UAAUD,aAAuB,EAAvBA,EAAyBzuB,KAAK2uB,mBACN,IAAzC,GAAQF,aAAuB,EAAvBA,EAAyBjmB,MACjCimB,aAAuB,EAAvBA,EAAyB/3B,QAAS,KAAqBk4B,qBACxD,ECpBI,MAAMC,WAAoC,GCS1C,SAASC,GACdtmB,GAEA,MAAO,CACL6F,UAAW,KAAkB0gB,yBAC7B/uB,KAAM,CACJqhB,QAAS,CACP7Y,OAIR,CAQOsD,eAAekjB,GACpBC,EACAljB,GAEA,MAAMoF,QAAiB/C,GAAc6gB,EAA6BljB,GAElE,GAZK,SACLoF,GAEA,OAAOA,EAASza,OAASwe,GAAUga,yBACrC,CAQMC,CAA+Bhe,GACjC,OAAOA,EAGT,MAAM,IAAI0d,GAA4B,2BAA4B1d,EACpE,CCvCO,MAAMie,WAAiC,GCQvC,SAASC,GACdxvB,GAEA,MAAO,CACLwO,UAAW,KAAkBihB,gBAC7BtvB,KAAM,CACJuvB,WAAY,CACV1vB,SAIR,CAQOiM,eAAe0jB,GACpBC,EACA1jB,GAEA,MAAMoF,QAAiB/C,GAAcqhB,EAA0B1jB,GAE/D,GAZK,SACLoF,GAEA,OAAOA,EAASza,OAASwe,GAAUwa,iBACrC,CAQMC,CAA+Bxe,GACjC,OAAOA,EAGT,MAAM,IAAIie,GAAyB,yBAA0Bje,EAC/D,CC/BO,SAASye,GACdpnB,GAEA,MAAO,CACL6F,UAAW,KAAkBwhB,iBAC7B7vB,KAAM,CACJqhB,QAAS,CACP7Y,OAIR,CAEOsD,eAAegkB,GACpBC,EACAhkB,GAEA,OAAOqC,GAAc2hB,EAA2BhkB,EAClD,CCzBO,MAAMikB,WAAsC,GCS5C,SAASC,GACdjJ,EACAkJ,EACA/K,GAEA,MAAO,CACL9W,UAAW,KAAkB8hB,gCAC7BnwB,KAAM,CACJqhB,QAAS,CACP7Y,GAAIwe,GAENuI,WAAY,CACV1vB,KAAMqwB,GAERE,WAAY,CACV,CACEtjB,qBAAsBqY,KAKhC,CAQOrZ,eAAeukB,GACpBpB,EACAljB,GAEA,MAAMoF,QAAiB/C,GAAc6gB,EAA6BljB,GAElE,GAZK,SACLoF,GAEA,OAAOA,EAASza,OAASwe,GAAUob,sBACrC,CAQMC,CAAiCpf,GACnC,OAAOA,EAGT,MAAM,IAAI6e,GACR,+BACA7e,EAEJ,CCtDO,MAAMqf,WAA0BpvB,MACrC,WAAAiB,CAAYtF,GACVmK,MAAMnK,GACNzG,KAAK6Q,KAAO,mBACd,oTCmBK,MAAMspB,GAQX,WAAApuB,CAAYquB,GACV,GARF,sBASKA,GACAA,EAAQ3H,SACR2H,EAAQ1H,SACR0H,EAAQzH,YAET,MAAM,IAAIuH,GAAkB,qYAE9B,CAAAl6B,KAAI,GAAYo6B,EAAO,IACzB,CAMO,OAAA3H,CAAqB9yB,GAC1B,MAAM+oB,EAAO,GAAA1oB,KAAI,QAAUyyB,QAAQ9yB,GAEnC,IAAK+oB,EACH,OAAO,KAGT,MAAM,KAAEhf,EAAgB,UAAE2wB,EAAY,GACpCptB,KAAKtQ,MAAM+rB,GAGb,OAFkB2R,GAAY,IAAI39B,MAAOiB,WAExB,GAAY+L,IAC3B,GAAA1J,KAAI,QAAU2yB,WAAWhzB,GAElB,MAGF+J,CACT,CAMO,UAAAipB,CAAWhzB,GAChB,GAAAK,KAAI,QAAU2yB,WAAWhzB,EAC3B,CAQO,OAAA+yB,CAAQ/yB,EAAa+J,EAAe4wB,GACzC,MAAM5R,EAA0B,CAC9Bhf,OACA2wB,WAAW,IAAI39B,MAAOiB,UAAY28B,GAGpC,GAAAt6B,KAAI,QAAU0yB,QAAQ/yB,EAAKsN,KAAKC,UAAUwb,GAC5C,+BCpFK,SAAS6R,GACd9rB,GAEA,MAAuB,iBAAZA,GAAoC,OAAZA,GAI7B,gBAAiBA,IAIQ,IAAxBA,EAAQ8kB,WACjB,CCoEA","sources":["webpack://@brandembassy/chat-web-sdk/webpack/universalModuleDefinition","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/isoString.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/misc.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/timezone.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/query/queryParameters.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/Logger.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/eventTargetPolyfill/EventTargetPolyfill.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/index.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/pushUpdate/pushUpdateWebSocket.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/HeartBeatState.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/ReconnectingWebSocket.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/WebSocketClient.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/WebSocketClientEvent.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/initializeHeartbeat.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/node_modules/@brandembassy/be-javascript-utils/dist/collection/object.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/node_modules/@brandembassy/be-javascript-utils/dist/query/queryParameters.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/channel/ChannelInfo.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/user/BrowserFingerprint.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/contact/ContactStatus.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/http/headers.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/message/MessageDirection.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/message/MessageType.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/post/case/CaseStatus.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType.js","webpack://@brandembassy/chat-web-sdk/external umd \"ua-parser-js\"","webpack://@brandembassy/chat-web-sdk/webpack/bootstrap","webpack://@brandembassy/chat-web-sdk/webpack/runtime/compat get default export","webpack://@brandembassy/chat-web-sdk/webpack/runtime/define property getters","webpack://@brandembassy/chat-web-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@brandembassy/chat-web-sdk/webpack/runtime/make namespace object","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isNull.js","webpack://@brandembassy/chat-web-sdk/./src/variables/VariableStorage.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/accessTokenStorage.ts","webpack://@brandembassy/chat-web-sdk/./src/error/ChatSDKError.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/AuthorizationError.ts","webpack://@brandembassy/chat-web-sdk/./src/env/version.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/generateId.ts","webpack://@brandembassy/chat-web-sdk/./src/visitor/createVisitorPayload.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_isPrototype.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_nativeKeys.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_overArg.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseKeys.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_freeGlobal.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_root.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Symbol.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getRawTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_objectToString.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseGetTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isObject.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isFunction.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_coreJsData.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_isMasked.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_toSource.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsNative.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getNative.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getValue.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_DataView.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Map.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Promise.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Set.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_WeakMap.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isObjectLike.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsArguments.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArguments.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isLength.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isBuffer.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/stubFalse.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsTypedArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_nodeUtil.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isTypedArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseUnary.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isEmpty.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArrayLike.js","webpack://@brandembassy/chat-web-sdk/./src/request/requestQueue.ts","webpack://@brandembassy/chat-web-sdk/./src/request/makeRequest.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/splitName.ts","webpack://@brandembassy/chat-web-sdk/./src/customField/CustomFields.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/Customer.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/setCustomerCustomFieldsPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/CustomerInstance.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/customerIdentityPayload.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isNil.js","webpack://@brandembassy/chat-web-sdk/./src/utils/getBrandIdAndChannelId.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isUndefined.js","webpack://@brandembassy/chat-web-sdk/./src/sockets/EventPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/event/sendChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/createReconnectPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/handleRefreshToken.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isAuthorizationTokenGeneratedPostbackData.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isAuthSuccessEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isTokenRefreshedSuccessResponse.ts","webpack://@brandembassy/chat-web-sdk/./src/browserFingerprint/getBrowserFingerprint.ts","webpack://@brandembassy/chat-web-sdk/./src/error/SdkVersionNotSupported.ts","webpack://@brandembassy/chat-web-sdk/./src/event/middleware/sdkVersionCheck.ts","webpack://@brandembassy/chat-web-sdk/./src/request/defaultHeaders.ts","webpack://@brandembassy/chat-web-sdk/./src/request/getErrorResponseData.ts","webpack://@brandembassy/chat-web-sdk/./src/channel/fetchChannelInfo.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/SecureSessionsType.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/getSecuredSessionType.ts","webpack://@brandembassy/chat-web-sdk/./src/env/Environments.ts","webpack://@brandembassy/chat-web-sdk/./src/env/setEnvironmentEndpoints.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEventMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEventTarget.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/agentTyping.ts","webpack://@brandembassy/chat-web-sdk/./src/event/normalizeEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/event/middleware/ChatEventMapper.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/assignedAgentChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactCreated.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactStatusChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactToRoutingQueueAssignmentChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/livechatRecovered.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/threadRecovered.ts","webpack://@brandembassy/chat-web-sdk/./src/message/MessageSuccessEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/SendMessageFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOfflineMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/cachedTransactionToken.ts","webpack://@brandembassy/chat-web-sdk/./src/error/errorMessages.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/fetchJSON.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/getAuthorizeUrl.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/thirdPartyTokenStorage.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/refreshThirdPartyToken.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/handleNewThirdPartyToken.ts","webpack://@brandembassy/chat-web-sdk/./src/sockets/WebSocketClientError.ts","webpack://@brandembassy/chat-web-sdk/./src/sockets/WsEventTarget.ts","webpack://@brandembassy/chat-web-sdk/./src/sockets/WebSocketClient.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/UploadAttachmentError.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/sendAttachments.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/createPayloadForAttachmentUpload.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/localFileReader.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/uploadAttachment.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactStatusChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactCreatedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactToRoutingQueueAssignmentChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactRecipientsChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/createMessageData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/loadMoreMessagesEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/loadMoreMessagesPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/error/AbortError.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/AbortablePromise.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/ArchiveThreadFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getAuthor.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageCreatedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageSentEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageReadChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/GetMetadataFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isLoadMetadataSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isRecoverSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isThreadArchivedSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/LoadMoreMessagesFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/recoverThreadPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/SetThreadNameFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/ThreadRecoverFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/Thread.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/assertNonEmptyTextMessageContent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getTextMessageContent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getPostbackMessageContent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOutboundMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOutboundMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/lastMessageSeenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/typingEvents.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/metadata.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/threadEventHandler.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/setThreadCustomFieldsPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/archiveThread.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/updateThread.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessagePreviewPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/transcript.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/recoverLivechatThreadPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/LivechatThread.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/createEndThreadPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isThreadListFetchedPostbackData.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeContactId.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeContactIdMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/last.js","webpack://@brandembassy/chat-web-sdk/./src/thread/storeThreadScrollData.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeThreadScrollDataMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/assert.ts","webpack://@brandembassy/chat-web-sdk/./src/ChatSdk.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/getPromiseWithResolvers.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/createRefreshTokenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/env/appName.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/setCustomerIdFromOptions.ts","webpack://@brandembassy/chat-web-sdk/./src/channel/fetchChannelAvailability.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/authorizationReconnect.ts","webpack://@brandembassy/chat-web-sdk/./src/channel/handleBasicChannelInfo.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/authorizationPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/isCustomerIdentityIdValid.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/generateAuthorizationTokenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOfflineMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAssignedAgentChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAgentTypingStartedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAgentTypingEndedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/getTransactionToken.ts","webpack://@brandembassy/chat-web-sdk/./src/request/getEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/request/isS3ChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/request/messageHandler.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/isSetPositionInQueueEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/CreateInvitationFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/createInvitation.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/JoinGroupChatFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/joinGroupChat.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/leaveGroupChat.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/SendEmailInvitaionFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/sendEmailInvitation.ts","webpack://@brandembassy/chat-web-sdk/./src/storage/CacheStorageError.ts","webpack://@brandembassy/chat-web-sdk/./src/storage/CacheStorage.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/CustomerReconnectSuccessPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"ua-parser-js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"ua-parser-js\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"ua-parser-js\")) : factory(root[\"ua-parser-js\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__198__) => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseTimestampFromISO8601String = exports.fromISOString = exports.isISOStringDateWithTimezoneOffset = exports.toISOStringWithTimezoneOffset = exports.toISOStringWithMilliseconds = exports.toISOString = void 0;\nvar timezone_1 = require(\"./timezone\");\nvar misc_1 = require(\"./misc\");\nvar toISOString = function (date) {\n    return (date.getUTCFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCSeconds()) +\n        '+00:00');\n};\nexports.toISOString = toISOString;\nvar toISOStringWithMilliseconds = function (date) {\n    return (date.getUTCFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCSeconds()) +\n        '.' +\n        (date.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        '+00:00');\n};\nexports.toISOStringWithMilliseconds = toISOStringWithMilliseconds;\nvar toISOStringWithTimezoneOffset = function (date) {\n    return (date.getFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getSeconds()) +\n        (0, timezone_1.getTimezoneISOOffset)(date));\n};\nexports.toISOStringWithTimezoneOffset = toISOStringWithTimezoneOffset;\nfunction isISOStringDateWithTimezoneOffset(isoDateString) {\n    return /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})$/.test(isoDateString);\n}\nexports.isISOStringDateWithTimezoneOffset = isISOStringDateWithTimezoneOffset;\nfunction fromISOString(isoString) {\n    var milliseconds = Date.parse(isoString);\n    if (isNaN(milliseconds)) {\n        milliseconds = parseTimestampFromISO8601String(isoString);\n    }\n    return new Date(milliseconds);\n}\nexports.fromISOString = fromISOString;\nfunction parseTimestampFromISO8601String(isoString) {\n    var day;\n    var rx = /^(\\d{4}-\\d\\d-\\d\\d([tT][\\d:.]*)?)([zZ]|([+-])(\\d\\d):?(\\d\\d))?$/;\n    var parsedDate = rx.exec(isoString) || [];\n    if (parsedDate[1]) {\n        day = parsedDate[1].split(/\\D/).map(function (itm) { return parseInt(itm, 10) || 0; });\n        day[1] -= 1;\n        //@ts-ignore\n        day = new Date(Date.UTC.apply(Date, day));\n        if (!day.getDate()) {\n            return NaN;\n        }\n        if (parsedDate[5]) {\n            var tz = parseInt(parsedDate[5], 10) * 60;\n            if (parsedDate[6]) {\n                tz += parseInt(parsedDate[6], 10);\n            }\n            if (parsedDate[4] === '+') {\n                tz *= -1;\n            }\n            if (tz) {\n                day.setUTCMinutes(day.getUTCMinutes() + tz);\n            }\n        }\n        return day.getTime();\n    }\n    return NaN;\n}\nexports.parseTimestampFromISO8601String = parseTimestampFromISO8601String;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTimeInMinutes = exports.getTimeInMilliseconds = exports.getTimeInSeconds = exports.padDateTimeUnit = void 0;\nvar padDateTimeUnit = function (dateTimeUnit) {\n    var norm = Math.abs(Math.floor(typeof dateTimeUnit === 'string' ? Number(dateTimeUnit) : dateTimeUnit));\n    return (norm < 10 ? '0' : '') + norm;\n};\nexports.padDateTimeUnit = padDateTimeUnit;\nvar getTimeInSeconds = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d;\n    return hours * 60 * 60 + minutes * 60 + seconds;\n};\nexports.getTimeInSeconds = getTimeInSeconds;\nvar getTimeInMilliseconds = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d, _e = _a.milliseconds, milliseconds = _e === void 0 ? 0 : _e;\n    return (0, exports.getTimeInSeconds)({ hours: hours, minutes: minutes, seconds: seconds }) * 1000 + milliseconds;\n};\nexports.getTimeInMilliseconds = getTimeInMilliseconds;\nvar getTimeInMinutes = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d;\n    return (0, exports.getTimeInSeconds)({ hours: hours, minutes: minutes, seconds: seconds }) / 60;\n};\nexports.getTimeInMinutes = getTimeInMinutes;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTimezoneISOOffset = void 0;\nvar misc_1 = require(\"./misc\");\nvar getTimezoneISOOffset = function (date) {\n    if (date === void 0) { date = new Date(); }\n    var tzo = date.getTimezoneOffset();\n    var dif = tzo > 0 ? '-' : '+';\n    return \"\".concat(dif).concat((0, misc_1.padDateTimeUnit)(tzo / 60), \":\").concat((0, misc_1.padDateTimeUnit)(tzo % 60));\n};\nexports.getTimezoneISOOffset = getTimezoneISOOffset;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createQueryParametersAsString = void 0;\nfunction createQueryParametersAsString(queryParameters) {\n    return Object.keys(queryParameters)\n        .filter(function (key) { return queryParameters[key] !== null; })\n        .map(function (key) {\n        return [key, queryParameters[key]].map(encodeURIComponent).join('=');\n    })\n        .join('&');\n}\nexports.createQueryParametersAsString = createQueryParametersAsString;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LogLevels = void 0;\nvar LogLevels;\n(function (LogLevels) {\n    LogLevels[\"ERROR\"] = \"error\";\n    LogLevels[\"INFO\"] = \"info\";\n    LogLevels[\"WARN\"] = \"warn\";\n})(LogLevels = exports.LogLevels || (exports.LogLevels = {}));\n//# sourceMappingURL=Logger.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventTargetPolyfill = void 0;\nvar EventTargetPolyfill = (function () {\n    function EventTargetPolyfill() {\n        this.listeners = {};\n    }\n    EventTargetPolyfill.prototype.addEventListener = function (type, callback) {\n        if (!(type in this.listeners)) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(callback);\n    };\n    EventTargetPolyfill.prototype.removeEventListener = function (type, callback) {\n        if (!(type in this.listeners)) {\n            return;\n        }\n        var stack = this.listeners[type];\n        for (var i = 0, l = stack.length; i < l; i++) {\n            if (stack[i] === callback) {\n                stack.splice(i, 1);\n                return;\n            }\n        }\n    };\n    EventTargetPolyfill.prototype.dispatchEvent = function (event) {\n        if (!(event.type in this.listeners)) {\n            return true;\n        }\n        var stack = this.listeners[event.type].slice();\n        for (var i = 0, l = stack.length; i < l; i++) {\n            stack[i].call(this, event);\n        }\n        return !event.defaultPrevented;\n    };\n    return EventTargetPolyfill;\n}());\nexports.EventTargetPolyfill = EventTargetPolyfill;\n//# sourceMappingURL=EventTargetPolyfill.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupSocketConnection = exports.WebSocketClientEvent = exports.WebSocketClient = exports.EventTargetPolyfill = exports.HeartBeatState = void 0;\nvar HeartBeatState_1 = require(\"./websocket/HeartBeatState\");\nObject.defineProperty(exports, \"HeartBeatState\", { enumerable: true, get: function () { return HeartBeatState_1.HeartBeatState; } });\nvar EventTargetPolyfill_1 = require(\"./eventTargetPolyfill/EventTargetPolyfill\");\nObject.defineProperty(exports, \"EventTargetPolyfill\", { enumerable: true, get: function () { return EventTargetPolyfill_1.EventTargetPolyfill; } });\nvar WebSocketClient_1 = require(\"./websocket/WebSocketClient\");\nObject.defineProperty(exports, \"WebSocketClient\", { enumerable: true, get: function () { return WebSocketClient_1.WebSocketClient; } });\nvar WebSocketClientEvent_1 = require(\"./websocket/WebSocketClientEvent\");\nObject.defineProperty(exports, \"WebSocketClientEvent\", { enumerable: true, get: function () { return WebSocketClientEvent_1.WebSocketClientEvent; } });\nvar pushUpdateWebSocket_1 = require(\"./pushUpdate/pushUpdateWebSocket\");\nObject.defineProperty(exports, \"setupSocketConnection\", { enumerable: true, get: function () { return pushUpdateWebSocket_1.setupSocketConnection; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPushUpdateWebSocket = exports.setupSocketConnection = void 0;\nvar queryParameters_1 = require(\"@brandembassy/be-javascript-utils/dist/query/queryParameters\");\nvar initializeHeartbeat_1 = require(\"../websocket/initializeHeartbeat\");\nvar object_1 = require(\"@brandembassy/be-javascript-utils/dist/collection/object\");\nvar WebSocketClient_1 = require(\"../websocket/WebSocketClient\");\nvar socket = null;\nfunction createWebSocketUrlWithProtocol(webSocketUrlWithoutProtocol, forceSecureProtocol, query) {\n    if (query === void 0) { query = {}; }\n    var queryString = (0, queryParameters_1.createQueryParametersAsString)((0, object_1.removeEmptyValuesFromObject)(query));\n    var protocol = forceSecureProtocol || window.location.protocol === 'https:'\n        ? \"wss:\"\n        : 'ws:';\n    if (queryString.length === 0) {\n        return \"\".concat(protocol, \"//\").concat(webSocketUrlWithoutProtocol);\n    }\n    var url = new URL(\"\".concat(protocol, \"//\").concat(webSocketUrlWithoutProtocol));\n    if (url.search.length > 0) {\n        return \"\".concat(protocol, \"//\").concat(webSocketUrlWithoutProtocol, \"&\").concat(queryString);\n    }\n    return \"\".concat(protocol, \"//\").concat(webSocketUrlWithoutProtocol, \"?\").concat(queryString);\n}\nvar defaultConnectionOptions = {\n    forceSecureProtocol: false,\n    heartbeatAfterAuthorize: false,\n    maxRetries: 20,\n    maxReconnectionDelay: 1000,\n};\nvar setupSocketConnection = function (urlProvider, options) {\n    if (options === void 0) { options = {}; }\n    if (typeof options !== 'object') {\n        throw new TypeError(\"Options parameter must be an object not a \".concat(typeof options));\n    }\n    var connectionOptions = __assign(__assign({}, defaultConnectionOptions), options);\n    var forceSecureProtocol = connectionOptions.forceSecureProtocol, heartbeatAfterAuthorize = connectionOptions.heartbeatAfterAuthorize, tenantId = connectionOptions.tenantId, userId = connectionOptions.userId, brandId = connectionOptions.brandId, wscOptions = __rest(connectionOptions, [\"forceSecureProtocol\", \"heartbeatAfterAuthorize\", \"tenantId\", \"userId\", \"brandId\"]);\n    if (typeof urlProvider === 'string') {\n        urlProvider = createWebSocketUrlWithProtocol(urlProvider, forceSecureProtocol, { tenantId: tenantId, userId: userId, brandId: brandId });\n    }\n    socket = new WebSocketClient_1.WebSocketClient(urlProvider, undefined, wscOptions);\n    (0, initializeHeartbeat_1.initializeHeartbeat)(heartbeatAfterAuthorize, socket, options);\n    return socket;\n};\nexports.setupSocketConnection = setupSocketConnection;\nvar getPushUpdateWebSocket = function () { return socket; };\nexports.getPushUpdateWebSocket = getPushUpdateWebSocket;\n//# sourceMappingURL=pushUpdateWebSocket.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeartBeatState = void 0;\nvar HeartBeatState;\n(function (HeartBeatState) {\n    HeartBeatState[\"DIED\"] = \"died\";\n    HeartBeatState[\"DYING\"] = \"dying\";\n    HeartBeatState[\"LIVING\"] = \"living\";\n})(HeartBeatState = exports.HeartBeatState || (exports.HeartBeatState = {}));\n//# sourceMappingURL=HeartBeatState.js.map","\"use strict\";\n/*!\n * Reconnecting WebSocket\n * by Pedro Ladaria <pedro.ladaria@gmail.com>\n * https://github.com/pladaria/reconnecting-websocket\n * License MIT\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReconnectingWebSocket = void 0;\nvar DEFAULT = {\n    maxReconnectionDelay: 10000,\n    minReconnectionDelay: 1000 + Math.random() * 4000,\n    minUptime: 5000,\n    reconnectionDelayGrowFactor: 1.3,\n    connectionTimeout: 4000,\n    maxRetries: Infinity,\n    maxEnqueuedMessages: Infinity,\n    startClosed: false,\n    debug: false,\n};\nvar ReconnectingWebSocket = (function () {\n    function ReconnectingWebSocket(url, protocols, options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        this.onclose = null;\n        this.onerror = null;\n        this.onmessage = null;\n        this.onopen = null;\n        this._listeners = {\n            error: [],\n            message: [],\n            open: [],\n            close: [],\n        };\n        this._shouldReconnect = true;\n        this._connectLock = false;\n        this._closeCalled = false;\n        this._messageQueue = [];\n        this._retryCount = -1;\n        this._binaryType = 'blob';\n        this._handleOpen = function (event) {\n            _this._debug('open event');\n            var _a = _this._options.minUptime, minUptime = _a === void 0 ? DEFAULT.minUptime : _a;\n            clearTimeout(_this._connectTimeout);\n            _this._uptimeTimeout = window.setTimeout(function () { return _this._acceptOpen(); }, minUptime);\n            _this._ws.binaryType = _this._binaryType;\n            _this._messageQueue.forEach(function (message) { var _a; return (_a = _this._ws) === null || _a === void 0 ? void 0 : _a.send(message); });\n            _this._messageQueue = [];\n            if (_this.onopen) {\n                _this.onopen(event);\n            }\n            _this._listeners.open.forEach(function (listener) {\n                return _this._callEventListener(event, listener);\n            });\n        };\n        this._handleMessage = function (event) {\n            _this._debug('message event');\n            if (_this.onmessage) {\n                _this.onmessage(event);\n            }\n            _this._listeners.message.forEach(function (listener) {\n                return _this._callEventListener(event, listener);\n            });\n        };\n        this._handleError = function (event) {\n            _this._debug('error event', event);\n            _this._disconnect();\n            if (_this.onerror) {\n                _this.onerror(event);\n            }\n            _this._debug('exec error listeners');\n            _this._listeners.error.forEach(function (listener) {\n                return _this._callEventListener(event, listener);\n            });\n            _this._connect();\n        };\n        this._handleClose = function (event) {\n            _this._debug('close event');\n            _this._clearTimeouts();\n            if (_this._shouldReconnect) {\n                _this._connect();\n            }\n            if (_this.onclose) {\n                _this.onclose(event);\n            }\n            _this._listeners.close.forEach(function (listener) {\n                return _this._callEventListener(event, listener);\n            });\n        };\n        this._url = url;\n        this._protocols = protocols;\n        this._options = options;\n        this._maxRetries =\n            typeof options.maxRetries === 'number'\n                ? options.maxRetries\n                : DEFAULT.maxRetries;\n        if (this._options.startClosed) {\n            this._shouldReconnect = false;\n        }\n        this._connect();\n    }\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"retryCount\", {\n        get: function () {\n            return Math.max(this._retryCount, 0);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"binaryType\", {\n        get: function () {\n            return this._ws ? this._ws.binaryType : this._binaryType;\n        },\n        set: function (value) {\n            this._binaryType = value;\n            if (this._ws) {\n                this._ws.binaryType = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"bufferedAmount\", {\n        get: function () {\n            var bytes = this._messageQueue.reduce(function (acc, message) {\n                if (typeof message === 'string') {\n                    acc += message.length;\n                }\n                else if (message instanceof Blob) {\n                    acc += message.size;\n                }\n                else {\n                    acc += message.byteLength;\n                }\n                return acc;\n            }, 0);\n            return bytes + (this._ws ? this._ws.bufferedAmount : 0);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"extensions\", {\n        get: function () {\n            return this._ws ? this._ws.extensions : '';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"protocol\", {\n        get: function () {\n            return this._ws ? this._ws.protocol : '';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"readyState\", {\n        get: function () {\n            if (this._ws) {\n                return this._ws.readyState;\n            }\n            return this._options.startClosed ? WebSocket.CLOSED : WebSocket.CONNECTING;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"url\", {\n        get: function () {\n            return this._ws ? this._ws.url : '';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ReconnectingWebSocket.prototype.close = function (code, reason) {\n        if (code === void 0) { code = 1000; }\n        this._closeCalled = true;\n        this._shouldReconnect = false;\n        this._clearTimeouts();\n        if (!this._ws) {\n            this._debug('close enqueued: no ws instance');\n            return;\n        }\n        if (this._ws.readyState === WebSocket.CLOSED) {\n            this._debug('close: already closed');\n            return;\n        }\n        this._ws.close(code, reason);\n    };\n    ReconnectingWebSocket.prototype.reconnect = function (code, reason) {\n        this._shouldReconnect = true;\n        this._closeCalled = false;\n        this._retryCount = -1;\n        if (!this._ws || this._ws.readyState === WebSocket.CLOSED) {\n            this._connect();\n        }\n        else {\n            this._disconnect(code, reason);\n            this._connect();\n        }\n    };\n    ReconnectingWebSocket.prototype.send = function (data) {\n        if (this._ws && this._ws.readyState === WebSocket.OPEN) {\n            this._debug('send', data);\n            this._ws.send(data);\n        }\n        else {\n            var _a = this._options.maxEnqueuedMessages, maxEnqueuedMessages = _a === void 0 ? DEFAULT.maxEnqueuedMessages : _a;\n            if (this._messageQueue.length < maxEnqueuedMessages) {\n                this._debug('enqueue', data);\n                this._messageQueue.push(data);\n            }\n        }\n    };\n    ReconnectingWebSocket.prototype.addEventListener = function (type, listener) {\n        if (this._listeners[type]) {\n            this._listeners[type].push(listener);\n        }\n    };\n    ReconnectingWebSocket.prototype.dispatchEvent = function (event) {\n        var e_1, _a;\n        var listeners = this._listeners[event.type];\n        if (listeners) {\n            try {\n                for (var listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {\n                    var listener = listeners_1_1.value;\n                    this._callEventListener(event, listener);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (listeners_1_1 && !listeners_1_1.done && (_a = listeners_1.return)) _a.call(listeners_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        return true;\n    };\n    ReconnectingWebSocket.prototype.removeEventListener = function (type, listener) {\n        if (this._listeners[type]) {\n            this._listeners[type] = this._listeners[type].filter(function (l) { return l !== listener; });\n        }\n    };\n    ReconnectingWebSocket.prototype.setMaxRetires = function (maxRetries) {\n        this._maxRetries = maxRetries;\n    };\n    ReconnectingWebSocket.prototype._debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this._options.debug) {\n            console.log.apply(console, __spreadArray(['RWS>'], __read(args), false));\n        }\n    };\n    ReconnectingWebSocket.prototype._getNextDelay = function () {\n        var _a = this._options, _b = _a.reconnectionDelayGrowFactor, reconnectionDelayGrowFactor = _b === void 0 ? DEFAULT.reconnectionDelayGrowFactor : _b, _c = _a.minReconnectionDelay, minReconnectionDelay = _c === void 0 ? DEFAULT.minReconnectionDelay : _c, _d = _a.maxReconnectionDelay, maxReconnectionDelay = _d === void 0 ? DEFAULT.maxReconnectionDelay : _d;\n        var delay = 0;\n        if (this._retryCount > 0) {\n            delay =\n                minReconnectionDelay *\n                    Math.pow(reconnectionDelayGrowFactor, this._retryCount - 1);\n            if (delay > maxReconnectionDelay) {\n                delay = maxReconnectionDelay;\n            }\n        }\n        this._debug('next delay', delay);\n        return delay;\n    };\n    ReconnectingWebSocket.prototype._wait = function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            setTimeout(resolve, _this._getNextDelay());\n        });\n    };\n    ReconnectingWebSocket.prototype._getNextUrl = function (urlProvider) {\n        if (typeof urlProvider === 'string') {\n            return Promise.resolve(urlProvider);\n        }\n        if (typeof urlProvider === 'function') {\n            var url = urlProvider();\n            if (typeof url === 'string') {\n                return Promise.resolve(url);\n            }\n            if (typeof url.then !== 'undefined') {\n                return url;\n            }\n        }\n        throw Error('Invalid URL');\n    };\n    ReconnectingWebSocket.prototype._connect = function () {\n        var _this = this;\n        if (this._connectLock || !this._shouldReconnect) {\n            return;\n        }\n        this._connectLock = true;\n        var _a = this._options.connectionTimeout, connectionTimeout = _a === void 0 ? DEFAULT.connectionTimeout : _a;\n        if (this._retryCount >= this._maxRetries) {\n            this._debug('max retries reached', this._retryCount, '>=', this._maxRetries);\n            return;\n        }\n        this._retryCount++;\n        this._debug('connect', this._retryCount);\n        this._removeListeners();\n        this._wait()\n            .then(function () { return _this._getNextUrl(_this._url); })\n            .then(function (url) {\n            if (_this._closeCalled) {\n                _this._connectLock = false;\n                return;\n            }\n            _this._debug('connect', { url: url, protocols: _this._protocols });\n            _this._ws = _this._protocols\n                ? new WebSocket(url, _this._protocols)\n                : new WebSocket(url);\n            _this._ws.binaryType = _this._binaryType;\n            _this._connectLock = false;\n            _this._addListeners();\n            _this._connectTimeout = window.setTimeout(function () { return _this._handleTimeout(); }, connectionTimeout);\n        })\n            .catch(function (err) {\n            _this._connectLock = false;\n            _this._handleError(new ErrorEvent(err.message));\n        });\n    };\n    ReconnectingWebSocket.prototype._handleTimeout = function () {\n        this._debug('timeout event');\n        this._handleError(new ErrorEvent('TIMEOUT'));\n    };\n    ReconnectingWebSocket.prototype._disconnect = function (code, reason) {\n        if (code === void 0) { code = 1000; }\n        this._clearTimeouts();\n        if (!this._ws) {\n            return;\n        }\n        this._removeListeners();\n        try {\n            this._ws.close(code, reason);\n            this._handleClose(new CloseEvent('CLOSE', { code: code, reason: reason }));\n        }\n        catch (error) {\n        }\n    };\n    ReconnectingWebSocket.prototype._acceptOpen = function () {\n        this._debug('accept open');\n        this._retryCount = 0;\n    };\n    ReconnectingWebSocket.prototype._callEventListener = function (event, listener) {\n        if ('handleEvent' in listener) {\n            listener.handleEvent(event);\n        }\n        else {\n            listener(event);\n        }\n    };\n    ReconnectingWebSocket.prototype._removeListeners = function () {\n        if (!this._ws) {\n            return;\n        }\n        this._debug('removeListeners');\n        this._ws.removeEventListener('open', this._handleOpen);\n        this._ws.removeEventListener('close', this._handleClose);\n        this._ws.removeEventListener('message', this._handleMessage);\n        this._ws.removeEventListener('error', this._handleError);\n    };\n    ReconnectingWebSocket.prototype._addListeners = function () {\n        if (!this._ws) {\n            return;\n        }\n        this._debug('addListeners');\n        this._ws.addEventListener('open', this._handleOpen);\n        this._ws.addEventListener('close', this._handleClose);\n        this._ws.addEventListener('message', this._handleMessage);\n        this._ws.addEventListener('error', this._handleError);\n    };\n    ReconnectingWebSocket.prototype._clearTimeouts = function () {\n        clearTimeout(this._connectTimeout);\n        clearTimeout(this._uptimeTimeout);\n    };\n    return ReconnectingWebSocket;\n}());\nexports.ReconnectingWebSocket = ReconnectingWebSocket;\n//# sourceMappingURL=ReconnectingWebSocket.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketClient = exports.HEART_BEAT_CHECK_TIMEOUT = exports.HEART_BEAT_INTERVAL = void 0;\nvar Logger_1 = require(\"../Logger\");\nvar ReconnectingWebSocket_1 = require(\"./ReconnectingWebSocket\");\nvar EventTargetPolyfill_1 = require(\"../eventTargetPolyfill/EventTargetPolyfill\");\nvar HeartBeatState_1 = require(\"./HeartBeatState\");\nvar WebSocketClientEvent_1 = require(\"./WebSocketClientEvent\");\nexports.HEART_BEAT_INTERVAL = 15000;\nexports.HEART_BEAT_CHECK_TIMEOUT = exports.HEART_BEAT_INTERVAL * 3;\nvar HEART_BEAT_RESPONSE = 'pong';\nvar HEART_BEAT_ACTION_NAME = 'heartbeat';\nvar WebSocketClient = (function (_super) {\n    __extends(WebSocketClient, _super);\n    function WebSocketClient(url, protocols, options) {\n        var _this = _super.call(this) || this;\n        _this.heartBeatTimeout = null;\n        _this.heartBeatCheckTimeout = null;\n        _this.enableDebugMode = function () {\n            if (!_this.debugMode) {\n                _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--loggerEnabled');\n            }\n            _this.debugMode = true;\n        };\n        _this.disableDebugMode = function () {\n            _this.debugMode = false;\n        };\n        _this.log = function (level, message, args) {\n            if (_this.debugMode && _this.logger) {\n                _this.logger[level](message, args);\n            }\n        };\n        _this.sendHeartBeat = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--sendHeartBeat');\n            _this.send(JSON.stringify({ action: HEART_BEAT_ACTION_NAME }));\n        };\n        _this.handleHeartBeatResponse = function () {\n            if (_this.heartBeatState === HeartBeatState_1.HeartBeatState.DYING) {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.LIVING;\n                _this.dispatchHeartBeatState();\n            }\n            _this.setHeartBeatCheckTimeout();\n        };\n        _this.setHeartBeatCheckTimeout = function () {\n            if (_this.heartBeatCheckTimeout !== null) {\n                clearTimeout(_this.heartBeatCheckTimeout);\n            }\n            _this.heartBeatCheckTimeout = setTimeout(function () {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DYING;\n                _this.dispatchHeartBeatState();\n            }, exports.HEART_BEAT_CHECK_TIMEOUT);\n        };\n        _this.dispatchHeartBeatState = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--dispatchHeartBeatState', [\n                { heartbeatState: _this.heartBeatState },\n            ]);\n            if (_this.heartBeatState !== null) {\n                _this.dispatchEvent(new CustomEvent(_this.heartBeatState));\n            }\n        };\n        _this.isHeartBeatActive = function () { return _this.heartBeatState !== null; };\n        _this.heartBeatState = null;\n        _this.debugMode = false;\n        _this.socket = new ReconnectingWebSocket_1.ReconnectingWebSocket(url, protocols, options);\n        _this.socket.onopen = function () {\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.OPEN));\n        };\n        if (options === null || options === void 0 ? void 0 : options.logger) {\n            _this.logger = options.logger;\n        }\n        _this.socket.onclose = function (closeEvent) {\n            if (_this.socket.retryCount === (options === null || options === void 0 ? void 0 : options.maxRetries)) {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DIED;\n            }\n            else {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DYING;\n            }\n            _this.dispatchHeartBeatState();\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.CLOSE, { detail: closeEvent }));\n        };\n        _this.socket.onmessage = function (event) {\n            _this.handleHeartBeatResponse();\n            if (JSON.parse(event.data) !== HEART_BEAT_RESPONSE) {\n                _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--onmessage', [event]);\n                _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.MESSAGE, { detail: event }));\n            }\n        };\n        _this.socket.onerror = function (event) {\n            _this.log(Logger_1.LogLevels.ERROR, 'websocket-push-updates--onError', [event]);\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.ERROR, { detail: event }));\n        };\n        return _this;\n    }\n    WebSocketClient.prototype.send = function (data) {\n        this.socket.send(data);\n    };\n    WebSocketClient.prototype.startHeartBeat = function () {\n        var _this = this;\n        this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--startHeartBeat', [\n            { interval: exports.HEART_BEAT_INTERVAL },\n        ]);\n        var heartBeatCallback = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--heartBeatCallback');\n            _this.sendHeartBeat();\n            _this.heartBeatTimeout = setTimeout(heartBeatCallback, exports.HEART_BEAT_INTERVAL);\n        };\n        this.setHeartBeatCheckTimeout();\n        heartBeatCallback();\n        this.heartBeatState = HeartBeatState_1.HeartBeatState.LIVING;\n    };\n    WebSocketClient.prototype.stopHeartBeat = function () {\n        this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--stopHeartBeat');\n        if (this.heartBeatTimeout !== null) {\n            clearTimeout(this.heartBeatTimeout);\n        }\n        if (this.heartBeatCheckTimeout !== null) {\n            clearTimeout(this.heartBeatCheckTimeout);\n        }\n        this.heartBeatState = null;\n    };\n    return WebSocketClient;\n}(EventTargetPolyfill_1.EventTargetPolyfill));\nexports.WebSocketClient = WebSocketClient;\n//# sourceMappingURL=WebSocketClient.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketClientEvent = void 0;\nvar WebSocketClientEvent;\n(function (WebSocketClientEvent) {\n    WebSocketClientEvent[\"CLOSE\"] = \"close\";\n    WebSocketClientEvent[\"ERROR\"] = \"error\";\n    WebSocketClientEvent[\"MESSAGE\"] = \"message\";\n    WebSocketClientEvent[\"OPEN\"] = \"open\";\n    WebSocketClientEvent[\"AUTHORIZATION_FAILED\"] = \"authorizationFailed\";\n})(WebSocketClientEvent = exports.WebSocketClientEvent || (exports.WebSocketClientEvent = {}));\n//# sourceMappingURL=WebSocketClientEvent.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initializeHeartbeat = void 0;\nvar WebSocketClientEvent_1 = require(\"./WebSocketClientEvent\");\nfunction initializeHeartbeat(heartbeatAfterAuthorize, socket, connectionOptions) {\n    if (!heartbeatAfterAuthorize) {\n        socket.startHeartBeat();\n        return;\n    }\n    var handleMessage = function (event) {\n        var _a;\n        try {\n            var payload = JSON.parse(event.detail.data);\n            if ((payload === null || payload === void 0 ? void 0 : payload.authorizationStatus) === 'authorized') {\n                socket.startHeartBeat();\n                socket.removeEventListener(WebSocketClientEvent_1.WebSocketClientEvent.MESSAGE, handleMessage);\n            }\n        }\n        catch (error) {\n            (_a = connectionOptions === null || connectionOptions === void 0 ? void 0 : connectionOptions.logger) === null || _a === void 0 ? void 0 : _a.warn('JSON cannot be parsed during the heartbeat initialization process.');\n        }\n    };\n    socket.addEventListener(WebSocketClientEvent_1.WebSocketClientEvent.MESSAGE, handleMessage);\n}\nexports.initializeHeartbeat = initializeHeartbeat;\n//# sourceMappingURL=initializeHeartbeat.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeEmptyValuesFromObject = void 0;\nfunction removeEmptyValuesFromObject(objectData) {\n    return Object.entries(objectData)\n        .filter(function (_a) {\n        var key = _a[0], value = _a[1];\n        return value !== undefined && value !== null;\n    })\n        .reduce(function (result, _a) {\n        var key = _a[0], value = _a[1];\n        result[key] = value;\n        return result;\n    }, {});\n}\nexports.removeEmptyValuesFromObject = removeEmptyValuesFromObject;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createQueryParametersAsString = void 0;\nfunction createQueryParametersAsString(queryParameters) {\n    return Object.keys(queryParameters)\n        .filter(function (key) { return queryParameters[key] !== null; })\n        .map(function (key) {\n        return [key, queryParameters[key]].map(encodeURIComponent).join('=');\n    })\n        .join('&');\n}\nexports.createQueryParametersAsString = createQueryParametersAsString;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AwsChatWindowEventActionRoute;\n(function (AwsChatWindowEventActionRoute) {\n    AwsChatWindowEventActionRoute[\"CHAT_WINDOW_EVENT\"] = \"chatWindowEvent\";\n    AwsChatWindowEventActionRoute[\"REGISTER\"] = \"register\";\n})(AwsChatWindowEventActionRoute = exports.AwsChatWindowEventActionRoute || (exports.AwsChatWindowEventActionRoute = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AwsInputEventType;\n(function (AwsInputEventType) {\n    AwsInputEventType[\"SENDER_TYPING_STARTED\"] = \"SenderTypingStarted\";\n    AwsInputEventType[\"SENDER_TYPING_ENDED\"] = \"SenderTypingEnded\";\n    AwsInputEventType[\"LOAD_MORE_MESSAGES\"] = \"LoadMoreMessages\";\n    AwsInputEventType[\"RECOVER_LIVECHAT\"] = \"RecoverLivechat\";\n    AwsInputEventType[\"RECOVER_THREAD\"] = \"RecoverThread\";\n    AwsInputEventType[\"SEND_MESSAGE\"] = \"SendMessage\";\n    AwsInputEventType[\"SEND_OUTBOUND\"] = \"SendOutbound\";\n    AwsInputEventType[\"SEND_OFFLINE_MESSAGE\"] = \"SendOfflineMessage\";\n    AwsInputEventType[\"SEND_PAGE_VIEWS\"] = \"SendPageViews\";\n    AwsInputEventType[\"SEND_CONSUMER_CUSTOM_FIELDS\"] = \"SetConsumerCustomFields\";\n    AwsInputEventType[\"SET_CONSUMER_CONTACT_CUSTOM_FIELD\"] = \"SetConsumerContactCustomFields\";\n    AwsInputEventType[\"MESSAGE_SEEN\"] = \"MessageSeenByConsumer\";\n    AwsInputEventType[\"SEND_TRANSCRIPT\"] = \"SendTranscript\";\n    AwsInputEventType[\"FETCH_THREAD_LIST\"] = \"FetchThreadList\";\n    AwsInputEventType[\"END_CONTACT\"] = \"EndContact\";\n    AwsInputEventType[\"EXECUTE_TRIGGER\"] = \"ExecuteTrigger\";\n    AwsInputEventType[\"AUTHORIZE_CONSUMER\"] = \"AuthorizeConsumer\";\n    AwsInputEventType[\"AUTHORIZE_CUSTOMER\"] = \"AuthorizeCustomer\";\n    AwsInputEventType[\"RECONNECT_CONSUMER\"] = \"ReconnectConsumer\";\n    AwsInputEventType[\"UPDATE_THREAD\"] = \"UpdateThread\";\n    AwsInputEventType[\"ARCHIVE_THREAD\"] = \"ArchiveThread\";\n    AwsInputEventType[\"LOAD_THREAD_METADATA\"] = \"LoadThreadMetadata\";\n    AwsInputEventType[\"REFRESH_TOKEN\"] = \"RefreshToken\";\n    AwsInputEventType[\"STORE_VISITOR\"] = \"StoreVisitor\";\n    AwsInputEventType[\"STORE_VISITOR_EVENTS\"] = \"StoreVisitorEvents\";\n    AwsInputEventType[\"CREATE_GROUP_CHAT_INVITE\"] = \"CreateInvitationToGroupChat\";\n    AwsInputEventType[\"SEND_EMAIL_INVITE_TO_GROUP_CHAT\"] = \"SendEmailInvitationToGroupChat\";\n    AwsInputEventType[\"JOIN_GROUP_CHAT\"] = \"JoinGroupChat\";\n    AwsInputEventType[\"LEAVE_GROUP_CHAT\"] = \"LeaveGroupChat\";\n    AwsInputEventType[\"GENERATE_AUTHORIZATION_TOKEN\"] = \"GenerateAuthorizationToken\";\n    AwsInputEventType[\"ADD_VISITOR_TAGS\"] = \"AddVisitorTags\";\n    AwsInputEventType[\"REMOVE_VISITOR_TAGS\"] = \"RemoveVisitorTags\";\n    AwsInputEventType[\"SEND_MESSAGE_PREVIEW\"] = \"SendMessagePreview\";\n})(AwsInputEventType = exports.AwsInputEventType || (exports.AwsInputEventType = {}));\nvar AwsResponseEventType;\n(function (AwsResponseEventType) {\n    AwsResponseEventType[\"LIVECHAT_RECOVERED\"] = \"LivechatRecovered\";\n    AwsResponseEventType[\"MORE_MESSAGES_LOADED\"] = \"MoreMessagesLoaded\";\n    AwsResponseEventType[\"OFFLINE_MESSAGE_SENT\"] = \"OfflineMessageSent\";\n    AwsResponseEventType[\"THREAD_LIST_FETCHED\"] = \"ThreadListFetched\";\n    AwsResponseEventType[\"THREAD_RECOVERED\"] = \"ThreadRecovered\";\n    AwsResponseEventType[\"TRANSCRIPT_SENT\"] = \"TranscriptSent\";\n    AwsResponseEventType[\"CONSUMER_AUTHORIZED\"] = \"ConsumerAuthorized\";\n    AwsResponseEventType[\"THREAD_METADATA_LOADED\"] = \"ThreadMetadataLoaded\";\n    AwsResponseEventType[\"SET_POSITION_IN_QUEUE\"] = \"SetPositionInQueue\";\n    AwsResponseEventType[\"GROUP_CHAT_INVITE_CREATED\"] = \"InvitationToGroupChatCreated\";\n    AwsResponseEventType[\"GROUP_CHAT_INVITE_SENT\"] = \"EmailInvitationToGroupChatSent\";\n    AwsResponseEventType[\"GROUP_CHAT_JOINED\"] = \"GroupChatJoined\";\n    AwsResponseEventType[\"TOKEN_REFRESHED\"] = \"TokenRefreshed\";\n    AwsResponseEventType[\"AUTHORIZATION_TOKEN_GENERATED\"] = \"AuthorizationTokenGenerated\";\n    AwsResponseEventType[\"THREAD_ARCHIVED\"] = \"ThreadArchived\";\n})(AwsResponseEventType = exports.AwsResponseEventType || (exports.AwsResponseEventType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ChannelAvailability;\n(function (ChannelAvailability) {\n    ChannelAvailability[\"ONLINE\"] = \"online\";\n    ChannelAvailability[\"OFFLINE\"] = \"offline\";\n})(ChannelAvailability = exports.ChannelAvailability || (exports.ChannelAvailability = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DeviceType;\n(function (DeviceType) {\n    DeviceType[\"DESKTOP\"] = \"desktop\";\n    DeviceType[\"MOBILE\"] = \"mobile\";\n    DeviceType[\"OTHER\"] = \"other\";\n    DeviceType[\"TABLET\"] = \"tablet\";\n})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));\nvar ApplicationType;\n(function (ApplicationType) {\n    ApplicationType[\"BROWSER\"] = \"browser\";\n})(ApplicationType = exports.ApplicationType || (exports.ApplicationType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CaseStatus_1 = require(\"../post/case/CaseStatus\");\nexports.ContactStatus = CaseStatus_1.CaseStatus;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CALLER_SERVICE_ID = 'X-Caller-Service-ID';\nexports.TRACE_ID = 'X-Trace-ID';\nexports.TRANSACTION_ID = 'X-Transaction-ID';\nexports.USER_AGENT = 'User-Agent';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MessageDirection;\n(function (MessageDirection) {\n    MessageDirection[\"INBOUND\"] = \"inbound\";\n    MessageDirection[\"OUTBOUND\"] = \"outbound\";\n})(MessageDirection = exports.MessageDirection || (exports.MessageDirection = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MessageType;\n(function (MessageType) {\n    MessageType[\"TEXT\"] = \"TEXT\";\n    MessageType[\"FILE\"] = \"FILE\";\n    MessageType[\"FORM\"] = \"FORM\";\n    MessageType[\"PLUGIN\"] = \"PLUGIN\";\n    MessageType[\"POSTBACK\"] = \"POSTBACK\";\n    MessageType[\"QUICK_REPLIES\"] = \"QUICK_REPLIES\";\n    MessageType[\"RICH_LINK\"] = \"RICH_LINK\";\n    MessageType[\"LIST_PICKER\"] = \"LIST_PICKER\";\n    MessageType[\"ADAPTIVE_CARD\"] = \"ADAPTIVE_CARD\";\n    MessageType[\"TIME_PICKER\"] = \"TIME_PICKER\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CaseStatus;\n(function (CaseStatus) {\n    CaseStatus[\"NEW\"] = \"new\";\n    CaseStatus[\"OPEN\"] = \"open\";\n    CaseStatus[\"PENDING\"] = \"pending\";\n    CaseStatus[\"ESCALATED\"] = \"escalated\";\n    CaseStatus[\"RESOLVED\"] = \"resolved\";\n    CaseStatus[\"CLOSED\"] = \"closed\";\n    CaseStatus[\"TRASHED\"] = \"trashed\";\n})(CaseStatus = exports.CaseStatus || (exports.CaseStatus = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PushUpdateEventType;\n(function (PushUpdateEventType) {\n    PushUpdateEventType[\"AUTHORIZE_CONSUMER\"] = \"AuthorizeConsumer\";\n    /** @deprecated use CONTACT_CREATED */\n    PushUpdateEventType[\"CASE_CREATED\"] = \"CaseCreated\";\n    /** @deprecated use ASSIGNED_AGENT_CHANGED */\n    PushUpdateEventType[\"CASE_INBOX_ASSIGNEE_CHANGED\"] = \"CaseInboxAssigneeChanged\";\n    /** @deprecated use CONTACT_STATUS_CHANGED */\n    PushUpdateEventType[\"CASE_STATUS_CHANGED\"] = \"CaseStatusChanged\";\n    /** @deprecated use CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED */\n    PushUpdateEventType[\"CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED\"] = \"CaseToRoutingQueueAssignmentChanged\";\n    PushUpdateEventType[\"CONTACT_CREATED\"] = \"CaseCreated\";\n    PushUpdateEventType[\"ASSIGNED_AGENT_CHANGED\"] = \"CaseInboxAssigneeChanged\";\n    PushUpdateEventType[\"CONTACT_STATUS_CHANGED\"] = \"CaseStatusChanged\";\n    PushUpdateEventType[\"CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED\"] = \"CaseToRoutingQueueAssignmentChanged\";\n    PushUpdateEventType[\"CONTACT_PREFERRED_USER_CHANGED\"] = \"ContactPreferredUserChanged\";\n    PushUpdateEventType[\"CONTACT_PROFICIENCY_CHANGED\"] = \"ContactProficiencyChanged\";\n    PushUpdateEventType[\"CONTACT_PRIORITY_CHANGED\"] = \"ContactPriorityChanged\";\n    PushUpdateEventType[\"CONTACT_SYNC\"] = \"ContactSync\";\n    PushUpdateEventType[\"CHANNEL_CREATED\"] = \"ChannelCreated\";\n    PushUpdateEventType[\"CHANNEL_DELETED\"] = \"ChannelDeleted\";\n    PushUpdateEventType[\"CHANNEL_UPDATED\"] = \"ChannelUpdated\";\n    PushUpdateEventType[\"MESSAGE_ADDED_INTO_CASE\"] = \"MessageAddedIntoCase\";\n    PushUpdateEventType[\"MESSAGE_CREATED\"] = \"MessageCreated\";\n    PushUpdateEventType[\"MESSAGE_DELIVERED_TO_END_USER\"] = \"MessageDeliveredToEndUser\";\n    PushUpdateEventType[\"MESSAGE_DELIVERED_TO_USER\"] = \"MessageDeliveredToUser\";\n    PushUpdateEventType[\"MESSAGE_DELIVERY_STATUS_CHANGED\"] = \"MessageDeliveryStatusChanged\";\n    PushUpdateEventType[\"MESSAGE_NOTE_CREATED\"] = \"MessageNoteCreated\";\n    PushUpdateEventType[\"MESSAGE_NOTE_UPDATED\"] = \"MessageNoteUpdated\";\n    PushUpdateEventType[\"MESSAGE_NOTE_DELETED\"] = \"MessageNoteDeleted\";\n    PushUpdateEventType[\"MESSAGE_READ_CHANGED\"] = \"MessageReadChanged\";\n    PushUpdateEventType[\"MESSAGE_SEEN_BY_END_USER\"] = \"MessageSeenByEndUser\";\n    PushUpdateEventType[\"MESSAGE_SEEN_BY_USER\"] = \"MessageSeenByUser\";\n    PushUpdateEventType[\"MESSAGE_SEEN_CHANGED\"] = \"MessageSeenChanged\";\n    PushUpdateEventType[\"MESSAGE_SENT\"] = \"MessageSent\";\n    PushUpdateEventType[\"MESSAGE_UPDATED\"] = \"MessageUpdated\";\n    PushUpdateEventType[\"PAGE_VIEW_CREATED\"] = \"PageViewCreated\";\n    PushUpdateEventType[\"ROUTING_QUEUE_CREATED\"] = \"RoutingQueueCreated\";\n    PushUpdateEventType[\"ROUTING_QUEUE_DELETED\"] = \"RoutingQueueDeleted\";\n    PushUpdateEventType[\"ROUTING_QUEUE_UPDATED\"] = \"RoutingQueueUpdated\";\n    PushUpdateEventType[\"SUBQUEUE_ASSIGNED_TO_ROUTING_QUEUE\"] = \"SubqueueAssignedToRoutingQueue\";\n    PushUpdateEventType[\"SUBQUEUE_UNASSIGNED_TO_ROUTING_QUEUE\"] = \"SubqueueUnassignedFromRoutingQueue\";\n    PushUpdateEventType[\"USER_ASSIGNED_TO_ROUTING_QUEUE\"] = \"UserAssignedToRoutingQueue\";\n    PushUpdateEventType[\"USER_STATUS_CHANGED\"] = \"UserStatusChanged\";\n    PushUpdateEventType[\"USER_UNASSIGNED_FROM_ROUTING_QUEUE\"] = \"UserUnassignedFromRoutingQueue\";\n    PushUpdateEventType[\"AGENT_CONTACT_STARTED\"] = \"AgentContactStarted\";\n    PushUpdateEventType[\"AGENT_CONTACT_ENDED\"] = \"AgentContactEnded\";\n    PushUpdateEventType[\"SENDER_TYPING_STARTED\"] = \"SenderTypingStarted\";\n    PushUpdateEventType[\"SENDER_TYPING_ENDED\"] = \"SenderTypingEnded\";\n    PushUpdateEventType[\"FIRE_PROACTIVE\"] = \"FireProactiveAction\";\n    PushUpdateEventType[\"CONTACT_INBOX_PRE_ASSIGNEE_CHANGED\"] = \"ConsumerContactInboxPreAssigneeChanged\";\n    PushUpdateEventType[\"CONTACT_RECIPIENTS_CHANGED\"] = \"ContactRecipientsChanged\";\n    PushUpdateEventType[\"MESSAGE_PREVIEW_CREATED\"] = \"MessagePreviewCreated\";\n    PushUpdateEventType[\"EVENT_IN_S3\"] = \"EventInS3\";\n})(PushUpdateEventType = exports.PushUpdateEventType || (exports.PushUpdateEventType = {}));\n","module.exports = __WEBPACK_EXTERNAL_MODULE__198__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Checks if `value` is `null`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n * @example\n *\n * _.isNull(null);\n * // => true\n *\n * _.isNull(void 0);\n * // => false\n */\nfunction isNull(value) {\n  return value === null;\n}\n\nexport default isNull;\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { SecureSessionsType } from '../securedSession/SecureSessionsType';\nimport { ThirdPartyToken } from '../securedSession/ThirdPartyToken';\nimport { ICacheStorage } from '../storage/CacheStorage';\n\nexport interface ThreadData {\n  contactId?: string;\n  oldestMessageDatetime?: string;\n  scrollToken?: string;\n}\n\nexport interface ChatSDKVariableStorage {\n  ACCESS_TOKEN: string;\n  ACCESS_TOKEN_EXPIRES_IN: number;\n  APP_NAME: string;\n  APP_VERSION: string;\n  AUTHORIZATION_CODE?: string;\n  BRAND_ID: BrandId;\n  CACHE_STORAGE: ICacheStorage;\n  CHANNEL_ID: ChannelId;\n  DESTINATION?: string;\n  ENDPOINT_AUTHORIZE: string;\n  ENDPOINT_CHAT: string;\n  ENDPOINT_GATEWAY: string;\n  LANGUAGE: string;\n  SECURED_SESSION: SecureSessionsType;\n  THIRD_PARTY_TOKEN?: ThirdPartyToken;\n  THREAD_DATA: ThreadData;\n  VISITOR_ID?: string;\n  VISIT_ID?: string;\n}\n\nexport const SDKVariableStorage: Partial<ChatSDKVariableStorage> = {};\n\nexport const clearVariableStorage = (): void => {\n  Object.keys(SDKVariableStorage).forEach((key) => {\n    delete SDKVariableStorage[key as keyof ChatSDKVariableStorage];\n  });\n};\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\n\nimport { isNull } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport function setAccessToken(accessToken: AccessToken): void {\n  SDKVariableStorage.ACCESS_TOKEN = accessToken.token;\n  SDKVariableStorage.ACCESS_TOKEN_EXPIRES_IN = accessToken.expiresIn;\n}\n\n/**\n * @deprecated Use ThirdParty Token instead\n */\nexport function getAccessToken(): AccessToken | null {\n  const token = SDKVariableStorage.ACCESS_TOKEN ?? null;\n  const expiresIn = SDKVariableStorage.ACCESS_TOKEN_EXPIRES_IN ?? null;\n\n  if (isNull(token) || isNull(expiresIn)) {\n    return null;\n  }\n\n  return {\n    token,\n    expiresIn: Number(expiresIn),\n  };\n}\n\nexport function resetAccessToken(): void {\n  SDKVariableStorage.ACCESS_TOKEN = undefined;\n  SDKVariableStorage.ACCESS_TOKEN_EXPIRES_IN = undefined;\n}\n","export class ChatSDKError extends Error {\n  name: string = 'ChatSDKError';\n  data: unknown;\n\n  constructor(error: unknown, data?: unknown) {\n    super();\n\n    this.data = data;\n\n    if (error instanceof ChatSDKError) {\n      this.message = error.message;\n      this.stack = error.stack;\n      this.cause = error.cause;\n\n      return;\n    }\n\n    this.message = `[ChatSDKError]: ${this._getErrorMessage(error)}`;\n\n    if (error instanceof Error) {\n      this.stack = error.stack;\n    }\n  }\n\n  private _getErrorMessage(error: unknown): string {\n    if (error instanceof Error) {\n      return error.message;\n    }\n    if (typeof error === 'string') {\n      return error;\n    }\n\n    return JSON.stringify(error);\n  }\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\n\nexport class AuthorizationError extends ChatSDKError {\n  data: MessageFailedEventData['error'] | undefined;\n\n  constructor(\n    message: string,\n    data: MessageFailedEventData['error'] | undefined,\n  ) {\n    super(message, data);\n\n    if (data !== undefined) {\n      this.message = `${message} because of (${data.errorMessage})`;\n    }\n  }\n}\n","export const CHAT_SDK_VERSION: string = process.env.PACKAGE_VERSION ?? '0';\n","export function generateId(): string {\n  return crypto.randomUUID ? crypto.randomUUID() : generateUuidFallback();\n}\n\nexport function generateUuidFallback(): string {\n  const randomValues = new Uint8Array(16);\n\n  // Convert each byte to a hexadecimal string and join it to form the UUID\n  return crypto.getRandomValues(randomValues).reduce((uuid, value, index) => {\n    if ([4, 6, 8, 10].includes(index)) {\n      uuid += '-';\n    }\n\n    return (\n      uuid +\n      (index === 6\n        ? // eslint-disable-next-line no-bitwise\n          (value & 0x0f) | 0x40\n        : index === 8\n        ? // eslint-disable-next-line no-bitwise\n          (value & 0x3f) | 0x80\n        : value\n      )\n        .toString(16)\n        .padStart(2, '0')\n    );\n  }, '');\n}\n","import { VisitorInput } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nexport interface VisitorPayload {\n  visitor: VisitorInput;\n}\n\nexport function createVisitorPayload(visitorId: VisitorId): VisitorPayload {\n  return {\n    visitor: {\n      id: visitorId,\n    },\n  };\n}\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","import baseKeys from './_baseKeys.js';\nimport getTag from './_getTag.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLike from './isArrayLike.js';\nimport isBuffer from './isBuffer.js';\nimport isPrototype from './_isPrototype.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEmpty;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","import { ChatEventData } from '../event/ChatEvent';\n\nexport const requestQueue = new Map<string, (value: ChatEventData) => void>();\n","import { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { Event } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { generateId } from '../utils/generateId';\nimport { isEmpty, isNull } from '../utils/is';\n\nimport { requestQueue } from './requestQueue';\n\nexport const makeRequest = async (\n  event: Event<AwsInputEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> => {\n  if (isNull(wsClient)) {\n    throw new ChatSDKError('WebSocketClient is not initialized');\n  }\n  if (isEmpty(event.eventId)) {\n    event.eventId = generateId();\n  }\n\n  return new Promise<ChatEventData>((resolve) => {\n    requestQueue.set(event.eventId, resolve);\n    wsClient?.send(event);\n  });\n};\n","export function splitName(name: string): [string, string] {\n  const [firstName, ...names] = name.split(' ');\n  const lastName = names.join(' ');\n\n  return [firstName, lastName];\n}\n","import { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { isUndefined } from '../utils/is';\n\ntype Ident = CustomField['ident'];\ntype Value = CustomField['value'];\n\nexport type CustomFieldsObject = Record<Ident, Value>;\nexport type CustomFieldsMap = Map<Ident, Value>;\n\nexport function setCustomFields(\n  fields: CustomFieldsMap,\n  set: CustomFieldsObject = {},\n): void {\n  for (const name of Object.keys(set)) {\n    fields.set(name, set[name]);\n  }\n}\n\nexport function setCustomFieldsFromArray(\n  fields: CustomFieldsMap,\n  set: Array<CustomField> = [],\n): void {\n  for (const { ident, value } of set) {\n    fields.set(ident, value);\n  }\n}\n\nexport function setCustomField(\n  fields: CustomFieldsMap,\n  name: string,\n  value: CustomField['value'],\n): void {\n  if (isUndefined(name) || isUndefined(value)) {\n    throw new ChatSDKError('Custom field name and value must be set');\n  }\n\n  fields.set(name, value);\n}\n\nexport function getCustomFields(fields: CustomFieldsMap): CustomFieldsObject {\n  return Object.fromEntries(fields);\n}\n\nexport function getCustomFieldsArray(\n  fields: CustomFieldsMap,\n): Array<CustomField> {\n  return Array.from(fields).map<CustomField>(([ident, value]) => ({\n    ident,\n    value,\n  }));\n}\n","import { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\n\nimport {\n  CustomFieldsMap,\n  CustomFieldsObject,\n  getCustomFields,\n  getCustomFieldsArray,\n  setCustomFields,\n  setCustomFieldsFromArray,\n} from '../customField/CustomFields';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { CustomerIdentity } from '../securedSession/TransactionToken';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { generateId } from '../utils/generateId';\nimport { isArray } from '../utils/is';\n\nimport { createSetCustomerCustomFieldsPayloadData } from './setCustomerCustomFieldsPayload';\n\nexport function setCustomerIdentity(\n  customer: Customer,\n  customerIdentity: CustomerIdentity,\n): void {\n  const {\n    idOnExternalPlatform,\n    firstName = '',\n    lastName = '',\n    image,\n    customFields,\n  } = customerIdentity;\n  customer.setId(idOnExternalPlatform);\n\n  if (firstName || lastName) {\n    customer.setName(`${firstName ?? ''} ${lastName ?? ''}`.trim());\n  }\n\n  if (image) {\n    customer.setImage(image);\n  }\n\n  if (isArray(customFields)) {\n    customer.setCustomFieldsFromArray(customFields);\n  }\n}\n\nexport class Customer {\n  #websocketClient: WebSocketClient | null;\n  #customFields: CustomFieldsMap = new Map();\n  #exists = false;\n  id: CustomerIdentityIdOnExternalPlatform | null = null;\n  name: string | null = null;\n  image: string | null = null;\n\n  constructor(\n    id?: CustomerIdentityIdOnExternalPlatform,\n    name?: string,\n    image?: string,\n    websocketClient?: WebSocketClient | null,\n  ) {\n    this.#websocketClient = websocketClient ?? null;\n\n    if (id) {\n      this.setId(id);\n    }\n    if (name) {\n      this.setName(name);\n    }\n    if (image) {\n      this.setImage(image);\n    }\n  }\n\n  public getIdOrCreateNewOne(): CustomerIdentityIdOnExternalPlatform {\n    let customerId = this.getId();\n\n    if (!customerId) {\n      customerId = generateId();\n      this.id = customerId;\n    }\n\n    return customerId;\n  }\n\n  public destroy(): void {\n    this.id = null;\n    this.name = null;\n    this.image = null;\n    this.#customFields = new Map();\n  }\n\n  public getId(): CustomerIdentityIdOnExternalPlatform | null {\n    return this.id ?? null;\n  }\n\n  public setId(\n    customerIdentityIdOnExternalPlatform: CustomerIdentityIdOnExternalPlatform,\n  ): void {\n    this.id = customerIdentityIdOnExternalPlatform;\n  }\n\n  public getName(): string | null {\n    return this.name;\n  }\n\n  public setName(name: string): void {\n    this.name = name;\n  }\n\n  public getImage(): string | null {\n    return this.image ?? null;\n  }\n\n  public setImage(image: string): void {\n    this.image = image;\n  }\n\n  public setExists(exists: boolean): void {\n    this.#exists = exists;\n  }\n\n  public setWebsocketClient(websocketClient: WebSocketClient): void {\n    this.#websocketClient = websocketClient;\n  }\n\n  /**\n   * Set Customer Custom field\n   * @param name - Custom field name\n   * @param value - Custom field value\n   */\n  public setCustomField(\n    name: CustomField['ident'],\n    value: CustomField['value'],\n  ): Promise<ChatEventData> | undefined {\n    return this.setCustomFields({ [name]: value });\n  }\n\n  /**\n   * Set Customer Custom fields\n   * @param customFields - custom fields object\n   * @example setCustomFields(\\{ identName: 'value', identName2: 'value2' \\})\n   */\n  public setCustomFields(\n    customFields: CustomFieldsObject,\n  ): Promise<ChatEventData> | undefined {\n    setCustomFields(this.#customFields, customFields);\n\n    if (this.#exists) {\n      return this.sendCustomFields();\n    }\n  }\n\n  /**\n   * Get Customer Custom fields (as object)\n   */\n  public getCustomFields(): CustomFieldsObject {\n    return getCustomFields(this.#customFields);\n  }\n\n  /**\n   * Set Customer Custom fields from an array of custom fields\n   * @param customFields - custom fields array\n   */\n  public setCustomFieldsFromArray(customFields: Array<CustomField>): void {\n    setCustomFieldsFromArray(this.#customFields, customFields);\n  }\n\n  /**\n   * Get Customer Custom fields (as array of CustomField)\n   */\n  public getCustomFieldsArray(): Array<CustomField> {\n    return getCustomFieldsArray(this.#customFields);\n  }\n\n  /**\n   * Send Customer Custom fields\n   * - call this only after the first message or recover event\n   * @returns Promise<ChatEventData>\n   */\n  public async sendCustomFields(): Promise<ChatEventData> {\n    const payloadData = createSetCustomerCustomFieldsPayloadData(\n      getCustomFieldsArray(this.#customFields),\n    );\n\n    return sendChatEvent(payloadData, this.#websocketClient);\n  }\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendConsumerCustomFieldsEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendConsumerCustomFields';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\ntype SendCustomerCustomFieldsEventData = SendConsumerCustomFieldsEventData;\n\nexport function createSetCustomerCustomFieldsPayloadData(\n  customFields: Array<CustomField>,\n): EventPayloadData<SendCustomerCustomFieldsEventData> {\n  return {\n    eventType: AwsInputEventType.SEND_CONSUMER_CUSTOM_FIELDS,\n    data: {\n      customFields,\n    },\n  };\n}\n","import { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\n\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { Customer } from './Customer';\n\nexport class CustomerInstance {\n  private static instance: Customer;\n\n  public static init(\n    id?: CustomerIdentityIdOnExternalPlatform,\n    name?: string,\n    image?: string,\n    websocketClient?: WebSocketClient | null,\n  ): Customer {\n    CustomerInstance.instance = new Customer(id, name, image, websocketClient);\n\n    return CustomerInstance.instance;\n  }\n\n  public static getInstance(): Customer {\n    if (!CustomerInstance.instance) {\n      throw new Error('Init Customer first.');\n    }\n\n    return CustomerInstance.instance;\n  }\n}\n","import { ConsumerIdentityInput } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { splitName } from '../utils/splitName';\n\nimport { CustomerInstance } from './CustomerInstance';\n\nexport type ConsumerIdentityPayload = ConsumerIdentityInput;\n\nexport function createCustomerIdentityPayload(\n  name?: string,\n  image?: string,\n): ConsumerIdentityPayload {\n  const customer = CustomerInstance.getInstance();\n  const storedName = name ?? customer.getName();\n  const storedImage = image ?? customer.getImage();\n\n  let customerIdentityNamePayload: Partial<ConsumerIdentityPayload> = {};\n  if (typeof storedName === 'string' && storedName.length > 0) {\n    const [firstName, lastName] = splitName(storedName);\n    customerIdentityNamePayload = { firstName, lastName };\n  }\n\n  if (storedImage) {\n    customerIdentityNamePayload.image = storedImage;\n  }\n\n  return {\n    idOnExternalPlatform: customer.getIdOrCreateNewOne(),\n    ...customerIdentityNamePayload,\n  };\n}\n","/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nexport default isNil;\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { isNil } from './is';\n\nexport function getBrandIdAndChannelId(): {\n  brandId: BrandId;\n  channelId: ChannelId;\n} {\n  const brandId = SDKVariableStorage.BRAND_ID;\n  const channelId = SDKVariableStorage.CHANNEL_ID;\n\n  if (isNil(brandId) || isNaN(brandId) || isNil(channelId)) {\n    throw new ChatSDKError(\n      `Cannot get BrandId and ChannelId from SDKVariableStorage\n      brandId (${brandId}) |\n      channelId (${channelId})`,\n    );\n  }\n\n  return {\n    brandId,\n    channelId,\n  };\n}\n","/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nexport default isUndefined;\n","import { AwsChatWindowEventActionRoute } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport {\n  AwsInputEvent,\n  AwsInputEventData,\n  ConsumerIdentityInput,\n  DestinationInput,\n  VisitInput,\n  VisitorInput,\n} from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { createCustomerIdentityPayload } from '../customer/customerIdentityPayload';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { generateId } from '../utils/generateId';\nimport { getBrandIdAndChannelId } from '../utils/getBrandIdAndChannelId';\nimport { isUndefined } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport type EventActionRoute = AwsChatWindowEventActionRoute;\nexport type EventPayload<D extends AwsInputEventData> = AwsInputEvent<\n  AwsInputEventType,\n  D\n>;\n\nexport interface Event<D extends AwsInputEventData> {\n  action: EventActionRoute;\n  eventId: string;\n  payload: EventPayload<D>;\n}\n\nexport interface EventPayloadData<D extends AwsInputEventData> {\n  consumerIdentity?: ConsumerIdentityInput;\n  data: D;\n  destination?: DestinationInput;\n  eventType: AwsInputEventType;\n  visit?: VisitInput;\n  visitor?: VisitorInput;\n}\n\nexport function createEventPayload<D extends AwsInputEventData>(\n  eventPayloadData: EventPayloadData<D>,\n): EventPayload<D> {\n  const storedDestinationId = SDKVariableStorage.DESTINATION;\n  const storedVisitId = SDKVariableStorage.VISIT_ID;\n  const storedVisitorId = SDKVariableStorage.VISITOR_ID;\n\n  const {\n    eventType,\n    data,\n    consumerIdentity = createCustomerIdentityPayload(),\n    destination = storedDestinationId ? { id: storedDestinationId } : {},\n    visitor = storedVisitorId ? { id: storedVisitorId } : {},\n    visit = storedVisitId ? { id: storedVisitId } : {},\n  } = eventPayloadData;\n  const { brandId, channelId } = getBrandIdAndChannelId();\n\n  if (isUndefined(eventType)) {\n    throw new ChatSDKError(\n      `Cannot create an event payload because of missing eventType (${eventType})`,\n    );\n  }\n\n  return {\n    eventType,\n    brand: {\n      id: Number(brandId),\n    },\n    channel: {\n      id: channelId,\n    },\n    consumerIdentity,\n    data,\n    destination,\n    visitor,\n    visit,\n  };\n}\n\nexport function createEvent<D extends AwsInputEventData>(\n  payload: EventPayload<D>,\n  eventId: string = generateId(),\n  actionRoute: EventActionRoute = AwsChatWindowEventActionRoute.CHAT_WINDOW_EVENT,\n): Event<D> {\n  return {\n    action: actionRoute,\n    eventId,\n    payload,\n  };\n}\n","import { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { makeRequest } from '../request/makeRequest';\nimport {\n  createEvent,\n  createEventPayload,\n  EventPayloadData,\n} from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { ChatEventData } from './ChatEvent';\n\n/**\n * Send chat event\n * @param payloadData - payload data\n * @param webSocketClient - websocket client\n */\nexport async function sendChatEvent<D extends AwsInputEventData>(\n  payloadData: EventPayloadData<D>,\n  webSocketClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const event = createEvent(createEventPayload(payloadData));\n\n  return makeRequest(event, webSocketClient);\n}\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ReconnectConsumerData } from '@brandembassy/ts-types-chat/dist/awsEvents/ReconnectConsumer';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport { createCustomerIdentityPayload } from '../customer/customerIdentityPayload';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { createVisitorPayload } from '../visitor/createVisitorPayload';\n\nexport function createReconnectPayloadData(\n  accessToken: AccessToken,\n  visitorId?: string,\n): EventPayloadData<ReconnectConsumerData> {\n  return {\n    ...createVisitorPayload(visitorId as VisitorId),\n    ...createCustomerIdentityPayload(),\n    eventType: AwsInputEventType.RECONNECT_CONSUMER,\n    data: {\n      accessToken: {\n        token: accessToken.token,\n      },\n    },\n  };\n}\n","let refreshTokenTimeoutId: NodeJS.Timeout | null = null;\n\nexport function getIdealTimeInSecondsForIssueRefreshToken(\n  accessTokenExpiresIn: number,\n): number {\n  const idealTimeToRefreshAccessToken = Math.round(accessTokenExpiresIn * 0.9);\n\n  if (idealTimeToRefreshAccessToken < 20) {\n    return 20;\n  }\n\n  return idealTimeToRefreshAccessToken;\n}\n\nexport function handleRefreshToken(\n  token: { expiresIn: number },\n  refreshTokenAction: () => Promise<void>,\n): void {\n  if (refreshTokenTimeoutId !== null) {\n    clearTimeout(refreshTokenTimeoutId);\n  }\n\n  refreshTokenTimeoutId = setTimeout(\n    refreshTokenAction,\n    getIdealTimeInSecondsForIssueRefreshToken(token.expiresIn) * 1000,\n  );\n}\n","import { AuthorizationTokenGeneratedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/AuthorizationTokenGenerated';\n\nexport const isAuthorizationTokenGeneratedPostbackData = (\n  data: unknown,\n): data is AuthorizationTokenGeneratedPostbackData =>\n  'authorizationToken' in (data as AuthorizationTokenGeneratedPostbackData);\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nimport { AuthorizeConsumerEventSuccessResponse } from './AuthorizeConsumerEventResponse';\n\nexport const isAuthSuccessEvent = (\n  payload: ChatEventData,\n): payload is AuthorizeConsumerEventSuccessResponse => {\n  const status = (payload as AuthorizeConsumerEventSuccessResponse)?.data\n    ?.status;\n  const type = payload?.type;\n\n  return (\n    type === AwsResponseEventType.CONSUMER_AUTHORIZED && status === 'success'\n  );\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { TokenRefreshedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/TokenRefreshed';\n\nexport interface TokenRefreshedSuccessResponse {\n  data: TokenRefreshedPostbackData;\n  type: AwsResponseEventType.TOKEN_REFRESHED;\n}\n\nexport function isTokenRefreshedSuccessResponse(\n  response: unknown,\n): response is TokenRefreshedSuccessResponse {\n  return (\n    (response as TokenRefreshedSuccessResponse)?.type ===\n      AwsResponseEventType.TOKEN_REFRESHED &&\n    (response as TokenRefreshedSuccessResponse).data?.accessToken?.token !==\n      undefined\n  );\n}\n","import UAParser from 'ua-parser-js';\n\nimport {\n  ApplicationType,\n  BrowserFingerprint,\n  DeviceType,\n} from '@brandembassy/ts-types-chat/dist/user/BrowserFingerprint';\n\nexport interface BrowserFingerprintOptions {\n  country?: string | null;\n  ip?: string | null;\n  language?: string;\n  location?: string | null;\n}\n\nexport const getBrowserLanguage = (): string => navigator.language;\nexport const getBrowserLocation = (): string =>\n  Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n/**\n * Get Device type\n * @param deviceType - device type\n */\nexport function getDeviceType(deviceType?: string): DeviceType {\n  switch (deviceType) {\n    case 'mobile':\n      return DeviceType.MOBILE;\n    case 'tablet':\n      return DeviceType.TABLET;\n    default:\n      return DeviceType.DESKTOP;\n  }\n}\n\n/**\n * Get Customer Browser fingerprint\n * @param options - options\n */\nexport const getBrowserFingerprint = (\n  options: BrowserFingerprintOptions = {},\n): BrowserFingerprint => {\n  const deviceInfoFromUserAgent = new UAParser(navigator.userAgent);\n\n  const {\n    country = '',\n    location = getBrowserLocation(),\n    language = getBrowserLanguage(),\n    ip = null,\n  } = options;\n\n  return {\n    browser: deviceInfoFromUserAgent.getBrowser().name ?? null,\n    browserVersion: deviceInfoFromUserAgent.getBrowser().version ?? null,\n    country,\n    ip,\n    language,\n    location,\n    os: deviceInfoFromUserAgent.getOS().name ?? null,\n    osVersion: deviceInfoFromUserAgent.getOS().version ?? null,\n    deviceType: getDeviceType(deviceInfoFromUserAgent.getDevice().type),\n    applicationType: ApplicationType.BROWSER,\n  };\n};\n","export const ERROR_CODE_SDK_VERSION_NOT_SUPPORTED = 'SdkVersionNotSupported';\n\nexport class SdkVersionNotSupported extends Error {\n  name = ERROR_CODE_SDK_VERSION_NOT_SUPPORTED;\n  message = 'Please update to the latest ChatSDK version';\n}\n","import {\n  ERROR_CODE_SDK_VERSION_NOT_SUPPORTED,\n  SdkVersionNotSupported,\n} from '../../error/SdkVersionNotSupported';\nimport { ChatEventData } from '../ChatEvent';\n\nexport function isSdkVersionNotSupportedEvent(event: unknown): boolean {\n  return (\n    (event as ChatEventData)?.error?.errorCode ===\n    ERROR_CODE_SDK_VERSION_NOT_SUPPORTED\n  );\n}\n\nexport function sdkVersionCheck(event: ChatEventData): ChatEventData | null {\n  if (isSdkVersionNotSupportedEvent(event)) {\n    throw new SdkVersionNotSupported();\n  }\n\n  return event;\n}\n","import { CALLER_SERVICE_ID } from '@brandembassy/ts-types-platform/dist/http/headers';\n\nimport { CHAT_SDK_VERSION } from '../env/version';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\ninterface DefaultHeaders {\n  Accept: string;\n  [CALLER_SERVICE_ID]: string;\n  'Content-Type': string;\n  'x-sdk-platform': string;\n  'x-sdk-version': string;\n}\n\nexport const getDefaultHeaders = (): DefaultHeaders => ({\n  Accept: 'application/json',\n  'Content-Type': 'application/json',\n  [CALLER_SERVICE_ID]: SDKVariableStorage.APP_NAME ?? '',\n  'x-sdk-platform': 'web',\n  'x-sdk-version': CHAT_SDK_VERSION,\n});\n","export async function getErrorResponseData(\n  response: Response,\n): Promise<unknown> {\n  let data;\n\n  try {\n    data = await response.json();\n  } catch (error) {\n    data = response.statusText;\n  }\n\n  return data;\n}\n","import { ChannelInfo } from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { getBrowserLanguage } from '../browserFingerprint/getBrowserFingerprint';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SdkVersionNotSupported } from '../error/SdkVersionNotSupported';\nimport { isSdkVersionNotSupportedEvent } from '../event/middleware/sdkVersionCheck';\nimport { getDefaultHeaders } from '../request/defaultHeaders';\nimport { getErrorResponseData } from '../request/getErrorResponseData';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport async function fetchChannelInfo(\n  brandId: BrandId,\n  channelId: ChannelId,\n  language = getBrowserLanguage(),\n): Promise<ChannelInfo> {\n  const languageLocale = `${language}`.split('-').join('_');\n  const CHANNEL_INTEGRATION_URL = SDKVariableStorage.ENDPOINT_CHAT;\n\n  const response = await fetch(\n    `${CHANNEL_INTEGRATION_URL}/chat/1.0/brand/${brandId}/channel/${channelId}?locale=${languageLocale}`,\n    {\n      method: 'GET',\n      headers: {\n        ...getDefaultHeaders(),\n      },\n    },\n  );\n\n  if (!response.ok) {\n    const errorData = await getErrorResponseData(response);\n\n    if (isSdkVersionNotSupportedEvent(errorData)) {\n      throw new SdkVersionNotSupported();\n    }\n\n    throw new ChatSDKError(\n      `Failed to fetch channel info. Status (${response.status})`,\n      { response },\n    );\n  }\n\n  return response.json();\n}\n","export enum SecureSessions {\n  ANONYMOUS = 'anonymous',\n  SECURED_COOKIES = 'securedCookies',\n  THIRD_PARTY = 'thirdParty',\n}\n\nexport type SecureSessionsType = SecureSessions | null;\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { isNil } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { SecureSessions, SecureSessionsType } from './SecureSessionsType';\n\nexport const getSecuredSessionType = (): SecureSessionsType =>\n  SDKVariableStorage.SECURED_SESSION ?? null;\n\nexport const shouldHandleCustomerIdForSecureSessions = (): boolean =>\n  SDKVariableStorage.SECURED_SESSION === SecureSessions.ANONYMOUS;\n\nexport const isSecureSessions = (): boolean => getSecuredSessionType() !== null;\n\nexport const getSecureSessionsTypeFromOptions = (\n  secureSessionsOption: unknown,\n): SecureSessionsType => {\n  if (isNil(secureSessionsOption)) {\n    return null;\n  }\n\n  const secureSessionType = Object.values(SecureSessions).includes(\n    secureSessionsOption as SecureSessions,\n  );\n\n  if (secureSessionType === false) {\n    throw new ChatSDKError(\n      `Expected a SecureSessions value, got ${secureSessionsOption}`,\n    );\n  }\n\n  return secureSessionsOption as SecureSessions;\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport enum EnvironmentName {\n  AU1 = 'AU1',\n  CA1 = 'CA1',\n  EU1 = 'EU1',\n  JP1 = 'JP1',\n  NA1 = 'NA1',\n  UK1 = 'UK1',\n  custom = 'custom',\n}\n\nexport interface EnvironmentEndpoints {\n  authorize: string;\n  chat: string;\n  gateway: string;\n  name: string;\n}\n\nexport function buildEnvironmentEndpoints(\n  environment: EnvironmentName,\n): EnvironmentEndpoints {\n  if (!(environment in EnvironmentName)) {\n    throw new ChatSDKError(`Unknown environment: ${environment}`);\n  }\n\n  if (environment === EnvironmentName.custom) {\n    throw new ChatSDKError(\n      'The custom environment cannot be constructed using the built-in configuration',\n    );\n  }\n\n  const chat =\n    `https://channels-de-${environment}.niceincontact.com`.toLowerCase();\n  const gateway =\n    `wss://chat-gateway-de-${environment}.niceincontact.com`.toLowerCase();\n  const name = environment;\n  const authorize =\n    `https://digital-oauth-de-${environment}.niceincontact.com`.toLowerCase();\n\n  return {\n    chat,\n    name,\n    gateway,\n    authorize,\n  };\n}\n","import { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { EnvironmentEndpoints } from './Environments';\n\nexport const setEnvironmentEndpoints = (\n  endpoints: EnvironmentEndpoints,\n): void => {\n  SDKVariableStorage.ENDPOINT_GATEWAY = endpoints.gateway;\n  SDKVariableStorage.ENDPOINT_CHAT = endpoints.chat;\n  SDKVariableStorage.ENDPOINT_AUTHORIZE = endpoints.authorize;\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { PushUpdateContext } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateContext';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\n\nexport const ChatEvent = {\n  ...PushUpdateEventType,\n  ...AwsResponseEventType,\n  AGENT_TYPING_STARTED: 'AgentTypingStarted',\n  AGENT_TYPING_ENDED: 'AgentTypingEnded',\n  ASSIGNED_AGENT_CHANGED: 'AssignedAgentChanged',\n  CONTACT_CREATED: 'ContactCreated',\n  CONTACT_STATUS_CHANGED: 'ContactStatusChanged',\n  CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED:\n    'ContactToRoutingQueueAssignmentChanged',\n} as const;\n\nexport class ChatCustomEvent<\n  T extends ChatEventData = ChatEventData,\n> extends CustomEvent<T> {}\n\nexport interface ChatEventData {\n  context?: [] | PushUpdateContext;\n  createdAt: Date;\n  createdAtWithMilliseconds?: Date;\n  data: unknown;\n  error?: MessageFailedEventData['error'];\n  id: string;\n  type?: ChatEventType;\n}\n\nexport type ChatEventKey = keyof typeof ChatEvent;\nexport type ChatEventType = typeof ChatEvent[ChatEventKey];\n","import { isNil } from '../utils/is';\n\nimport { ChatEventData } from './ChatEvent';\n\nexport type EventMiddleware = (\n  eventData: ChatEventData,\n) => ChatEventData | null;\n\nexport class ChatEventMiddleware {\n  middlewares: Array<EventMiddleware> = [];\n\n  register(middleware: EventMiddleware): void {\n    this.middlewares.push(middleware);\n  }\n\n  process(event: ChatEventData | null): ChatEventData | null {\n    if (isNil(event)) {\n      return null;\n    }\n\n    let processedEvent: ChatEventData | null = event;\n\n    for (const middleware of this.middlewares) {\n      if (processedEvent === null) {\n        return null;\n      }\n      processedEvent = middleware(processedEvent);\n    }\n\n    return processedEvent;\n  }\n}\n","import { ChatCustomEvent, ChatEventType } from './ChatEvent';\n\nexport interface IChatEventTarget extends EventTarget {\n  addEventListener<K extends ChatEventType>(\n    type: K,\n    listener: (event: ChatCustomEvent) => void,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  addEventListener(\n    type: string,\n    callback: EventListenerOrEventListenerObject | null,\n    options?: EventListenerOptions | boolean,\n  ): void;\n\n  dispatchEvent(event: ChatCustomEvent): boolean;\n\n  removeEventListener(\n    type: string,\n    callback: EventListenerOrEventListenerObject | null,\n    options?: boolean | EventListenerOptions | undefined,\n  ): void;\n  removeEventListener<K extends ChatEventType>(\n    type: K,\n    callback: (event: ChatCustomEvent) => void,\n    options?: boolean | EventListenerOptions | undefined,\n  ): void;\n}\n\nexport const ChatEventTarget = EventTarget as {\n  new (): IChatEventTarget;\n  prototype: IChatEventTarget;\n};\n","import { TypingEventData } from '@brandembassy/ts-types-platform/dist/user/typing/TypingEventData';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nfunction isOutbound(data: unknown): boolean {\n  return (data as TypingEventData)?.direction === 'outbound';\n}\n\nexport function agentTypingStarted(event: ChatEventData): ChatEventData {\n  if (isOutbound(event.data)) {\n    return {\n      ...event,\n      type: ChatEvent.AGENT_TYPING_STARTED,\n    };\n  }\n\n  return event;\n}\n\nexport function agentTypingEnded(event: ChatEventData): ChatEventData {\n  if (isOutbound(event.data)) {\n    return {\n      ...event,\n      type: ChatEvent.AGENT_TYPING_ENDED,\n    };\n  }\n\n  return event;\n}\n","import { fromISOString } from '@brandembassy/be-javascript-utils/dist/dateTime/isoString';\nimport { PushUpdateContext } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateContext';\n\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\nimport { isEmpty } from '../utils/is';\n\nimport { ChatEventData, ChatEventType } from './ChatEvent';\n\ninterface EventBase {\n  createdAt: string;\n}\n\ninterface EventDataWithPostback extends EventBase {\n  postback: {\n    data: Record<string, unknown>;\n    eventType: ChatEventType;\n  };\n}\n\ninterface EventWithEventId extends EventBase {\n  eventId: string;\n}\n\ninterface EventWithData extends EventBase {\n  context?: [] | PushUpdateContext;\n  data: Record<string, unknown>;\n}\ninterface EventWithType extends EventBase {\n  eventType: ChatEventType;\n}\n\nconst EMPTY_EVENT = {\n  id: '',\n  data: null,\n  type: undefined,\n  createdAt: new Date(),\n};\n\nconst hasData = (event: unknown): event is EventWithData =>\n  'data' in (event as EventWithData);\n\nconst hasError = (event: unknown): event is MessageFailedEventData =>\n  'error' in (event as MessageFailedEventData);\n\nconst hasEventId = (event: unknown): event is EventWithEventId =>\n  'eventId' in (event as EventWithEventId);\n\nconst hasEventType = (event: unknown): event is EventWithType =>\n  'eventType' in (event as EventWithType);\n\nconst isDataWithPostback = (\n  eventDetailData: unknown,\n): eventDetailData is EventDataWithPostback => {\n  const postback = (eventDetailData as EventDataWithPostback)?.postback;\n\n  return isEmpty(postback) === false;\n};\n\nexport function normalizeEvent(event: unknown): ChatEventData {\n  if (!hasEventId(event)) {\n    return EMPTY_EVENT;\n  }\n\n  if (hasError(event)) {\n    return {\n      createdAt: fromISOString(event.createdAt ?? new Date().toString()),\n      data: null,\n      error: event.error,\n      id: event.eventId,\n    };\n  }\n\n  const eventType = hasEventType(event) ? event.eventType : undefined;\n\n  if (hasData(event)) {\n    return {\n      createdAt: fromISOString(event.createdAt),\n      context: event.context,\n      data: event.data,\n      id: event.eventId,\n      type: eventType,\n    };\n  }\n\n  if (isDataWithPostback(event)) {\n    const {\n      postback: { data: postbackData, eventType: postbackEventType },\n      eventId: rawEventId,\n      ...restEventData\n    } = event;\n\n    return {\n      type: postbackEventType,\n      data: {\n        ...restEventData,\n        ...postbackData,\n      },\n      createdAt: fromISOString(event.createdAt),\n      id: rawEventId,\n    };\n  }\n\n  const { eventId, ...eventRest } = event;\n\n  return {\n    data: undefined,\n    ...eventRest,\n    id: eventId,\n    type: eventType,\n    createdAt: fromISOString(event.createdAt),\n  };\n}\n","import { agentTypingEnded, agentTypingStarted } from '../../agent/agentTyping';\nimport { assignedAgentChanged } from '../../agent/assignedAgentChanged';\nimport { contactCreated } from '../../contact/contactCreated';\nimport { contactStatusChanged } from '../../contact/contactStatusChanged';\nimport { contactToRoutingQueueAssignmentChanged } from '../../contact/contactToRoutingQueueAssignmentChanged';\nimport { livechatRecovered } from '../../thread/livechatThread/livechatRecovered';\nimport { threadRecovered } from '../../thread/threadRecovered';\nimport { ChatEvent, ChatEventData } from '../ChatEvent';\nimport { EventMiddleware } from '../ChatEventMiddleware';\n\nconst eventTypeMap: Record<string, EventMiddleware> = {\n  [ChatEvent.SENDER_TYPING_STARTED]: agentTypingStarted,\n  [ChatEvent.SENDER_TYPING_ENDED]: agentTypingEnded,\n  [ChatEvent.CASE_INBOX_ASSIGNEE_CHANGED]: assignedAgentChanged,\n  [ChatEvent.CASE_CREATED]: contactCreated,\n  [ChatEvent.CASE_STATUS_CHANGED]: contactStatusChanged,\n  [ChatEvent.CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED]:\n    contactToRoutingQueueAssignmentChanged,\n  [ChatEvent.LIVECHAT_RECOVERED]: livechatRecovered,\n  [ChatEvent.THREAD_RECOVERED]: threadRecovered,\n};\n\nexport function chatEventMapper(event: ChatEventData): ChatEventData | null {\n  if (event.type && eventTypeMap[event.type] !== undefined) {\n    return eventTypeMap[event.type](event);\n  }\n\n  return event;\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport function assignedAgentChanged(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.ASSIGNED_AGENT_CHANGED,\n  };\n}\n","import { CaseCreatedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseCreatedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type ContactCreatedData = CaseCreatedData;\n\nexport interface ContactCreatedChatEvent extends ChatEventData {\n  data: ContactCreatedData;\n  type: typeof ChatEvent.CONTACT_CREATED;\n}\n\nexport function contactCreated(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.CONTACT_CREATED,\n  };\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport function contactStatusChanged(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.CONTACT_STATUS_CHANGED,\n  };\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nimport { ContactToRoutingQueueAssignmentChangedChatEvent } from './isContactToRoutingQueueAssignmentChangedEvent';\n\nexport function contactToRoutingQueueAssignmentChanged(\n  event: ChatEventData,\n): ContactToRoutingQueueAssignmentChangedChatEvent {\n  return {\n    ...(event as ContactToRoutingQueueAssignmentChangedChatEvent),\n    type: ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED,\n  };\n}\n","import { PushUpdateEventFields } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventFields';\n\nimport { ChatEventData } from '../../event/ChatEvent';\nimport { normalizeEvent } from '../../event/normalizeEvent';\n\nexport function livechatRecovered(event: ChatEventData): ChatEventData {\n  const normalizedContactHistoryItems = (\n    (event.data as Record<string, unknown>)\n      .contactHistory as Array<PushUpdateEventFields>\n  ).map(normalizeEvent);\n\n  return {\n    ...event,\n    data: {\n      ...(event.data as Record<string, unknown>),\n      contactHistory: normalizedContactHistoryItems,\n    },\n  };\n}\n","import { PushUpdateEventFields } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventFields';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { normalizeEvent } from '../event/normalizeEvent';\n\nexport function threadRecovered(event: ChatEventData): ChatEventData {\n  const normalizedContactHistoryItems = (\n    (event.data as Record<string, unknown>)\n      .contactHistory as Array<PushUpdateEventFields>\n  ).map(normalizeEvent);\n\n  return {\n    ...event,\n    data: {\n      ...(event.data as Record<string, unknown>),\n      contactHistory: normalizedContactHistoryItems,\n    },\n  };\n}\n","import { ChatEventData } from '../event/ChatEvent';\nimport { isUndefined } from '../utils/is';\n\nexport interface MessageSuccessEventData extends ChatEventData {\n  id: string;\n}\nexport interface MessageFailedEventData extends MessageSuccessEventData {\n  error: {\n    errorCode: string;\n    errorMessage: string;\n    transactionId: string;\n  };\n  id: string;\n}\n\nexport function isSendMessageSuccessEventData(\n  event: ChatEventData,\n): event is MessageSuccessEventData {\n  const hasEventId =\n    isUndefined((event as MessageSuccessEventData)?.id) === false;\n\n  const hasError =\n    isUndefined((event as MessageFailedEventData).error) === false;\n\n  return hasError === false && hasEventId;\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SendMessageFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendOfflineMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOfflineMessage';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/customer/CustomerIdentity';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nimport { OfflineMessageData } from './sendOfflineMessage';\n\nexport const createSendOfflineMessagePayloadData = (\n  offlineMessageData: OfflineMessageData,\n): EventPayloadData<SendOfflineMessageEventData> => {\n  const [lastName, ...names] = offlineMessageData.name.split(' ').reverse();\n  const firstName = names.reverse().join(' ');\n\n  const authorCustomerIdentity = {\n    idOnExternalPlatform:\n      offlineMessageData.email as CustomerIdentityIdOnExternalPlatform,\n    firstName,\n    lastName,\n  };\n\n  const data = {\n    messageContent: {\n      type: MessageType.TEXT,\n      payload: {\n        text: offlineMessageData.message,\n      },\n    },\n    authorCustomerIdentity,\n  };\n\n  return {\n    eventType: AwsInputEventType.SEND_OFFLINE_MESSAGE,\n    data,\n  };\n};\n","import { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { TransactionAccessToken } from './TransactionToken';\n\nconst TRANSACTION_TOKEN_CACHE_KEY = 'sdkTransactionToken';\n\nexport const getCachedTransactionToken = (): TransactionAccessToken | null => {\n  if (!SDKVariableStorage.CACHE_STORAGE) {\n    return null;\n  }\n\n  return SDKVariableStorage.CACHE_STORAGE.getItem(TRANSACTION_TOKEN_CACHE_KEY);\n};\n\nexport const cacheTransactionToken = (\n  token: TransactionAccessToken,\n  expiresIn: number,\n): void => {\n  if (!SDKVariableStorage.CACHE_STORAGE) {\n    return;\n  }\n\n  SDKVariableStorage.CACHE_STORAGE.setItem(\n    TRANSACTION_TOKEN_CACHE_KEY,\n    token,\n    expiresIn * 1000,\n  );\n};\n\nexport const clearCachedTransactionToken = (): void => {\n  if (!SDKVariableStorage.CACHE_STORAGE) {\n    return;\n  }\n\n  SDKVariableStorage.CACHE_STORAGE.removeItem(TRANSACTION_TOKEN_CACHE_KEY);\n};\n","export const ERROR_AUTHORIZE_HOSTNAME_NOT_SET = 'Authorize hostname is not set';\nexport const ERROR_CANNOT_REFRESH_THIRD_PARTY_TOKEN =\n  'Cannot refresh ThirdParty token';\n\nexport const ERROR_CANNOT_FETCH_TRANSACTION_TOKEN =\n  'Failed to fetch transaction token';\n","import { getDefaultHeaders } from '../request/defaultHeaders';\n\n/**\n * Make a request and parse the response as JSON, otherwise throws the response or error\n *\n * @throws Response - If the response status is not ok\n * @throws AbortError - The request was aborted\n * @throws NotAllowedError\n * @throws TypeError\n * @throws DOMException - The request was aborted\n * @throws SyntaxError - The response body cannot be parsed as JSON\n */\nexport async function fetchJSON<T = unknown>(\n  resource: RequestInfo,\n  options?: RequestInit,\n): Promise<T> {\n  const requestInit = {\n    headers: {\n      ...getDefaultHeaders(),\n    },\n    ...options,\n  };\n  const response = await fetch(resource, requestInit);\n\n  if (!response.ok) {\n    throw response;\n  }\n\n  return response.json();\n}\n\n/**\n * Make a GET request\n *\n * @throws Response - If the response status is not ok\n * @throws AbortError - The request was aborted\n * @throws NotAllowedError\n * @throws TypeError\n * @throws DOMException - The request was aborted\n * @throws SyntaxError - The response body cannot be parsed as JSON\n */\nexport async function getJSON<T = unknown>(\n  resource: RequestInfo,\n  options?: RequestInit,\n): Promise<T> {\n  return fetchJSON(resource, { method: 'GET', ...options });\n}\n\n/**\n * Make a POST request with JSON body\n *\n * @throws Response - If the response status is not ok\n * @throws AbortError - The request was aborted\n * @throws NotAllowedError\n * @throws TypeError\n * @throws DOMException - The request was aborted\n * @throws SyntaxError - The response body cannot be parsed as JSON\n */\nexport async function postJSON<T = unknown>(\n  resource: RequestInfo,\n  body: unknown,\n  options?: RequestInit,\n): Promise<T> {\n  return fetchJSON(resource, {\n    method: 'POST',\n    body: JSON.stringify(body ?? {}),\n    ...options,\n  });\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { ERROR_AUTHORIZE_HOSTNAME_NOT_SET } from '../error/errorMessages';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport function getAuthorizeUrl(): string {\n  if (!SDKVariableStorage.ENDPOINT_AUTHORIZE) {\n    throw new ChatSDKError(ERROR_AUTHORIZE_HOSTNAME_NOT_SET);\n  }\n\n  const authorizeUrl = new URL(SDKVariableStorage.ENDPOINT_AUTHORIZE);\n  authorizeUrl.pathname = '/oauth/token';\n  authorizeUrl.searchParams.append(\n    'brandId',\n    String(SDKVariableStorage.BRAND_ID),\n  );\n  authorizeUrl.searchParams.append(\n    'channelId',\n    SDKVariableStorage.CHANNEL_ID ?? '',\n  );\n  authorizeUrl.searchParams.append(\n    'visitorId',\n    SDKVariableStorage.VISITOR_ID ?? '',\n  );\n\n  return authorizeUrl.toString();\n}\n","import { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { ThirdPartyToken } from './ThirdPartyToken';\n\nexport function setThirdPartyToken(token: ThirdPartyToken): void {\n  SDKVariableStorage.THIRD_PARTY_TOKEN = token;\n}\nexport function getThirdPartyToken(): ThirdPartyToken | null {\n  return SDKVariableStorage.THIRD_PARTY_TOKEN ?? null;\n}\nexport function resetThirdPartyToken(): void {\n  SDKVariableStorage.THIRD_PARTY_TOKEN = undefined;\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { ERROR_CANNOT_REFRESH_THIRD_PARTY_TOKEN } from '../error/errorMessages';\nimport { postJSON } from '../utils/fetchJSON';\nimport { isNull } from '../utils/is';\n\nimport { getAuthorizeUrl } from './getAuthorizeUrl';\nimport { handleNewThirdPartyToken } from './handleNewThirdPartyToken';\nimport { getThirdPartyToken } from './thirdPartyTokenStorage';\nimport { RefreshTokenResponse } from './TransactionToken';\n\nexport async function refreshThirdPartyToken(): Promise<void> {\n  const token = getThirdPartyToken();\n  if (isNull(token)) {\n    throw new ChatSDKError(ERROR_CANNOT_REFRESH_THIRD_PARTY_TOKEN);\n  }\n\n  const refreshUrl = getAuthorizeUrl();\n  try {\n    const { thirdParty } = await postJSON<RefreshTokenResponse>(\n      refreshUrl,\n      {\n        thirdParty: {\n          grant_type: 'refresh_token',\n          refresh_token: token.refresh_token,\n        },\n      },\n      {\n        credentials: 'include',\n      },\n    );\n\n    if (!thirdParty) {\n      throw new ChatSDKError(ERROR_CANNOT_REFRESH_THIRD_PARTY_TOKEN);\n    }\n\n    return handleNewThirdPartyToken(thirdParty);\n  } catch (error) {\n    if (error instanceof ChatSDKError) {\n      throw error;\n    }\n\n    throw new ChatSDKError(ERROR_CANNOT_REFRESH_THIRD_PARTY_TOKEN, error);\n  }\n}\n","import { handleRefreshToken } from '../authorization/handleRefreshToken';\n\nimport { refreshThirdPartyToken } from './refreshThirdPartyToken';\nimport { ThirdPartyToken } from './ThirdPartyToken';\nimport { setThirdPartyToken } from './thirdPartyTokenStorage';\n\nexport function handleNewThirdPartyToken(token: ThirdPartyToken): void {\n  setThirdPartyToken(token);\n  handleRefreshToken({ expiresIn: token.expires_in }, refreshThirdPartyToken);\n}\n","export class WebSocketClientError extends Error {\n  name: string = 'WebSocketClientError';\n\n  constructor(message: string, reason: string = '') {\n    const reasonMessage = reason ? ` (${reason})` : '';\n    super(`[WebSocketClientError]: ${message}${reasonMessage}`);\n  }\n}\n","import { WebSocketClient as PushUpdateWSClient } from '@brandembassy/push-updates-sdk';\n\nexport type IWsEventTarget = PushUpdateWSClient;\n\nexport const WsEventTarget = EventTarget as {\n  new (): IWsEventTarget;\n  prototype: IWsEventTarget;\n};\n","import {\n  WebSocketClient as PushUpdateWSClient,\n  WebSocketClientEvent as PushUpdatesWebSocketClientEvent,\n  setupSocketConnection,\n} from '@brandembassy/push-updates-sdk';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport { ChatCustomEvent } from '../event/ChatEvent';\nimport { isSecureSessions } from '../securedSession/getSecuredSessionType';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { WebSocketClientError } from './WebSocketClientError';\nimport { IWsEventTarget, WsEventTarget } from './WsEventTarget';\n\nexport interface SocketQueryParameters {\n  [key: string]: string | number | undefined;\n  brandId: BrandId;\n  channelId: ChannelId;\n  consumerId: CustomerIdentityIdOnExternalPlatform;\n  token?: string;\n  visitorId: VisitorId;\n}\n\nconst MAX_SOCKET_RECONNECT_RETRIES = 20;\n\n/**\n * Websocket client\n */\nexport class WebSocketClient {\n  #connection: PushUpdateWSClient | null = null;\n  #eventTarget: IWsEventTarget;\n  #alreadyConnected: boolean = false;\n\n  constructor(\n    private onError: ((error: Error) => void) | undefined,\n    private socketURLGetter: () => Promise<string>,\n  ) {\n    this.#eventTarget = new WsEventTarget();\n  }\n\n  /**\n   * Connect websocket\n   */\n  async connect(): Promise<void> {\n    this.#setupConnection();\n\n    this.#connection?.socket?.reconnect();\n  }\n\n  /**\n   * Disconnect websocket\n   */\n  disconnect(): void {\n    this.#connection?.socket.close();\n  }\n\n  /**\n   * Reconnect websocket\n   */\n  reconnect(): void {\n    this.#setupConnection();\n    this.#connection?.socket.reconnect();\n  }\n\n  /**\n   * Send data to active connection\n   * @param data - data to send\n   */\n  send(data: unknown): void {\n    const stringData = JSON.stringify(data);\n    this.#connection?.send(stringData);\n  }\n\n  /**\n   * Register event handler to websocket event\n   * @param eventType - websocket event\n   * @param handlerCallback - event handler\n   */\n  on(\n    eventType: PushUpdatesWebSocketClientEvent,\n    handlerCallback: (event: ChatCustomEvent) => void,\n  ): void {\n    this.#eventTarget.addEventListener(eventType, handlerCallback);\n  }\n\n  /**\n   * Unregister event handler to websocket event\n   * @param eventType - websocket event\n   * @param handlerCallback - event handler\n   */\n  off(\n    eventType: PushUpdatesWebSocketClientEvent,\n    handlerCallback: (event: CustomEvent) => void,\n  ): void {\n    this.#eventTarget.removeEventListener(eventType, handlerCallback);\n  }\n\n  /**\n   * Handle error from event listeners with onError callback or throw error\n   */\n  private _errorHandler(\n    event: CustomEvent<CloseEvent | ErrorEvent | Event>,\n  ): void {\n    const eventError = event.detail;\n    let error: WebSocketClientError | undefined;\n\n    if (eventError instanceof ErrorEvent) {\n      error = new WebSocketClientError('Connection error', eventError.message);\n    }\n    if (eventError instanceof CloseEvent) {\n      error = new WebSocketClientError('Connection closed', eventError.reason);\n    }\n    if (typeof error === 'undefined') {\n      error = new WebSocketClientError('Unknown error', eventError.type);\n    }\n\n    if (typeof this.onError === 'function') {\n      this.onError(error);\n    } else {\n      throw error;\n    }\n  }\n\n  #setupConnection(): void {\n    // if secured session is ON; start the heartbeat right away because there is no authorization response from lambda\n    const heartbeatAfterAuthorize = !isSecureSessions();\n\n    const endpoint = SDKVariableStorage.ENDPOINT_GATEWAY ?? '';\n    const forceSecureProtocol = endpoint.startsWith('wss');\n\n    this.#connection = setupSocketConnection(this.socketURLGetter, {\n      forceSecureProtocol,\n      startClosed: true,\n      heartbeatAfterAuthorize,\n      maxRetries: 0, // Disable reconnection attempts on the initial connection to avoid retrying in case of an authorization error. Configure maxRetries later once the connection is successfully established.\n    });\n\n    const errorHandlerBound = this._errorHandler.bind(this);\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.CLOSE,\n      errorHandlerBound,\n    );\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.ERROR,\n      errorHandlerBound,\n    );\n\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.OPEN,\n      (event: CustomEvent<Event>) => {\n        this.#connection?.socket.setMaxRetires(MAX_SOCKET_RECONNECT_RETRIES);\n        this.#alreadyConnected = true;\n        this.#socketEventHandler(event);\n      },\n    );\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.CLOSE,\n      (event: CustomEvent<CloseEvent>) => {\n        if (!this.#alreadyConnected) {\n          // if the connection was not establish before close event.\n          // It is most probably because of the Authorization failed\n          this.#eventTarget.dispatchEvent(\n            new CustomEvent(\n              PushUpdatesWebSocketClientEvent.AUTHORIZATION_FAILED,\n            ),\n          );\n        }\n\n        this.#socketEventHandler(event);\n      },\n    );\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.MESSAGE,\n      this.#socketEventHandler,\n    );\n  }\n\n  #socketEventHandler = (\n    event: CustomEvent<CloseEvent | ErrorEvent | Event>,\n  ): void => {\n    this.#eventTarget.dispatchEvent(event);\n  };\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class UploadAttachmentError extends ChatSDKError {}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { AttachmentUpload } from '@brandembassy/ts-types-chat/dist/message/AttachmentUpload';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SendMessageOptions } from '../thread/SendMessageOptions';\nimport { generateId } from '../utils/generateId';\nimport { getBrandIdAndChannelId } from '../utils/getBrandIdAndChannelId';\n\nimport { createPayloadForAttachmentUpload } from './createPayloadForAttachmentUpload';\nimport {\n  isUploadFailResponse,\n  isUploadSuccessResponse,\n  uploadAttachment,\n} from './uploadAttachment';\nimport { UploadAttachmentError } from './UploadAttachmentError';\n\nexport const createAttachmentPayload = async (\n  file: File,\n  brandId: BrandId,\n  channelId: ChannelId,\n): Promise<AttachmentUpload> => {\n  const attachment = await createPayloadForAttachmentUpload(file);\n  const uploadAttachmentResponse = await uploadAttachment(\n    brandId,\n    channelId,\n    attachment,\n  );\n\n  if (isUploadSuccessResponse(uploadAttachmentResponse)) {\n    return {\n      url: uploadAttachmentResponse.fileUrl,\n      friendlyName: attachment.name,\n    };\n  }\n\n  if (isUploadFailResponse(uploadAttachmentResponse)) {\n    throw new UploadAttachmentError(\n      'Upload attachment failed',\n      uploadAttachmentResponse,\n    );\n  }\n\n  throw new ChatSDKError(\n    `Unknown file upload response (${uploadAttachmentResponse})`,\n  );\n};\n\nexport const isAttachmentUpload = (\n  files: FileList | Array<File> | Array<AttachmentUpload>,\n): files is Array<AttachmentUpload> => {\n  const filesToTest: Array<File | AttachmentUpload> = Array.from<\n    File | AttachmentUpload\n  >(files);\n\n  return (filesToTest as Array<AttachmentUpload>).every(\n    (file) => 'url' in file && 'friendlyName' in file,\n  );\n};\n\nexport const createTemporaryAttachmentsUpload = async (\n  files: FileList | Array<File>,\n  brandId: BrandId,\n  channelId: ChannelId,\n): Promise<Array<AttachmentUpload>> =>\n  Promise.all<AttachmentUpload>(\n    Array.from(files).map((file) =>\n      createAttachmentPayload(file, brandId, channelId),\n    ),\n  );\n\nexport const createAttachmentUploadMessageData = async (\n  files: FileList | Array<File> | Array<AttachmentUpload>,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  options: SendMessageOptions = {},\n): Promise<SendMessageEventData> => {\n  const { brandId, channelId } = getBrandIdAndChannelId();\n\n  try {\n    const attachments = isAttachmentUpload(files)\n      ? files\n      : await createTemporaryAttachmentsUpload(files, brandId, channelId);\n\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    return {\n      messageContent: {\n        type: MessageType.TEXT,\n        payload: {\n          text: '',\n        },\n      },\n      attachments,\n      browserFingerprint,\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n      idOnExternalPlatform: messageId,\n      consumer: {\n        customFields: [],\n      },\n      consumerContact: {\n        customFields: [],\n      },\n    };\n  } catch (error: unknown) {\n    if (error instanceof UploadAttachmentError) {\n      throw error;\n    }\n\n    if (error instanceof Error) {\n      throw new ChatSDKError(\n        `Send attachment failed because of (${error.message})`,\n      );\n    }\n\n    throw new ChatSDKError(`Unknown error during file upload`);\n  }\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nimport { createLocalFileReader } from './localFileReader';\n\nexport interface AttachmentPayload {\n  mimeType: string;\n  name: string;\n  url: string;\n}\n\nexport const createPayloadForAttachmentUpload = async (\n  file: File,\n): Promise<AttachmentPayload> => {\n  const reader = await createLocalFileReader(file);\n\n  if (reader.error !== null) {\n    throw new ChatSDKError(\n      `Cannot create payload for attachment upload because of error (${reader.error.message})`,\n    );\n  }\n\n  if (typeof reader.result !== 'string') {\n    throw new ChatSDKError(\n      `Cannot create payload for attachment upload because of missing:\n      reader result (${reader.result})`,\n    );\n  }\n\n  return {\n    url: reader.result,\n    name: file.name,\n    mimeType: file.type,\n  };\n};\n","export function createLocalFileReader(file: File): Promise<FileReader> {\n  return new Promise((resolve, reject): void => {\n    const reader = new FileReader();\n    reader.onloadend = (): void => {\n      resolve(reader);\n    };\n    reader.onerror = (errorEvent: ProgressEvent<FileReader>): void =>\n      reject(errorEvent.target?.error?.message);\n    reader.readAsDataURL(file);\n  });\n}\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SdkVersionNotSupported } from '../error/SdkVersionNotSupported';\nimport { isSdkVersionNotSupportedEvent } from '../event/middleware/sdkVersionCheck';\nimport { getDefaultHeaders } from '../request/defaultHeaders';\nimport { getErrorResponseData } from '../request/getErrorResponseData';\nimport { isUndefined } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { AttachmentPayload } from './createPayloadForAttachmentUpload';\n\nexport interface UploadSuccessResponse {\n  fileUrl: string;\n}\n\nexport interface UploadFailResponse {\n  allowedFileSize: string;\n  allowedFileTypes: Array<{\n    description: string;\n    mimeType: string;\n  }>;\n}\n\nexport function isUploadSuccessResponse(\n  data: unknown,\n): data is UploadSuccessResponse {\n  return isUndefined((data as UploadSuccessResponse)?.fileUrl) === false;\n}\n\nexport function isUploadFailResponse(\n  data: unknown,\n): data is UploadFailResponse {\n  return isUndefined((data as UploadFailResponse)?.allowedFileSize) === false;\n}\n\nexport async function uploadAttachment(\n  brandId: BrandId,\n  channelId: string,\n  attachment: AttachmentPayload,\n): Promise<UploadSuccessResponse | UploadFailResponse> {\n  const { url, name: fileName, mimeType } = attachment;\n  const content = url.split(';base64,')[1];\n  const requestBody = { content, fileName, mimeType };\n  const response = await fetch(\n    `${SDKVariableStorage.ENDPOINT_CHAT}/chat/1.0/brand/${brandId}/channel/${channelId}/attachment`,\n    {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        ...getDefaultHeaders(),\n      },\n    },\n  );\n\n  if (!response.ok) {\n    const errorData = await getErrorResponseData(response);\n\n    if (isSdkVersionNotSupportedEvent(errorData)) {\n      throw new SdkVersionNotSupported();\n    }\n\n    throw new ChatSDKError(\n      `Failed to upload Attachments. Status (${response.status})`,\n    );\n  }\n\n  return response.json();\n}\n","import { CaseStatusChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseStatusChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type ContactStatusChangedData = CaseStatusChangedData;\n\nexport interface ContactStatusChangedChatEvent extends ChatEventData {\n  data: ContactStatusChangedData;\n  type: typeof ChatEvent.CONTACT_STATUS_CHANGED;\n}\n\nexport function isContactStatusChangedEvent(\n  event: ChatEventData,\n): event is ContactStatusChangedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_STATUS_CHANGED &&\n    (event as ContactStatusChangedChatEvent).data?.case?.id !== undefined\n  );\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nimport { ContactCreatedChatEvent } from './contactCreated';\n\nexport function isContactCreatedEvent(\n  event: ChatEventData,\n): event is ContactCreatedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_CREATED &&\n    (event as ContactCreatedChatEvent).data?.case?.id !== undefined\n  );\n}\n","import { ContactToRoutingQueueAssignmentChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseToRoutingQueueAssignmentChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface ContactToRoutingQueueAssignmentChangedChatEvent\n  extends ChatEventData {\n  data: ContactToRoutingQueueAssignmentChangedData;\n  type: typeof ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED;\n}\n\nexport function isContactToRoutingQueueAssignmentChangedEvent(\n  event: ChatEventData,\n): event is ContactToRoutingQueueAssignmentChangedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED &&\n    (event as ContactToRoutingQueueAssignmentChangedChatEvent).data?.case\n      ?.id !== undefined\n  );\n}\n","import { ContactRecipientsChangedData } from '@brandembassy/ts-types-platform/dist/groupChat/ContactRecipientsChangedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface ContactRecipientsChangedChatEvent extends ChatEventData {\n  data: ContactRecipientsChangedData;\n  type: PushUpdateEventType.CONTACT_RECIPIENTS_CHANGED;\n}\n\nexport function isContactRecipientsChangedEvent(\n  event: unknown,\n): event is ContactRecipientsChangedChatEvent {\n  return (\n    (event as ContactRecipientsChangedChatEvent).type ===\n    PushUpdateEventType.CONTACT_RECIPIENTS_CHANGED\n  );\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { BrowserFingerprint } from '@brandembassy/ts-types-chat/dist/user/BrowserFingerprint';\nimport { MessageId } from '@brandembassy/ts-types-platform/dist/message/MessageId';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\n\nexport type MessageContent = SendMessageEventData['messageContent'];\n\nexport const createMessageData = (\n  messageContent: MessageContent,\n  messageId: MessageId,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  browserFingerprint: BrowserFingerprint = getBrowserFingerprint(),\n): SendMessageEventData => ({\n  messageContent,\n  browserFingerprint,\n  idOnExternalPlatform: messageId,\n  thread: {\n    idOnExternalPlatform: threadIdOnExternalPlatform,\n  },\n  consumer: {\n    customFields: [],\n  },\n  consumerContact: {\n    customFields: [],\n  },\n  attachments: [],\n});\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { MoreMessagesLoadedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/MoreMessagesLoaded';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MoreMessagesLoadedEvent extends ChatEventData {\n  data: MoreMessagesLoadedPostbackData;\n}\n\nexport function isLoadMoreMessagesEventData(\n  event: ChatEventData,\n): event is MoreMessagesLoadedEvent {\n  return (\n    (event as MoreMessagesLoadedEvent).type ===\n      AwsResponseEventType.MORE_MESSAGES_LOADED &&\n    (event as MoreMessagesLoadedEvent)?.data?.messages !== undefined\n  );\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { LoadMoreMessagesEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LoadMoreMessages';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createLoadMoreMessagesPayloadData = (\n  eventData: LoadMoreMessagesEventData,\n): EventPayloadData<LoadMoreMessagesEventData> => ({\n  eventType: AwsInputEventType.LOAD_MORE_MESSAGES,\n  data: eventData,\n});\n","export class AbortError extends Error {\n  constructor(message: string = 'Aborted') {\n    super(message);\n    this.name = 'AbortError';\n  }\n}\n","import { AbortError } from '../error/AbortError';\n\nexport interface Abortable {\n  abort: (reason?: string) => void;\n  readonly abortReason?: string;\n}\n\ntype ExecutorFunction<T> = (\n  resolve: (value: PromiseLike<T> | T) => void,\n  reject: (reason?: unknown) => void,\n) => void;\n\ntype AbortableExecutorFunction<T> = (\n  resolve: (value: PromiseLike<T> | T) => void,\n  reject: (reason?: unknown) => void,\n  abortSignal: AbortSignal,\n) => void;\n\n/**\n * AbortablePromise is a Promise that can be aborted.\n * Source: https://github.com/zzdjk6/simple-abortable-promise, MIT License\n */\nexport class AbortablePromise<T> extends Promise<T> implements Abortable {\n  public abort: Abortable['abort'];\n\n  constructor(executor: AbortableExecutorFunction<T>) {\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n\n    const normalExecutor: ExecutorFunction<T> = (resolve, reject) => {\n      abortSignal.addEventListener('abort', () => {\n        reject(new AbortError(this.abortReason));\n      });\n\n      executor?.(resolve, reject, abortSignal);\n    };\n\n    super(normalExecutor);\n    this.abort = (reason) => {\n      this._abortReason = reason ?? 'Aborted';\n      abortController.abort();\n    };\n  }\n\n  private _abortReason?: string;\n\n  public get abortReason(): string | undefined {\n    return this._abortReason;\n  }\n\n  static from = <P>(promise: Promise<P>): AbortablePromise<P> => {\n    // If promise is already an AbortablePromise, return it directly\n    if (promise instanceof AbortablePromise) {\n      return promise;\n    }\n\n    return new AbortablePromise<P>((resolve, reject) => {\n      promise.then(resolve).catch(reject);\n    });\n  };\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class ArchiveThreadFailedError extends ChatSDKError {}\n","import { Message } from '@brandembassy/ts-types-platform/dist/message/Message';\nimport { MessageDirection } from '@brandembassy/ts-types-platform/dist/message/MessageDirection';\n\n/**\n * Get message author name of given message\n * @param message - message\n * @returns message author name\n */\nexport const getAuthor = (message: Message): string =>\n  message.direction === MessageDirection.INBOUND\n    ? message.authorEndUserIdentity?.fullName ?? ''\n    : `${message.authorUser?.firstName ?? ''} ${\n        message.authorUser?.surname ?? ''\n      }`.trim();\n","import { Message } from '@brandembassy/ts-types-platform/dist/message/Message';\n\nimport { isUndefined } from '../utils/is';\n\nexport function isMessage(item: unknown): item is Message {\n  const hasId = isUndefined((item as Message).id) === false;\n  const hasDirection = isUndefined((item as Message).direction) === false;\n  const hasMessageContent =\n    isUndefined((item as Message).messageContent) === false;\n\n  return hasId && hasDirection && hasMessageContent;\n}\n","import { MessageCreatedData } from '@brandembassy/ts-types-platform/dist/message/MessageCreatedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageCreatedEvent extends ChatEventData {\n  data: MessageCreatedData;\n  type: PushUpdateEventType.MESSAGE_CREATED;\n}\n\nexport function isMessageCreatedEvent(\n  event: unknown,\n): event is MessageCreatedEvent {\n  return (\n    (event as MessageCreatedEvent).type === PushUpdateEventType.MESSAGE_CREATED\n  );\n}\n","import { MessageSentData } from '@brandembassy/ts-types-platform/dist/message/MessageSentEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageSentEvent extends ChatEventData {\n  data: MessageSentData;\n  type: PushUpdateEventType.MESSAGE_SENT;\n}\n\nexport function isMessageSentEvent(event: unknown): event is MessageSentEvent {\n  return (event as MessageSentEvent).type === PushUpdateEventType.MESSAGE_SENT;\n}\n","import { MessageReadChangedData } from '@brandembassy/ts-types-platform/dist/message/MessageReadChangedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageReadChangedEvent extends ChatEventData {\n  data: MessageReadChangedData;\n  type: PushUpdateEventType.MESSAGE_READ_CHANGED;\n}\n\nexport function isMessageReadChangedEvent(\n  event: unknown,\n): event is MessageReadChangedEvent {\n  return (\n    (event as MessageReadChangedEvent).type ===\n    PushUpdateEventType.MESSAGE_READ_CHANGED\n  );\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class GetMetadataFailedError extends ChatSDKError {}\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadMetadataLoadedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadMetadataLoaded';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface LoadThreadMetadataChatEvent extends ChatEventData {\n  data: ThreadMetadataLoadedPostbackData;\n  type: AwsResponseEventType.THREAD_METADATA_LOADED;\n}\n\nexport const isLoadMetadataSuccessPayload = (\n  response: ChatEventData,\n): response is LoadThreadMetadataChatEvent =>\n  (response as LoadThreadMetadataChatEvent).type ===\n    AwsResponseEventType.THREAD_METADATA_LOADED &&\n  (response as LoadThreadMetadataChatEvent).data.lastMessage !== undefined;\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadRecoveredPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadRecovered';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { isNil } from '../utils/is';\n\nexport interface ThreadRecoveredChatEvent extends ChatEventData {\n  data: ThreadRecoveredPostbackData;\n}\n\nexport const isRecoverSuccessPayload = (\n  response: ChatEventData,\n): response is ThreadRecoveredChatEvent => {\n  const testResponseData = response.data as ThreadRecoveredPostbackData;\n\n  const hasPostbackData = isNil(testResponseData) === false;\n  if (hasPostbackData === false) {\n    return false;\n  }\n\n  const hasMessages = isNil(testResponseData?.messages) === false;\n  if (hasMessages === false) {\n    return false;\n  }\n\n  const isCorrectEventType =\n    response.type === AwsResponseEventType.THREAD_RECOVERED ||\n    response.type === AwsResponseEventType.LIVECHAT_RECOVERED;\n  if (isCorrectEventType === false) {\n    return false;\n  }\n\n  const hasNoError = isNil(response.error);\n  if (hasNoError === false) {\n    return false;\n  }\n\n  const hasThreadId = isNil(testResponseData?.thread) === false;\n  if (hasThreadId === false) {\n    return false;\n  }\n\n  return true;\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface ThreadArchivedEvent extends ChatEventData {\n  type: AwsResponseEventType.THREAD_ARCHIVED;\n}\n\nexport function isThreadArchivedSuccessPayload(\n  response: ChatEventData,\n): response is ThreadArchivedEvent {\n  return (\n    (response as ThreadArchivedEvent).type ===\n    AwsResponseEventType.THREAD_ARCHIVED\n  );\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class LoadMoreMessagesFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RecoverThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/RecoverThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createRecoverThreadPayloadData(\n  threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform,\n): EventPayloadData<RecoverThreadEventData> {\n  const emptyData = {\n    eventType: AwsInputEventType.RECOVER_THREAD,\n    data: {},\n  };\n\n  if (threadIdOnExternalPlatform === undefined) {\n    return emptyData;\n  }\n\n  return {\n    ...emptyData,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SetThreadNameFailedError extends ChatSDKError {}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class ThreadRecoverFailedError extends ChatSDKError {}\n","import { LoadMoreMessagesEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LoadMoreMessages';\nimport { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\nimport { AttachmentUpload } from '@brandembassy/ts-types-chat/dist/message/AttachmentUpload';\nimport { ContactNumber } from '@brandembassy/ts-types-platform/dist/contact/ContactNumber';\nimport { ContactStatus } from '@brandembassy/ts-types-platform/dist/contact/ContactStatus';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { createAttachmentUploadMessageData } from '../attachment/sendAttachments';\nimport { getAccessToken } from '../authorization/accessTokenStorage';\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\nimport { isContactStatusChangedEvent } from '../contact';\nimport { Customer } from '../customer/Customer';\nimport {\n  CustomFieldsMap,\n  CustomFieldsObject,\n  getCustomFieldsArray,\n  setCustomFields,\n  setCustomFieldsFromArray,\n} from '../customField/CustomFields';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport {\n  ChatCustomEvent,\n  ChatEvent,\n  ChatEventData,\n  ChatEventType,\n} from '../event/ChatEvent';\nimport { IChatEventTarget } from '../event/ChatEventTarget';\nimport {\n  EventListenerFunction,\n  RemoveListenerFunction,\n} from '../event/ListenerFunction';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { createMessageData } from '../message/createMessageData';\nimport { getPostbackMessageContent } from '../message/getPostbackMessageContent';\nimport { getTextMessageContent } from '../message/getTextMessageContent';\nimport {\n  isLoadMoreMessagesEventData,\n  MoreMessagesLoadedEvent,\n} from '../message/loadMoreMessagesEventData';\nimport { createLoadMoreMessagesPayloadData } from '../message/loadMoreMessagesPayload';\nimport { MessageSuccessEventData } from '../message/MessageSuccessEventData';\nimport { sendMessage } from '../message/sendMessage';\nimport { createSendMessagePreviewPayloadData } from '../message/sendMessagePreviewPayload';\nimport { sendOutboundMessage } from '../message/sendOutboundMessage';\nimport { getThirdPartyToken } from '../securedSession/thirdPartyTokenStorage';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { AbortablePromise } from '../utils/AbortablePromise';\nimport { generateId } from '../utils/generateId';\nimport { isEmpty, isUndefined } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { createArchiveThreadEventPayloadData } from './archiveThread';\nimport { ArchiveThreadFailedError } from './ArchiveThreadFailedError';\nimport { assertNonEmptyTextMessageContent } from './assertNonEmptyTextMessageContent';\nimport { GetMetadataFailedError } from './GetMetadataFailedError';\nimport {\n  isLoadMetadataSuccessPayload,\n  LoadThreadMetadataChatEvent,\n} from './isLoadMetadataSuccessPayload';\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { isThreadArchivedSuccessPayload } from './isThreadArchivedSuccessPayload';\nimport { createLastMessageSeenPayloadData } from './lastMessageSeenPayload';\nimport { LoadMoreMessagesFailedError } from './LoadMoreMessagesFailedError';\nimport { createLoadThreadMetadataEventPayloadData } from './metadata';\nimport { createRecoverThreadPayloadData } from './recoverThreadPayload';\nimport { SendMessageOptions } from './SendMessageOptions';\nimport { createSetThreadCustomFieldsPayloadData } from './setThreadCustomFieldsPayload';\nimport { SetThreadNameFailedError } from './SetThreadNameFailedError';\nimport { filterCurrentThreadEventHandler } from './threadEventHandler';\nimport { ThreadRecoveredData } from './ThreadRecoveredData';\nimport { ThreadRecoverFailedError } from './ThreadRecoverFailedError';\nimport { createSendTranscriptPayloadData } from './transcript';\nimport {\n  createStartTypingEventPayloadData,\n  createStopTypingEventPayloadData,\n} from './typingEvents';\nimport {\n  createUpdateThreadPayloadData,\n  isUpdateThreadSuccess,\n} from './updateThread';\n\nexport class Thread {\n  public idOnExternalPlatform: ThreadIdOnExternalPlatform;\n\n  protected _websocketClient: WebSocketClient;\n  protected _exists: boolean = false;\n\n  protected _messageEmitter: IChatEventTarget;\n  protected _typingTimeoutID: ReturnType<typeof setTimeout> | undefined =\n    undefined;\n  protected _isAuthorizationEnabled: boolean = false;\n  protected _customer: Customer | null;\n  protected _customFields: CustomFieldsMap = new Map();\n  private _typingForPreviewTimeoutID: ReturnType<typeof setTimeout> | undefined;\n  private _typingPreviewText: string = '';\n\n  constructor(\n    idOnExternalPlatform: ThreadIdOnExternalPlatform,\n    websocketClient: WebSocketClient,\n    messageEmitter: IChatEventTarget,\n    customer: Customer | null,\n    customFields: CustomFieldsObject = {},\n    isAuthorizationEnabled: boolean = false,\n  ) {\n    this.idOnExternalPlatform = idOnExternalPlatform;\n    this._websocketClient = websocketClient;\n    this._messageEmitter = messageEmitter;\n    this._customer = customer;\n    this._isAuthorizationEnabled = isAuthorizationEnabled;\n\n    setCustomFields(this._customFields, customFields);\n    this._registerEventHandlers();\n  }\n\n  /**\n   * Recover existing chat\n   * @returns AbortablePromise<ThreadRecoveredData>\n   * @throws ThreadRecoverFailedError\n   *  * This exception is thrown when the recover fails or the thread does not exist.\n   */\n  public recover(): AbortablePromise<ThreadRecoveredData> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const response = await sendChatEvent(\n        createRecoverThreadPayloadData(this.idOnExternalPlatform),\n        this._websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(response)) {\n        const { contact, consumerContact, ...restData } = response.data;\n\n        resolve({\n          ...restData,\n          contact: contact ?? consumerContact,\n        });\n      } else {\n        reject(new ThreadRecoverFailedError('Thread recover fail', response));\n      }\n    });\n  }\n\n  /**\n   * Send message\n   * @param messageData - message data\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error can contain (`error.data`) a response from the backend with details.\n   */\n  public async sendMessage(\n    messageData: SendMessageEventData,\n  ): Promise<MessageSuccessEventData> {\n    assertNonEmptyTextMessageContent(messageData);\n\n    const messageDataWithCustomFields =\n      this._mergeCustomFieldsAndAccessTokenWithMessageData(messageData, false);\n\n    return sendMessage(messageDataWithCustomFields, this._websocketClient);\n  }\n\n  /**\n   * Send text message\n   * @param messageText - text of message\n   * @param options - options\n   */\n  public async sendTextMessage(\n    messageText: string,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    const textMessageContent = getTextMessageContent(messageText);\n    const messageData = createMessageData(\n      textMessageContent,\n      messageId,\n      this.idOnExternalPlatform,\n      browserFingerprint,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send postback message\n   * @param postback - postback\n   * @param messageText - text of message\n   * @param options - options\n   */\n  public async sendPostbackMessage(\n    postback: string,\n    messageText: string,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    const postbackMessageContent = getPostbackMessageContent(\n      postback,\n      messageText,\n    );\n    const messageData = createMessageData(\n      postbackMessageContent,\n      messageId,\n      this.idOnExternalPlatform,\n      browserFingerprint,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send Outbound Message\n   * @param messageData - message data\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error contains (`error.data`) a response from the backend with details.\n   */\n  public async sendOutboundMessage(\n    messageData: SendOutboundEventData,\n  ): Promise<MessageSuccessEventData> {\n    const outboundEventDataWithCustomFields =\n      this._mergeCustomFieldsAndAccessTokenWithMessageData(messageData, true);\n\n    return sendOutboundMessage(\n      outboundEventDataWithCustomFields,\n      this._websocketClient,\n    );\n  }\n\n  /**\n   * Load previous messages\n   * @returns Promise MoreMessagesLoadedEvent | null\n   * @throws LoadMoreMessagesFailedError\n   *  * This exception is thrown when the attempt to load more messages fails.\n   */\n  public async loadMoreMessages(): Promise<MoreMessagesLoadedEvent | null> {\n    const { scrollToken, oldestMessageDatetime } =\n      SDKVariableStorage.THREAD_DATA ?? {};\n\n    if (isEmpty(scrollToken)) {\n      return null;\n    }\n\n    const loadMoreMessagesEventData: LoadMoreMessagesEventData = {\n      scrollToken: String(scrollToken),\n      // @ts-expect-error oldestMessageDatetime is missing in type definition\n      oldestMessageDatetime,\n      thread: { idOnExternalPlatform: this.idOnExternalPlatform },\n    };\n\n    const response = await sendChatEvent(\n      createLoadMoreMessagesPayloadData(loadMoreMessagesEventData),\n      this._websocketClient,\n    );\n\n    if (isLoadMoreMessagesEventData(response)) {\n      return response;\n    }\n\n    throw new LoadMoreMessagesFailedError(\n      'Load more messages failed',\n      response,\n    );\n  }\n\n  /**\n   * Mark all messages in the thread as seen\n   */\n  public async lastMessageSeen(): Promise<ChatEventData> {\n    const payloadData = createLastMessageSeenPayloadData(\n      this.idOnExternalPlatform,\n    );\n\n    return sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  /**\n   * Send attachment\n   *\n   * Raw function to send attachments\n   * @param files - An object of this type is returned by the files' property of the HTML <input> element; this lets you access the list of files selected with the <input type=\"file\"> element.\n   * @param options - options\n   * @throws UploadAttachmentError\n   *  * This exception is thrown when the file upload fails. The `error.data` contains information about allowed file size and types.\n   */\n  public async sendAttachments(\n    files: FileList | Array<File> | Array<AttachmentUpload>,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    if (isUndefined(files) || files.length === 0) {\n      throw new ChatSDKError(\n        'FileList must be provided to sendAttachment method',\n      );\n    }\n\n    const messageData = await createAttachmentUploadMessageData(\n      files,\n      this.idOnExternalPlatform,\n      options,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send start and stop typing events. It sends stop typing event after the timeout. Repeated calls resets this timeout.\n   * @param timeout - The timeout in milliseconds.\n   * @param onSendCallback - Callback to be called after the stop typing event is sent.\n   */\n  public keystroke(timeout = 1000, onSendCallback?: () => void): void {\n    if (!this._typingTimeoutID) {\n      sendChatEvent(\n        createStartTypingEventPayloadData(this.idOnExternalPlatform),\n        this._websocketClient,\n      );\n    }\n\n    clearTimeout(this._typingTimeoutID);\n    this._typingTimeoutID = setTimeout(() => {\n      this._stopTypingCallback(onSendCallback);\n    }, timeout);\n  }\n\n  /**\n   * Manually send the stop typing event and clear the keystroke timeout.\n   */\n  public stopTyping(): void {\n    this._stopTypingCallback();\n  }\n\n  private _stopTypingCallback(onSendCallback?: () => void): void {\n    clearTimeout(this._typingTimeoutID);\n    this._typingTimeoutID = undefined;\n    sendChatEvent(\n      createStopTypingEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n    if (typeof onSendCallback === 'function') {\n      onSendCallback();\n    }\n  }\n\n  /**\n   * Send typing event for message preview after the timeout.\n   * @param currentText - current text\n   * @param timeout - timeout in milliseconds\n   * @returns void\n   *\n   */\n  keystrokeForPreview(currentText: string, timeout = 1250): void {\n    this._typingPreviewText = currentText;\n    if (this._typingForPreviewTimeoutID) {\n      return;\n    }\n\n    this._typingForPreviewTimeoutID = setTimeout(() => {\n      this.stopTypingForPreview();\n    }, timeout);\n  }\n\n  /**\n   * Manually send the stop typing event for message preview and clear the keystroke timeout.\n   * @param shouldSendPreview - should send preview\n   * @returns void\n   *\n   */\n  stopTypingForPreview(shouldSendPreview = true): void {\n    clearTimeout(this._typingForPreviewTimeoutID);\n    this._typingForPreviewTimeoutID = undefined;\n    const currentPreviewText = this._typingPreviewText;\n    this._typingPreviewText = '';\n\n    if (shouldSendPreview === false) {\n      return;\n    }\n    this.sendMessagePreview(currentPreviewText);\n  }\n\n  /**\n   * Get Thread Metadata\n   * @returns response otherwise throw an error response\n   * @throws GetMetadataFailedError\n   *  * This exception is thrown when getting thread metadata failed.\n   */\n  public async getMetadata(): Promise<LoadThreadMetadataChatEvent> {\n    const response = await sendChatEvent(\n      createLoadThreadMetadataEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n\n    if (isLoadMetadataSuccessPayload(response)) {\n      return response;\n    }\n\n    throw new GetMetadataFailedError('Get metadata failed', response);\n  }\n\n  public onThreadEvent(\n    type: ChatEventType,\n    handler: EventListenerFunction,\n  ): RemoveListenerFunction {\n    const filteredEventHandler = filterCurrentThreadEventHandler(\n      this.idOnExternalPlatform,\n      handler,\n    );\n\n    this._messageEmitter.addEventListener(type, filteredEventHandler);\n\n    return () => {\n      this._messageEmitter.removeEventListener(type, filteredEventHandler);\n    };\n  }\n\n  /**\n   * Send current Custom Fields\n   * @param selectedFieldIDs - it will send only custom fields with these IDs, if provided. Otherwise, it will send all custom fields.\n   */\n  public async sendCustomFields(\n    selectedFieldIDs?: Array<CustomField['ident']>,\n  ): Promise<ChatEventData> {\n    const customFieldsArray = getCustomFieldsArray(this._customFields).filter(\n      (customField) => {\n        if (selectedFieldIDs) {\n          return selectedFieldIDs.includes(customField.ident);\n        }\n\n        return true;\n      },\n    );\n\n    const customFieldsData = createSetThreadCustomFieldsPayloadData(\n      customFieldsArray,\n      this.idOnExternalPlatform,\n    );\n\n    return sendChatEvent(customFieldsData, this._websocketClient);\n  }\n\n  /**\n   * Set thread custom fields and send them\n   * @param customFields - custom fields object\n   * @example \\{ indentName: 'value' \\}\n   */\n  public async setCustomFields(\n    customFields: CustomFieldsObject,\n  ): Promise<void> {\n    setCustomFields(this._customFields, customFields);\n\n    if (this._exists === false) {\n      // let customFields be sent by the first message\n      return;\n    }\n\n    await this.sendCustomFields(Object.keys(customFields));\n  }\n\n  /**\n   * Set thread custom field\n   * @param name - custom field name\n   * @param value - custom field value\n   */\n  public setCustomField(\n    name: CustomField['ident'],\n    value: CustomField['value'],\n  ): Promise<void> {\n    return this.setCustomFields({ [name]: value });\n  }\n\n  /**\n   * Set thread as archived\n   * @returns Promise true\n   * @throws ArchiveThreadFailedError\n   *  * This exception is thrown when the archive thread failed.\n   */\n  public async archive(): Promise<true> {\n    const response = await sendChatEvent(\n      createArchiveThreadEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n\n    if (isThreadArchivedSuccessPayload(response)) {\n      return true;\n    }\n\n    throw new ArchiveThreadFailedError('Archive Thread failed', response);\n  }\n\n  /**\n   * Set thread name\n   * @param name - New name of the Thread\n   * @returns Promise true\n   * @throws SetThreadNameFailedError\n   *  * This exception is thrown when the set thread name failed.\n   */\n  public async setName(name: string): Promise<true> {\n    const updateThreadData = createUpdateThreadPayloadData(\n      this.idOnExternalPlatform,\n      name,\n    );\n\n    const response = await sendChatEvent(\n      updateThreadData,\n      this._websocketClient,\n    );\n\n    if (isUpdateThreadSuccess(response)) {\n      return true;\n    }\n\n    throw new SetThreadNameFailedError('Set Thread name failed', response);\n  }\n\n  /**\n   * Send message preview\n   * @param text - text\n   */\n  public async sendMessagePreview(text: string): Promise<void> {\n    const payloadData = createSendMessagePreviewPayloadData(\n      this.idOnExternalPlatform,\n      text,\n    );\n\n    await sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  /**\n   * Send conversation transcript to email\n   */\n  public async sendTranscript(\n    contactNumber: ContactNumber,\n    email: string,\n  ): Promise<ChatEventData> {\n    const payloadData = createSendTranscriptPayloadData(contactNumber, email);\n\n    return sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  protected _setThreadAndCustomerExists(): void {\n    this._exists = true;\n    this._customer?.setExists(true);\n  }\n\n  protected _clearCustomFieldsOnContactStatusChangedToClosed(\n    event: ChatCustomEvent,\n  ): void {\n    const eventDetail = event.detail;\n\n    if (!isContactStatusChangedEvent(eventDetail)) {\n      return;\n    }\n\n    if (eventDetail.data.case.status === ContactStatus.CLOSED) {\n      // Delete custom fields after contact closure to prevent sending custom fields from previous contact.\n      this._customFields.clear();\n    }\n  }\n\n  private _mergeCustomFieldsAndAccessTokenWithMessageData<\n    T extends SendMessageEventData | SendOutboundEventData,\n  >(messageData: T, isOutbound: boolean): T {\n    // Access token\n    let accessToken;\n\n    const storedThirdPartyToken = getThirdPartyToken();\n    const storedAccessToken = getAccessToken();\n\n    if (\n      this._isAuthorizationEnabled &&\n      (storedThirdPartyToken || storedAccessToken)\n    ) {\n      accessToken = {\n        token: storedThirdPartyToken?.access_token ?? storedAccessToken?.token,\n      };\n    }\n\n    // Update Thread (Contact) custom fields\n    setCustomFieldsFromArray(\n      this._customFields,\n      messageData.consumerContact.customFields,\n    );\n\n    const consumerContact = {\n      customFields: getCustomFieldsArray(this._customFields),\n    };\n\n    // Update Customer custom fields\n    let consumer;\n    if (!isOutbound) {\n      this._customer?.setCustomFieldsFromArray(\n        (messageData as SendMessageEventData).consumer?.customFields ?? [],\n      );\n      consumer = {\n        customFields: this._customer?.getCustomFieldsArray() ?? [],\n      };\n    }\n\n    return {\n      ...messageData,\n      accessToken,\n      consumer,\n      consumerContact,\n    };\n  }\n\n  private _registerEventHandlers() {\n    this.onThreadEvent(ChatEvent.CASE_CREATED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.CONTACT_CREATED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.THREAD_RECOVERED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.CONTACT_STATUS_CHANGED, (event) =>\n      this._clearCustomFieldsOnContactStatusChangedToClosed(event),\n    );\n  }\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { SendMessageFailedError } from '../message';\nimport { isEmpty } from '../utils/is';\n\nexport function assertNonEmptyTextMessageContent(\n  messageData: SendMessageEventData,\n): void {\n  if (messageData.messageContent.type !== MessageType.TEXT) {\n    return;\n  }\n\n  if (messageData.attachments.length > 0) {\n    return;\n  }\n\n  if (isEmpty(messageData.messageContent.payload.text) === false) {\n    return;\n  }\n\n  throw new SendMessageFailedError(\n    'Message content cannot be empty for text message',\n  );\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendMessagePayloadData } from './sendMessagePayload';\n\nexport const sendMessage = async (\n  messageData: SendMessageEventData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const sendMessagePayloadData = createSendMessagePayloadData(messageData);\n\n  const response = await sendChatEvent(sendMessagePayloadData, websocketClient);\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send message failed', response);\n};\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendMessagePayloadData = (\n  eventData: SendMessageEventData,\n): EventPayloadData<SendMessageEventData> => ({\n  eventType: AwsInputEventType.SEND_MESSAGE,\n  data: eventData,\n});\n","import { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { MessageContent } from './createMessageData';\n\nexport function getTextMessageContent(messageText: string): MessageContent {\n  return {\n    payload: {\n      text: messageText,\n    },\n    type: MessageType.TEXT,\n  };\n}\n","import { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { MessageContent } from './createMessageData';\n\nexport function getPostbackMessageContent(\n  postback: string,\n  messageText: string,\n): MessageContent {\n  return {\n    payload: {\n      text: messageText,\n      postback, // Leaving this here for backwards compatibility\n    },\n    postback,\n    type: MessageType.TEXT, // MessageType.POSTBACK is deprecated\n  };\n}\n","import { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendOutboundMessagePayloadData } from './sendOutboundMessagePayload';\n\nexport const sendOutboundMessage = async (\n  messageData: SendOutboundEventData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const sendOutboundMessagePayloadData =\n    createSendOutboundMessagePayloadData(messageData);\n\n  const response = await sendChatEvent(\n    sendOutboundMessagePayloadData,\n    websocketClient,\n  );\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send Outbound message failed', response);\n};\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendOutboundMessagePayloadData = (\n  eventData: SendOutboundEventData,\n): EventPayloadData<SendOutboundEventData> => ({\n  eventType: AwsInputEventType.SEND_OUTBOUND,\n  data: eventData,\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { MessageSeenByConsumerEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/MessageSeenByConsumer';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createLastMessageSeenPayloadData(\n  threadIdOnExternalPlatform: string,\n): EventPayloadData<MessageSeenByConsumerEventData> {\n  return {\n    eventType: AwsInputEventType.MESSAGE_SEEN,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SenderTypingEndedEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SenderTypingEnded';\nimport { SenderTypingStartedEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SenderTypingStarted';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createStartTypingEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SenderTypingStartedEventData> {\n  return {\n    eventType: AwsInputEventType.SENDER_TYPING_STARTED,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n\nexport function createStopTypingEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SenderTypingEndedEventData> {\n  return {\n    eventType: AwsInputEventType.SENDER_TYPING_ENDED,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ArchiveThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/ArchiveThread';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createLoadThreadMetadataEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<ArchiveThreadEventData> {\n  return {\n    eventType: AwsInputEventType.LOAD_THREAD_METADATA,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { ChatCustomEvent } from '../event/ChatEvent';\nimport { EventListenerFunction } from '../event/ListenerFunction';\n\ninterface DataWithThread {\n  case?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  message?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  messagePreview?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  thread?: {\n    idOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n}\n\nconst getThreadId = (data: unknown): ThreadIdOnExternalPlatform | undefined => {\n  const dataWithThread = data as DataWithThread;\n\n  return (\n    dataWithThread?.thread?.idOnExternalPlatform ??\n    dataWithThread?.case?.threadIdOnExternalPlatform ??\n    dataWithThread?.message?.threadIdOnExternalPlatform ??\n    dataWithThread?.messagePreview?.threadIdOnExternalPlatform\n  );\n};\n\nexport const filterCurrentThreadEventHandler =\n  (threadId: ThreadIdOnExternalPlatform, handler: EventListenerFunction) =>\n  (event: ChatCustomEvent): void => {\n    const eventData = event.detail.data;\n\n    const eventThreadId = getThreadId(eventData);\n\n    if (eventThreadId === threadId) {\n      handler(event);\n    }\n  };\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SetConsumerContactCustomFieldsEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SetConsumerContactCustomFields';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createSetThreadCustomFieldsPayloadData(\n  customFields: Array<CustomField>,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SetConsumerContactCustomFieldsEventData> {\n  return {\n    eventType: AwsInputEventType.SET_CONSUMER_CONTACT_CUSTOM_FIELD,\n    data: {\n      customFields,\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ArchiveThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/ArchiveThread';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createArchiveThreadEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<ArchiveThreadEventData> {\n  return {\n    eventType: AwsInputEventType.ARCHIVE_THREAD,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { UpdateThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/UpdateThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { isUndefined } from '../utils/is';\n\nexport function createUpdateThreadPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  threadName: string,\n): EventPayloadData<UpdateThreadEventData> {\n  return {\n    eventType: AwsInputEventType.UPDATE_THREAD,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n        threadName,\n      },\n    },\n  };\n}\n\nexport function isUpdateThreadSuccess(response: ChatEventData): boolean {\n  return isUndefined(response.error);\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendMessagePreviewEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessagePreview';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendMessagePreviewPayloadData = (\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  text: string,\n): EventPayloadData<SendMessagePreviewEventData> => ({\n  eventType: AwsInputEventType.SEND_MESSAGE_PREVIEW,\n  data: {\n    thread: {\n      idOnExternalPlatform: threadIdOnExternalPlatform,\n    },\n    messageContent: {\n      payload: { text },\n      type: MessageType.TEXT,\n    },\n  },\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nimport { ContactNumber } from '@brandembassy/ts-types-platform/dist/contact/ContactNumber';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendTranscriptPayloadData = (\n  contactNumber: ContactNumber,\n  email: string,\n): EventPayloadData<AwsInputEventData> => ({\n  eventType: AwsInputEventType.SEND_TRANSCRIPT,\n  data: {\n    consumerContact: {\n      id: contactNumber,\n    },\n    consumerRecipients: [\n      {\n        idOnExternalPlatform: email,\n      },\n    ],\n  },\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RecoverThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/RecoverThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../../sockets/EventPayload';\n\nexport function createRecoverLivechatThreadPayloadData(\n  threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform,\n): EventPayloadData<RecoverThreadEventData> {\n  const emptyData = {\n    eventType: AwsInputEventType.RECOVER_LIVECHAT,\n    data: {},\n  };\n\n  if (threadIdOnExternalPlatform === undefined) {\n    return emptyData;\n  }\n\n  return {\n    ...emptyData,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { LoadMoreMessagesEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LoadMoreMessages';\nimport { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { Customer } from '../../customer/Customer';\nimport { CustomFieldsObject } from '../../customField/CustomFields';\nimport { ChatSDKError } from '../../error/ChatSDKError';\nimport { ChatCustomEvent, ChatEvent } from '../../event/ChatEvent';\nimport { IChatEventTarget } from '../../event/ChatEventTarget';\nimport { sendChatEvent } from '../../event/sendChatEvent';\nimport {\n  isLoadMoreMessagesEventData,\n  MoreMessagesLoadedEvent,\n} from '../../message/loadMoreMessagesEventData';\nimport { createLoadMoreMessagesPayloadData } from '../../message/loadMoreMessagesPayload';\nimport { MessageSuccessEventData } from '../../message/MessageSuccessEventData';\nimport { WebSocketClient } from '../../sockets/WebSocketClient';\nimport { AbortablePromise } from '../../utils/AbortablePromise';\nimport { isEmpty, isUndefined } from '../../utils/is';\nimport { SDKVariableStorage } from '../../variables/VariableStorage';\nimport { isRecoverSuccessPayload } from '../isRecoverSuccessPayload';\nimport { LoadMoreMessagesFailedError } from '../LoadMoreMessagesFailedError';\nimport { Thread } from '../Thread';\nimport { ThreadRecoveredData } from '../ThreadRecoveredData';\nimport { ThreadRecoverFailedError } from '../ThreadRecoverFailedError';\n\nimport { createEndThreadPayloadData } from './createEndThreadPayloadData';\nimport { createRecoverLivechatThreadPayloadData } from './recoverLivechatThreadPayload';\n\nexport class LivechatThread extends Thread {\n  protected _isInitialized: boolean = false;\n  protected _canSendMessage: boolean = true;\n\n  constructor(\n    idOnExternalPlatform: ThreadIdOnExternalPlatform,\n    websocketClient: WebSocketClient,\n    messageEmitter: IChatEventTarget,\n    customer: Customer | null,\n    customFields: CustomFieldsObject = {},\n    isAuthorizationEnabled: boolean = false,\n  ) {\n    super(\n      idOnExternalPlatform,\n      websocketClient,\n      messageEmitter,\n      customer,\n      customFields,\n      isAuthorizationEnabled,\n    );\n\n    this._registerLivechatEventHandlers();\n  }\n\n  /**\n   * Recover existing live chat\n   * @returns AbortablePromise ThreadRecoveredData\n   * @throws ThreadRecoverFailedError\n   *  * This exception is thrown when the recover fails or the thread does not exist.\n   */\n  public override recover(): AbortablePromise<ThreadRecoveredData> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const response = await sendChatEvent(\n        createRecoverLivechatThreadPayloadData(this.idOnExternalPlatform),\n        this._websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(response)) {\n        const { contact, consumerContact, ...restData } = response.data;\n\n        resolve({\n          ...restData,\n          contact: contact ?? consumerContact,\n        });\n      } else {\n        reject(new ThreadRecoverFailedError('Thread recover fail', response));\n      }\n    });\n  }\n\n  public override async sendMessage(\n    messageData: SendMessageEventData,\n  ): Promise<MessageSuccessEventData> {\n    if (this._canSendMessage === false) {\n      throw new ChatSDKError('Cannot send more messages to Contact');\n    }\n\n    return super.sendMessage(messageData);\n  }\n\n  /**\n   * Start livechat\n   * @param initialMessageText - initial message text\n   */\n  public async startChat(\n    initialMessageText = 'Begin conversation',\n  ): Promise<MessageSuccessEventData | void> {\n    if (this._isInitialized) {\n      throw new ChatSDKError('Chat is already initialized');\n    }\n\n    try {\n      const result = await this.sendTextMessage(initialMessageText);\n      this._isInitialized = true;\n\n      return result;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        throw new ChatSDKError(\n          `Sending initial message failed because of (${error.message})`,\n        );\n      }\n\n      return;\n    }\n  }\n\n  public async endChat(): Promise<void> {\n    const threadData = SDKVariableStorage.THREAD_DATA ?? {};\n    const contactId = threadData?.contactId;\n\n    if (isUndefined(contactId)) {\n      throw new ChatSDKError(\n        'Cannot end Chat because of missing ContactId in the storage',\n      );\n    }\n\n    await sendChatEvent(\n      createEndThreadPayloadData(this.idOnExternalPlatform, contactId),\n      this._websocketClient,\n    );\n\n    return;\n  }\n\n  /**\n   * Load previous messages\n   * @returns Promise MoreMessagesLoadedEvent | null\n   * @throws LoadMoreMessagesFailedError\n   *  * This exception is thrown when the attempt to load more messages fails.\n   */\n  public async loadMoreMessages(): Promise<MoreMessagesLoadedEvent | null> {\n    const { scrollToken, oldestMessageDatetime, contactId } =\n      SDKVariableStorage.THREAD_DATA ?? {};\n\n    if (isEmpty(scrollToken) || isEmpty(contactId)) {\n      return null;\n    }\n\n    const loadMoreMessagesEventData: LoadMoreMessagesEventData = {\n      scrollToken: String(scrollToken),\n      // @ts-expect-error oldestMessageDatetime is missing in type definition\n      oldestMessageDatetime,\n      thread: { idOnExternalPlatform: this.idOnExternalPlatform },\n      // If a contactId is provided, the search will return messages only for this contact\n      contact: {\n        id: contactId,\n      },\n    };\n\n    const response = await sendChatEvent(\n      createLoadMoreMessagesPayloadData(loadMoreMessagesEventData),\n      this._websocketClient,\n    );\n\n    if (isLoadMoreMessagesEventData(response)) {\n      return response;\n    }\n\n    throw new LoadMoreMessagesFailedError(\n      'Load more messages failed',\n      response,\n    );\n  }\n\n  private _registerLivechatEventHandlers() {\n    this.onThreadEvent(\n      ChatEvent.LIVECHAT_RECOVERED,\n      (event: ChatCustomEvent) => {\n        if (!isRecoverSuccessPayload(event.detail)) {\n          return;\n        }\n\n        this._setThreadAndCustomerExists();\n      },\n    );\n  }\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { EndContactEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/EndContact';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../../sockets/EventPayload';\n\nexport function createEndThreadPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  contactId: CaseId,\n): EventPayloadData<EndContactEventData> {\n  return {\n    eventType: AwsInputEventType.END_CONTACT,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n      contact: { id: contactId },\n    },\n  };\n}\n","import { ThreadListFetchedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadListFetched';\n\nimport { isNull } from '../utils/is';\n\nexport const isThreadListFetchedPostbackData = (\n  data: unknown,\n): data is ThreadListFetchedPostbackData => {\n  if (isNull(data)) {\n    return false;\n  }\n\n  return 'threads' in (data as ThreadListFetchedPostbackData);\n};\n","import { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport function storeContactId(contactId: CaseId): void {\n  const originalThreadData = SDKVariableStorage.THREAD_DATA ?? {};\n\n  SDKVariableStorage.THREAD_DATA = {\n    ...originalThreadData,\n    contactId,\n  };\n}\n","import { ContactNumber } from '@brandembassy/ts-types-platform/dist/contact/ContactNumber';\n\nimport { isContactCreatedEvent } from '../contact/isContactCreatedEvent';\nimport { ChatEventData } from '../event/ChatEvent';\n\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { storeContactId } from './storeContactId';\n\nexport function storeContactIdMiddleware(\n  eventData: ChatEventData,\n): ChatEventData {\n  if (isContactCreatedEvent(eventData)) {\n    const contactId = eventData.data.case.id;\n\n    storeContactId(contactId);\n  }\n\n  if (isRecoverSuccessPayload(eventData)) {\n    const contactId = (eventData.data.consumerContact?.caseId ??\n      eventData.data.contact?.id) as ContactNumber;\n\n    storeContactId(contactId);\n  }\n\n  return eventData;\n}\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import { Message } from '../message';\nimport { isUndefined } from '../utils/is';\nimport { lastItemInArray } from '../utils/last';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport interface ScrollData {\n  messages: Array<Message>;\n  scrollToken: string;\n}\n\nexport function storeThreadScrollData(scrollData: ScrollData): void {\n  const oldestMessageDatetime = lastItemInArray(scrollData.messages)?.createdAt;\n\n  const oldThreadData = SDKVariableStorage.THREAD_DATA ?? {};\n\n  SDKVariableStorage.THREAD_DATA = {\n    ...oldThreadData,\n    scrollToken: scrollData.scrollToken,\n    oldestMessageDatetime: isUndefined(oldestMessageDatetime)\n      ? ''\n      : oldestMessageDatetime,\n  };\n}\n","import { ChatEventData } from '../event/ChatEvent';\nimport { isLoadMoreMessagesEventData } from '../message/loadMoreMessagesEventData';\n\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { storeThreadScrollData } from './storeThreadScrollData';\n\nexport function storeThreadScrollDataMiddleware(\n  eventData: ChatEventData,\n): ChatEventData {\n  if (isRecoverSuccessPayload(eventData)) {\n    const { messages, messagesScrollToken } = eventData.data;\n\n    storeThreadScrollData({\n      messages,\n      scrollToken: messagesScrollToken,\n    });\n  }\n\n  if (isLoadMoreMessagesEventData(eventData)) {\n    const { scrollToken, messages } = eventData.data;\n\n    storeThreadScrollData({ scrollToken, messages });\n  }\n\n  return eventData;\n}\n","export function assertNonNullable<T>(\n  value: T,\n): asserts value is NonNullable<T> {\n  if (typeof value === 'undefined' || value === null) {\n    throw Error(`Expected non-nullish value, got ${value}`);\n  }\n}\n\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function assertIsCallable<T extends (...args: Array<any>) => any>(\n  value: T,\n): asserts value is T {\n  if (typeof value !== 'function') {\n    throw Error(`Expected a callable function, got ${value}`);\n  }\n}\n","import { createQueryParametersAsString } from '@brandembassy/be-javascript-utils/dist/query/queryParameters';\nimport { WebSocketClientEvent } from '@brandembassy/push-updates-sdk';\nimport { AuthorizationToken } from '@brandembassy/ts-types-chat/dist/authorization/AuthorizationToken';\nimport { ConsumerAuthorizationSuccessPayloadData } from '@brandembassy/ts-types-chat/dist/authorization/ConsumerAuthorizationSuccessPayloadData';\nimport { AwsChatWindowEventActionRoute } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ChannelInfo } from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\nimport { Thread as ThreadView } from '@brandembassy/ts-types-platform/dist/thread/Thread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\nimport { VisitId } from '@brandembassy/ts-types-platform/dist/visit/visitId';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport {\n  getAccessToken,\n  resetAccessToken,\n  setAccessToken,\n} from './authorization/accessTokenStorage';\nimport { AuthorizationError } from './authorization/AuthorizationError';\nimport { createAuthorizationPayloadData } from './authorization/authorizationPayloadData';\nimport { authorizationReconnect } from './authorization/authorizationReconnect';\nimport { createRefreshTokenPayload } from './authorization/createRefreshTokenPayload';\nimport { CustomerReconnectSuccessPayloadData } from './authorization/CustomerReconnectSuccessPayloadData';\nimport { createGenerateAuthorizationTokenPayloadData } from './authorization/generateAuthorizationTokenPayload';\nimport { handleRefreshToken } from './authorization/handleRefreshToken';\nimport { isAuthorizationTokenGeneratedPostbackData } from './authorization/isAuthorizationTokenGeneratedPostbackData';\nimport { isAuthSuccessEvent } from './authorization/isAuthSuccessEvent';\nimport { isTokenRefreshedSuccessResponse } from './authorization/isTokenRefreshedSuccessResponse';\nimport { getBrowserLanguage } from './browserFingerprint/getBrowserFingerprint';\nimport {\n  ChannelAvailabilityResponse,\n  fetchChannelAvailability,\n} from './channel/fetchChannelAvailability';\nimport { fetchChannelInfo } from './channel/fetchChannelInfo';\nimport { handleBasicChannelInfo } from './channel/handleBasicChannelInfo';\nimport { type ChatSDKOptions } from './ChatSDKOptions';\nimport { Customer, setCustomerIdentity } from './customer/Customer';\nimport { CustomerInstance } from './customer/CustomerInstance';\nimport { isCustomerIdentityIdValid } from './customer/isCustomerIdentityIdValid';\nimport { setCustomerIdFromOptions } from './customer/setCustomerIdFromOptions';\nimport {\n  CustomFieldsMap,\n  CustomFieldsObject,\n  getCustomFields,\n  setCustomFieldsFromArray,\n} from './customField/CustomFields';\nimport { APP_NAME } from './env/appName';\nimport { buildEnvironmentEndpoints, EnvironmentName } from './env/Environments';\nimport { setEnvironmentEndpoints } from './env/setEnvironmentEndpoints';\nimport { CHAT_SDK_VERSION } from './env/version';\nimport { ChatSDKError } from './error/ChatSDKError';\nimport { ChatCustomEvent, ChatEvent, ChatEventType } from './event/ChatEvent';\nimport { ChatEventMiddleware } from './event/ChatEventMiddleware';\nimport { ChatEventTarget, IChatEventTarget } from './event/ChatEventTarget';\nimport { RemoveListenerFunction } from './event/ListenerFunction';\nimport { chatEventMapper } from './event/middleware/ChatEventMapper';\nimport { sdkVersionCheck } from './event/middleware/sdkVersionCheck';\nimport { sendChatEvent } from './event/sendChatEvent';\nimport { MessageSuccessEventData } from './message/MessageSuccessEventData';\nimport {\n  OfflineMessageData,\n  sendOfflineMessage,\n} from './message/sendOfflineMessage';\nimport { getEventData } from './request/getEventData';\nimport { makeRequest } from './request/makeRequest';\nimport {\n  onMessageHandler,\n  parseWsMessageEvent,\n} from './request/messageHandler';\nimport { clearCachedTransactionToken } from './securedSession/cachedTransactionToken';\nimport {\n  getSecuredSessionType,\n  getSecureSessionsTypeFromOptions,\n  isSecureSessions,\n  shouldHandleCustomerIdForSecureSessions,\n} from './securedSession/getSecuredSessionType';\nimport { getTransactionToken } from './securedSession/getTransactionToken';\nimport { handleNewThirdPartyToken } from './securedSession/handleNewThirdPartyToken';\nimport { SecureSessions } from './securedSession/SecureSessionsType';\nimport { resetThirdPartyToken } from './securedSession/thirdPartyTokenStorage';\nimport { createEvent, createEventPayload } from './sockets/EventPayload';\nimport { WebSocketClient } from './sockets/WebSocketClient';\nimport { LivechatThread, Thread } from './thread';\nimport {\n  isRecoverSuccessPayload,\n  ThreadRecoveredChatEvent,\n} from './thread/isRecoverSuccessPayload';\nimport { isThreadListFetchedPostbackData } from './thread/isThreadListFetchedPostbackData';\nimport { createRecoverLivechatThreadPayloadData } from './thread/livechatThread/recoverLivechatThreadPayload';\nimport { createRecoverThreadPayloadData } from './thread/recoverThreadPayload';\nimport { storeContactIdMiddleware } from './thread/storeContactIdMiddleware';\nimport { storeThreadScrollDataMiddleware } from './thread/storeThreadScrollDataMiddleware';\nimport { AbortablePromise } from './utils/AbortablePromise';\nimport { assertIsCallable, assertNonNullable } from './utils/assert';\nimport { generateId } from './utils/generateId';\nimport { getBrandIdAndChannelId } from './utils/getBrandIdAndChannelId';\nimport { getPromiseWithResolvers } from './utils/getPromiseWithResolvers';\nimport { isEmpty, isNil, isNull, isUndefined } from './utils/is';\nimport { SDKVariableStorage } from './variables/VariableStorage';\n\nexport class ChatSdk {\n  onError?: (error: Error) => void;\n  onRawEvent?: (event: ChatCustomEvent) => void;\n  public isLivechat: boolean | undefined;\n  public channelId: ChannelId = '';\n\n  #customer: Customer;\n  readonly #customerImage: string | undefined;\n  readonly #customerName: string | undefined;\n  readonly #customerId: CustomerIdentityIdOnExternalPlatform | undefined;\n  #isAuthorizationEnabled: boolean | undefined;\n  #websocketClient: WebSocketClient | null = null;\n\n  readonly #contactCustomFieldsQueue: CustomFieldsMap = new Map();\n  readonly #threadCache: Map<\n    ThreadIdOnExternalPlatform,\n    Thread | LivechatThread\n  > = new Map();\n  readonly #incomingChatEventMiddleware = new ChatEventMiddleware();\n  readonly #messageEmitter: IChatEventTarget;\n  readonly #ready = getPromiseWithResolvers<void>();\n\n  constructor(options: ChatSDKOptions) {\n    if (options === undefined) {\n      throw new ChatSDKError(\n        'No options was provided for initialization of ChatSdk',\n      );\n    }\n\n    this.#customerImage = options.customerImage;\n    this.#customerName = options.customerName;\n    this.#customerId = options.customerId;\n\n    SDKVariableStorage.AUTHORIZATION_CODE = options.authorizationCode;\n    SDKVariableStorage.BRAND_ID = options.brandId;\n    SDKVariableStorage.CHANNEL_ID = options.channelId;\n    SDKVariableStorage.APP_NAME = options.appName ?? APP_NAME;\n    SDKVariableStorage.APP_VERSION = `${options.appVersion ?? 0}`;\n    // Store the destinationId, visitId, and visitorId for payload data use\n    SDKVariableStorage.DESTINATION = options.destinationId;\n    SDKVariableStorage.VISIT_ID = options.visitId;\n    SDKVariableStorage.VISITOR_ID = options.visitorId;\n    SDKVariableStorage.LANGUAGE = options.language ?? getBrowserLanguage();\n    SDKVariableStorage.SECURED_SESSION = getSecureSessionsTypeFromOptions(\n      options.securedSession,\n    );\n\n    this.#customer = CustomerInstance.init();\n\n    if (typeof options.customerId !== 'undefined') {\n      setCustomerIdFromOptions(options.customerId);\n    }\n\n    if (options.cacheStorage) {\n      assertIsCallable(options.cacheStorage.getItem);\n      assertIsCallable(options.cacheStorage.setItem);\n      assertIsCallable(options.cacheStorage.removeItem);\n      SDKVariableStorage.CACHE_STORAGE = options.cacheStorage;\n    }\n\n    const { brandId, channelId } = getBrandIdAndChannelId();\n\n    this.onError = options.onError;\n    this.onRawEvent = options.onRawEvent;\n\n    // Register middleware for incoming chat events\n    this.#incomingChatEventMiddleware.register(chatEventMapper);\n    this.#incomingChatEventMiddleware.register(sdkVersionCheck);\n    this.#incomingChatEventMiddleware.register(storeThreadScrollDataMiddleware);\n    this.#incomingChatEventMiddleware.register(storeContactIdMiddleware);\n\n    this.#messageEmitter = new ChatEventTarget();\n\n    try {\n      if (isNaN(brandId)) {\n        throw new Error('Missing BrandID');\n      }\n      if (channelId === undefined) {\n        throw new Error('Missing ChannelId');\n      }\n      if (options.customerId === undefined && !isSecureSessions()) {\n        throw new Error('Missing CustomerId');\n      }\n\n      this.channelId = channelId;\n      this.isLivechat = options.isLivechat;\n      this.#isAuthorizationEnabled =\n        getSecuredSessionType() === SecureSessions.THIRD_PARTY ||\n        options.isAuthorizationEnabled;\n\n      this.#initEnvironment(options);\n    } catch (error: unknown) {\n      this.#onErrorHandler(error);\n    }\n  }\n\n  /**\n   * Initiate a WebSocket connection\n   * @param authorizationCode - authorization code\n   * @returns Promise<boolean> - true if the connection was created, false if the connection already exists\n   * @throws ChatSDKError\n   */\n  public async connect(authorizationCode?: string): Promise<boolean> {\n    if (authorizationCode) {\n      SDKVariableStorage.AUTHORIZATION_CODE = authorizationCode;\n    }\n    // Do not create a new connection if there is already one\n    if (this.#websocketClient !== null) {\n      return false;\n    }\n    await this.#createConnection();\n\n    if (isSecureSessions()) {\n      await this.ready();\n    }\n\n    // Init Customer instance after the websocketClient is initialized\n    if (this.#customerId !== undefined) {\n      this.#customer.setId(this.#customerId);\n    }\n\n    if (this.#customerName !== undefined) {\n      this.#customer.setName(this.#customerName);\n    }\n\n    if (this.#customerImage !== undefined) {\n      this.#customer.setImage(this.#customerImage);\n    }\n\n    if (this.#websocketClient !== null) {\n      this.#customer.setWebsocketClient(this.#websocketClient);\n    }\n\n    // Mark the instance as ready (if not already)\n    this.#ready.resolve();\n\n    return true;\n  }\n\n  public async ready(): Promise<void> {\n    return this.#ready.promise;\n  }\n\n  #onErrorHandler(error: unknown): void {\n    const sdkError = new ChatSDKError(error);\n\n    if (typeof this.onError === 'function') {\n      this.onError(sdkError);\n\n      return;\n    }\n\n    throw sdkError;\n  }\n\n  /**\n   * Get channel info\n   * Returns channel info like feature toggle status, translations, file upload restrictions, theme color settings etc.\n   * @returns ChannelInfo\n   * @throws ChatSDKError\n   */\n  public async getChannelInfo(): Promise<ChannelInfo> {\n    return fetchChannelInfo(\n      SDKVariableStorage.BRAND_ID as BrandId,\n      SDKVariableStorage.CHANNEL_ID as ChannelId,\n      SDKVariableStorage.LANGUAGE,\n    );\n  }\n\n  /**\n   * Get channel availability\n   * Returns channel availability Online/Offline\n   * @returns ChannelAvailabilityResponse\n   * @throws ChatSDKError\n   */\n  public async getChannelAvailability(): Promise<ChannelAvailabilityResponse> {\n    return fetchChannelAvailability(\n      SDKVariableStorage.BRAND_ID as BrandId,\n      SDKVariableStorage.CHANNEL_ID as ChannelId,\n    );\n  }\n\n  /**\n   * Send Authorization Event\n   * @deprecated - use Secured Session flow instead (SDK option `securedSession` and {@link ChatSdk.connect})\n   * @param authorizationCode - authorization code\n   * @param visitorId - visitor id\n   * @throws AuthorizationError\n   *  * This exception is thrown when the authorization or refresh token fails\n   */\n  public async authorize(\n    authorizationCode?: string,\n    visitorId?: VisitorId,\n  ): Promise<\n    | ConsumerAuthorizationSuccessPayloadData\n    | CustomerReconnectSuccessPayloadData\n  > {\n    await this.ready(); // Wait for the instance to be ready\n\n    const accessToken = getAccessToken();\n\n    // Reconnect first\n    if (accessToken !== null) {\n      try {\n        const reconnectResponse = await authorizationReconnect(\n          this.#websocketClient,\n          this.#sendRefreshTokenEvent,\n          accessToken,\n          visitorId,\n        );\n\n        return reconnectResponse;\n      } catch (error) {\n        // invalid token, continue with authorization\n      }\n    }\n\n    const basicChannelInfoRequest = handleBasicChannelInfo(\n      this.#isAuthorizationEnabled,\n      this.isLivechat,\n    );\n\n    // Authorization\n    const authorizationPayloadData = createAuthorizationPayloadData(\n      authorizationCode ?? SDKVariableStorage.AUTHORIZATION_CODE ?? null,\n      visitorId,\n    );\n\n    const authEvent = createEvent(\n      createEventPayload(authorizationPayloadData),\n      generateId(),\n      AwsChatWindowEventActionRoute.REGISTER,\n    );\n\n    const authorizationRequest = makeRequest(authEvent, this.#websocketClient);\n\n    const [authResponse, basicChannelInfo] = await Promise.all([\n      authorizationRequest,\n      basicChannelInfoRequest,\n    ]);\n\n    if (!isAuthSuccessEvent(authResponse)) {\n      this.#websocketClient?.disconnect();\n\n      throw new AuthorizationError('Authorization failed', authResponse.error);\n    }\n\n    // Auth successful - Use the response data\n    const { consumerIdentity, customer, contact } = authResponse.data;\n\n    // Setup Customer Identity and Customer Custom Fields\n    const customerId = consumerIdentity?.idOnExternalPlatform;\n    if (!isCustomerIdentityIdValid(customerId)) {\n      this.#websocketClient?.disconnect();\n\n      throw new ChatSDKError('Invalid customer identity');\n    }\n\n    setCustomerIdentity(this.#customer, consumerIdentity);\n\n    if (customer?.customFields) {\n      this.#customer.setCustomFieldsFromArray(customer.customFields);\n    }\n\n    // Queue Contact Custom Fields from the response\n    if (contact?.customFields) {\n      setCustomFieldsFromArray(\n        this.#contactCustomFieldsQueue,\n        contact.customFields,\n      );\n    }\n\n    // Set up the thread settings\n    this.#isAuthorizationEnabled = basicChannelInfo.isAuthorizationEnabled;\n    this.isLivechat = basicChannelInfo.isLivechat;\n\n    // Set up the access token and its refresh\n    if (authResponse.data.accessToken?.token !== undefined) {\n      setAccessToken(authResponse.data.accessToken);\n      handleRefreshToken(\n        authResponse.data.accessToken,\n        this.#sendRefreshTokenEvent,\n      );\n    }\n\n    return authResponse.data;\n  }\n\n  /**\n   * Generate Authorization Token from the given url\n   *\n   * @param threadIdOnExternalPlatform - Thread Id\n   * @param url - Authorization Service URL\n   */\n  public async generateAuthorizationToken(\n    threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n    url: string,\n  ): Promise<AuthorizationToken> {\n    const result = await sendChatEvent(\n      createGenerateAuthorizationTokenPayloadData(\n        threadIdOnExternalPlatform,\n        url,\n      ),\n      this.#websocketClient,\n    );\n\n    if (!isAuthorizationTokenGeneratedPostbackData(result.data)) {\n      throw new ChatSDKError(\n        'Invalid response from generate authorization token (generateAuthorizationToken)',\n      );\n    }\n\n    const { authorizationToken } = result.data;\n\n    return authorizationToken;\n  }\n\n  /**\n   * Register handler to chat event\n   *\n   * @param type - type of chat event\n   * @param handler - event handler\n   * @returns function to unregister handler\n   */\n  public onChatEvent(\n    type: ChatEventType,\n    handler: (event: ChatCustomEvent) => void,\n  ): RemoveListenerFunction {\n    this.#messageEmitter.addEventListener(type, handler);\n\n    return () => {\n      this.#messageEmitter.removeEventListener(type, handler);\n    };\n  }\n\n  /**\n   * Get Customer instance\n   */\n  public getCustomer(): Customer {\n    return this.#customer;\n  }\n\n  /**\n   * Get Thread instance by id\n   * @param id - thread id\n   * @returns instance of thread based on channel settings\n   */\n  public getThread(id: ThreadIdOnExternalPlatform): Thread | LivechatThread {\n    if (isNull(this.#websocketClient)) {\n      throw new ChatSDKError(\n        'Cannot get thread because websocket is disconnected',\n      );\n    }\n\n    if (isNil(id)) {\n      throw new ChatSDKError('Cannot get thread because id is undefined');\n    }\n\n    const cachedThread = this.#threadCache.get(id);\n    if (!isUndefined(cachedThread)) {\n      return cachedThread;\n    }\n\n    if (this.isLivechat === true) {\n      const liveThread = new LivechatThread(\n        id,\n        this.#websocketClient,\n        this.#messageEmitter,\n        this.#customer,\n        this._getContactCustomFieldsFromQueue(),\n        this.#isAuthorizationEnabled,\n      );\n      this.#threadCache.set(id, liveThread);\n\n      return liveThread;\n    }\n\n    const thread = new Thread(\n      id,\n      this.#websocketClient,\n      this.#messageEmitter,\n      this.#customer,\n      this._getContactCustomFieldsFromQueue(),\n      this.#isAuthorizationEnabled,\n    );\n    this.#threadCache.set(id, thread);\n\n    return thread;\n  }\n\n  /**\n   * Get list of available threads\n   * @returns list of threads\n   */\n  public async getThreadList(): Promise<Array<ThreadView> | null> {\n    if (isNull(this.#websocketClient)) {\n      throw new ChatSDKError(\n        'Cannot get thread list because websocket is disconnected',\n      );\n    }\n\n    const eventPayload = {\n      eventType: AwsInputEventType.FETCH_THREAD_LIST,\n      data: {},\n    };\n\n    const result = await sendChatEvent(eventPayload, this.#websocketClient);\n\n    if (!isThreadListFetchedPostbackData(result.data)) {\n      throw new ChatSDKError(\n        'Invalid response from fetch thread list (getThreadList)',\n      );\n    }\n\n    return result.data.threads;\n  }\n\n  /**\n   * Get access to a websocket connection\n   * @returns WebSocketClient instance\n   */\n  public getWebsocketClient(): WebSocketClient | null {\n    return this.#websocketClient;\n  }\n\n  /**\n   * Send the Offline Message\n   * @param offlineMessageData - offline message data (name, email, message)\n   * @returns success\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error contains (`error.data`) a response from the backend with details.\n   */\n  public async sendOfflineMessage(\n    offlineMessageData: OfflineMessageData,\n  ): Promise<MessageSuccessEventData> {\n    return sendOfflineMessage(offlineMessageData, this.#websocketClient);\n  }\n\n  /**\n   * Recover thread data\n   * @param threadIdOnExternalPlatform - thread id on external platform\n   * @returns thread session data\n   */\n  public recoverThreadData(\n    threadIdOnExternalPlatform:\n      | ThreadIdOnExternalPlatform\n      | undefined = undefined,\n  ): AbortablePromise<ThreadRecoveredChatEvent> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const recoverEvent = createRecoverThreadPayloadData(\n        threadIdOnExternalPlatform,\n      );\n      const recoverResponse = await sendChatEvent(\n        recoverEvent,\n        this.#websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(recoverResponse)) {\n        // Create a Thread instance after success recover\n        this.getThread(recoverResponse.data.thread.idOnExternalPlatform);\n        // Emit the 'recover' event to properly set up the Thread instance.\n        this.#messageEmitter.dispatchEvent(\n          new ChatCustomEvent(ChatEvent.THREAD_RECOVERED, {\n            detail: recoverResponse,\n          }),\n        );\n\n        resolve(recoverResponse);\n      } else {\n        reject(\n          new ChatSDKError('Invalid response from recover livechat thread'),\n        );\n      }\n    });\n  }\n\n  /**\n   * Recover livechat thread data\n   * @param threadIdOnExternalPlatform - thread id on external platform\n   * @returns thread livechat session data\n   */\n  public recoverLivechatThreadData(\n    threadIdOnExternalPlatform:\n      | ThreadIdOnExternalPlatform\n      | undefined = undefined,\n  ): AbortablePromise<ThreadRecoveredChatEvent> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const recoverEvent = createRecoverLivechatThreadPayloadData(\n        threadIdOnExternalPlatform,\n      );\n      const recoverResponse = await sendChatEvent(\n        recoverEvent,\n        this.#websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(recoverResponse)) {\n        // Create a Thread instance after success recover\n        this.getThread(recoverResponse.data.thread.idOnExternalPlatform);\n        // Emit the 'recover' event to properly set up the Thread instance.\n        this.#messageEmitter.dispatchEvent(\n          new ChatCustomEvent(ChatEvent.LIVECHAT_RECOVERED, {\n            detail: recoverResponse,\n          }),\n        );\n\n        resolve(recoverResponse);\n      } else {\n        reject(\n          new ChatSDKError('Invalid response from recover livechat thread'),\n        );\n      }\n    });\n  }\n\n  /**\n   * Reset the ChatSdk session and clear it from customer data\n   * - it disconnects the WS connection and creates a new one\n   * - generates new IDs if not provided\n   */\n  public async resetSession(\n    customerId: CustomerIdentityIdOnExternalPlatform = generateId(),\n    customerName: string = '',\n    customerImage: string = '',\n    visitorId: VisitorId = '',\n    visitId: VisitId = generateId(),\n  ): Promise<void> {\n    // Close the connection and clear the session data (customer, tokens, etc.)\n    this.#websocketClient?.disconnect();\n    this.#websocketClient = null;\n    this.#threadCache.clear();\n    this.#contactCustomFieldsQueue.clear();\n    resetAccessToken();\n    resetThirdPartyToken();\n    clearCachedTransactionToken();\n\n    this.#customer.destroy();\n\n    // Reinitialize\n    SDKVariableStorage.VISIT_ID = visitId;\n    SDKVariableStorage.VISITOR_ID = visitorId;\n\n    try {\n      await this.#createConnection();\n      this.#customer = new Customer(\n        customerId,\n        customerName,\n        customerImage,\n        this.#websocketClient,\n      );\n    } catch (e) {\n      this.#onErrorHandler(e);\n    }\n  }\n\n  async #createSocketUrl(): Promise<string> {\n    const { brandId, channelId } = getBrandIdAndChannelId();\n    const endpoint = SDKVariableStorage.ENDPOINT_GATEWAY;\n    const appVersion = SDKVariableStorage.APP_VERSION;\n    let accessToken: string | undefined;\n\n    assertNonNullable(endpoint);\n\n    const visitorId = SDKVariableStorage.VISITOR_ID ?? '';\n\n    if (isSecureSessions()) {\n      const customerId = shouldHandleCustomerIdForSecureSessions()\n        ? this.#customer.getId()\n        : null;\n      const authorizationCode = this.#isAuthorizationEnabled\n        ? SDKVariableStorage.AUTHORIZATION_CODE\n        : undefined;\n      const useCache = getSecuredSessionType() !== SecureSessions.THIRD_PARTY;\n\n      try {\n        const transactionTokenResponse = await getTransactionToken(\n          authorizationCode,\n          customerId,\n          useCache,\n        );\n        accessToken = transactionTokenResponse.accessToken;\n\n        const { customerIdentity, thirdParty, contact } =\n          transactionTokenResponse;\n        // Set Customer Identity\n        if (customerIdentity) {\n          setCustomerIdentity(this.#customer, customerIdentity);\n        }\n        // Set Third Party Token\n        if (thirdParty) {\n          handleNewThirdPartyToken(thirdParty);\n        }\n        // Set Contact custom fields\n        if (contact?.customFields) {\n          setCustomFieldsFromArray(\n            this.#contactCustomFieldsQueue,\n            contact.customFields,\n          );\n        }\n      } catch (error) {\n        this.#onErrorHandler(error);\n      }\n    }\n\n    // Mark the instance as ready\n    this.#ready.resolve();\n\n    const queryParameters = {\n      v: appVersion,\n      sdkPlatform: 'web',\n      sdkVersion: CHAT_SDK_VERSION,\n      brandId,\n      channelId,\n      ...(isSecureSessions() ? {} : { customerId: this.#customer.getId() }),\n      visitorId,\n      ...(isSecureSessions() ? { transactionToken: accessToken } : {}),\n    };\n\n    const queryParametersAsString =\n      createQueryParametersAsString(queryParameters);\n\n    const url = new URL(endpoint);\n    url.search = queryParametersAsString;\n\n    return url.toString();\n  }\n\n  async #createConnection(): Promise<void> {\n    try {\n      this.#websocketClient = this.#initWS();\n      await this.#websocketClient.connect();\n    } catch (error) {\n      this.#onErrorHandler(error);\n    }\n  }\n\n  _getContactCustomFieldsFromQueue(): CustomFieldsObject {\n    if (this.#contactCustomFieldsQueue.size > 0) {\n      const fields = getCustomFields(this.#contactCustomFieldsQueue);\n      this.#contactCustomFieldsQueue.clear();\n\n      return fields;\n    }\n\n    return {};\n  }\n\n  /**\n   * @deprecated - do not use\n   */\n  #sendRefreshTokenEvent = async (): Promise<void> => {\n    const accessToken = getAccessToken();\n    if (isNull(accessToken)) {\n      return;\n    }\n\n    const refreshTokenResponse = await sendChatEvent(\n      createRefreshTokenPayload(accessToken.token),\n      this.#websocketClient,\n    );\n\n    if (isTokenRefreshedSuccessResponse(refreshTokenResponse)) {\n      setAccessToken(refreshTokenResponse.data.accessToken);\n\n      handleRefreshToken(\n        refreshTokenResponse.data.accessToken,\n        this.#sendRefreshTokenEvent,\n      );\n\n      return;\n    }\n\n    throw new AuthorizationError(\n      'An error occurred while refreshing the access token',\n      refreshTokenResponse.error,\n    );\n  };\n\n  /**\n   * Setup Environment endpoints\n   */\n  #initEnvironment(options: ChatSDKOptions): void {\n    // Set custom environment\n    if (options.environment === EnvironmentName.custom) {\n      if (\n        isEmpty(options.customEnvironment) ||\n        isNil(options.customEnvironment)\n      ) {\n        throw new ChatSDKError(\n          'customEnvironment must be provided when environment is set to \"custom\"',\n        );\n      }\n\n      setEnvironmentEndpoints(options.customEnvironment);\n\n      return;\n    }\n\n    // Set predefined environment\n    const endpoints = buildEnvironmentEndpoints(options.environment);\n    setEnvironmentEndpoints(endpoints);\n  }\n\n  #initWS(): WebSocketClient {\n    const client = new WebSocketClient(\n      this.onError,\n      this.#createSocketUrl.bind(this),\n    );\n\n    client.on(WebSocketClientEvent.MESSAGE, async (event: ChatCustomEvent) => {\n      try {\n        if (typeof this.onRawEvent === 'function') {\n          this.onRawEvent(event);\n        }\n\n        const eventData = await getEventData(parseWsMessageEvent(event));\n\n        const parsedEvent =\n          this.#incomingChatEventMiddleware.process(eventData);\n\n        if (!isNil(parsedEvent)) {\n          const { type } = parsedEvent;\n\n          onMessageHandler(parsedEvent);\n\n          this.#messageEmitter.dispatchEvent(\n            new ChatCustomEvent(type ?? '', {\n              detail: parsedEvent,\n            }),\n          );\n        }\n      } catch (error: unknown) {\n        this.#onErrorHandler(error);\n      }\n    });\n\n    return client;\n  }\n}\n","interface PromiseWithResolvers<T = unknown> {\n  promise: Promise<T>;\n  reject: (reason: unknown) => void;\n  resolve: (value: T) => void;\n}\n\nexport function getPromiseWithResolvers<T>(): PromiseWithResolvers<T> {\n  let resolve, reject;\n  const promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n\n  return { promise, resolve, reject } as unknown as PromiseWithResolvers<T>;\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RefreshTokenData } from '@brandembassy/ts-types-chat/dist/awsEvents/RefreshToken';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createRefreshTokenPayload(\n  token: string,\n): EventPayloadData<RefreshTokenData> {\n  return {\n    eventType: AwsInputEventType.REFRESH_TOKEN,\n    data: {\n      accessToken: {\n        token,\n      },\n    },\n  };\n}\n","export const APP_NAME = 'chat-web-sdk';\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport {\n  isSecureSessions,\n  shouldHandleCustomerIdForSecureSessions,\n} from '../securedSession/getSecuredSessionType';\n\nimport { CustomerInstance } from './CustomerInstance';\n\nexport function setCustomerIdFromOptions(customerIdOption: unknown): void {\n  if (\n    isSecureSessions() &&\n    shouldHandleCustomerIdForSecureSessions() === false &&\n    typeof customerIdOption !== 'undefined'\n  ) {\n    throw new ChatSDKError(\n      'The CustomerId cannot be set when secured sessions are enabled',\n    );\n  }\n\n  if (typeof customerIdOption === 'string') {\n    CustomerInstance.getInstance().setId(customerIdOption);\n  }\n}\n","import { ChannelAvailability } from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SdkVersionNotSupported } from '../error/SdkVersionNotSupported';\nimport { isSdkVersionNotSupportedEvent } from '../event/middleware/sdkVersionCheck';\nimport { getDefaultHeaders } from '../request/defaultHeaders';\nimport { getErrorResponseData } from '../request/getErrorResponseData';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport interface ChannelAvailabilityResponse {\n  status: ChannelAvailability;\n}\n\nexport async function fetchChannelAvailability(\n  brandId: BrandId,\n  channelId: ChannelId,\n): Promise<ChannelAvailabilityResponse> {\n  const CHANNEL_INTEGRATION_URL = SDKVariableStorage.ENDPOINT_CHAT;\n\n  const response = await fetch(\n    `${CHANNEL_INTEGRATION_URL}/chat/1.0/brand/${brandId}/channel/${channelId}/availability`,\n    {\n      method: 'GET',\n      headers: {\n        ...getDefaultHeaders(),\n      },\n    },\n  );\n\n  if (!response.ok) {\n    const errorData = await getErrorResponseData(response);\n\n    if (isSdkVersionNotSupportedEvent(errorData)) {\n      throw new SdkVersionNotSupported();\n    }\n\n    throw new ChatSDKError(\n      `Failed to fetch channel availability. Status (${response.status})`,\n      { response },\n    );\n  }\n\n  return response.json();\n}\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { AuthorizationError } from './AuthorizationError';\nimport { createReconnectPayloadData } from './createReconnectPayloadData';\nimport { CustomerReconnectSuccessPayloadData } from './CustomerReconnectSuccessPayloadData';\nimport { handleRefreshToken } from './handleRefreshToken';\n\nexport async function authorizationReconnect(\n  websocketClient: WebSocketClient | null,\n  refreshTokenEventCallback: () => Promise<void>,\n  accessToken: AccessToken,\n  visitorId?: string,\n): Promise<CustomerReconnectSuccessPayloadData> {\n  const reconnectPayload = createReconnectPayloadData(accessToken, visitorId);\n\n  const response = await sendChatEvent(reconnectPayload, websocketClient);\n\n  const hasError = response.error !== undefined;\n\n  if (hasError) {\n    throw new AuthorizationError(\n      'Authorization reconnect failed',\n      response.error,\n    );\n  }\n\n  const successReconnectResponse: CustomerReconnectSuccessPayloadData = {\n    reconnected: true,\n  };\n\n  handleRefreshToken(accessToken, refreshTokenEventCallback);\n\n  return successReconnectResponse;\n}\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { isUndefined } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { fetchChannelInfo } from './fetchChannelInfo';\n\nexport async function handleBasicChannelInfo(\n  isAuthorizationEnabled: undefined | boolean,\n  isLivechat: undefined | boolean,\n): Promise<{\n  isAuthorizationEnabled: boolean;\n  isLivechat: boolean;\n}> {\n  if (!isUndefined(isAuthorizationEnabled) && !isUndefined(isLivechat)) {\n    return {\n      isAuthorizationEnabled,\n      isLivechat,\n    };\n  }\n\n  const channelInfo = await fetchChannelInfo(\n    SDKVariableStorage.BRAND_ID as BrandId,\n    SDKVariableStorage.CHANNEL_ID as ChannelId,\n  );\n\n  return {\n    isAuthorizationEnabled: channelInfo.isAuthorizationEnabled,\n    isLivechat: channelInfo.isLiveChat,\n  };\n}\n","import { AuthorizeCustomerData } from '@brandembassy/ts-types-chat/dist/awsEvents/AuthorizeCustomer';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport { CHAT_SDK_VERSION } from '../env/version';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { generateId } from '../utils/generateId';\nimport { createVisitorPayload } from '../visitor/createVisitorPayload';\n\nexport function createAuthorizationPayloadData(\n  authorizationCode: string | null,\n  visitorId: VisitorId = generateId(),\n): EventPayloadData<AuthorizeCustomerData> {\n  return {\n    eventType: AwsInputEventType.AUTHORIZE_CUSTOMER,\n    data: {\n      authorization: {\n        authorizationCode,\n      },\n      disableChannelInfo: true,\n      sdkVersion: CHAT_SDK_VERSION,\n      sdkPlatform: 'web',\n    },\n    ...createVisitorPayload(visitorId as VisitorId),\n  };\n}\n","import { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/customer/CustomerIdentity';\n\nimport { isNil } from '../utils/is';\n\nexport function isCustomerIdentityIdValid(\n  customerIdentityIdOnExternalPlatform:\n    | CustomerIdentityIdOnExternalPlatform\n    | undefined,\n): customerIdentityIdOnExternalPlatform is CustomerIdentityIdOnExternalPlatform {\n  return (\n    !isNil(customerIdentityIdOnExternalPlatform) &&\n    customerIdentityIdOnExternalPlatform !== ''\n  );\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { GenerateAuthorizationTokenData } from '@brandembassy/ts-types-chat/dist/awsEvents/GenerateAuthorizationToken';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createGenerateAuthorizationTokenPayloadData(\n  threadId: ThreadIdOnExternalPlatform,\n  url: string,\n): EventPayloadData<GenerateAuthorizationTokenData> {\n  return {\n    eventType: AwsInputEventType.GENERATE_AUTHORIZATION_TOKEN,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadId,\n      },\n      url,\n    },\n  };\n}\n","import { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendOfflineMessagePayloadData } from './sendOfflineMessagePayload';\n\nexport interface OfflineMessageData {\n  email: string;\n  message: string;\n  name: string;\n}\n\nexport const sendOfflineMessage = async (\n  offlineMessageData: OfflineMessageData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const offlineMessagePayloadData =\n    createSendOfflineMessagePayloadData(offlineMessageData);\n\n  const response = await sendChatEvent(\n    offlineMessagePayloadData,\n    websocketClient,\n  );\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send offline message failed', response);\n};\n","import { CaseInboxAssigneeChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseInboxAssigneeChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface AssignedAgentChangedEvent extends ChatEventData {\n  data: CaseInboxAssigneeChangedData;\n  type: typeof ChatEvent.ASSIGNED_AGENT_CHANGED;\n}\n\nexport function isAssignedAgentChangedEvent(\n  event: ChatEventData,\n): event is AssignedAgentChangedEvent {\n  return (\n    event.type === ChatEvent.ASSIGNED_AGENT_CHANGED &&\n    (event as AssignedAgentChangedEvent).data?.case?.id !== undefined\n  );\n}\n","import { TypingEventData } from '@brandembassy/ts-types-platform/dist/user/typing/TypingEventData';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type AgentTypingStartedData = TypingEventData;\n\nexport interface AgentTypingStartedEvent extends ChatEventData {\n  data: AgentTypingStartedData;\n  type: typeof ChatEvent.AGENT_TYPING_STARTED;\n}\n\nexport function isAgentTypingStartedEvent(\n  event: ChatEventData,\n): event is AgentTypingStartedEvent {\n  return (\n    event.type === ChatEvent.AGENT_TYPING_STARTED &&\n    (event as AgentTypingStartedEvent).data?.thread?.idOnExternalPlatform !==\n      undefined\n  );\n}\n","import { TypingEventData } from '@brandembassy/ts-types-platform/dist/user/typing/TypingEventData';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type AgentTypingEndedData = TypingEventData;\n\nexport interface AgentTypingEndedEvent extends ChatEventData {\n  data: AgentTypingEndedData;\n  type: typeof ChatEvent.AGENT_TYPING_ENDED;\n}\n\nexport function isAgentTypingEndedEvent(\n  event: ChatEventData,\n): event is AgentTypingEndedEvent {\n  return (\n    event.type === ChatEvent.AGENT_TYPING_ENDED &&\n    (event as AgentTypingEndedEvent).data?.thread?.idOnExternalPlatform !==\n      undefined\n  );\n}\n","import { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { ERROR_CANNOT_FETCH_TRANSACTION_TOKEN } from '../error/errorMessages';\nimport { postJSON } from '../utils/fetchJSON';\nimport { isNil } from '../utils/is';\n\nimport {\n  cacheTransactionToken,\n  getCachedTransactionToken,\n} from './cachedTransactionToken';\nimport { getAuthorizeUrl } from './getAuthorizeUrl';\nimport { TransactionTokenResponse } from './TransactionToken';\n\ninterface ThirdPartyAuthorizationPayload {\n  authorization_code: string;\n  code_verifier?: string;\n  grant_type: 'authorization_code';\n}\n\ninterface ThirdPartyAuthorizePayload {\n  thirdParty: ThirdPartyAuthorizationPayload;\n}\n\ninterface AnonymousAuthorizationPayload {\n  customerIdentity: {\n    idOnExternalPlatform: CustomerIdentityIdOnExternalPlatform;\n  };\n}\n\ntype AuthorizePayload =\n  | ThirdPartyAuthorizePayload\n  | AnonymousAuthorizationPayload;\n\nfunction getAuthorizePayload(\n  authorizationCode?: string,\n  customerIdentityIdOnExternalPlatform?: CustomerIdentityIdOnExternalPlatform | null,\n): AuthorizePayload {\n  const payload = {} as AuthorizePayload;\n\n  if (authorizationCode) {\n    (payload as ThirdPartyAuthorizePayload).thirdParty = {\n      authorization_code: authorizationCode,\n      grant_type: 'authorization_code',\n    };\n  }\n\n  if (!isNil(customerIdentityIdOnExternalPlatform)) {\n    (payload as AnonymousAuthorizationPayload).customerIdentity = {\n      idOnExternalPlatform: customerIdentityIdOnExternalPlatform,\n    };\n  }\n\n  return payload;\n}\n\nexport const getTransactionToken = async (\n  authorizationCode?: string,\n  customerIdentityIdOnExternalPlatform?: CustomerIdentityIdOnExternalPlatform | null,\n  useCache: boolean = false,\n): Promise<Partial<TransactionTokenResponse> & { cached?: boolean }> => {\n  // Get cached token if available\n  if (useCache) {\n    const cachedTransactionToken = getCachedTransactionToken();\n    if (cachedTransactionToken) {\n      return { accessToken: cachedTransactionToken, cached: true };\n    }\n  }\n\n  const authorizeUrl = getAuthorizeUrl();\n  try {\n    const data = await postJSON<TransactionTokenResponse>(\n      authorizeUrl,\n      getAuthorizePayload(\n        authorizationCode,\n        customerIdentityIdOnExternalPlatform,\n      ),\n      {\n        credentials: 'include',\n      },\n    );\n\n    cacheTransactionToken(data.accessToken, data.expiresIn);\n\n    return data;\n  } catch (error) {\n    if (error instanceof ChatSDKError) {\n      throw error;\n    }\n\n    throw new ChatSDKError(ERROR_CANNOT_FETCH_TRANSACTION_TOKEN, error);\n  }\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { normalizeEvent } from '../event/normalizeEvent';\nimport { isNil } from '../utils/is';\n\nimport { isS3ChatEvent } from './isS3ChatEvent';\n\nexport const getEventData = async (\n  eventData: ChatEventData | undefined,\n): Promise<ChatEventData | null> => {\n  if (isNil(eventData)) {\n    return null;\n  }\n\n  if (!isS3ChatEvent(eventData)) {\n    return eventData;\n  }\n\n  const url = eventData.data.s3Object.url;\n\n  const response = await fetch(url);\n\n  if (response.ok) {\n    const responseData = await response.json();\n\n    return normalizeEvent(responseData);\n  }\n\n  throw new ChatSDKError('Failed to fetch S3 event data');\n};\n","import { S3EventData } from '@brandembassy/ts-types-platform/dist/largeEvent/S3Event';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface S3ChatEvent extends ChatEventData {\n  data: S3EventData;\n  type: typeof ChatEvent.EVENT_IN_S3;\n}\n\nexport function isS3ChatEvent(event: unknown): event is S3ChatEvent {\n  return (event as S3ChatEvent).type === PushUpdateEventType.EVENT_IN_S3;\n}\n","import { ChatEventData } from '../event/ChatEvent';\nimport { normalizeEvent } from '../event/normalizeEvent';\n\nimport { requestQueue } from './requestQueue';\n\nexport const parseWsMessageEvent = (\n  event: CustomEvent,\n): ChatEventData | undefined => {\n  const eventDetail = event?.detail;\n\n  if (!eventDetail) {\n    return;\n  }\n\n  let eventData;\n\n  try {\n    eventData = JSON.parse(eventDetail.data);\n  } catch (error) {\n    return;\n  }\n\n  return normalizeEvent(eventData);\n};\n\nexport const onMessageHandler = (event: ChatEventData): void => {\n  const { id } = event;\n\n  if (requestQueue.has(id)) {\n    const resolve = requestQueue.get(id);\n\n    if (typeof resolve === 'function') {\n      resolve(event);\n    }\n\n    requestQueue.delete(id);\n  }\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SetPositionInQueuePayloadData } from '@brandembassy/ts-types-chat/dist/awsEvents/SetPositionInQueuePayload';\nimport { EventId } from '@brandembassy/ts-types-platform/dist/pushUpdate/EventId';\n\nimport { ChatEventData } from '../../event/ChatEvent';\nimport { isEmpty } from '../../utils/is';\n\nexport interface SetPositionInQueueChatEvent extends ChatEventData {\n  data: SetPositionInQueuePayloadData;\n  id: EventId;\n  type: AwsResponseEventType.SET_POSITION_IN_QUEUE;\n}\n\nexport const isSetPositionInQueueEvent = (\n  event: unknown,\n): event is SetPositionInQueueChatEvent => {\n  const setPositionInQueueEvent = event as SetPositionInQueueChatEvent;\n\n  return (\n    Number.isInteger(setPositionInQueueEvent?.data.positionInQueue) &&\n    isEmpty(setPositionInQueueEvent?.id) === false &&\n    setPositionInQueueEvent?.type === AwsResponseEventType.SET_POSITION_IN_QUEUE\n  );\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class CreateInvitationFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { CreateInvitationToGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/InvitationToGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { CreateInvitationFailedError } from './CreateInvitationFailedError';\n\nexport function createCreateInvitationToGroupChatPayloadData(\n  id: CaseId,\n): EventPayloadData<CreateInvitationToGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.CREATE_GROUP_CHAT_INVITE,\n    data: {\n      contact: {\n        id,\n      },\n    },\n  };\n}\n\nexport function isInvitationToGroupChatCreated(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_INVITE_CREATED;\n}\n\nexport async function sendCreateInvitationToGroupChatEvent(\n  createInvitationPayloadData: EventPayloadData<CreateInvitationToGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(createInvitationPayloadData, wsClient);\n\n  if (isInvitationToGroupChatCreated(response)) {\n    return response;\n  }\n\n  throw new CreateInvitationFailedError('Create invitation failed', response);\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class JoinGroupChatFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { JoinGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/JoinGroupChat';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { JoinGroupChatFailedError } from './JoinGroupChatFailedError';\n\nexport function createJoinGroupChatPayloadData(\n  code: string,\n): EventPayloadData<JoinGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.JOIN_GROUP_CHAT,\n    data: {\n      invitation: {\n        code,\n      },\n    },\n  };\n}\n\nexport function isJoinGroupChatSuccessResponse(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_JOINED;\n}\n\nexport async function sendJoinGroupChatEvent(\n  joinGroupChatPayloadData: EventPayloadData<JoinGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(joinGroupChatPayloadData, wsClient);\n\n  if (isJoinGroupChatSuccessResponse(response)) {\n    return response;\n  }\n\n  throw new JoinGroupChatFailedError('Join Group chat failed', response);\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { LeaveGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LeaveGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nexport function createLeaveGroupChatPayloadData(\n  id: CaseId,\n): EventPayloadData<LeaveGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.LEAVE_GROUP_CHAT,\n    data: {\n      contact: {\n        id,\n      },\n    },\n  };\n}\n\nexport async function sendLeaveGroupChatEvent(\n  leaveGroupChatPayloadData: EventPayloadData<LeaveGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  return sendChatEvent(leaveGroupChatPayloadData, wsClient);\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SendEmailInvitaionFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendEmailInvitationToGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendEmailInvitationToGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { SendEmailInvitaionFailedError } from './SendEmailInvitaionFailedError';\n\nexport function createSendEmailInvitationToGroupChatPayloadData(\n  caseId: CaseId,\n  invitationCode: string,\n  email: string,\n): EventPayloadData<SendEmailInvitationToGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.SEND_EMAIL_INVITE_TO_GROUP_CHAT,\n    data: {\n      contact: {\n        id: caseId,\n      },\n      invitation: {\n        code: invitationCode,\n      },\n      recipients: [\n        {\n          idOnExternalPlatform: email,\n        },\n      ],\n    },\n  };\n}\n\nexport function isEmailInvitationToGroupChatSent(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_INVITE_SENT;\n}\n\nexport async function sendEmailInvitationToGroupChatEvent(\n  createInvitationPayloadData: EventPayloadData<SendEmailInvitationToGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(createInvitationPayloadData, wsClient);\n\n  if (isEmailInvitationToGroupChatSent(response)) {\n    return response;\n  }\n\n  throw new SendEmailInvitaionFailedError(\n    'Send Email Invitation failed',\n    response,\n  );\n}\n","export class CacheStorageError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CacheStorageError';\n  }\n}\n","import { isUndefined } from '../utils/is';\n\nimport { CacheStorageError } from './CacheStorageError';\n\nexport interface ICacheStorage {\n  getItem<T = unknown>(key: string): T | null;\n  removeItem(key: string): void;\n  setItem(key: string, data: unknown, ttl: number): void;\n}\n\nexport interface CachedStorageItem {\n  data: unknown;\n  expiresAt: number;\n}\n\n/**\n * Cache storage wrapper\n * - A simple wrapper around the Storage API with a TTL (Time To Live) per item.\n * - Uses JSON.stringify and JSON.parse to serialize and deserialize data.\n * - Uses Date.getTime() to calculate the expiration time.\n *\n * @param storage - The storage instance (e.g., localStorage or sessionStorage).\n */\nexport class CacheStorage implements ICacheStorage {\n  #storage: Storage;\n\n  /**\n   * Create a new CacheStorage instance\n   * @param storage - storage instance\n   * @throws CacheStorageError\n   */\n  constructor(storage: Storage) {\n    if (\n      !storage ||\n      !storage.getItem ||\n      !storage.setItem ||\n      !storage.removeItem\n    ) {\n      throw new CacheStorageError('CacheStorage: Storage is required');\n    }\n    this.#storage = storage;\n  }\n\n  /**\n   * Get an item from the storage if not expired\n   * @param key - key\n   */\n  public getItem<T = unknown>(key: string): T | null {\n    const item = this.#storage.getItem(key);\n\n    if (!item) {\n      return null;\n    }\n\n    const { data = undefined, expiresAt = 0 }: CachedStorageItem =\n      JSON.parse(item);\n    const isExpired = expiresAt < new Date().getTime();\n\n    if (isExpired || isUndefined(data)) {\n      this.#storage.removeItem(key);\n\n      return null;\n    }\n\n    return data as T;\n  }\n\n  /**\n   * Remove an item from the storage\n   * @param key - key\n   */\n  public removeItem(key: string): void {\n    this.#storage.removeItem(key);\n  }\n\n  /**\n   * Save an item in the storage with a ttl\n   * @param key - key\n   * @param data - data to store\n   * @param ttl - time to live in milliseconds\n   */\n  public setItem(key: string, data: unknown, ttl: number): void {\n    const item: CachedStorageItem = {\n      data,\n      expiresAt: new Date().getTime() + ttl,\n    };\n\n    this.#storage.setItem(key, JSON.stringify(item));\n  }\n}\n","export interface CustomerReconnectSuccessPayloadData {\n  reconnected: true;\n}\n\nexport function isCustomerReconnectSuccessPayloadData(\n  payload: unknown,\n): payload is CustomerReconnectSuccessPayloadData {\n  if (typeof payload !== 'object' || payload === null) {\n    return false;\n  }\n\n  if (!('reconnected' in payload)) {\n    return false;\n  }\n\n  return payload.reconnected === true;\n}\n","import { User } from '@brandembassy/ts-types-platform/dist/user/User';\nimport { UserId } from '@brandembassy/ts-types-platform/dist/user/UserId';\n\nimport { ChatSdk } from './ChatSdk';\n\n// Export runtime classes and types\nexport type { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nexport type { ConsumerIdentityInput as CustomerIdentity } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nexport type { CaseInboxAssigneeChangedData as AssignedAgentChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseInboxAssigneeChangedEvent';\nexport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nexport { WebSocketClientEvent } from '@brandembassy/push-updates-sdk';\nexport { WebSocketClientError } from './sockets/WebSocketClientError';\nexport { ChatEvent } from './event/ChatEvent';\nexport type { ChatEventType } from './event/ChatEvent';\nexport { sendChatEvent } from './event/sendChatEvent';\nexport { EnvironmentName, EnvironmentEndpoints } from './env/Environments';\nexport * from './agent';\nexport * from './thread';\nexport * from './contact';\nexport * from './ChatSdk';\nexport * from './message';\nexport { Customer } from './customer/Customer';\nexport type { Customer as CustomerView } from '@brandembassy/ts-types-platform/dist/customer/customer';\nexport * from './utils/narrowing';\nexport { generateId } from './utils/generateId';\nexport { splitName } from './utils/splitName';\nexport type { ChatSDKOptions } from './ChatSDKOptions';\nexport type { SecureSessionsType } from './securedSession/SecureSessionsType';\nexport { SecureSessions } from './securedSession/SecureSessionsType';\nexport * from './groupChat';\nexport * from './utils/AbortablePromise';\nexport { AbortError } from './error/AbortError';\nexport { SdkVersionNotSupported } from './error/SdkVersionNotSupported';\nexport {\n  getBrowserFingerprint,\n  getDeviceType,\n  BrowserFingerprintOptions,\n  getBrowserLanguage,\n  getBrowserLocation,\n} from './browserFingerprint/getBrowserFingerprint';\nexport {\n  CacheStorage,\n  ICacheStorage,\n  CachedStorageItem,\n} from './storage/CacheStorage';\nexport { CacheStorageError } from './storage/CacheStorageError';\nexport * from './attachment/sendAttachments';\n\n// Export types for API Docs availability\nexport * from './authorization/AuthorizeConsumerEventResponse';\nexport type { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nexport type { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nexport {\n  ChannelAvailability,\n  ChannelInfo,\n} from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nexport type { ChannelAvailabilityResponse } from './channel/fetchChannelAvailability';\nexport { Thread as ThreadView } from '@brandembassy/ts-types-platform/dist/thread/Thread';\nexport type { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\nexport type { WebSocketClient } from './sockets/WebSocketClient';\nexport type {\n  EventListenerFunction,\n  RemoveListenerFunction,\n} from './event/ListenerFunction';\nexport type { IChatEventTarget } from './event/ChatEventTarget';\nexport type { ChatEventData } from './event/ChatEvent';\nexport type { MoreMessagesLoadedEvent } from './message/loadMoreMessagesEventData';\nexport type { ThreadRecoveredPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadRecovered';\nexport type { MessageSuccessEventData } from './message/MessageSuccessEventData';\nexport type { ConsumerAuthorizationSuccessPayloadData } from '@brandembassy/ts-types-chat/dist/authorization/ConsumerAuthorizationSuccessPayloadData';\nexport type { UploadFailResponse } from './attachment/uploadAttachment';\nexport { UploadAttachmentError } from './attachment/UploadAttachmentError';\nexport type Agent = User;\nexport type AgentId = UserId;\nexport type { AuthorizationToken } from '@brandembassy/ts-types-chat/dist/authorization/AuthorizationToken';\nexport type { OfflineMessageData } from './message/sendOfflineMessage';\nexport type { EventPayloadData } from './sockets/EventPayload';\nexport type { ThreadRecoveredChatEvent } from './thread/isRecoverSuccessPayload';\nexport * from './authorization/createReconnectPayloadData';\nexport * from './authorization/CustomerReconnectSuccessPayloadData';\nexport { AuthorizationError } from './authorization/AuthorizationError';\nexport { CHAT_SDK_VERSION } from './env/version';\n\n// Export the ChatSDK as default\nexport default ChatSdk;\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__198__","isoString","milliseconds","Date","parse","isNaN","day","parsedDate","exec","split","map","itm","parseInt","UTC","apply","getDate","NaN","tz","setUTCMinutes","getUTCMinutes","getTime","parseTimestampFromISO8601String","Object","defineProperty","value","getTimeInMinutes","getTimeInMilliseconds","getTimeInSeconds","padDateTimeUnit","dateTimeUnit","norm","Math","abs","floor","Number","_a","_b","hours","_c","minutes","_d","seconds","_e","getTimezoneISOOffset","misc_1","date","tzo","getTimezoneOffset","concat","queryParameters","keys","filter","key","encodeURIComponent","join","LogLevels","EventTargetPolyfill","this","listeners","prototype","addEventListener","type","callback","push","removeEventListener","stack","l","length","splice","dispatchEvent","event","slice","call","defaultPrevented","WebSocketClientEvent_1","enumerable","get","WebSocketClientEvent","pushUpdateWebSocket_1","setupSocketConnection","__assign","assign","t","s","n","arguments","p","hasOwnProperty","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","getPushUpdateWebSocket","queryParameters_1","initializeHeartbeat_1","object_1","WebSocketClient_1","socket","defaultConnectionOptions","forceSecureProtocol","heartbeatAfterAuthorize","maxRetries","maxReconnectionDelay","urlProvider","options","TypeError","connectionOptions","tenantId","userId","brandId","wscOptions","webSocketUrlWithoutProtocol","query","queryString","createQueryParametersAsString","removeEmptyValuesFromObject","protocol","window","location","URL","search","createWebSocketUrlWithProtocol","WebSocketClient","undefined","initializeHeartbeat","HeartBeatState","__values","o","Symbol","iterator","m","next","done","__read","r","ar","error","__spreadArray","to","from","pack","Array","ReconnectingWebSocket","DEFAULT","minReconnectionDelay","random","minUptime","reconnectionDelayGrowFactor","connectionTimeout","Infinity","maxEnqueuedMessages","startClosed","debug","url","protocols","_this","onclose","onerror","onmessage","onopen","_listeners","message","open","close","_shouldReconnect","_connectLock","_closeCalled","_messageQueue","_retryCount","_binaryType","_handleOpen","_debug","_options","clearTimeout","_connectTimeout","_uptimeTimeout","setTimeout","_acceptOpen","_ws","binaryType","forEach","send","listener","_callEventListener","_handleMessage","_handleError","_disconnect","_connect","_handleClose","_clearTimeouts","_url","_protocols","_maxRetries","max","configurable","set","reduce","acc","Blob","size","byteLength","bufferedAmount","extensions","readyState","WebSocket","CLOSED","CONNECTING","code","reason","reconnect","data","OPEN","e_1","listeners_1","listeners_1_1","e_1_1","return","setMaxRetires","args","_i","console","log","_getNextDelay","delay","pow","_wait","Promise","resolve","_getNextUrl","then","Error","_removeListeners","_addListeners","_handleTimeout","catch","err","ErrorEvent","CloseEvent","handleEvent","extendStatics","__extends","d","b","setPrototypeOf","__proto__","String","__","constructor","create","HEART_BEAT_CHECK_TIMEOUT","HEART_BEAT_INTERVAL","Logger_1","ReconnectingWebSocket_1","EventTargetPolyfill_1","HeartBeatState_1","_super","heartBeatTimeout","heartBeatCheckTimeout","enableDebugMode","debugMode","INFO","disableDebugMode","level","logger","sendHeartBeat","JSON","stringify","action","handleHeartBeatResponse","heartBeatState","DYING","LIVING","dispatchHeartBeatState","setHeartBeatCheckTimeout","heartbeatState","CustomEvent","isHeartBeatActive","closeEvent","retryCount","DIED","CLOSE","detail","MESSAGE","ERROR","startHeartBeat","interval","heartBeatCallback","stopHeartBeat","handleMessage","payload","authorizationStatus","warn","objectData","entries","result","AwsChatWindowEventActionRoute","AwsResponseEventType","AwsInputEventType","ChannelAvailability","DeviceType","CaseStatus_1","CaseStatus","MessageDirection","MessageType","PushUpdateEventType","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","definition","obj","prop","toStringTag","SDKVariableStorage","setAccessToken","accessToken","ACCESS_TOKEN","token","ACCESS_TOKEN_EXPIRES_IN","expiresIn","getAccessToken","super","name","cause","_getErrorMessage","AuthorizationError","errorMessage","CHAT_SDK_VERSION","generateId","crypto","randomUUID","randomValues","Uint8Array","getRandomValues","uuid","index","includes","toString","padStart","generateUuidFallback","createVisitorPayload","visitorId","visitor","id","objectProto","Ctor","func","transform","arg","global","freeSelf","Function","nativeObjectToString","symToStringTag","isOwn","tag","unmasked","uid","maskSrcKey","IE_PROTO","funcToString","reIsHostCtor","reIsNative","RegExp","replace","test","object","mapTag","promiseTag","setTag","weakMapTag","dataViewTag","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","getTag","ArrayBuffer","ctorString","isArray","freeExports","nodeType","freeModule","Buffer","isBuffer","typedArrayTags","freeProcess","process","nodeUtil","types","binding","nodeIsTypedArray","isTypedArray","requestQueue","Map","makeRequest","async","wsClient","eventId","splitName","firstName","names","setCustomFields","fields","setCustomFieldsFromArray","ident","getCustomFields","fromEntries","getCustomFieldsArray","setCustomerIdentity","customer","customerIdentity","idOnExternalPlatform","lastName","image","customFields","setId","setName","trim","setImage","Customer","websocketClient","getIdOrCreateNewOne","customerId","getId","destroy","customerIdentityIdOnExternalPlatform","getName","getImage","setExists","exists","setWebsocketClient","setCustomField","sendCustomFields","sendChatEvent","eventType","SEND_CONSUMER_CUSTOM_FIELDS","CustomerInstance","init","instance","getInstance","createCustomerIdentityPayload","storedName","storedImage","customerIdentityNamePayload","getBrandIdAndChannelId","BRAND_ID","channelId","CHANNEL_ID","createEventPayload","eventPayloadData","storedDestinationId","DESTINATION","storedVisitId","VISIT_ID","storedVisitorId","VISITOR_ID","consumerIdentity","destination","visit","brand","channel","createEvent","actionRoute","AwsChatWindowEvent","CHAT_WINDOW_EVENT","payloadData","webSocketClient","createReconnectPayloadData","RECONNECT_CONSUMER","refreshTokenTimeoutId","handleRefreshToken","refreshTokenAction","accessTokenExpiresIn","idealTimeToRefreshAccessToken","round","getIdealTimeInSecondsForIssueRefreshToken","isAuthSuccessEvent","status","CONSUMER_AUTHORIZED","isTokenRefreshedSuccessResponse","response","TOKEN_REFRESHED","getBrowserLanguage","navigator","language","getBrowserLocation","Intl","DateTimeFormat","resolvedOptions","timeZone","getDeviceType","deviceType","MOBILE","TABLET","DESKTOP","getBrowserFingerprint","deviceInfoFromUserAgent","userAgent","country","ip","browser","getBrowser","browserVersion","version","os","getOS","osVersion","getDevice","applicationType","BROWSER","ERROR_CODE_SDK_VERSION_NOT_SUPPORTED","SdkVersionNotSupported","isSdkVersionNotSupportedEvent","errorCode","sdkVersionCheck","getDefaultHeaders","Accept","APP_NAME","getErrorResponseData","json","statusText","fetchChannelInfo","languageLocale","CHANNEL_INTEGRATION_URL","ENDPOINT_CHAT","fetch","method","headers","ok","SecureSessions","getSecuredSessionType","SECURED_SESSION","shouldHandleCustomerIdForSecureSessions","ANONYMOUS","isSecureSessions","EnvironmentName","setEnvironmentEndpoints","endpoints","ENDPOINT_GATEWAY","gateway","chat","ENDPOINT_AUTHORIZE","authorize","ChatEvent","AGENT_TYPING_STARTED","AGENT_TYPING_ENDED","ASSIGNED_AGENT_CHANGED","CONTACT_CREATED","CONTACT_STATUS_CHANGED","CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED","ChatCustomEvent","ChatEventMiddleware","middlewares","register","middleware","processedEvent","ChatEventTarget","EventTarget","isOutbound","direction","EMPTY_EVENT","createdAt","normalizeEvent","hasEventId","hasError","hasEventType","hasData","context","eventDetailData","postback","isDataWithPostback","postbackData","postbackEventType","rawEventId","restEventData","eventRest","eventTypeMap","SENDER_TYPING_STARTED","SENDER_TYPING_ENDED","CASE_INBOX_ASSIGNEE_CHANGED","CASE_CREATED","CASE_STATUS_CHANGED","CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED","LIVECHAT_RECOVERED","normalizedContactHistoryItems","contactHistory","THREAD_RECOVERED","chatEventMapper","isSendMessageSuccessEventData","SendMessageFailedError","TRANSACTION_TOKEN_CACHE_KEY","ERROR_AUTHORIZE_HOSTNAME_NOT_SET","ERROR_CANNOT_REFRESH_THIRD_PARTY_TOKEN","postJSON","resource","body","requestInit","fetchJSON","getAuthorizeUrl","authorizeUrl","pathname","searchParams","append","getThirdPartyToken","THIRD_PARTY_TOKEN","refreshThirdPartyToken","refreshUrl","thirdParty","grant_type","refresh_token","credentials","handleNewThirdPartyToken","setThirdPartyToken","expires_in","WebSocketClientError","WsEventTarget","onError","socketURLGetter","connect","disconnect","stringData","on","handlerCallback","off","_errorHandler","eventError","startsWith","errorHandlerBound","bind","AUTHORIZATION_FAILED","UploadAttachmentError","createAttachmentPayload","file","attachment","reader","reject","FileReader","onloadend","errorEvent","target","readAsDataURL","createLocalFileReader","mimeType","createPayloadForAttachmentUpload","uploadAttachmentResponse","fileName","requestBody","content","uploadAttachment","fileUrl","friendlyName","allowedFileSize","isUploadFailResponse","isAttachmentUpload","files","every","createTemporaryAttachmentsUpload","all","createAttachmentUploadMessageData","threadIdOnExternalPlatform","attachments","messageId","browserFingerprint","messageContent","TEXT","text","thread","consumer","consumerContact","isContactStatusChangedEvent","case","isContactCreatedEvent","isContactToRoutingQueueAssignmentChangedEvent","isContactRecipientsChangedEvent","CONTACT_RECIPIENTS_CHANGED","createMessageData","isLoadMoreMessagesEventData","MORE_MESSAGES_LOADED","messages","createLoadMoreMessagesPayloadData","eventData","LOAD_MORE_MESSAGES","AbortError","AbortablePromise","executor","abortController","AbortController","abortSignal","signal","abortReason","abort","_abortReason","promise","ArchiveThreadFailedError","getAuthor","INBOUND","authorEndUserIdentity","fullName","authorUser","surname","isMessage","item","hasId","hasDirection","hasMessageContent","isMessageCreatedEvent","MESSAGE_CREATED","isMessageSentEvent","MESSAGE_SENT","isMessageReadChangedEvent","MESSAGE_READ_CHANGED","GetMetadataFailedError","isLoadMetadataSuccessPayload","THREAD_METADATA_LOADED","lastMessage","isRecoverSuccessPayload","testResponseData","isThreadArchivedSuccessPayload","THREAD_ARCHIVED","LoadMoreMessagesFailedError","createRecoverThreadPayloadData","emptyData","RECOVER_THREAD","SetThreadNameFailedError","ThreadRecoverFailedError","Thread","messageEmitter","isAuthorizationEnabled","_exists","_typingTimeoutID","_isAuthorizationEnabled","_customFields","_typingPreviewText","_websocketClient","_messageEmitter","_customer","_registerEventHandlers","recover","contact","restData","sendMessage","messageData","assertNonEmptyTextMessageContent","sendMessagePayloadData","SEND_MESSAGE","_mergeCustomFieldsAndAccessTokenWithMessageData","sendTextMessage","messageText","textMessageContent","getTextMessageContent","sendPostbackMessage","postbackMessageContent","getPostbackMessageContent","sendOutboundMessage","sendOutboundMessagePayloadData","SEND_OUTBOUND","loadMoreMessages","scrollToken","oldestMessageDatetime","THREAD_DATA","loadMoreMessagesEventData","lastMessageSeen","MESSAGE_SEEN","sendAttachments","keystroke","timeout","onSendCallback","_stopTypingCallback","stopTyping","keystrokeForPreview","currentText","_typingForPreviewTimeoutID","stopTypingForPreview","shouldSendPreview","currentPreviewText","sendMessagePreview","getMetadata","LOAD_THREAD_METADATA","onThreadEvent","handler","filteredEventHandler","threadId","eventThreadId","dataWithThread","messagePreview","getThreadId","filterCurrentThreadEventHandler","selectedFieldIDs","customField","SET_CONSUMER_CONTACT_CUSTOM_FIELD","archive","ARCHIVE_THREAD","updateThreadData","threadName","UPDATE_THREAD","isUpdateThreadSuccess","SEND_MESSAGE_PREVIEW","createSendMessagePreviewPayloadData","sendTranscript","contactNumber","email","SEND_TRANSCRIPT","consumerRecipients","createSendTranscriptPayloadData","_setThreadAndCustomerExists","_clearCustomFieldsOnContactStatusChangedToClosed","eventDetail","ContactStatus","clear","storedThirdPartyToken","storedAccessToken","access_token","createRecoverLivechatThreadPayloadData","RECOVER_LIVECHAT","LivechatThread","_isInitialized","_canSendMessage","_registerLivechatEventHandlers","startChat","initialMessageText","endChat","threadData","contactId","END_CONTACT","createEndThreadPayloadData","isThreadListFetchedPostbackData","storeContactId","originalThreadData","storeContactIdMiddleware","caseId","array","storeThreadScrollData","scrollData","oldThreadData","storeThreadScrollDataMiddleware","messagesScrollToken","assertIsCallable","ChatSdk","res","rej","getPromiseWithResolvers","refreshTokenResponse","REFRESH_TOKEN","customerImage","customerName","AUTHORIZATION_CODE","authorizationCode","appName","APP_VERSION","appVersion","destinationId","visitId","LANGUAGE","secureSessionsOption","values","getSecureSessionsTypeFromOptions","securedSession","customerIdOption","setCustomerIdFromOptions","cacheStorage","getItem","setItem","removeItem","CACHE_STORAGE","onRawEvent","isLivechat","THIRD_PARTY","ready","getChannelInfo","getChannelAvailability","fetchChannelAvailability","reconnectResponse","refreshTokenEventCallback","reconnectPayload","reconnected","authorizationReconnect","basicChannelInfoRequest","channelInfo","isLiveChat","handleBasicChannelInfo","authorizationPayloadData","AUTHORIZE_CUSTOMER","authorization","disableChannelInfo","sdkVersion","sdkPlatform","createAuthorizationPayloadData","authEvent","REGISTER","authorizationRequest","authResponse","basicChannelInfo","generateAuthorizationToken","GENERATE_AUTHORIZATION_TOKEN","createGenerateAuthorizationTokenPayloadData","authorizationToken","onChatEvent","getCustomer","getThread","cachedThread","liveThread","_getContactCustomFieldsFromQueue","getThreadList","eventPayload","FETCH_THREAD_LIST","threads","getWebsocketClient","sendOfflineMessage","offlineMessageData","offlineMessagePayloadData","reverse","authorCustomerIdentity","SEND_OFFLINE_MESSAGE","createSendOfflineMessagePayloadData","recoverThreadData","recoverEvent","recoverResponse","recoverLivechatThreadData","resetSession","isAssignedAgentChangedEvent","isAgentTypingStartedEvent","isAgentTypingEndedEvent","sdkError","endpoint","assertNonNullable","useCache","transactionTokenResponse","cachedTransactionToken","cached","authorization_code","getAuthorizePayload","getTransactionToken","v","transactionToken","queryParametersAsString","environment","custom","customEnvironment","toLowerCase","buildEnvironmentEndpoints","client","EVENT_IN_S3","s3Object","getEventData","parseWsMessageEvent","parsedEvent","has","delete","onMessageHandler","isSetPositionInQueueEvent","setPositionInQueueEvent","isInteger","positionInQueue","SET_POSITION_IN_QUEUE","CreateInvitationFailedError","createCreateInvitationToGroupChatPayloadData","CREATE_GROUP_CHAT_INVITE","sendCreateInvitationToGroupChatEvent","createInvitationPayloadData","GROUP_CHAT_INVITE_CREATED","isInvitationToGroupChatCreated","JoinGroupChatFailedError","createJoinGroupChatPayloadData","JOIN_GROUP_CHAT","invitation","sendJoinGroupChatEvent","joinGroupChatPayloadData","GROUP_CHAT_JOINED","isJoinGroupChatSuccessResponse","createLeaveGroupChatPayloadData","LEAVE_GROUP_CHAT","sendLeaveGroupChatEvent","leaveGroupChatPayloadData","SendEmailInvitaionFailedError","createSendEmailInvitationToGroupChatPayloadData","invitationCode","SEND_EMAIL_INVITE_TO_GROUP_CHAT","recipients","sendEmailInvitationToGroupChatEvent","GROUP_CHAT_INVITE_SENT","isEmailInvitationToGroupChatSent","CacheStorageError","CacheStorage","storage","expiresAt","ttl","isCustomerReconnectSuccessPayloadData"],"sourceRoot":""}