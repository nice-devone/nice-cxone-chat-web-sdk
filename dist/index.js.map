{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@brandembassy/chat-web-sdk/webpack/universalModuleDefinition","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/collection/object.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/isoString.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/misc.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/timezone.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/query/queryParameters.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/Logger.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/eventTargetPolyfill/EventTargetPolyfill.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/index.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/pushUpdate/pushUpdateWebSocket.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/HeartBeatState.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/WebSocketClient.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/WebSocketClientEvent.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/initializeHeartbeat.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/reconnecting-websocket/dist/reconnecting-websocket-mjs.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/channel/ChannelInfo.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/user/BrowserFingerprint.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/contact/ContactStatus.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/http/headers.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/message/MessageDirection.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/message/MessageType.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/post/case/CaseStatus.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType.js","webpack://@brandembassy/chat-web-sdk/external umd \"ua-parser-js\"","webpack://@brandembassy/chat-web-sdk/external umd \"uuid\"","webpack://@brandembassy/chat-web-sdk/webpack/bootstrap","webpack://@brandembassy/chat-web-sdk/webpack/runtime/compat get default export","webpack://@brandembassy/chat-web-sdk/webpack/runtime/define property getters","webpack://@brandembassy/chat-web-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@brandembassy/chat-web-sdk/webpack/runtime/make namespace object","webpack://@brandembassy/chat-web-sdk/./src/env/ChatSDKVariable.ts","webpack://@brandembassy/chat-web-sdk/./src/env/getEnvVariable.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isNull.js","webpack://@brandembassy/chat-web-sdk/./src/authorization/accessTokenStorage.ts","webpack://@brandembassy/chat-web-sdk/./src/error/ChatSDKError.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/AuthorizationError.ts","webpack://@brandembassy/chat-web-sdk/./src/env/version.ts","webpack://@brandembassy/chat-web-sdk/./src/visitor/createVisitorPayload.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_isPrototype.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_nativeKeys.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_overArg.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseKeys.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_freeGlobal.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_root.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Symbol.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getRawTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_objectToString.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseGetTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isObject.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isFunction.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_coreJsData.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_isMasked.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_toSource.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsNative.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getNative.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getValue.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_DataView.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Map.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Promise.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Set.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_WeakMap.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isObjectLike.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsArguments.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArguments.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isLength.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isBuffer.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/stubFalse.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsTypedArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_nodeUtil.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isTypedArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseUnary.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isEmpty.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArrayLike.js","webpack://@brandembassy/chat-web-sdk/./src/request/requestQueue.ts","webpack://@brandembassy/chat-web-sdk/./src/request/makeRequest.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/splitName.ts","webpack://@brandembassy/chat-web-sdk/./src/customField/CustomFields.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/Customer.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/setCustomerCustomFieldsPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/customerIdentityPayload.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isNil.js","webpack://@brandembassy/chat-web-sdk/./src/utils/getBrandIdAndChannelId.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isUndefined.js","webpack://@brandembassy/chat-web-sdk/./src/sockets/EventPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/event/sendChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/createReconnectPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/handleRefreshToken.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isAuthorizationTokenGeneratedPostbackData.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isAuthSuccessEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isTokenRefreshedSuccessResponse.ts","webpack://@brandembassy/chat-web-sdk/./src/browserFingerprint/getBrowserFingerprint.ts","webpack://@brandembassy/chat-web-sdk/./src/error/SdkVersionNotSupported.ts","webpack://@brandembassy/chat-web-sdk/./src/event/middleware/sdkVersionCheck.ts","webpack://@brandembassy/chat-web-sdk/./src/request/getErrorResponseData.ts","webpack://@brandembassy/chat-web-sdk/./src/channel/fetchChannelInfo.ts","webpack://@brandembassy/chat-web-sdk/./src/env/Environments.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEventMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEventTarget.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/agentTyping.ts","webpack://@brandembassy/chat-web-sdk/./src/event/normalizeEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/event/middleware/ChatEventMapper.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/assignedAgentChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactCreated.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactStatusChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactToRoutingQueueAssignmentChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/livechatRecovered.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/threadRecovered.ts","webpack://@brandembassy/chat-web-sdk/./src/message/MessageSuccessEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/SendMessageFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/sockets/WebSocketClientError.ts","webpack://@brandembassy/chat-web-sdk/./src/sockets/WebSocketClient.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/UploadAttachmentError.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/sendAttachments.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/createPayloadForAttachmentUpload.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/localFileReader.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/uploadAttachment.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactStatusChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactCreatedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactToRoutingQueueAssignmentChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactRecipientsChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/createMessageData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/loadMoreMessagesEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/loadMoreMessagesPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/error/AbortError.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/AbortablePromise.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/ArchiveThreadFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/GetMetadataFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isLoadMetadataSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isRecoverSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isThreadArchivedSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/LoadMoreMessagesFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/recoverThreadPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/SetThreadNameFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/ThreadRecoverFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/Thread.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getTextMessageContent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getPostbackMessageContent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOutboundMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOutboundMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/lastMessageSeenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/typingEvents.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/metadata.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/threadEventHandler.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/setThreadCustomFieldsPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/archiveThread.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/updateThread.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessagePreviewPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/transcript.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/recoverLivechatThreadPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/LivechatThread.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/createEndThreadPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isThreadListFetchedPostbackData.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeContactId.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeContactIdMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/last.js","webpack://@brandembassy/chat-web-sdk/./src/thread/storeThreadScrollData.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeThreadScrollDataMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./src/ChatSdk.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/createRefreshTokenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/env/appName.ts","webpack://@brandembassy/chat-web-sdk/./src/channel/fetchChannelAvailability.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/authorizationReconnect.ts","webpack://@brandembassy/chat-web-sdk/./src/channel/handleBasicChannelInfo.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/authorizationPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/isCustomerIdentityIdValid.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/generateAuthorizationTokenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOfflineMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOfflineMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/assert.ts","webpack://@brandembassy/chat-web-sdk/./src/request/getEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/request/isS3ChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/request/messageHandler.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAssignedAgentChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAgentTypingStartedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAgentTypingEndedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getAuthor.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageCreatedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageSentEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageReadChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/isSetPositionInQueueEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/CreateInvitationFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/createInvitation.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/JoinGroupChatFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/joinGroupChat.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/leaveGroupChat.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/SendEmailInvitaionFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/sendEmailInvitation.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/CustomerReconnectSuccessPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"uuid\"), require(\"ua-parser-js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"uuid\", \"ua-parser-js\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"uuid\"), require(\"ua-parser-js\")) : factory(root[\"uuid\"], root[\"ua-parser-js\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__315__, __WEBPACK_EXTERNAL_MODULE__198__) => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeEmptyValuesFromObject = void 0;\nfunction removeEmptyValuesFromObject(objectData) {\n    return Object.entries(objectData)\n        .filter(function (_a) {\n        var key = _a[0], value = _a[1];\n        return value !== undefined && value !== null;\n    })\n        .reduce(function (result, _a) {\n        var key = _a[0], value = _a[1];\n        result[key] = value;\n        return result;\n    }, {});\n}\nexports.removeEmptyValuesFromObject = removeEmptyValuesFromObject;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseTimestampFromISO8601String = exports.fromISOString = exports.isISOStringDateWithTimezoneOffset = exports.toISOStringWithTimezoneOffset = exports.toISOStringWithMilliseconds = exports.toISOString = void 0;\nvar timezone_1 = require(\"./timezone\");\nvar misc_1 = require(\"./misc\");\nvar toISOString = function (date) {\n    return (date.getUTCFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCSeconds()) +\n        '+00:00');\n};\nexports.toISOString = toISOString;\nvar toISOStringWithMilliseconds = function (date) {\n    return (date.getUTCFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCSeconds()) +\n        '.' +\n        (date.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        '+00:00');\n};\nexports.toISOStringWithMilliseconds = toISOStringWithMilliseconds;\nvar toISOStringWithTimezoneOffset = function (date) {\n    return (date.getFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getSeconds()) +\n        (0, timezone_1.getTimezoneISOOffset)(date));\n};\nexports.toISOStringWithTimezoneOffset = toISOStringWithTimezoneOffset;\nfunction isISOStringDateWithTimezoneOffset(isoDateString) {\n    return /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})$/.test(isoDateString);\n}\nexports.isISOStringDateWithTimezoneOffset = isISOStringDateWithTimezoneOffset;\nfunction fromISOString(isoString) {\n    var milliseconds = Date.parse(isoString);\n    if (isNaN(milliseconds)) {\n        milliseconds = parseTimestampFromISO8601String(isoString);\n    }\n    return new Date(milliseconds);\n}\nexports.fromISOString = fromISOString;\nfunction parseTimestampFromISO8601String(isoString) {\n    var day;\n    var rx = /^(\\d{4}-\\d\\d-\\d\\d([tT][\\d:.]*)?)([zZ]|([+-])(\\d\\d):?(\\d\\d))?$/;\n    var parsedDate = rx.exec(isoString) || [];\n    if (parsedDate[1]) {\n        day = parsedDate[1].split(/\\D/).map(function (itm) { return parseInt(itm, 10) || 0; });\n        day[1] -= 1;\n        //@ts-ignore\n        day = new Date(Date.UTC.apply(Date, day));\n        if (!day.getDate()) {\n            return NaN;\n        }\n        if (parsedDate[5]) {\n            var tz = parseInt(parsedDate[5], 10) * 60;\n            if (parsedDate[6]) {\n                tz += parseInt(parsedDate[6], 10);\n            }\n            if (parsedDate[4] === '+') {\n                tz *= -1;\n            }\n            if (tz) {\n                day.setUTCMinutes(day.getUTCMinutes() + tz);\n            }\n        }\n        return day.getTime();\n    }\n    return NaN;\n}\nexports.parseTimestampFromISO8601String = parseTimestampFromISO8601String;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTimeInMinutes = exports.getTimeInMilliseconds = exports.getTimeInSeconds = exports.padDateTimeUnit = void 0;\nvar padDateTimeUnit = function (dateTimeUnit) {\n    var norm = Math.abs(Math.floor(typeof dateTimeUnit === 'string' ? Number(dateTimeUnit) : dateTimeUnit));\n    return (norm < 10 ? '0' : '') + norm;\n};\nexports.padDateTimeUnit = padDateTimeUnit;\nvar getTimeInSeconds = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d;\n    return hours * 60 * 60 + minutes * 60 + seconds;\n};\nexports.getTimeInSeconds = getTimeInSeconds;\nvar getTimeInMilliseconds = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d, _e = _a.milliseconds, milliseconds = _e === void 0 ? 0 : _e;\n    return (0, exports.getTimeInSeconds)({ hours: hours, minutes: minutes, seconds: seconds }) * 1000 + milliseconds;\n};\nexports.getTimeInMilliseconds = getTimeInMilliseconds;\nvar getTimeInMinutes = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d;\n    return (0, exports.getTimeInSeconds)({ hours: hours, minutes: minutes, seconds: seconds }) / 60;\n};\nexports.getTimeInMinutes = getTimeInMinutes;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTimezoneISOOffset = void 0;\nvar misc_1 = require(\"./misc\");\nvar getTimezoneISOOffset = function (date) {\n    if (date === void 0) { date = new Date(); }\n    var tzo = date.getTimezoneOffset();\n    var dif = tzo > 0 ? '-' : '+';\n    return \"\".concat(dif).concat((0, misc_1.padDateTimeUnit)(tzo / 60), \":\").concat((0, misc_1.padDateTimeUnit)(tzo % 60));\n};\nexports.getTimezoneISOOffset = getTimezoneISOOffset;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createQueryParametersAsString = void 0;\nfunction createQueryParametersAsString(queryParameters) {\n    return Object.keys(queryParameters)\n        .filter(function (key) { return queryParameters[key] !== null; })\n        .map(function (key) {\n        return [key, queryParameters[key]].map(encodeURIComponent).join('=');\n    })\n        .join('&');\n}\nexports.createQueryParametersAsString = createQueryParametersAsString;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LogLevels = void 0;\nvar LogLevels;\n(function (LogLevels) {\n    LogLevels[\"ERROR\"] = \"error\";\n    LogLevels[\"INFO\"] = \"info\";\n    LogLevels[\"WARN\"] = \"warn\";\n})(LogLevels = exports.LogLevels || (exports.LogLevels = {}));\n//# sourceMappingURL=Logger.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventTargetPolyfill = void 0;\nvar EventTargetPolyfill = (function () {\n    function EventTargetPolyfill() {\n        this.listeners = {};\n    }\n    EventTargetPolyfill.prototype.addEventListener = function (type, callback) {\n        if (!(type in this.listeners)) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(callback);\n    };\n    EventTargetPolyfill.prototype.removeEventListener = function (type, callback) {\n        if (!(type in this.listeners)) {\n            return;\n        }\n        var stack = this.listeners[type];\n        for (var i = 0, l = stack.length; i < l; i++) {\n            if (stack[i] === callback) {\n                stack.splice(i, 1);\n                return;\n            }\n        }\n    };\n    EventTargetPolyfill.prototype.dispatchEvent = function (event) {\n        if (!(event.type in this.listeners)) {\n            return true;\n        }\n        var stack = this.listeners[event.type].slice();\n        for (var i = 0, l = stack.length; i < l; i++) {\n            stack[i].call(this, event);\n        }\n        return !event.defaultPrevented;\n    };\n    return EventTargetPolyfill;\n}());\nexports.EventTargetPolyfill = EventTargetPolyfill;\n//# sourceMappingURL=EventTargetPolyfill.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketClientEvent = exports.WebSocketClient = exports.EventTargetPolyfill = exports.HeartBeatState = void 0;\nvar HeartBeatState_1 = require(\"./websocket/HeartBeatState\");\nObject.defineProperty(exports, \"HeartBeatState\", { enumerable: true, get: function () { return HeartBeatState_1.HeartBeatState; } });\nvar EventTargetPolyfill_1 = require(\"./eventTargetPolyfill/EventTargetPolyfill\");\nObject.defineProperty(exports, \"EventTargetPolyfill\", { enumerable: true, get: function () { return EventTargetPolyfill_1.EventTargetPolyfill; } });\nvar WebSocketClient_1 = require(\"./websocket/WebSocketClient\");\nObject.defineProperty(exports, \"WebSocketClient\", { enumerable: true, get: function () { return WebSocketClient_1.WebSocketClient; } });\nvar WebSocketClientEvent_1 = require(\"./websocket/WebSocketClientEvent\");\nObject.defineProperty(exports, \"WebSocketClientEvent\", { enumerable: true, get: function () { return WebSocketClientEvent_1.WebSocketClientEvent; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPushUpdateWebSocket = exports.setupSocketConnection = void 0;\nvar queryParameters_1 = require(\"@brandembassy/be-javascript-utils/dist/query/queryParameters\");\nvar initializeHeartbeat_1 = require(\"../websocket/initializeHeartbeat\");\nvar object_1 = require(\"@brandembassy/be-javascript-utils/dist/collection/object\");\nvar WebSocketClient_1 = require(\"../websocket/WebSocketClient\");\nvar socket = null;\nfunction createWebSocketUrlWithProtocol(webSocketUrlWithoutProtocol, forceSecureProtocol, query) {\n    if (query === void 0) { query = {}; }\n    var queryString = queryParameters_1.createQueryParametersAsString(object_1.removeEmptyValuesFromObject(query));\n    var protocol = forceSecureProtocol || window.location.protocol === 'https:'\n        ? \"wss:\"\n        : 'ws:';\n    if (queryString.length === 0) {\n        return protocol + \"//\" + webSocketUrlWithoutProtocol;\n    }\n    var url = new URL(protocol + \"//\" + webSocketUrlWithoutProtocol);\n    if (url.search.length > 0) {\n        return protocol + \"//\" + webSocketUrlWithoutProtocol + \"&\" + queryString;\n    }\n    return protocol + \"//\" + webSocketUrlWithoutProtocol + \"?\" + queryString;\n}\nvar defaultConnectionOptions = {\n    forceSecureProtocol: false,\n    heartbeatAfterAuthorize: false,\n    maxRetries: 20,\n    maxReconnectionDelay: 1000,\n};\nvar setupSocketConnection = function (webSocketUrlWithoutProtocol, options) {\n    if (options === void 0) { options = {}; }\n    if (typeof options !== 'object') {\n        throw new TypeError(\"Options parameter must be an object not a \" + typeof options);\n    }\n    var connectionOptions = __assign(__assign({}, defaultConnectionOptions), options);\n    var forceSecureProtocol = connectionOptions.forceSecureProtocol, heartbeatAfterAuthorize = connectionOptions.heartbeatAfterAuthorize, tenantId = connectionOptions.tenantId, userId = connectionOptions.userId, brandId = connectionOptions.brandId, wscOptions = __rest(connectionOptions, [\"forceSecureProtocol\", \"heartbeatAfterAuthorize\", \"tenantId\", \"userId\", \"brandId\"]);\n    var url = createWebSocketUrlWithProtocol(webSocketUrlWithoutProtocol, forceSecureProtocol, { tenantId: tenantId, userId: userId, brandId: brandId });\n    socket = new WebSocketClient_1.WebSocketClient(url, undefined, wscOptions);\n    initializeHeartbeat_1.initializeHeartbeat(heartbeatAfterAuthorize, socket, options);\n    return socket;\n};\nexports.setupSocketConnection = setupSocketConnection;\nvar getPushUpdateWebSocket = function () { return socket; };\nexports.getPushUpdateWebSocket = getPushUpdateWebSocket;\n//# sourceMappingURL=pushUpdateWebSocket.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeartBeatState = void 0;\nvar HeartBeatState;\n(function (HeartBeatState) {\n    HeartBeatState[\"DIED\"] = \"died\";\n    HeartBeatState[\"DYING\"] = \"dying\";\n    HeartBeatState[\"LIVING\"] = \"living\";\n})(HeartBeatState = exports.HeartBeatState || (exports.HeartBeatState = {}));\n//# sourceMappingURL=HeartBeatState.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketClient = exports.HEART_BEAT_CHECK_TIMEOUT = exports.HEART_BEAT_INTERVAL = void 0;\nvar Logger_1 = require(\"../Logger\");\nvar reconnecting_websocket_1 = __importDefault(require(\"@brandembassy/reconnecting-websocket\"));\nvar EventTargetPolyfill_1 = require(\"../eventTargetPolyfill/EventTargetPolyfill\");\nvar HeartBeatState_1 = require(\"./HeartBeatState\");\nvar WebSocketClientEvent_1 = require(\"./WebSocketClientEvent\");\nexports.HEART_BEAT_INTERVAL = 15000;\nexports.HEART_BEAT_CHECK_TIMEOUT = exports.HEART_BEAT_INTERVAL * 3;\nvar HEART_BEAT_RESPONSE = 'pong';\nvar HEART_BEAT_ACTION_NAME = 'heartbeat';\nvar WebSocketClient = (function (_super) {\n    __extends(WebSocketClient, _super);\n    function WebSocketClient(url, protocols, options) {\n        var _this = _super.call(this) || this;\n        _this.heartBeatTimeout = null;\n        _this.heartBeatCheckTimeout = null;\n        _this.enableDebugMode = function () {\n            if (!_this.debugMode) {\n                _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--loggerEnabled');\n            }\n            _this.debugMode = true;\n        };\n        _this.disableDebugMode = function () {\n            _this.debugMode = false;\n        };\n        _this.log = function (level, message, args) {\n            if (_this.debugMode && _this.logger) {\n                _this.logger[level](message, args);\n            }\n        };\n        _this.sendHeartBeat = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--sendHeartBeat');\n            _this.send(JSON.stringify({ action: HEART_BEAT_ACTION_NAME }));\n        };\n        _this.handleHeartBeatResponse = function () {\n            if (_this.heartBeatState === HeartBeatState_1.HeartBeatState.DYING) {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.LIVING;\n                _this.dispatchHeartBeatState();\n            }\n            _this.setHeartBeatCheckTimeout();\n        };\n        _this.setHeartBeatCheckTimeout = function () {\n            if (_this.heartBeatCheckTimeout !== null) {\n                clearTimeout(_this.heartBeatCheckTimeout);\n            }\n            _this.heartBeatCheckTimeout = setTimeout(function () {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DYING;\n                _this.dispatchHeartBeatState();\n            }, exports.HEART_BEAT_CHECK_TIMEOUT);\n        };\n        _this.dispatchHeartBeatState = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--dispatchHeartBeatState', [\n                { hearbeatState: _this.heartBeatState },\n            ]);\n            if (_this.heartBeatState !== null) {\n                _this.dispatchEvent(new CustomEvent(_this.heartBeatState));\n            }\n        };\n        _this.isHeartBeatActive = function () { return _this.heartBeatState !== null; };\n        _this.heartBeatState = null;\n        _this.debugMode = false;\n        _this.socket = new reconnecting_websocket_1.default(url, protocols, options);\n        _this.socket.onopen = function () {\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.OPEN));\n        };\n        if (options === null || options === void 0 ? void 0 : options.logger) {\n            _this.logger = options.logger;\n        }\n        _this.socket.onclose = function (closeEvent) {\n            if (_this.socket.retryCount === (options === null || options === void 0 ? void 0 : options.maxRetries)) {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DIED;\n            }\n            else {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DYING;\n            }\n            _this.dispatchHeartBeatState();\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.CLOSE, { detail: closeEvent }));\n        };\n        _this.socket.onmessage = function (event) {\n            _this.handleHeartBeatResponse();\n            if (JSON.parse(event.data) !== HEART_BEAT_RESPONSE) {\n                _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--onmessage', [event]);\n                _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.MESSAGE, { detail: event }));\n            }\n        };\n        _this.socket.onerror = function (event) {\n            _this.log(Logger_1.LogLevels.ERROR, 'websocket-push-updates--onError', [event]);\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.ERROR, { detail: event }));\n        };\n        return _this;\n    }\n    WebSocketClient.prototype.send = function (data) {\n        this.socket.send(data);\n    };\n    WebSocketClient.prototype.startHeartBeat = function () {\n        var _this = this;\n        this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--startHeartBeat', [\n            { interval: exports.HEART_BEAT_INTERVAL },\n        ]);\n        var heartBeatCallback = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--heartBeatCallback');\n            _this.sendHeartBeat();\n            _this.heartBeatTimeout = setTimeout(heartBeatCallback, exports.HEART_BEAT_INTERVAL);\n        };\n        this.setHeartBeatCheckTimeout();\n        heartBeatCallback();\n        this.heartBeatState = HeartBeatState_1.HeartBeatState.LIVING;\n    };\n    WebSocketClient.prototype.stopHeartBeat = function () {\n        this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--stopHeartBeat');\n        if (this.heartBeatTimeout !== null) {\n            clearTimeout(this.heartBeatTimeout);\n        }\n        if (this.heartBeatCheckTimeout !== null) {\n            clearTimeout(this.heartBeatCheckTimeout);\n        }\n        this.heartBeatState = null;\n    };\n    return WebSocketClient;\n}(EventTargetPolyfill_1.EventTargetPolyfill));\nexports.WebSocketClient = WebSocketClient;\n//# sourceMappingURL=WebSocketClient.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketClientEvent = void 0;\nvar WebSocketClientEvent;\n(function (WebSocketClientEvent) {\n    WebSocketClientEvent[\"CLOSE\"] = \"close\";\n    WebSocketClientEvent[\"ERROR\"] = \"error\";\n    WebSocketClientEvent[\"MESSAGE\"] = \"message\";\n    WebSocketClientEvent[\"OPEN\"] = \"open\";\n})(WebSocketClientEvent = exports.WebSocketClientEvent || (exports.WebSocketClientEvent = {}));\n//# sourceMappingURL=WebSocketClientEvent.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initializeHeartbeat = void 0;\nvar WebSocketClientEvent_1 = require(\"./WebSocketClientEvent\");\nfunction initializeHeartbeat(heartbeatAfterAuthorize, socket, connectionOptions) {\n    if (!heartbeatAfterAuthorize) {\n        socket.startHeartBeat();\n        return;\n    }\n    var handleMessage = function (event) {\n        var _a;\n        try {\n            var payload = JSON.parse(event.detail.data);\n            if ((payload === null || payload === void 0 ? void 0 : payload.authorizationStatus) === 'authorized') {\n                socket.startHeartBeat();\n                socket.removeEventListener(WebSocketClientEvent_1.WebSocketClientEvent.MESSAGE, handleMessage);\n            }\n        }\n        catch (error) {\n            (_a = connectionOptions === null || connectionOptions === void 0 ? void 0 : connectionOptions.logger) === null || _a === void 0 ? void 0 : _a.warn('JSON cannot be parsed during the heartbeat initialization process.');\n        }\n    };\n    socket.addEventListener(WebSocketClientEvent_1.WebSocketClientEvent.MESSAGE, handleMessage);\n}\nexports.initializeHeartbeat = initializeHeartbeat;\n//# sourceMappingURL=initializeHeartbeat.js.map","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nfunction __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\n\nvar Event = /** @class */ (function () {\r\n    function Event(type, target) {\r\n        this.target = target;\r\n        this.type = type;\r\n    }\r\n    return Event;\r\n}());\r\nvar ErrorEvent = /** @class */ (function (_super) {\r\n    __extends(ErrorEvent, _super);\r\n    function ErrorEvent(error, target) {\r\n        var _this = _super.call(this, 'error', target) || this;\r\n        _this.message = error.message;\r\n        _this.error = error;\r\n        return _this;\r\n    }\r\n    return ErrorEvent;\r\n}(Event));\r\nvar CloseEvent = /** @class */ (function (_super) {\r\n    __extends(CloseEvent, _super);\r\n    function CloseEvent(code, reason, target) {\r\n        if (code === void 0) { code = 1000; }\r\n        if (reason === void 0) { reason = ''; }\r\n        var _this = _super.call(this, 'close', target) || this;\r\n        _this.wasClean = true;\r\n        _this.code = code;\r\n        _this.reason = reason;\r\n        return _this;\r\n    }\r\n    return CloseEvent;\r\n}(Event));\n\n/*!\r\n * Reconnecting WebSocket\r\n * by Pedro Ladaria <pedro.ladaria@gmail.com>\r\n * https://github.com/pladaria/reconnecting-websocket\r\n * License MIT\r\n */\r\nvar getGlobalWebSocket = function () {\r\n    if (typeof WebSocket !== 'undefined') {\r\n        // @ts-ignore\r\n        return WebSocket;\r\n    }\r\n};\r\n/**\r\n * Returns true if given argument looks like a WebSocket class\r\n */\r\nvar isWebSocket = function (w) { return typeof w !== 'undefined' && !!w && w.CLOSING === 2; };\r\nvar DEFAULT = {\r\n    maxReconnectionDelay: 10000,\r\n    minReconnectionDelay: 1000 + Math.random() * 4000,\r\n    minUptime: 5000,\r\n    reconnectionDelayGrowFactor: 1.3,\r\n    connectionTimeout: 4000,\r\n    maxRetries: Infinity,\r\n    maxEnqueuedMessages: Infinity,\r\n    startClosed: false,\r\n    debug: false,\r\n};\r\nvar ReconnectingWebSocket = /** @class */ (function () {\r\n    function ReconnectingWebSocket(url, protocols, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        this._listeners = {\r\n            error: [],\r\n            message: [],\r\n            open: [],\r\n            close: [],\r\n        };\r\n        this._retryCount = -1;\r\n        this._shouldReconnect = true;\r\n        this._connectLock = false;\r\n        this._binaryType = 'blob';\r\n        this._closeCalled = false;\r\n        this._messageQueue = [];\r\n        /**\r\n         * An event listener to be called when the WebSocket connection's readyState changes to CLOSED\r\n         */\r\n        this.onclose = null;\r\n        /**\r\n         * An event listener to be called when an error occurs\r\n         */\r\n        this.onerror = null;\r\n        /**\r\n         * An event listener to be called when a message is received from the server\r\n         */\r\n        this.onmessage = null;\r\n        /**\r\n         * An event listener to be called when the WebSocket connection's readyState changes to OPEN;\r\n         * this indicates that the connection is ready to send and receive data\r\n         */\r\n        this.onopen = null;\r\n        this._handleOpen = function (event) {\r\n            _this._debug('open event');\r\n            var _a = _this._options.minUptime, minUptime = _a === void 0 ? DEFAULT.minUptime : _a;\r\n            clearTimeout(_this._connectTimeout);\r\n            _this._uptimeTimeout = setTimeout(function () { return _this._acceptOpen(); }, minUptime);\r\n            _this._ws.binaryType = _this._binaryType;\r\n            // send enqueued messages (messages sent before websocket open event)\r\n            _this._messageQueue.forEach(function (message) { var _a; return (_a = _this._ws) === null || _a === void 0 ? void 0 : _a.send(message); });\r\n            _this._messageQueue = [];\r\n            if (_this.onopen) {\r\n                _this.onopen(event);\r\n            }\r\n            _this._listeners.open.forEach(function (listener) { return _this._callEventListener(event, listener); });\r\n        };\r\n        this._handleMessage = function (event) {\r\n            _this._debug('message event');\r\n            if (_this.onmessage) {\r\n                _this.onmessage(event);\r\n            }\r\n            _this._listeners.message.forEach(function (listener) { return _this._callEventListener(event, listener); });\r\n        };\r\n        this._handleError = function (event) {\r\n            _this._debug('error event', event.message);\r\n            _this._disconnect(undefined, event.message === 'TIMEOUT' ? 'timeout' : undefined);\r\n            if (_this.onerror) {\r\n                _this.onerror(event);\r\n            }\r\n            _this._debug('exec error listeners');\r\n            _this._listeners.error.forEach(function (listener) { return _this._callEventListener(event, listener); });\r\n            _this._connect();\r\n        };\r\n        this._handleClose = function (event) {\r\n            _this._debug('close event');\r\n            _this._clearTimeouts();\r\n            if (_this._shouldReconnect) {\r\n                _this._connect();\r\n            }\r\n            if (_this.onclose) {\r\n                _this.onclose(event);\r\n            }\r\n            _this._listeners.close.forEach(function (listener) { return _this._callEventListener(event, listener); });\r\n        };\r\n        this._url = url;\r\n        this._protocols = protocols;\r\n        this._options = options;\r\n        if (this._options.startClosed) {\r\n            this._shouldReconnect = false;\r\n        }\r\n        this._connect();\r\n    }\r\n    Object.defineProperty(ReconnectingWebSocket, \"CONNECTING\", {\r\n        get: function () {\r\n            return 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket, \"OPEN\", {\r\n        get: function () {\r\n            return 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket, \"CLOSING\", {\r\n        get: function () {\r\n            return 2;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket, \"CLOSED\", {\r\n        get: function () {\r\n            return 3;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"CONNECTING\", {\r\n        get: function () {\r\n            return ReconnectingWebSocket.CONNECTING;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"OPEN\", {\r\n        get: function () {\r\n            return ReconnectingWebSocket.OPEN;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"CLOSING\", {\r\n        get: function () {\r\n            return ReconnectingWebSocket.CLOSING;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"CLOSED\", {\r\n        get: function () {\r\n            return ReconnectingWebSocket.CLOSED;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"binaryType\", {\r\n        get: function () {\r\n            return this._ws ? this._ws.binaryType : this._binaryType;\r\n        },\r\n        set: function (value) {\r\n            this._binaryType = value;\r\n            if (this._ws) {\r\n                this._ws.binaryType = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"retryCount\", {\r\n        /**\r\n         * Returns the number or connection retries\r\n         */\r\n        get: function () {\r\n            return Math.max(this._retryCount, 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"bufferedAmount\", {\r\n        /**\r\n         * The number of bytes of data that have been queued using calls to send() but not yet\r\n         * transmitted to the network. This value resets to zero once all queued data has been sent.\r\n         * This value does not reset to zero when the connection is closed; if you keep calling send(),\r\n         * this will continue to climb. Read only\r\n         */\r\n        get: function () {\r\n            var bytes = this._messageQueue.reduce(function (acc, message) {\r\n                if (typeof message === 'string') {\r\n                    acc += message.length; // not byte size\r\n                }\r\n                else if (message instanceof Blob) {\r\n                    acc += message.size;\r\n                }\r\n                else {\r\n                    acc += message.byteLength;\r\n                }\r\n                return acc;\r\n            }, 0);\r\n            return bytes + (this._ws ? this._ws.bufferedAmount : 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"extensions\", {\r\n        /**\r\n         * The extensions selected by the server. This is currently only the empty string or a list of\r\n         * extensions as negotiated by the connection\r\n         */\r\n        get: function () {\r\n            return this._ws ? this._ws.extensions : '';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"protocol\", {\r\n        /**\r\n         * A string indicating the name of the sub-protocol the server selected;\r\n         * this will be one of the strings specified in the protocols parameter when creating the\r\n         * WebSocket object\r\n         */\r\n        get: function () {\r\n            return this._ws ? this._ws.protocol : '';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"readyState\", {\r\n        /**\r\n         * The current state of the connection; this is one of the Ready state constants\r\n         */\r\n        get: function () {\r\n            if (this._ws) {\r\n                return this._ws.readyState;\r\n            }\r\n            return this._options.startClosed\r\n                ? ReconnectingWebSocket.CLOSED\r\n                : ReconnectingWebSocket.CONNECTING;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"url\", {\r\n        /**\r\n         * The URL as resolved by the constructor\r\n         */\r\n        get: function () {\r\n            return this._ws ? this._ws.url : '';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Closes the WebSocket connection or connection attempt, if any. If the connection is already\r\n     * CLOSED, this method does nothing\r\n     */\r\n    ReconnectingWebSocket.prototype.close = function (code, reason) {\r\n        if (code === void 0) { code = 1000; }\r\n        this._closeCalled = true;\r\n        this._shouldReconnect = false;\r\n        this._clearTimeouts();\r\n        if (!this._ws) {\r\n            this._debug('close enqueued: no ws instance');\r\n            return;\r\n        }\r\n        if (this._ws.readyState === this.CLOSED) {\r\n            this._debug('close: already closed');\r\n            return;\r\n        }\r\n        this._ws.close(code, reason);\r\n    };\r\n    /**\r\n     * Closes the WebSocket connection or connection attempt and connects again.\r\n     * Resets retry counter;\r\n     */\r\n    ReconnectingWebSocket.prototype.reconnect = function (code, reason) {\r\n        this._shouldReconnect = true;\r\n        this._closeCalled = false;\r\n        this._retryCount = -1;\r\n        if (!this._ws || this._ws.readyState === this.CLOSED) {\r\n            this._connect();\r\n        }\r\n        else {\r\n            this._disconnect(code, reason);\r\n            this._connect();\r\n        }\r\n    };\r\n    /**\r\n     * Enqueue specified data to be transmitted to the server over the WebSocket connection\r\n     */\r\n    ReconnectingWebSocket.prototype.send = function (data) {\r\n        if (this._ws && this._ws.readyState === this.OPEN) {\r\n            this._debug('send', data);\r\n            this._ws.send(data);\r\n        }\r\n        else {\r\n            var _a = this._options.maxEnqueuedMessages, maxEnqueuedMessages = _a === void 0 ? DEFAULT.maxEnqueuedMessages : _a;\r\n            if (this._messageQueue.length < maxEnqueuedMessages) {\r\n                this._debug('enqueue', data);\r\n                this._messageQueue.push(data);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Register an event handler of a specific event type\r\n     */\r\n    ReconnectingWebSocket.prototype.addEventListener = function (type, listener) {\r\n        if (this._listeners[type]) {\r\n            // @ts-ignore\r\n            this._listeners[type].push(listener);\r\n        }\r\n    };\r\n    ReconnectingWebSocket.prototype.dispatchEvent = function (event) {\r\n        var e_1, _a;\r\n        var listeners = this._listeners[event.type];\r\n        if (listeners) {\r\n            try {\r\n                for (var listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {\r\n                    var listener = listeners_1_1.value;\r\n                    this._callEventListener(event, listener);\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (listeners_1_1 && !listeners_1_1.done && (_a = listeners_1.return)) _a.call(listeners_1);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Removes an event listener\r\n     */\r\n    ReconnectingWebSocket.prototype.removeEventListener = function (type, listener) {\r\n        if (this._listeners[type]) {\r\n            // @ts-ignore\r\n            this._listeners[type] = this._listeners[type].filter(function (l) { return l !== listener; });\r\n        }\r\n    };\r\n    ReconnectingWebSocket.prototype._debug = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (this._options.debug) {\r\n            // not using spread because compiled version uses Symbols\r\n            // tslint:disable-next-line\r\n            console.log.apply(console, __spread(['RWS>'], args));\r\n        }\r\n    };\r\n    ReconnectingWebSocket.prototype._getNextDelay = function () {\r\n        var _a = this._options, _b = _a.reconnectionDelayGrowFactor, reconnectionDelayGrowFactor = _b === void 0 ? DEFAULT.reconnectionDelayGrowFactor : _b, _c = _a.minReconnectionDelay, minReconnectionDelay = _c === void 0 ? DEFAULT.minReconnectionDelay : _c, _d = _a.maxReconnectionDelay, maxReconnectionDelay = _d === void 0 ? DEFAULT.maxReconnectionDelay : _d;\r\n        var delay = 0;\r\n        if (this._retryCount > 0) {\r\n            delay =\r\n                minReconnectionDelay * Math.pow(reconnectionDelayGrowFactor, this._retryCount - 1);\r\n            if (delay > maxReconnectionDelay) {\r\n                delay = maxReconnectionDelay;\r\n            }\r\n        }\r\n        this._debug('next delay', delay);\r\n        return delay;\r\n    };\r\n    ReconnectingWebSocket.prototype._wait = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            setTimeout(resolve, _this._getNextDelay());\r\n        });\r\n    };\r\n    ReconnectingWebSocket.prototype._getNextUrl = function (urlProvider) {\r\n        if (typeof urlProvider === 'string') {\r\n            return Promise.resolve(urlProvider);\r\n        }\r\n        if (typeof urlProvider === 'function') {\r\n            var url = urlProvider();\r\n            if (typeof url === 'string') {\r\n                return Promise.resolve(url);\r\n            }\r\n            // @ts-ignore redundant check\r\n            if (url.then) {\r\n                return url;\r\n            }\r\n        }\r\n        throw Error('Invalid URL');\r\n    };\r\n    ReconnectingWebSocket.prototype._connect = function () {\r\n        var _this = this;\r\n        if (this._connectLock || !this._shouldReconnect) {\r\n            return;\r\n        }\r\n        this._connectLock = true;\r\n        var _a = this._options, _b = _a.maxRetries, maxRetries = _b === void 0 ? DEFAULT.maxRetries : _b, _c = _a.connectionTimeout, connectionTimeout = _c === void 0 ? DEFAULT.connectionTimeout : _c, _d = _a.WebSocket, WebSocket = _d === void 0 ? getGlobalWebSocket() : _d;\r\n        if (this._retryCount >= maxRetries) {\r\n            this._debug('max retries reached', this._retryCount, '>=', maxRetries);\r\n            return;\r\n        }\r\n        this._retryCount++;\r\n        this._debug('connect', this._retryCount);\r\n        this._removeListeners();\r\n        if (!isWebSocket(WebSocket)) {\r\n            throw Error('No valid WebSocket class provided');\r\n        }\r\n        this._wait()\r\n            .then(function () { return _this._getNextUrl(_this._url); })\r\n            .then(function (url) {\r\n            // close could be called before creating the ws\r\n            if (_this._closeCalled) {\r\n                _this._connectLock = false;\r\n                return;\r\n            }\r\n            _this._debug('connect', { url: url, protocols: _this._protocols });\r\n            _this._ws = _this._protocols\r\n                ? new WebSocket(url, _this._protocols)\r\n                : new WebSocket(url);\r\n            _this._ws.binaryType = _this._binaryType;\r\n            _this._connectLock = false;\r\n            _this._addListeners();\r\n            _this._connectTimeout = setTimeout(function () { return _this._handleTimeout(); }, connectionTimeout);\r\n        })\r\n            .catch(function (err) {\r\n            _this._connectLock = false;\r\n            _this._handleError(new ErrorEvent(Error(err.message), _this));\r\n        });\r\n    };\r\n    ReconnectingWebSocket.prototype._handleTimeout = function () {\r\n        this._debug('timeout event');\r\n        this._handleError(new ErrorEvent(Error('TIMEOUT'), this));\r\n    };\r\n    ReconnectingWebSocket.prototype._disconnect = function (code, reason) {\r\n        if (code === void 0) { code = 1000; }\r\n        this._clearTimeouts();\r\n        if (!this._ws) {\r\n            return;\r\n        }\r\n        this._removeListeners();\r\n        try {\r\n            this._ws.close(code, reason);\r\n            this._handleClose(new CloseEvent(code, reason, this));\r\n        }\r\n        catch (error) {\r\n            // ignore\r\n        }\r\n    };\r\n    ReconnectingWebSocket.prototype._acceptOpen = function () {\r\n        this._debug('accept open');\r\n        this._retryCount = 0;\r\n    };\r\n    ReconnectingWebSocket.prototype._callEventListener = function (event, listener) {\r\n        if ('handleEvent' in listener) {\r\n            // @ts-ignore\r\n            listener.handleEvent(event);\r\n        }\r\n        else {\r\n            // @ts-ignore\r\n            listener(event);\r\n        }\r\n    };\r\n    ReconnectingWebSocket.prototype._removeListeners = function () {\r\n        if (!this._ws) {\r\n            return;\r\n        }\r\n        this._debug('removeListeners');\r\n        this._ws.removeEventListener('open', this._handleOpen);\r\n        this._ws.removeEventListener('close', this._handleClose);\r\n        this._ws.removeEventListener('message', this._handleMessage);\r\n        // @ts-ignore\r\n        this._ws.removeEventListener('error', this._handleError);\r\n    };\r\n    ReconnectingWebSocket.prototype._addListeners = function () {\r\n        if (!this._ws) {\r\n            return;\r\n        }\r\n        this._debug('addListeners');\r\n        this._ws.addEventListener('open', this._handleOpen);\r\n        this._ws.addEventListener('close', this._handleClose);\r\n        this._ws.addEventListener('message', this._handleMessage);\r\n        // @ts-ignore\r\n        this._ws.addEventListener('error', this._handleError);\r\n    };\r\n    ReconnectingWebSocket.prototype._clearTimeouts = function () {\r\n        clearTimeout(this._connectTimeout);\r\n        clearTimeout(this._uptimeTimeout);\r\n    };\r\n    return ReconnectingWebSocket;\r\n}());\n\nexport default ReconnectingWebSocket;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AwsChatWindowEventActionRoute;\n(function (AwsChatWindowEventActionRoute) {\n    AwsChatWindowEventActionRoute[\"CHAT_WINDOW_EVENT\"] = \"chatWindowEvent\";\n    AwsChatWindowEventActionRoute[\"REGISTER\"] = \"register\";\n})(AwsChatWindowEventActionRoute = exports.AwsChatWindowEventActionRoute || (exports.AwsChatWindowEventActionRoute = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AwsInputEventType;\n(function (AwsInputEventType) {\n    AwsInputEventType[\"SENDER_TYPING_STARTED\"] = \"SenderTypingStarted\";\n    AwsInputEventType[\"SENDER_TYPING_ENDED\"] = \"SenderTypingEnded\";\n    AwsInputEventType[\"LOAD_MORE_MESSAGES\"] = \"LoadMoreMessages\";\n    AwsInputEventType[\"RECOVER_LIVECHAT\"] = \"RecoverLivechat\";\n    AwsInputEventType[\"RECOVER_THREAD\"] = \"RecoverThread\";\n    AwsInputEventType[\"SEND_MESSAGE\"] = \"SendMessage\";\n    AwsInputEventType[\"SEND_OUTBOUND\"] = \"SendOutbound\";\n    AwsInputEventType[\"SEND_OFFLINE_MESSAGE\"] = \"SendOfflineMessage\";\n    AwsInputEventType[\"SEND_PAGE_VIEWS\"] = \"SendPageViews\";\n    AwsInputEventType[\"SEND_CONSUMER_CUSTOM_FIELDS\"] = \"SetConsumerCustomFields\";\n    AwsInputEventType[\"SET_CONSUMER_CONTACT_CUSTOM_FIELD\"] = \"SetConsumerContactCustomFields\";\n    AwsInputEventType[\"MESSAGE_SEEN\"] = \"MessageSeenByConsumer\";\n    AwsInputEventType[\"SEND_TRANSCRIPT\"] = \"SendTranscript\";\n    AwsInputEventType[\"FETCH_THREAD_LIST\"] = \"FetchThreadList\";\n    AwsInputEventType[\"END_CONTACT\"] = \"EndContact\";\n    AwsInputEventType[\"EXECUTE_TRIGGER\"] = \"ExecuteTrigger\";\n    AwsInputEventType[\"AUTHORIZE_CONSUMER\"] = \"AuthorizeConsumer\";\n    AwsInputEventType[\"AUTHORIZE_CUSTOMER\"] = \"AuthorizeCustomer\";\n    AwsInputEventType[\"RECONNECT_CONSUMER\"] = \"ReconnectConsumer\";\n    AwsInputEventType[\"UPDATE_THREAD\"] = \"UpdateThread\";\n    AwsInputEventType[\"ARCHIVE_THREAD\"] = \"ArchiveThread\";\n    AwsInputEventType[\"LOAD_THREAD_METADATA\"] = \"LoadThreadMetadata\";\n    AwsInputEventType[\"REFRESH_TOKEN\"] = \"RefreshToken\";\n    AwsInputEventType[\"STORE_VISITOR\"] = \"StoreVisitor\";\n    AwsInputEventType[\"STORE_VISITOR_EVENTS\"] = \"StoreVisitorEvents\";\n    AwsInputEventType[\"CREATE_GROUP_CHAT_INVITE\"] = \"CreateInvitationToGroupChat\";\n    AwsInputEventType[\"SEND_EMAIL_INVITE_TO_GROUP_CHAT\"] = \"SendEmailInvitationToGroupChat\";\n    AwsInputEventType[\"JOIN_GROUP_CHAT\"] = \"JoinGroupChat\";\n    AwsInputEventType[\"LEAVE_GROUP_CHAT\"] = \"LeaveGroupChat\";\n    AwsInputEventType[\"GENERATE_AUTHORIZATION_TOKEN\"] = \"GenerateAuthorizationToken\";\n    AwsInputEventType[\"ADD_VISITOR_TAGS\"] = \"AddVisitorTags\";\n    AwsInputEventType[\"REMOVE_VISITOR_TAGS\"] = \"RemoveVisitorTags\";\n    AwsInputEventType[\"SEND_MESSAGE_PREVIEW\"] = \"SendMessagePreview\";\n})(AwsInputEventType = exports.AwsInputEventType || (exports.AwsInputEventType = {}));\nvar AwsResponseEventType;\n(function (AwsResponseEventType) {\n    AwsResponseEventType[\"LIVECHAT_RECOVERED\"] = \"LivechatRecovered\";\n    AwsResponseEventType[\"MORE_MESSAGES_LOADED\"] = \"MoreMessagesLoaded\";\n    AwsResponseEventType[\"OFFLINE_MESSAGE_SENT\"] = \"OfflineMessageSent\";\n    AwsResponseEventType[\"THREAD_LIST_FETCHED\"] = \"ThreadListFetched\";\n    AwsResponseEventType[\"THREAD_RECOVERED\"] = \"ThreadRecovered\";\n    AwsResponseEventType[\"TRANSCRIPT_SENT\"] = \"TranscriptSent\";\n    AwsResponseEventType[\"CONSUMER_AUTHORIZED\"] = \"ConsumerAuthorized\";\n    AwsResponseEventType[\"THREAD_METADATA_LOADED\"] = \"ThreadMetadataLoaded\";\n    AwsResponseEventType[\"SET_POSITION_IN_QUEUE\"] = \"SetPositionInQueue\";\n    AwsResponseEventType[\"GROUP_CHAT_INVITE_CREATED\"] = \"InvitationToGroupChatCreated\";\n    AwsResponseEventType[\"GROUP_CHAT_INVITE_SENT\"] = \"EmailInvitationToGroupChatSent\";\n    AwsResponseEventType[\"GROUP_CHAT_JOINED\"] = \"GroupChatJoined\";\n    AwsResponseEventType[\"TOKEN_REFRESHED\"] = \"TokenRefreshed\";\n    AwsResponseEventType[\"AUTHORIZATION_TOKEN_GENERATED\"] = \"AuthorizationTokenGenerated\";\n    AwsResponseEventType[\"THREAD_ARCHIVED\"] = \"ThreadArchived\";\n})(AwsResponseEventType = exports.AwsResponseEventType || (exports.AwsResponseEventType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ChannelAvailability;\n(function (ChannelAvailability) {\n    ChannelAvailability[\"ONLINE\"] = \"online\";\n    ChannelAvailability[\"OFFLINE\"] = \"offline\";\n})(ChannelAvailability = exports.ChannelAvailability || (exports.ChannelAvailability = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DeviceType;\n(function (DeviceType) {\n    DeviceType[\"DESKTOP\"] = \"desktop\";\n    DeviceType[\"MOBILE\"] = \"mobile\";\n    DeviceType[\"OTHER\"] = \"other\";\n    DeviceType[\"TABLET\"] = \"tablet\";\n})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));\nvar ApplicationType;\n(function (ApplicationType) {\n    ApplicationType[\"BROWSER\"] = \"browser\";\n})(ApplicationType = exports.ApplicationType || (exports.ApplicationType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CaseStatus_1 = require(\"../post/case/CaseStatus\");\nexports.ContactStatus = CaseStatus_1.CaseStatus;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CALLER_SERVICE_ID = 'X-Caller-Service-ID';\nexports.TRACE_ID = 'X-Trace-ID';\nexports.TRANSACTION_ID = 'X-Transaction-ID';\nexports.USER_AGENT = 'User-Agent';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MessageDirection;\n(function (MessageDirection) {\n    MessageDirection[\"INBOUND\"] = \"inbound\";\n    MessageDirection[\"OUTBOUND\"] = \"outbound\";\n})(MessageDirection = exports.MessageDirection || (exports.MessageDirection = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MessageType;\n(function (MessageType) {\n    MessageType[\"TEXT\"] = \"TEXT\";\n    MessageType[\"FILE\"] = \"FILE\";\n    MessageType[\"FORM\"] = \"FORM\";\n    MessageType[\"PLUGIN\"] = \"PLUGIN\";\n    MessageType[\"POSTBACK\"] = \"POSTBACK\";\n    MessageType[\"QUICK_REPLIES\"] = \"QUICK_REPLIES\";\n    MessageType[\"RICH_LINK\"] = \"RICH_LINK\";\n    MessageType[\"LIST_PICKER\"] = \"LIST_PICKER\";\n    MessageType[\"ADAPTIVE_CARD\"] = \"ADAPTIVE_CARD\";\n    MessageType[\"TIME_PICKER\"] = \"TIME_PICKER\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CaseStatus;\n(function (CaseStatus) {\n    CaseStatus[\"NEW\"] = \"new\";\n    CaseStatus[\"OPEN\"] = \"open\";\n    CaseStatus[\"PENDING\"] = \"pending\";\n    CaseStatus[\"ESCALATED\"] = \"escalated\";\n    CaseStatus[\"RESOLVED\"] = \"resolved\";\n    CaseStatus[\"CLOSED\"] = \"closed\";\n    CaseStatus[\"TRASHED\"] = \"trashed\";\n})(CaseStatus = exports.CaseStatus || (exports.CaseStatus = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PushUpdateEventType;\n(function (PushUpdateEventType) {\n    PushUpdateEventType[\"AUTHORIZE_CONSUMER\"] = \"AuthorizeConsumer\";\n    /** @deprecated use CONTACT_CREATED */\n    PushUpdateEventType[\"CASE_CREATED\"] = \"CaseCreated\";\n    /** @deprecated use ASSIGNED_AGENT_CHANGED */\n    PushUpdateEventType[\"CASE_INBOX_ASSIGNEE_CHANGED\"] = \"CaseInboxAssigneeChanged\";\n    /** @deprecated use CONTACT_STATUS_CHANGED */\n    PushUpdateEventType[\"CASE_STATUS_CHANGED\"] = \"CaseStatusChanged\";\n    /** @deprecated use CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED */\n    PushUpdateEventType[\"CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED\"] = \"CaseToRoutingQueueAssignmentChanged\";\n    PushUpdateEventType[\"CONTACT_CREATED\"] = \"CaseCreated\";\n    PushUpdateEventType[\"ASSIGNED_AGENT_CHANGED\"] = \"CaseInboxAssigneeChanged\";\n    PushUpdateEventType[\"CONTACT_STATUS_CHANGED\"] = \"CaseStatusChanged\";\n    PushUpdateEventType[\"CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED\"] = \"CaseToRoutingQueueAssignmentChanged\";\n    PushUpdateEventType[\"CONTACT_PREFERRED_USER_CHANGED\"] = \"ContactPreferredUserChanged\";\n    PushUpdateEventType[\"CONTACT_PROFICIENCY_CHANGED\"] = \"ContactProficiencyChanged\";\n    PushUpdateEventType[\"CONTACT_PRIORITY_CHANGED\"] = \"ContactPriorityChanged\";\n    PushUpdateEventType[\"CONTACT_SYNC\"] = \"ContactSync\";\n    PushUpdateEventType[\"CHANNEL_CREATED\"] = \"ChannelCreated\";\n    PushUpdateEventType[\"CHANNEL_DELETED\"] = \"ChannelDeleted\";\n    PushUpdateEventType[\"CHANNEL_UPDATED\"] = \"ChannelUpdated\";\n    PushUpdateEventType[\"MESSAGE_ADDED_INTO_CASE\"] = \"MessageAddedIntoCase\";\n    PushUpdateEventType[\"MESSAGE_CREATED\"] = \"MessageCreated\";\n    PushUpdateEventType[\"MESSAGE_DELIVERED_TO_END_USER\"] = \"MessageDeliveredToEndUser\";\n    PushUpdateEventType[\"MESSAGE_DELIVERED_TO_USER\"] = \"MessageDeliveredToUser\";\n    PushUpdateEventType[\"MESSAGE_NOTE_CREATED\"] = \"MessageNoteCreated\";\n    PushUpdateEventType[\"MESSAGE_NOTE_UPDATED\"] = \"MessageNoteUpdated\";\n    PushUpdateEventType[\"MESSAGE_NOTE_DELETED\"] = \"MessageNoteDeleted\";\n    PushUpdateEventType[\"MESSAGE_READ_CHANGED\"] = \"MessageReadChanged\";\n    PushUpdateEventType[\"MESSAGE_SEEN_BY_END_USER\"] = \"MessageSeenByEndUser\";\n    PushUpdateEventType[\"MESSAGE_SEEN_BY_USER\"] = \"MessageSeenByUser\";\n    PushUpdateEventType[\"MESSAGE_SENT\"] = \"MessageSent\";\n    PushUpdateEventType[\"MESSAGE_UPDATED\"] = \"MessageUpdated\";\n    PushUpdateEventType[\"PAGE_VIEW_CREATED\"] = \"PageViewCreated\";\n    PushUpdateEventType[\"ROUTING_QUEUE_CREATED\"] = \"RoutingQueueCreated\";\n    PushUpdateEventType[\"ROUTING_QUEUE_DELETED\"] = \"RoutingQueueDeleted\";\n    PushUpdateEventType[\"ROUTING_QUEUE_UPDATED\"] = \"RoutingQueueUpdated\";\n    PushUpdateEventType[\"SUBQUEUE_ASSIGNED_TO_ROUTING_QUEUE\"] = \"SubqueueAssignedToRoutingQueue\";\n    PushUpdateEventType[\"SUBQUEUE_UNASSIGNED_TO_ROUTING_QUEUE\"] = \"SubqueueUnassignedFromRoutingQueue\";\n    PushUpdateEventType[\"USER_ASSIGNED_TO_ROUTING_QUEUE\"] = \"UserAssignedToRoutingQueue\";\n    PushUpdateEventType[\"USER_STATUS_CHANGED\"] = \"UserStatusChanged\";\n    PushUpdateEventType[\"USER_UNASSIGNED_FROM_ROUTING_QUEUE\"] = \"UserUnassignedFromRoutingQueue\";\n    PushUpdateEventType[\"AGENT_CONTACT_STARTED\"] = \"AgentContactStarted\";\n    PushUpdateEventType[\"AGENT_CONTACT_ENDED\"] = \"AgentContactEnded\";\n    PushUpdateEventType[\"SENDER_TYPING_STARTED\"] = \"SenderTypingStarted\";\n    PushUpdateEventType[\"SENDER_TYPING_ENDED\"] = \"SenderTypingEnded\";\n    PushUpdateEventType[\"FIRE_PROACTIVE\"] = \"FireProactiveAction\";\n    PushUpdateEventType[\"CONTACT_INBOX_PRE_ASSIGNEE_CHANGED\"] = \"ConsumerContactInboxPreAssigneeChanged\";\n    PushUpdateEventType[\"CONTACT_RECIPIENTS_CHANGED\"] = \"ContactRecipientsChanged\";\n    PushUpdateEventType[\"MESSAGE_PREVIEW_CREATED\"] = \"MessagePreviewCreated\";\n    PushUpdateEventType[\"EVENT_IN_S3\"] = \"EventInS3\";\n})(PushUpdateEventType = exports.PushUpdateEventType || (exports.PushUpdateEventType = {}));\n","module.exports = __WEBPACK_EXTERNAL_MODULE__198__;","module.exports = __WEBPACK_EXTERNAL_MODULE__315__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export enum ChatSDKVariable {\n  ACCESS_TOKEN = 'ACCESS_TOKEN',\n  ACCESS_TOKEN_EXPIRES_IN = 'ACCESS_TOKEN_EXPIRES_IN',\n  APP_NAME = 'APP_NAME',\n  APP_VERSION = 'APP_VERSION',\n  AUTHORIZATION_CODE = 'AUTHORIZATION_CODE',\n  BRAND_ID = 'BRAND_ID',\n  CHANNEL_ID = 'CHANNEL_ID',\n  CUSTOMER_ID = 'CUSTOMER_ID',\n  CUSTOMER_IMAGE = 'CUSTOMER_IMAGE',\n  CUSTOMER_NAME = 'CUSTOMER_NAME',\n  DESTINATION = 'DESTINATION',\n  ENDPOINT_CHAT = 'ENDPOINT_CHAT',\n  ENDPOINT_GATEWAY = 'ENDPOINT_GATEWAY',\n  LANGUAGE = 'LANGUAGE',\n  THREAD_DATA = 'THREAD_DATA',\n  VISITOR_ID = 'VISITOR_ID',\n  VISIT_ID = 'VISIT_ID',\n}\n","import { ChatSDKVariable } from './ChatSDKVariable';\n\nclass VariablesStorage {\n  private _vars: Partial<Record<ChatSDKVariable, string | undefined>> = {};\n\n  set(variableName: ChatSDKVariable, value: string | undefined): void {\n    this._vars[variableName] = value;\n  }\n\n  get<D = undefined>(\n    variableName: ChatSDKVariable,\n    defaultValue?: D,\n  ): string | D {\n    return this._vars[variableName] ?? (defaultValue as D);\n  }\n\n  list() {\n    return Object.keys(this._vars);\n  }\n\n  clear() {\n    this._vars = {};\n  }\n}\n\nexport const SDKVariableStorage = new VariablesStorage();\n","/**\n * Checks if `value` is `null`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n * @example\n *\n * _.isNull(null);\n * // => true\n *\n * _.isNull(void 0);\n * // => false\n */\nfunction isNull(value) {\n  return value === null;\n}\n\nexport default isNull;\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\n\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { isNull } from '../utils/is';\n\nexport function setAccessToken(accessToken: AccessToken): void {\n  SDKVariableStorage.set(ChatSDKVariable.ACCESS_TOKEN, accessToken.token);\n  SDKVariableStorage.set(\n    ChatSDKVariable.ACCESS_TOKEN_EXPIRES_IN,\n    String(accessToken.expiresIn),\n  );\n}\n\nexport function getAccessToken(): AccessToken | null {\n  const token = SDKVariableStorage.get(ChatSDKVariable.ACCESS_TOKEN, null);\n  const expiresIn = SDKVariableStorage.get(\n    ChatSDKVariable.ACCESS_TOKEN_EXPIRES_IN,\n    null,\n  );\n\n  if (isNull(token) || isNull(expiresIn)) {\n    return null;\n  }\n\n  return {\n    token,\n    expiresIn: Number(expiresIn),\n  };\n}\n","export class ChatSDKError extends Error {\n  name: string = 'ChatSDKError';\n  data: unknown;\n\n  constructor(error: unknown, data?: unknown) {\n    super();\n\n    this.message = `[ChatSDKError]: ${this._getErrorMessage(error)}`;\n    this.data = data;\n  }\n\n  private _getErrorMessage(error: unknown): string {\n    if (error instanceof Error) {\n      return error.message;\n    }\n    if (typeof error === 'string') {\n      return error;\n    }\n\n    return JSON.stringify(error);\n  }\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\n\nexport class AuthorizationError extends ChatSDKError {\n  data: MessageFailedEventData['error'] | undefined;\n\n  constructor(\n    message: string,\n    data: MessageFailedEventData['error'] | undefined,\n  ) {\n    super(message, data);\n\n    if (data !== undefined) {\n      this.message = `${message} because of (${data.errorMessage})`;\n    }\n  }\n}\n","export const CHAT_SDK_VERSION: string = process.env.PACKAGE_VERSION ?? '0';\n","import { VisitorInput } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nexport interface VisitorPayload {\n  visitor: VisitorInput;\n}\n\nexport function createVisitorPayload(visitorId: VisitorId): VisitorPayload {\n  return {\n    visitor: {\n      id: visitorId,\n    },\n  };\n}\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","import baseKeys from './_baseKeys.js';\nimport getTag from './_getTag.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLike from './isArrayLike.js';\nimport isBuffer from './isBuffer.js';\nimport isPrototype from './_isPrototype.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEmpty;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","import { ChatEventData } from '../event/ChatEvent';\n\nexport const requestQueue = new Map<string, (value: ChatEventData) => void>();\n","import { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { Event } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { generateId } from '../utils/generateId';\nimport { isEmpty, isNull } from '../utils/is';\n\nimport { requestQueue } from './requestQueue';\n\nexport const makeRequest = async (\n  event: Event<AwsInputEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> => {\n  if (isNull(wsClient)) {\n    throw new ChatSDKError('WebSocketClient is not initialized');\n  }\n  if (isEmpty(event.eventId)) {\n    event.eventId = generateId();\n  }\n\n  return new Promise<ChatEventData>((resolve) => {\n    requestQueue.set(event.eventId, resolve);\n    wsClient?.send(event);\n  });\n};\n","export function splitName(name: string): [string, string] {\n  const [firstName, ...names] = name.split(' ');\n  const lastName = names.join(' ');\n\n  return [firstName, lastName];\n}\n","import { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { isUndefined } from '../utils/is';\n\ntype Ident = CustomField['ident'];\ntype Value = CustomField['value'];\n\nexport type CustomFieldsObject = Record<Ident, Value>;\nexport type CustomFieldsMap = Map<Ident, Value>;\n\nexport function setCustomFields(\n  fields: CustomFieldsMap,\n  set: CustomFieldsObject = {},\n): void {\n  for (const name of Object.keys(set)) {\n    fields.set(name, set[name]);\n  }\n}\n\nexport function setCustomFieldsFromArray(\n  fields: CustomFieldsMap,\n  set: Array<CustomField> = [],\n): void {\n  for (const { ident, value } of set) {\n    fields.set(ident, value);\n  }\n}\n\nexport function setCustomField(\n  fields: CustomFieldsMap,\n  name: string,\n  value: CustomField['value'],\n): void {\n  if (isUndefined(name) || isUndefined(value)) {\n    throw new ChatSDKError('Custom field name and value must be set');\n  }\n\n  fields.set(name, value);\n}\n\nexport function getCustomFields(fields: CustomFieldsMap): CustomFieldsObject {\n  return Object.fromEntries(fields);\n}\n\nexport function getCustomFieldsArray(\n  fields: CustomFieldsMap,\n): Array<CustomField> {\n  return Array.from(fields).map<CustomField>(([ident, value]) => ({\n    ident,\n    value,\n  }));\n}\n","import { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\n\nimport {\n  CustomFieldsMap,\n  CustomFieldsObject,\n  getCustomFields,\n  getCustomFieldsArray,\n  setCustomFields,\n  setCustomFieldsFromArray,\n} from '../customField/CustomFields';\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { generateId } from '../utils/generateId';\n\nimport { createSetCustomerCustomFieldsPayloadData } from './setCustomerCustomFieldsPayload';\n\nexport class Customer {\n  protected _websocketClient: WebSocketClient | null;\n  protected _customFields: CustomFieldsMap = new Map();\n  protected _exists = false;\n\n  constructor(\n    id: CustomerIdentityIdOnExternalPlatform,\n    name: string | undefined,\n    image: string | undefined,\n    websocketClient: WebSocketClient | null,\n  ) {\n    this._websocketClient = websocketClient;\n    Customer.setId(id);\n    Customer.setName(name);\n    if (image) {\n      Customer.setImage(image);\n    }\n  }\n\n  static setId(id: CustomerIdentityIdOnExternalPlatform): void {\n    SDKVariableStorage.set(ChatSDKVariable.CUSTOMER_ID, id);\n  }\n\n  static getId(): CustomerIdentityIdOnExternalPlatform | null {\n    return SDKVariableStorage.get(ChatSDKVariable.CUSTOMER_ID, null);\n  }\n\n  static getName(): string | undefined {\n    return SDKVariableStorage.get(ChatSDKVariable.CUSTOMER_NAME);\n  }\n\n  static setName(name?: string): void {\n    SDKVariableStorage.set(ChatSDKVariable.CUSTOMER_NAME, name);\n  }\n\n  static getIdOrCreateNewOne(): CustomerIdentityIdOnExternalPlatform {\n    let customerId = this.getId();\n\n    if (!customerId) {\n      customerId = generateId();\n      this.setId(customerId);\n    }\n\n    return customerId;\n  }\n\n  static getImage(): string | undefined {\n    return SDKVariableStorage.get(ChatSDKVariable.CUSTOMER_IMAGE);\n  }\n\n  static setImage(image?: string): void {\n    SDKVariableStorage.set(ChatSDKVariable.CUSTOMER_IMAGE, image);\n  }\n\n  public getId(): CustomerIdentityIdOnExternalPlatform {\n    return Customer.getIdOrCreateNewOne();\n  }\n\n  public getName(): string | undefined {\n    return Customer.getName();\n  }\n\n  public setName(name?: string): void {\n    Customer.setName(name);\n  }\n\n  public setImage(image?: string): void {\n    Customer.setImage(image);\n  }\n\n  public setExists(exists: boolean): void {\n    this._exists = exists;\n  }\n\n  /**\n   * Set Customer Custom field\n   * @param name - Custom field name\n   * @param value - Custom field value\n   */\n  public setCustomField(\n    name: CustomField['ident'],\n    value: CustomField['value'],\n  ): Promise<ChatEventData> | undefined {\n    return this.setCustomFields({ [name]: value });\n  }\n\n  /**\n   * Set Customer Custom fields\n   * @param customFields - custom fields object\n   * @example setCustomFields(\\{ identName: 'value', identName2: 'value2' \\})\n   */\n  public setCustomFields(\n    customFields: CustomFieldsObject,\n  ): Promise<ChatEventData> | undefined {\n    setCustomFields(this._customFields, customFields);\n\n    if (this._exists) {\n      return this.sendCustomFields();\n    }\n  }\n\n  /**\n   * Get Customer Custom fields (as object)\n   */\n  public getCustomFields(): CustomFieldsObject {\n    return getCustomFields(this._customFields);\n  }\n\n  /**\n   * Set Customer Custom fields from an array of custom fields\n   * @param customFields - custom fields array\n   */\n  public setCustomFieldsFromArray(customFields: Array<CustomField>): void {\n    setCustomFieldsFromArray(this._customFields, customFields);\n  }\n\n  /**\n   * Get Customer Custom fields (as array of CustomField)\n   */\n  public getCustomFieldsArray(): Array<CustomField> {\n    return getCustomFieldsArray(this._customFields);\n  }\n\n  /**\n   * Send Customer Custom fields\n   * - call this only after the first message or recover event\n   * @returns Promise<ChatEventData>\n   */\n  public async sendCustomFields(): Promise<ChatEventData> {\n    const payloadData = createSetCustomerCustomFieldsPayloadData(\n      getCustomFieldsArray(this._customFields),\n    );\n\n    return sendChatEvent(payloadData, this._websocketClient);\n  }\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendConsumerCustomFieldsEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendConsumerCustomFields';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\ntype SendCustomerCustomFieldsEventData = SendConsumerCustomFieldsEventData;\n\nexport function createSetCustomerCustomFieldsPayloadData(\n  customFields: Array<CustomField>,\n): EventPayloadData<SendCustomerCustomFieldsEventData> {\n  return {\n    eventType: AwsInputEventType.SEND_CONSUMER_CUSTOM_FIELDS,\n    data: {\n      customFields,\n    },\n  };\n}\n","import { ConsumerIdentityInput } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { splitName } from '../utils/splitName';\n\nimport { Customer } from './Customer';\n\nexport type ConsumerIdentityPayload = ConsumerIdentityInput;\n\nexport function createCustomerIdentityPayload(\n  name?: string,\n  image?: string,\n): ConsumerIdentityPayload {\n  const storedName = name ?? Customer.getName();\n  const storedImage = image ?? Customer.getImage();\n\n  let customerIdentityNamePayload: Partial<ConsumerIdentityPayload> = {};\n  if (typeof storedName === 'string' && storedName.length > 0) {\n    const [firstName, lastName] = splitName(storedName);\n    customerIdentityNamePayload = { firstName, lastName };\n  }\n\n  if (storedImage) {\n    customerIdentityNamePayload.image = storedImage;\n  }\n\n  return {\n    idOnExternalPlatform: Customer.getIdOrCreateNewOne(),\n    ...customerIdentityNamePayload,\n  };\n}\n","/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nexport default isNil;\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { ChatSDKError } from '../error/ChatSDKError';\n\nimport { isNil } from './is';\n\nexport function getBrandIdAndChannelId(): {\n  brandId: BrandId;\n  channelId: ChannelId;\n} {\n  const brandId = parseInt(SDKVariableStorage.get(ChatSDKVariable.BRAND_ID));\n  const channelId = SDKVariableStorage.get(ChatSDKVariable.CHANNEL_ID);\n\n  if (isNil(brandId) || isNaN(brandId) || isNil(channelId)) {\n    throw new ChatSDKError(\n      `Cannot get BrandId and ChannelId from SDKVariableStorage \n      brandId (${brandId}) |\n      channelId (${channelId})`,\n    );\n  }\n\n  return {\n    brandId,\n    channelId,\n  };\n}\n","/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nexport default isUndefined;\n","import { AwsChatWindowEventActionRoute } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport {\n  AwsInputEvent,\n  AwsInputEventData,\n  ConsumerIdentityInput,\n  DestinationInput,\n  VisitInput,\n  VisitorInput,\n} from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { createCustomerIdentityPayload } from '../customer/customerIdentityPayload';\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { generateId } from '../utils/generateId';\nimport { getBrandIdAndChannelId } from '../utils/getBrandIdAndChannelId';\nimport { isUndefined } from '../utils/is';\n\nexport type EventActionRoute = AwsChatWindowEventActionRoute;\nexport type EventPayload<D extends AwsInputEventData> = AwsInputEvent<\n  AwsInputEventType,\n  D\n>;\n\nexport interface Event<D extends AwsInputEventData> {\n  action: EventActionRoute;\n  eventId: string;\n  payload: EventPayload<D>;\n}\n\nexport interface EventPayloadData<D extends AwsInputEventData> {\n  consumerIdentity?: ConsumerIdentityInput;\n  data: D;\n  destination?: DestinationInput;\n  eventType: AwsInputEventType;\n  visit?: VisitInput;\n  visitor?: VisitorInput;\n}\n\nexport function createEventPayload<D extends AwsInputEventData>(\n  eventPayloadData: EventPayloadData<D>,\n): EventPayload<D> {\n  const storedDestinationId = SDKVariableStorage.get(\n    ChatSDKVariable.DESTINATION,\n  );\n  const storedVisitId = SDKVariableStorage.get(ChatSDKVariable.VISIT_ID);\n  const storedVisitorId = SDKVariableStorage.get(ChatSDKVariable.VISITOR_ID);\n\n  const {\n    eventType,\n    data,\n    consumerIdentity = createCustomerIdentityPayload(),\n    destination = storedDestinationId ? { id: storedDestinationId } : {},\n    visitor = storedVisitorId ? { id: storedVisitorId } : {},\n    visit = storedVisitId ? { id: storedVisitId } : {},\n  } = eventPayloadData;\n  const { brandId, channelId } = getBrandIdAndChannelId();\n\n  if (isUndefined(eventType)) {\n    throw new ChatSDKError(\n      `Cannot create an event payload because of missing eventType (${eventType})`,\n    );\n  }\n\n  return {\n    eventType,\n    brand: {\n      id: Number(brandId),\n    },\n    channel: {\n      id: channelId,\n    },\n    consumerIdentity,\n    data,\n    destination,\n    visitor,\n    visit,\n  };\n}\n\nexport function createEvent<D extends AwsInputEventData>(\n  payload: EventPayload<D>,\n  eventId: string = generateId(),\n  actionRoute: EventActionRoute = AwsChatWindowEventActionRoute.CHAT_WINDOW_EVENT,\n): Event<D> {\n  return {\n    action: actionRoute,\n    eventId,\n    payload,\n  };\n}\n","import { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { makeRequest } from '../request/makeRequest';\nimport {\n  createEvent,\n  createEventPayload,\n  EventPayloadData,\n} from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { ChatEventData } from './ChatEvent';\n\n/**\n * Send chat event\n * @param payloadData - payload data\n * @param webSocketClient - websocket client\n */\nexport async function sendChatEvent<D extends AwsInputEventData>(\n  payloadData: EventPayloadData<D>,\n  webSocketClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const event = createEvent(createEventPayload(payloadData));\n\n  return makeRequest(event, webSocketClient);\n}\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ReconnectConsumerData } from '@brandembassy/ts-types-chat/dist/awsEvents/ReconnectConsumer';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport { createCustomerIdentityPayload } from '../customer/customerIdentityPayload';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { createVisitorPayload } from '../visitor/createVisitorPayload';\n\nexport function createReconnectPayloadData(\n  accessToken: AccessToken,\n  visitorId?: string,\n): EventPayloadData<ReconnectConsumerData> {\n  return {\n    ...createVisitorPayload(visitorId as VisitorId),\n    ...createCustomerIdentityPayload(),\n    eventType: AwsInputEventType.RECONNECT_CONSUMER,\n    data: {\n      accessToken: {\n        token: accessToken.token,\n      },\n    },\n  };\n}\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\n\nlet refreshTokenTimeoutId: NodeJS.Timeout | null = null;\n\nexport function getIdealTimeInSecondsForIssueRefreshToken(\n  accessTokenExpiresIn: number,\n): number {\n  const idealTimeToRefreshAccessToken = Math.round(accessTokenExpiresIn * 0.9);\n\n  if (idealTimeToRefreshAccessToken < 20) {\n    return 20;\n  }\n\n  return idealTimeToRefreshAccessToken;\n}\n\nexport function handleRefreshToken(\n  accessToken: AccessToken,\n  refreshTokenAction: () => Promise<void>,\n): void {\n  if (refreshTokenTimeoutId !== null) {\n    clearTimeout(refreshTokenTimeoutId);\n  }\n\n  refreshTokenTimeoutId = setTimeout(\n    refreshTokenAction,\n    getIdealTimeInSecondsForIssueRefreshToken(accessToken.expiresIn) * 1000,\n  );\n}\n","import { AuthorizationTokenGeneratedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/AuthorizationTokenGenerated';\n\nexport const isAuthorizationTokenGeneratedPostbackData = (\n  data: unknown,\n): data is AuthorizationTokenGeneratedPostbackData =>\n  'authorizationToken' in (data as AuthorizationTokenGeneratedPostbackData);\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nimport { AuthorizeConsumerEventSuccessResponse } from './AuthorizeConsumerEventResponse';\n\nexport const isAuthSuccessEvent = (\n  payload: ChatEventData,\n): payload is AuthorizeConsumerEventSuccessResponse => {\n  const status = (payload as AuthorizeConsumerEventSuccessResponse)?.data\n    ?.status;\n  const type = payload?.type;\n\n  return (\n    type === AwsResponseEventType.CONSUMER_AUTHORIZED && status === 'success'\n  );\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { TokenRefreshedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/TokenRefreshed';\n\nexport interface TokenRefreshedSuccessResponse {\n  data: TokenRefreshedPostbackData;\n  type: AwsResponseEventType.TOKEN_REFRESHED;\n}\n\nexport function isTokenRefreshedSuccessResponse(\n  response: unknown,\n): response is TokenRefreshedSuccessResponse {\n  return (\n    (response as TokenRefreshedSuccessResponse)?.type ===\n      AwsResponseEventType.TOKEN_REFRESHED &&\n    (response as TokenRefreshedSuccessResponse).data?.accessToken?.token !==\n      undefined\n  );\n}\n","import UAParser from 'ua-parser-js';\n\nimport {\n  ApplicationType,\n  BrowserFingerprint,\n  DeviceType,\n} from '@brandembassy/ts-types-chat/dist/user/BrowserFingerprint';\n\nexport interface BrowserFingerprintOptions {\n  country?: string | null;\n  ip?: string | null;\n  language?: string;\n  location?: string | null;\n}\n\nexport const getBrowserLanguage = (): string => navigator.language;\nexport const getBrowserLocation = (): string =>\n  Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n/**\n * Get Device type\n * @param deviceType - device type\n */\nexport function getDeviceType(deviceType?: string): DeviceType {\n  switch (deviceType) {\n    case 'mobile':\n      return DeviceType.MOBILE;\n    case 'tablet':\n      return DeviceType.TABLET;\n    default:\n      return DeviceType.DESKTOP;\n  }\n}\n\n/**\n * Get Customer Browser fingerprint\n * @param options - options\n */\nexport const getBrowserFingerprint = (\n  options: BrowserFingerprintOptions = {},\n): BrowserFingerprint => {\n  const deviceInfoFromUserAgent = new UAParser(navigator.userAgent);\n\n  const {\n    country = '',\n    location = getBrowserLocation(),\n    language = getBrowserLanguage(),\n    ip = null,\n  } = options;\n\n  return {\n    browser: deviceInfoFromUserAgent.getBrowser().name ?? null,\n    browserVersion: deviceInfoFromUserAgent.getBrowser().version ?? null,\n    country,\n    ip,\n    language,\n    location,\n    os: deviceInfoFromUserAgent.getOS().name ?? null,\n    osVersion: deviceInfoFromUserAgent.getOS().version ?? null,\n    deviceType: getDeviceType(deviceInfoFromUserAgent.getDevice().type),\n    applicationType: ApplicationType.BROWSER,\n  };\n};\n","export const ERROR_CODE_SDK_VERSION_NOT_SUPPORTED = 'SdkVersionNotSupported';\n\nexport class SdkVersionNotSupported extends Error {\n  name = ERROR_CODE_SDK_VERSION_NOT_SUPPORTED;\n  message = 'Please update to the latest ChatSDK version';\n}\n","import {\n  ERROR_CODE_SDK_VERSION_NOT_SUPPORTED,\n  SdkVersionNotSupported,\n} from '../../error/SdkVersionNotSupported';\nimport { ChatEventData } from '../ChatEvent';\n\nexport function isSdkVersionNotSupportedEvent(event: unknown): boolean {\n  return (\n    (event as ChatEventData)?.error?.errorCode ===\n    ERROR_CODE_SDK_VERSION_NOT_SUPPORTED\n  );\n}\n\nexport function sdkVersionCheck(event: ChatEventData): ChatEventData | null {\n  if (isSdkVersionNotSupportedEvent(event)) {\n    throw new SdkVersionNotSupported();\n  }\n\n  return event;\n}\n","export async function getErrorResponseData(\n  response: Response,\n): Promise<unknown> {\n  let data;\n\n  try {\n    data = await response.json();\n  } catch (error) {\n    data = response.statusText;\n  }\n\n  return data;\n}\n","import { ChannelInfo } from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { CALLER_SERVICE_ID } from '@brandembassy/ts-types-platform/dist/http/headers';\n\nimport { getBrowserLanguage } from '../browserFingerprint/getBrowserFingerprint';\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { CHAT_SDK_VERSION } from '../env/version';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SdkVersionNotSupported } from '../error/SdkVersionNotSupported';\nimport { isSdkVersionNotSupportedEvent } from '../event/middleware/sdkVersionCheck';\nimport { getErrorResponseData } from '../request/getErrorResponseData';\n\nexport async function fetchChannelInfo(\n  brandId: BrandId,\n  channelId: ChannelId,\n  language = getBrowserLanguage(),\n): Promise<ChannelInfo> {\n  const languageLocale = `${language}`.split('-').join('_');\n  const CHANNEL_INTEGRATION_URL = SDKVariableStorage.get(\n    ChatSDKVariable.ENDPOINT_CHAT,\n  );\n\n  const response = await fetch(\n    `${CHANNEL_INTEGRATION_URL}/chat/1.0/brand/${brandId}/channel/${channelId}?locale=${languageLocale}`,\n    {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        [CALLER_SERVICE_ID]: SDKVariableStorage.get(ChatSDKVariable.APP_NAME),\n        'x-sdk-platform': 'web',\n        'x-sdk-version': CHAT_SDK_VERSION,\n      },\n    },\n  );\n\n  if (!response.ok) {\n    const errorData = await getErrorResponseData(response);\n\n    if (isSdkVersionNotSupportedEvent(errorData)) {\n      throw new SdkVersionNotSupported();\n    }\n\n    throw new ChatSDKError(\n      `Failed to fetch channel info. Status (${response.status})`,\n      { response },\n    );\n  }\n\n  return response.json();\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport enum EnvironmentName {\n  AU1 = 'AU1',\n  CA1 = 'CA1',\n  EU1 = 'EU1',\n  JP1 = 'JP1',\n  NA1 = 'NA1',\n  UK1 = 'UK1',\n  custom = 'custom',\n}\n\nexport interface EnvironmentEndpoints {\n  chat: string;\n  gateway: string;\n  name: string;\n}\n\nexport function getEnvironmentEndpoints(\n  environment: EnvironmentName,\n): EnvironmentEndpoints {\n  const placeholder = '{ENV}';\n  const chatUrlTemplate = `https://channels-de-${placeholder}.niceincontact.com`;\n  const gatewayUrlTemplate = `wss://chat-gateway-de-${placeholder}.niceincontact.com`;\n\n  switch (environment) {\n    case EnvironmentName.AU1:\n      return {\n        chat: chatUrlTemplate.replace(placeholder, 'au1'),\n        name: 'Australia',\n        gateway: gatewayUrlTemplate.replace(placeholder, 'au1'),\n      };\n    case EnvironmentName.CA1:\n      return {\n        chat: chatUrlTemplate.replace(placeholder, 'ca1'),\n        name: 'Canada',\n        gateway: gatewayUrlTemplate.replace(placeholder, 'ca1'),\n      };\n    case EnvironmentName.EU1:\n      return {\n        chat: chatUrlTemplate.replace(placeholder, 'eu1'),\n        name: 'Europe',\n        gateway: gatewayUrlTemplate.replace(placeholder, 'eu1'),\n      };\n    case EnvironmentName.JP1:\n      return {\n        chat: chatUrlTemplate.replace(placeholder, 'jp1'),\n        name: 'Japan',\n        gateway: gatewayUrlTemplate.replace(placeholder, 'jp1'),\n      };\n    case EnvironmentName.NA1:\n      return {\n        chat: chatUrlTemplate.replace(placeholder, 'na1'),\n        name: 'North America',\n        gateway: gatewayUrlTemplate.replace(placeholder, 'na1'),\n      };\n    case EnvironmentName.UK1:\n      return {\n        chat: chatUrlTemplate.replace(placeholder, 'uk1'),\n        name: 'United Kingdom',\n        gateway: gatewayUrlTemplate.replace(placeholder, 'uk1'),\n      };\n    case EnvironmentName.custom:\n      return {\n        chat: '',\n        name: 'Custom',\n        gateway: '',\n      };\n    default:\n      throw new ChatSDKError(`Unknown environment: ${environment}`);\n  }\n}\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { PushUpdateContext } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateContext';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\n\nexport const ChatEvent = {\n  ...PushUpdateEventType,\n  ...AwsResponseEventType,\n  AGENT_TYPING_STARTED: 'AgentTypingStarted',\n  AGENT_TYPING_ENDED: 'AgentTypingEnded',\n  ASSIGNED_AGENT_CHANGED: 'AssignedAgentChanged',\n  CONTACT_CREATED: 'ContactCreated',\n  CONTACT_STATUS_CHANGED: 'ContactStatusChanged',\n  CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED:\n    'ContactToRoutingQueueAssignmentChanged',\n} as const;\n\nexport class ChatCustomEvent<\n  T extends ChatEventData = ChatEventData,\n> extends CustomEvent<T> {}\n\nexport interface ChatEventData {\n  context?: [] | PushUpdateContext;\n  createdAt: Date;\n  createdAtWithMilliseconds?: Date;\n  data: unknown;\n  error?: MessageFailedEventData['error'];\n  id: string;\n  type?: ChatEventType;\n}\n\nexport type ChatEventKey = keyof typeof ChatEvent;\nexport type ChatEventType = typeof ChatEvent[ChatEventKey];\n","import { isNil } from '../utils/is';\n\nimport { ChatEventData } from './ChatEvent';\n\nexport type EventMiddleware = (\n  eventData: ChatEventData,\n) => ChatEventData | null;\n\nexport class ChatEventMiddleware {\n  middlewares: Array<EventMiddleware> = [];\n\n  register(middleware: EventMiddleware): void {\n    this.middlewares.push(middleware);\n  }\n\n  process(event: ChatEventData | null): ChatEventData | null {\n    if (isNil(event)) {\n      return null;\n    }\n\n    let processedEvent: ChatEventData | null = event;\n\n    for (const middleware of this.middlewares) {\n      if (processedEvent === null) {\n        return null;\n      }\n      processedEvent = middleware(processedEvent);\n    }\n\n    return processedEvent;\n  }\n}\n","import { ChatCustomEvent, ChatEventType } from './ChatEvent';\n\nexport interface IChatEventTarget extends EventTarget {\n  addEventListener<K extends ChatEventType>(\n    type: K,\n    listener: (event: ChatCustomEvent) => void,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  addEventListener(\n    type: string,\n    callback: EventListenerOrEventListenerObject | null,\n    options?: EventListenerOptions | boolean,\n  ): void;\n\n  dispatchEvent(event: ChatCustomEvent): boolean;\n\n  removeEventListener(\n    type: string,\n    callback: EventListenerOrEventListenerObject | null,\n    options?: boolean | EventListenerOptions | undefined,\n  ): void;\n  removeEventListener<K extends ChatEventType>(\n    type: K,\n    callback: (event: ChatCustomEvent) => void,\n    options?: boolean | EventListenerOptions | undefined,\n  ): void;\n}\n\nexport const ChatEventTarget = EventTarget as {\n  new (): IChatEventTarget;\n  prototype: IChatEventTarget;\n};\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { isNil } from '../utils/is';\n\ninterface UserData {\n  user: unknown;\n}\n\nfunction hasUserData(data: unknown): boolean {\n  return !isNil((data as UserData)?.user);\n}\n\nexport function agentTypingStarted(event: ChatEventData): ChatEventData {\n  if (hasUserData(event.data)) {\n    return {\n      ...event,\n      type: ChatEvent.AGENT_TYPING_STARTED,\n    };\n  }\n\n  return event;\n}\n\nexport function agentTypingEnded(event: ChatEventData): ChatEventData {\n  if (hasUserData(event.data)) {\n    return {\n      ...event,\n      type: ChatEvent.AGENT_TYPING_ENDED,\n    };\n  }\n\n  return event;\n}\n","import { fromISOString } from '@brandembassy/be-javascript-utils/dist/dateTime/isoString';\nimport { PushUpdateContext } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateContext';\n\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\nimport { isEmpty } from '../utils/is';\n\nimport { ChatEventData, ChatEventType } from './ChatEvent';\n\ninterface EventBase {\n  createdAt: string;\n}\n\ninterface EventDataWithPostback extends EventBase {\n  postback: {\n    data: Record<string, unknown>;\n    eventType: ChatEventType;\n  };\n}\n\ninterface EventWithEventId extends EventBase {\n  eventId: string;\n}\n\ninterface EventWithData extends EventBase {\n  context?: [] | PushUpdateContext;\n  data: Record<string, unknown>;\n}\ninterface EventWithType extends EventBase {\n  eventType: ChatEventType;\n}\n\nconst EMPTY_EVENT = {\n  id: '',\n  data: null,\n  type: undefined,\n  createdAt: new Date(),\n};\n\nconst hasData = (event: unknown): event is EventWithData =>\n  'data' in (event as EventWithData);\n\nconst hasError = (event: unknown): event is MessageFailedEventData =>\n  'error' in (event as MessageFailedEventData);\n\nconst hasEventId = (event: unknown): event is EventWithEventId =>\n  'eventId' in (event as EventWithEventId);\n\nconst hasEventType = (event: unknown): event is EventWithType =>\n  'eventType' in (event as EventWithType);\n\nconst isDataWithPostback = (\n  eventDetailData: unknown,\n): eventDetailData is EventDataWithPostback => {\n  const postback = (eventDetailData as EventDataWithPostback)?.postback;\n\n  return isEmpty(postback) === false;\n};\n\nexport function normalizeEvent(event: unknown): ChatEventData {\n  if (!hasEventId(event)) {\n    return EMPTY_EVENT;\n  }\n\n  if (hasError(event)) {\n    return {\n      createdAt: fromISOString(event.createdAt ?? new Date().toString()),\n      data: null,\n      error: event.error,\n      id: event.eventId,\n    };\n  }\n\n  const eventType = hasEventType(event) ? event.eventType : undefined;\n\n  if (hasData(event)) {\n    return {\n      createdAt: fromISOString(event.createdAt),\n      context: event.context,\n      data: event.data,\n      id: event.eventId,\n      type: eventType,\n    };\n  }\n\n  if (isDataWithPostback(event)) {\n    const {\n      postback: { data: postbackData, eventType: postbackEventType },\n      eventId: rawEventId,\n      ...restEventData\n    } = event;\n\n    return {\n      type: postbackEventType,\n      data: {\n        ...restEventData,\n        ...postbackData,\n      },\n      createdAt: fromISOString(event.createdAt),\n      id: rawEventId,\n    };\n  }\n\n  const { eventId, ...eventRest } = event;\n\n  return {\n    data: undefined,\n    ...eventRest,\n    id: eventId,\n    type: eventType,\n    createdAt: fromISOString(event.createdAt),\n  };\n}\n","import { agentTypingEnded, agentTypingStarted } from '../../agent/agentTyping';\nimport { assignedAgentChanged } from '../../agent/assignedAgentChanged';\nimport { contactCreated } from '../../contact/contactCreated';\nimport { contactStatusChanged } from '../../contact/contactStatusChanged';\nimport { contactToRoutingQueueAssignmentChanged } from '../../contact/contactToRoutingQueueAssignmentChanged';\nimport { livechatRecovered } from '../../thread/livechatThread/livechatRecovered';\nimport { threadRecovered } from '../../thread/threadRecovered';\nimport { ChatEvent, ChatEventData } from '../ChatEvent';\nimport { EventMiddleware } from '../ChatEventMiddleware';\n\nconst eventTypeMap: Record<string, EventMiddleware> = {\n  [ChatEvent.SENDER_TYPING_STARTED]: agentTypingStarted,\n  [ChatEvent.SENDER_TYPING_ENDED]: agentTypingEnded,\n  [ChatEvent.CASE_INBOX_ASSIGNEE_CHANGED]: assignedAgentChanged,\n  [ChatEvent.CASE_CREATED]: contactCreated,\n  [ChatEvent.CASE_STATUS_CHANGED]: contactStatusChanged,\n  [ChatEvent.CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED]:\n    contactToRoutingQueueAssignmentChanged,\n  [ChatEvent.LIVECHAT_RECOVERED]: livechatRecovered,\n  [ChatEvent.THREAD_RECOVERED]: threadRecovered,\n};\n\nexport function chatEventMapper(event: ChatEventData): ChatEventData | null {\n  if (event.type && eventTypeMap[event.type] !== undefined) {\n    return eventTypeMap[event.type](event);\n  }\n\n  return event;\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport function assignedAgentChanged(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.ASSIGNED_AGENT_CHANGED,\n  };\n}\n","import { CaseCreatedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseCreatedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type ContactCreatedData = CaseCreatedData;\n\nexport interface ContactCreatedChatEvent extends ChatEventData {\n  data: ContactCreatedData;\n  type: typeof ChatEvent.CONTACT_CREATED;\n}\n\nexport function contactCreated(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.CONTACT_CREATED,\n  };\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport function contactStatusChanged(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.CONTACT_STATUS_CHANGED,\n  };\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nimport { ContactToRoutingQueueAssignmentChangedChatEvent } from './isContactToRoutingQueueAssignmentChangedEvent';\n\nexport function contactToRoutingQueueAssignmentChanged(\n  event: ChatEventData,\n): ContactToRoutingQueueAssignmentChangedChatEvent {\n  return {\n    ...(event as ContactToRoutingQueueAssignmentChangedChatEvent),\n    type: ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED,\n  };\n}\n","import { PushUpdateEventFields } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventFields';\n\nimport { ChatEventData } from '../../event/ChatEvent';\nimport { normalizeEvent } from '../../event/normalizeEvent';\n\nexport function livechatRecovered(event: ChatEventData): ChatEventData {\n  const normalizedContactHistoryItems = (\n    (event.data as Record<string, unknown>)\n      .contactHistory as Array<PushUpdateEventFields>\n  ).map(normalizeEvent);\n\n  return {\n    ...event,\n    data: {\n      ...(event.data as Record<string, unknown>),\n      contactHistory: normalizedContactHistoryItems,\n    },\n  };\n}\n","import { PushUpdateEventFields } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventFields';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { normalizeEvent } from '../event/normalizeEvent';\n\nexport function threadRecovered(event: ChatEventData): ChatEventData {\n  const normalizedContactHistoryItems = (\n    (event.data as Record<string, unknown>)\n      .contactHistory as Array<PushUpdateEventFields>\n  ).map(normalizeEvent);\n\n  return {\n    ...event,\n    data: {\n      ...(event.data as Record<string, unknown>),\n      contactHistory: normalizedContactHistoryItems,\n    },\n  };\n}\n","import { ChatEventData } from '../event/ChatEvent';\nimport { isUndefined } from '../utils/is';\n\nexport interface MessageSuccessEventData extends ChatEventData {\n  id: string;\n}\nexport interface MessageFailedEventData extends MessageSuccessEventData {\n  error: {\n    errorCode: string;\n    errorMessage: string;\n    transactionId: string;\n  };\n  id: string;\n}\n\nexport function isSendMessageSuccessEventData(\n  event: ChatEventData,\n): event is MessageSuccessEventData {\n  const hasEventId =\n    isUndefined((event as MessageSuccessEventData)?.id) === false;\n\n  const hasError =\n    isUndefined((event as MessageFailedEventData).error) === false;\n\n  return hasError === false && hasEventId;\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SendMessageFailedError extends ChatSDKError {}\n","export class WebSocketClientError extends Error {\n  name: string = 'WebSocketClientError';\n\n  constructor(message: string, reason: string = '') {\n    const reasonMessage = reason ? ` (${reason})` : '';\n    super(`[WebSocketClientError]: ${message}${reasonMessage}`);\n  }\n}\n","import { createQueryParametersAsString } from '@brandembassy/be-javascript-utils/dist/query/queryParameters';\nimport {\n  WebSocketClient as PushUpdateWSClient,\n  WebSocketClientEvent as PushUpdatesWebSocketClientEvent,\n} from '@brandembassy/push-updates-sdk';\nimport { setupSocketConnection } from '@brandembassy/push-updates-sdk/dist/pushUpdate/pushUpdateWebSocket';\nimport { CloseEvent, ErrorEvent } from '@brandembassy/reconnecting-websocket';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\n\nimport { WebSocketClientError } from './WebSocketClientError';\n\nfunction createSocketUrl(\n  host: string,\n  prefix: string,\n  brandId: BrandId,\n  channelId: ChannelId,\n  consumerIdOnExternalPlatform: CustomerIdentityIdOnExternalPlatform,\n  visitorId: VisitorId,\n): string {\n  const appVersion = SDKVariableStorage.get(ChatSDKVariable.APP_VERSION);\n  const queryParameters = {\n    brandId,\n    channelId,\n    consumerId: consumerIdOnExternalPlatform,\n    v: appVersion,\n    visitorId,\n  };\n\n  const queryParametersAsString =\n    createQueryParametersAsString(queryParameters);\n\n  return `${host}/${prefix}?${queryParametersAsString}`;\n}\n\nexport interface WebSocketClientOptions {\n  forceSecureProtocol?: boolean;\n  host?: string;\n  onError?: (error: WebSocketClientError) => void;\n  port?: string;\n  prefix?: string;\n}\n\n/**\n * Websocket client\n */\nexport class WebSocketClient {\n  private _connection: PushUpdateWSClient | null = null;\n\n  constructor(\n    private brandId: BrandId,\n    private channelId: ChannelId,\n    private customerId: CustomerIdentityIdOnExternalPlatform,\n    private options: WebSocketClientOptions,\n    private onError: ((error: Error) => void) | undefined,\n    private visitorId: VisitorId,\n  ) {\n    this.connect();\n  }\n\n  /**\n   * Connect websocket\n   */\n  connect(): void {\n    const port = this.options?.port ? `:${this.options?.port}` : '';\n    const host = this.options?.host ? `${this.options?.host}${port}` : '';\n    const prefix = this.options?.prefix ?? '';\n    const forceSecureProtocol = this.options?.forceSecureProtocol ?? true;\n\n    const socketUrl = createSocketUrl(\n      host,\n      prefix,\n      this.brandId,\n      this.channelId,\n      this.customerId,\n      this.visitorId,\n    );\n\n    this._connection = setupSocketConnection(socketUrl, {\n      startClosed: true,\n      forceSecureProtocol,\n      heartbeatAfterAuthorize: true,\n    });\n\n    const errorHandlerBound = this._errorHandler.bind(this);\n    this._connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.CLOSE,\n      errorHandlerBound,\n    );\n    this._connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.ERROR,\n      errorHandlerBound,\n    );\n\n    this._connection?.socket?.reconnect();\n  }\n\n  /**\n   * Disconnect websocket\n   */\n  disconnect(): void {\n    this._connection?.socket.close();\n  }\n\n  /**\n   * Reconnect websocket\n   */\n  reconnect(): void {\n    this._connection?.socket.reconnect();\n  }\n\n  /**\n   * Send data to active connection\n   * @param data - data to send\n   */\n  send(data: unknown): void {\n    const stringData = JSON.stringify(data);\n    this._connection?.send(stringData);\n  }\n\n  /**\n   * Register event handler to websocket event\n   * @param eventType - websocket event\n   * @param handlerCallback - event handler\n   */\n  on(\n    eventType: PushUpdatesWebSocketClientEvent,\n    handlerCallback: (event: CustomEvent) => void,\n  ): void {\n    this._connection?.addEventListener(eventType, handlerCallback);\n  }\n\n  /**\n   * Unregister event handler to websocket event\n   * @param eventType - websocket event\n   * @param handlerCallback - event handler\n   */\n  off(\n    eventType: PushUpdatesWebSocketClientEvent,\n    handlerCallback: (event: CustomEvent) => void,\n  ): void {\n    this._connection?.removeEventListener(eventType, handlerCallback);\n  }\n\n  /**\n   * Handle error from event listeners with onError callback or throw error\n   */\n  private _errorHandler(\n    event: CustomEvent<CloseEvent | ErrorEvent | Event>,\n  ): void {\n    const eventError = event.detail;\n    let error: WebSocketClientError | undefined;\n\n    if (eventError instanceof ErrorEvent) {\n      error = new WebSocketClientError('Connection error', eventError.message);\n    }\n    if (eventError instanceof CloseEvent) {\n      error = new WebSocketClientError('Connection closed', eventError.reason);\n    }\n    if (typeof error === 'undefined') {\n      error = new WebSocketClientError('Unknown error', eventError.type);\n    }\n\n    if (typeof this.onError === 'function') {\n      this.onError(error);\n    } else {\n      throw error;\n    }\n  }\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class UploadAttachmentError extends ChatSDKError {}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { AttachmentUpload } from '@brandembassy/ts-types-chat/dist/message/AttachmentUpload';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SendMessageOptions } from '../thread/SendMessageOptions';\nimport { generateId } from '../utils/generateId';\nimport { getBrandIdAndChannelId } from '../utils/getBrandIdAndChannelId';\n\nimport { createPayloadForAttachmentUpload } from './createPayloadForAttachmentUpload';\nimport {\n  isUploadFailResponse,\n  isUploadSuccessResponse,\n  uploadAttachment,\n} from './uploadAttachment';\nimport { UploadAttachmentError } from './UploadAttachmentError';\n\nexport const createAttachmentPayload = async (\n  file: File,\n  brandId: BrandId,\n  channelId: ChannelId,\n): Promise<AttachmentUpload> => {\n  const attachment = await createPayloadForAttachmentUpload(file);\n  const uploadAttachmentResponse = await uploadAttachment(\n    brandId,\n    channelId,\n    attachment,\n  );\n\n  if (isUploadSuccessResponse(uploadAttachmentResponse)) {\n    return {\n      url: uploadAttachmentResponse.fileUrl,\n      friendlyName: attachment.name,\n    };\n  }\n\n  if (isUploadFailResponse(uploadAttachmentResponse)) {\n    throw new UploadAttachmentError(\n      'Upload attachment failed',\n      uploadAttachmentResponse,\n    );\n  }\n\n  throw new ChatSDKError(\n    `Unknown file upload response (${uploadAttachmentResponse})`,\n  );\n};\n\nexport const createAttachmentUploadMessageData = async (\n  files: FileList,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  options: SendMessageOptions = {},\n): Promise<SendMessageEventData> => {\n  const { brandId, channelId } = getBrandIdAndChannelId();\n\n  try {\n    const attachments = await Promise.all<AttachmentUpload>(\n      Array.from(files).map(async (file) =>\n        createAttachmentPayload(file, brandId, channelId),\n      ),\n    );\n\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    return {\n      messageContent: {\n        type: MessageType.TEXT as MessageType,\n        payload: {\n          text: '',\n        },\n      },\n      attachments,\n      browserFingerprint,\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n      idOnExternalPlatform: messageId,\n      consumer: {\n        customFields: [],\n      },\n      consumerContact: {\n        customFields: [],\n      },\n    };\n  } catch (error: unknown) {\n    if (error instanceof UploadAttachmentError) {\n      throw error;\n    }\n\n    if (error instanceof Error) {\n      throw new ChatSDKError(\n        `Send attachment failed because of (${error.message})`,\n      );\n    }\n\n    throw new ChatSDKError(`Unknown error during file upload`);\n  }\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nimport { createLocalFileReader } from './localFileReader';\n\nexport interface AttachmentPayload {\n  mimeType: string;\n  name: string;\n  url: string;\n}\n\nexport const createPayloadForAttachmentUpload = async (\n  file: File,\n): Promise<AttachmentPayload> => {\n  const reader = await createLocalFileReader(file);\n\n  if (reader.error !== null) {\n    throw new ChatSDKError(\n      `Cannot create payload for attachment upload because of error (${reader.error.message})`,\n    );\n  }\n\n  if (typeof reader.result !== 'string') {\n    throw new ChatSDKError(\n      `Cannot create payload for attachment upload because of missing:\n      reader result (${reader.result})`,\n    );\n  }\n\n  return {\n    url: reader.result,\n    name: file.name,\n    mimeType: file.type,\n  };\n};\n","export function createLocalFileReader(file: File): Promise<FileReader> {\n  return new Promise((resolve, reject): void => {\n    const reader = new FileReader();\n    reader.onloadend = (): void => {\n      resolve(reader);\n    };\n    reader.onerror = (errorEvent: ProgressEvent<FileReader>): void =>\n      reject(errorEvent.target?.error?.message);\n    reader.readAsDataURL(file);\n  });\n}\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { CALLER_SERVICE_ID } from '@brandembassy/ts-types-platform/dist/http/headers';\n\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SdkVersionNotSupported } from '../error/SdkVersionNotSupported';\nimport { isSdkVersionNotSupportedEvent } from '../event/middleware/sdkVersionCheck';\nimport { getErrorResponseData } from '../request/getErrorResponseData';\nimport { isUndefined } from '../utils/is';\n\nimport { AttachmentPayload } from './createPayloadForAttachmentUpload';\n\nexport interface UploadSuccessResponse {\n  fileUrl: string;\n}\n\nexport interface UploadFailResponse {\n  allowedFileSize: string;\n  allowedFileTypes: Array<{\n    description: string;\n    mimeType: string;\n  }>;\n}\n\nexport function isUploadSuccessResponse(\n  data: unknown,\n): data is UploadSuccessResponse {\n  return isUndefined((data as UploadSuccessResponse)?.fileUrl) === false;\n}\n\nexport function isUploadFailResponse(\n  data: unknown,\n): data is UploadFailResponse {\n  return isUndefined((data as UploadFailResponse)?.allowedFileSize) === false;\n}\n\nexport async function uploadAttachment(\n  brandId: BrandId,\n  channelId: string,\n  attachment: AttachmentPayload,\n): Promise<UploadSuccessResponse | UploadFailResponse> {\n  const CHANNEL_INTEGRATION_URL = SDKVariableStorage.get(\n    ChatSDKVariable.ENDPOINT_CHAT,\n  );\n  const { url, name: fileName, mimeType } = attachment;\n  const content = url.split(';base64,')[1];\n  const requestBody = { content, fileName, mimeType };\n  const response = await fetch(\n    `${CHANNEL_INTEGRATION_URL}/chat/1.0/brand/${brandId}/channel/${channelId}/attachment`,\n    {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        [CALLER_SERVICE_ID]: SDKVariableStorage.get(ChatSDKVariable.APP_NAME),\n      },\n    },\n  );\n\n  if (!response.ok) {\n    const errorData = await getErrorResponseData(response);\n\n    if (isSdkVersionNotSupportedEvent(errorData)) {\n      throw new SdkVersionNotSupported();\n    }\n\n    throw new ChatSDKError(\n      `Failed to upload Attachments. Status (${response.status})`,\n    );\n  }\n\n  return response.json();\n}\n","import { CaseStatusChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseStatusChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type ContactStatusChangedData = CaseStatusChangedData;\n\nexport interface ContactStatusChangedChatEvent extends ChatEventData {\n  data: ContactStatusChangedData;\n  type: typeof ChatEvent.CONTACT_STATUS_CHANGED;\n}\n\nexport function isContactStatusChangedEvent(\n  event: ChatEventData,\n): event is ContactStatusChangedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_STATUS_CHANGED &&\n    (event as ContactStatusChangedChatEvent).data?.case?.id !== undefined\n  );\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nimport { ContactCreatedChatEvent } from './contactCreated';\n\nexport function isContactCreatedEvent(\n  event: ChatEventData,\n): event is ContactCreatedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_CREATED &&\n    (event as ContactCreatedChatEvent).data?.case?.id !== undefined\n  );\n}\n","import { ContactToRoutingQueueAssignmentChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseToRoutingQueueAssignmentChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface ContactToRoutingQueueAssignmentChangedChatEvent\n  extends ChatEventData {\n  data: ContactToRoutingQueueAssignmentChangedData;\n  type: typeof ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED;\n}\n\nexport function isContactToRoutingQueueAssignmentChangedEvent(\n  event: ChatEventData,\n): event is ContactToRoutingQueueAssignmentChangedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED &&\n    (event as ContactToRoutingQueueAssignmentChangedChatEvent).data?.case\n      ?.id !== undefined\n  );\n}\n","import { ContactRecipientsChangedData } from '@brandembassy/ts-types-platform/dist/groupChat/ContactRecipientsChangedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface ContactRecipientsChangedChatEvent extends ChatEventData {\n  data: ContactRecipientsChangedData;\n  type: PushUpdateEventType.CONTACT_RECIPIENTS_CHANGED;\n}\n\nexport function isContactRecipientsChangedEvent(\n  event: unknown,\n): event is ContactRecipientsChangedChatEvent {\n  return (\n    (event as ContactRecipientsChangedChatEvent).type ===\n    PushUpdateEventType.CONTACT_RECIPIENTS_CHANGED\n  );\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { BrowserFingerprint } from '@brandembassy/ts-types-chat/dist/user/BrowserFingerprint';\nimport { MessageId } from '@brandembassy/ts-types-platform/dist/message/MessageId';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\n\nexport type MessageContent = SendMessageEventData['messageContent'];\n\nexport const createMessageData = (\n  messageContent: MessageContent,\n  messageId: MessageId,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  browserFingerprint: BrowserFingerprint = getBrowserFingerprint(),\n): SendMessageEventData => ({\n  messageContent,\n  browserFingerprint,\n  idOnExternalPlatform: messageId,\n  thread: {\n    idOnExternalPlatform: threadIdOnExternalPlatform,\n  },\n  consumer: {\n    customFields: [],\n  },\n  consumerContact: {\n    customFields: [],\n  },\n  attachments: [],\n});\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { MoreMessagesLoadedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/MoreMessagesLoaded';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MoreMessagesLoadedEvent extends ChatEventData {\n  data: MoreMessagesLoadedPostbackData;\n}\n\nexport function isLoadMoreMessagesEventData(\n  event: ChatEventData,\n): event is MoreMessagesLoadedEvent {\n  return (\n    (event as MoreMessagesLoadedEvent).type ===\n      AwsResponseEventType.MORE_MESSAGES_LOADED &&\n    (event as MoreMessagesLoadedEvent)?.data?.messages !== undefined\n  );\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { LoadMoreMessagesEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LoadMoreMessages';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createLoadMoreMessagesPayloadData = (\n  eventData: LoadMoreMessagesEventData,\n): EventPayloadData<LoadMoreMessagesEventData> => ({\n  eventType: AwsInputEventType.LOAD_MORE_MESSAGES,\n  data: eventData,\n});\n","export class AbortError extends Error {\n  constructor(message: string = 'Aborted') {\n    super(message);\n    this.name = 'AbortError';\n  }\n}\n","import { AbortError } from '../error/AbortError';\n\nexport interface Abortable {\n  abort: (reason?: string) => void;\n  readonly abortReason?: string;\n}\n\ntype ExecutorFunction<T> = (\n  resolve: (value: PromiseLike<T> | T) => void,\n  reject: (reason?: unknown) => void,\n) => void;\n\ntype AbortableExecutorFunction<T> = (\n  resolve: (value: PromiseLike<T> | T) => void,\n  reject: (reason?: unknown) => void,\n  abortSignal: AbortSignal,\n) => void;\n\n/**\n * AbortablePromise is a Promise that can be aborted.\n * Source: https://github.com/zzdjk6/simple-abortable-promise, MIT License\n */\nexport class AbortablePromise<T> extends Promise<T> implements Abortable {\n  public abort: Abortable['abort'];\n\n  constructor(executor: AbortableExecutorFunction<T>) {\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n\n    const normalExecutor: ExecutorFunction<T> = (resolve, reject) => {\n      abortSignal.addEventListener('abort', () => {\n        reject(new AbortError(this.abortReason));\n      });\n\n      executor?.(resolve, reject, abortSignal);\n    };\n\n    super(normalExecutor);\n    this.abort = (reason) => {\n      this._abortReason = reason ?? 'Aborted';\n      abortController.abort();\n    };\n  }\n\n  private _abortReason?: string;\n\n  public get abortReason(): string | undefined {\n    return this._abortReason;\n  }\n\n  static from = <P>(promise: Promise<P>): AbortablePromise<P> => {\n    // If promise is already an AbortablePromise, return it directly\n    if (promise instanceof AbortablePromise) {\n      return promise;\n    }\n\n    return new AbortablePromise<P>((resolve, reject) => {\n      promise.then(resolve).catch(reject);\n    });\n  };\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class ArchiveThreadFailedError extends ChatSDKError {}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class GetMetadataFailedError extends ChatSDKError {}\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadMetadataLoadedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadMetadataLoaded';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface LoadThreadMetadataChatEvent extends ChatEventData {\n  data: ThreadMetadataLoadedPostbackData;\n  type: AwsResponseEventType.THREAD_METADATA_LOADED;\n}\n\nexport const isLoadMetadataSuccessPayload = (\n  response: ChatEventData,\n): response is LoadThreadMetadataChatEvent =>\n  (response as LoadThreadMetadataChatEvent).type ===\n    AwsResponseEventType.THREAD_METADATA_LOADED &&\n  (response as LoadThreadMetadataChatEvent).data.lastMessage !== undefined;\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadRecoveredPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadRecovered';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { isUndefined } from '../utils/is';\n\nexport interface ThreadRecoveredChatEvent extends ChatEventData {\n  data: ThreadRecoveredPostbackData;\n}\n\nexport const isRecoverSuccessPayload = (\n  response: ChatEventData,\n): response is ThreadRecoveredChatEvent => {\n  const testResponseData = response.data as ThreadRecoveredPostbackData;\n\n  const hasPostbackData = isUndefined(testResponseData) === false;\n  const hasMessages = isUndefined(testResponseData?.messages) === false;\n  const isCorrectEventType =\n    response.type === AwsResponseEventType.THREAD_RECOVERED ||\n    response.type === AwsResponseEventType.LIVECHAT_RECOVERED;\n  const hasNoError = isUndefined(response.error);\n\n  return hasPostbackData && hasMessages && hasNoError && isCorrectEventType;\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface ThreadArchivedEvent extends ChatEventData {\n  type: AwsResponseEventType.THREAD_ARCHIVED;\n}\n\nexport function isThreadArchivedSuccessPayload(\n  response: ChatEventData,\n): response is ThreadArchivedEvent {\n  return (\n    (response as ThreadArchivedEvent).type ===\n    AwsResponseEventType.THREAD_ARCHIVED\n  );\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class LoadMoreMessagesFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RecoverThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/RecoverThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createRecoverThreadPayloadData(\n  threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform,\n): EventPayloadData<RecoverThreadEventData> {\n  const emptyData = {\n    eventType: AwsInputEventType.RECOVER_THREAD,\n    data: {},\n  };\n\n  if (threadIdOnExternalPlatform === undefined) {\n    return emptyData;\n  }\n\n  return {\n    ...emptyData,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SetThreadNameFailedError extends ChatSDKError {}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class ThreadRecoverFailedError extends ChatSDKError {}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\nimport { ContactNumber } from '@brandembassy/ts-types-platform/dist/contact/ContactNumber';\nimport { ContactStatus } from '@brandembassy/ts-types-platform/dist/contact/ContactStatus';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { createAttachmentUploadMessageData } from '../attachment/sendAttachments';\nimport { getAccessToken } from '../authorization/accessTokenStorage';\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\nimport { isContactStatusChangedEvent } from '../contact';\nimport { Customer } from '../customer/Customer';\nimport {\n  CustomFieldsMap,\n  CustomFieldsObject,\n  getCustomFieldsArray,\n  setCustomFields,\n  setCustomFieldsFromArray,\n} from '../customField/CustomFields';\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport {\n  ChatCustomEvent,\n  ChatEvent,\n  ChatEventData,\n  ChatEventType,\n} from '../event/ChatEvent';\nimport { IChatEventTarget } from '../event/ChatEventTarget';\nimport {\n  EventListenerFunction,\n  RemoveListenerFunction,\n} from '../event/ListenerFunction';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { createMessageData } from '../message/createMessageData';\nimport { getPostbackMessageContent } from '../message/getPostbackMessageContent';\nimport { getTextMessageContent } from '../message/getTextMessageContent';\nimport {\n  isLoadMoreMessagesEventData,\n  MoreMessagesLoadedEvent,\n} from '../message/loadMoreMessagesEventData';\nimport { createLoadMoreMessagesPayloadData } from '../message/loadMoreMessagesPayload';\nimport { MessageSuccessEventData } from '../message/MessageSuccessEventData';\nimport { sendMessage } from '../message/sendMessage';\nimport { createSendMessagePreviewPayloadData } from '../message/sendMessagePreviewPayload';\nimport { sendOutboundMessage } from '../message/sendOutboundMessage';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { AbortablePromise } from '../utils/AbortablePromise';\nimport { generateId } from '../utils/generateId';\nimport { isEmpty, isUndefined } from '../utils/is';\n\nimport { createArchiveThreadEventPayloadData } from './archiveThread';\nimport { ArchiveThreadFailedError } from './ArchiveThreadFailedError';\nimport { GetMetadataFailedError } from './GetMetadataFailedError';\nimport {\n  isLoadMetadataSuccessPayload,\n  LoadThreadMetadataChatEvent,\n} from './isLoadMetadataSuccessPayload';\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { isThreadArchivedSuccessPayload } from './isThreadArchivedSuccessPayload';\nimport { createLastMessageSeenPayloadData } from './lastMessageSeenPayload';\nimport { LoadMoreMessagesFailedError } from './LoadMoreMessagesFailedError';\nimport { createLoadThreadMetadataEventPayloadData } from './metadata';\nimport { createRecoverThreadPayloadData } from './recoverThreadPayload';\nimport { SendMessageOptions } from './SendMessageOptions';\nimport { createSetThreadCustomFieldsPayloadData } from './setThreadCustomFieldsPayload';\nimport { SetThreadNameFailedError } from './SetThreadNameFailedError';\nimport { filterCurrentThreadEventHandler } from './threadEventHandler';\nimport { ThreadRecoveredData } from './ThreadRecoveredData';\nimport { ThreadRecoverFailedError } from './ThreadRecoverFailedError';\nimport { createSendTranscriptPayloadData } from './transcript';\nimport {\n  createStartTypingEventPayloadData,\n  createStopTypingEventPayloadData,\n} from './typingEvents';\nimport {\n  createUpdateThreadPayloadData,\n  isUpdateThreadSuccess,\n} from './updateThread';\n\nexport class Thread {\n  public idOnExternalPlatform: ThreadIdOnExternalPlatform;\n\n  protected _websocketClient: WebSocketClient;\n  protected _exists: boolean = false;\n\n  protected _messageEmitter: IChatEventTarget;\n  protected _typingTimeoutID: ReturnType<typeof setTimeout> | undefined =\n    undefined;\n  protected _isAuthorizationEnabled: boolean = false;\n  protected _customer: Customer | null;\n  protected _customFields: CustomFieldsMap = new Map();\n  private _typingForPreviewTimeoutID: ReturnType<typeof setTimeout> | undefined;\n  private _typingPreviewText: string = '';\n\n  constructor(\n    idOnExternalPlatform: ThreadIdOnExternalPlatform,\n    websocketClient: WebSocketClient,\n    messageEmitter: IChatEventTarget,\n    customer: Customer | null,\n    customFields: CustomFieldsObject = {},\n    isAuthorizationEnabled: boolean = false,\n  ) {\n    this.idOnExternalPlatform = idOnExternalPlatform;\n    this._websocketClient = websocketClient;\n    this._messageEmitter = messageEmitter;\n    this._customer = customer;\n    this._isAuthorizationEnabled = isAuthorizationEnabled;\n\n    setCustomFields(this._customFields, customFields);\n    this._registerEventHandlers();\n  }\n\n  /**\n   * Recover existing chat\n   * @returns AbortablePromise<ThreadRecoveredData>\n   * @throws ThreadRecoverFailedError\n   *  * This exception is thrown when the recover fails or the thread does not exist.\n   */\n  public recover(): AbortablePromise<ThreadRecoveredData> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const response = await sendChatEvent(\n        createRecoverThreadPayloadData(this.idOnExternalPlatform),\n        this._websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(response)) {\n        const { contact, consumerContact, ...restData } = response.data;\n\n        resolve({\n          ...restData,\n          contact: contact ?? consumerContact,\n        });\n      } else {\n        reject(new ThreadRecoverFailedError('Thread recover fail', response));\n      }\n    });\n  }\n\n  /**\n   * Send message\n   * @param messageData - message data\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error contains (`error.data`) a response from the backend with details.\n   */\n  public async sendMessage(\n    messageData: SendMessageEventData,\n  ): Promise<MessageSuccessEventData> {\n    const messageDataWithCustomFields =\n      this._mergeCustomFieldsAndAccessTokenWithMessageData(messageData, false);\n\n    return sendMessage(messageDataWithCustomFields, this._websocketClient);\n  }\n\n  /**\n   * Send text message\n   * @param messageText - text of message\n   * @param options - options\n   */\n  public async sendTextMessage(\n    messageText: string,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    const textMessageContent = getTextMessageContent(messageText);\n    const messageData = createMessageData(\n      textMessageContent,\n      messageId,\n      this.idOnExternalPlatform,\n      browserFingerprint,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send postback message\n   * @param postback - postback\n   * @param messageText - text of message\n   * @param options - options\n   */\n  public async sendPostbackMessage(\n    postback: string,\n    messageText: string,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    const postbackMessageContent = getPostbackMessageContent(\n      postback,\n      messageText,\n    );\n    const messageData = createMessageData(\n      postbackMessageContent,\n      messageId,\n      this.idOnExternalPlatform,\n      browserFingerprint,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send Outbound Message\n   * @param messageData - message data\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error contains (`error.data`) a response from the backend with details.\n   */\n  public async sendOutboundMessage(\n    messageData: SendOutboundEventData,\n  ): Promise<MessageSuccessEventData> {\n    const outboundEventDataWithCustomFields =\n      this._mergeCustomFieldsAndAccessTokenWithMessageData(messageData, true);\n\n    return sendOutboundMessage(\n      outboundEventDataWithCustomFields,\n      this._websocketClient,\n    );\n  }\n\n  /**\n   * Load previous messages\n   * @returns Promise MoreMessagesLoadedEvent | null\n   * @throws LoadMoreMessagesFailedError\n   *  * This exception is thrown when the attempt to load more messages fails.\n   */\n  public async loadMoreMessages(): Promise<MoreMessagesLoadedEvent | null> {\n    const { scrollToken, oldestMessageDatetime } =\n      JSON.parse(SDKVariableStorage.get(ChatSDKVariable.THREAD_DATA, '{}')) ??\n      {};\n\n    if (isEmpty(scrollToken)) {\n      return null;\n    }\n\n    const loadMoreMessagesEventData = {\n      scrollToken,\n      oldestMessageDatetime,\n      thread: { idOnExternalPlatform: this.idOnExternalPlatform },\n    };\n\n    const response = await sendChatEvent(\n      createLoadMoreMessagesPayloadData(loadMoreMessagesEventData),\n      this._websocketClient,\n    );\n\n    if (isLoadMoreMessagesEventData(response)) {\n      return response;\n    }\n\n    throw new LoadMoreMessagesFailedError(\n      'Load more messages failed',\n      response,\n    );\n  }\n\n  /**\n   * Mark all messages in the thread as seen\n   */\n  public async lastMessageSeen(): Promise<ChatEventData> {\n    const payloadData = createLastMessageSeenPayloadData(\n      this.idOnExternalPlatform,\n    );\n\n    return sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  /**\n   * Send attachment\n   *\n   * Raw function to send attachments\n   * @param files - An object of this type is returned by the files' property of the HTML <input> element; this lets you access the list of files selected with the <input type=\"file\"> element.\n   * @param options - options\n   * @throws UploadAttachmentError\n   *  * This exception is thrown when the file upload fails. The `error.data` contains information about allowed file size and types.\n   */\n  public async sendAttachments(\n    files: FileList,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    if (isUndefined(files) || files.length === 0) {\n      throw new ChatSDKError(\n        'FileList must be provided to sendAttachment method',\n      );\n    }\n\n    const messageData = await createAttachmentUploadMessageData(\n      files,\n      this.idOnExternalPlatform,\n      options,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send start and stop typing events. It sends stop typing event after the timeout. Repeated calls resets this timeout.\n   * @param timeout - The timeout in milliseconds.\n   * @param onSendCallback - Callback to be called after the stop typing event is sent.\n   */\n  public keystroke(timeout = 1000, onSendCallback?: () => void): void {\n    if (!this._typingTimeoutID) {\n      sendChatEvent(\n        createStartTypingEventPayloadData(this.idOnExternalPlatform),\n        this._websocketClient,\n      );\n    }\n\n    clearTimeout(this._typingTimeoutID);\n    this._typingTimeoutID = setTimeout(() => {\n      this._stopTypingCallback(onSendCallback);\n    }, timeout);\n  }\n\n  /**\n   * Manually send the stop typing event and clear the keystroke timeout.\n   */\n  public stopTyping(): void {\n    this._stopTypingCallback();\n  }\n\n  private _stopTypingCallback(onSendCallback?: () => void): void {\n    clearTimeout(this._typingTimeoutID);\n    this._typingTimeoutID = undefined;\n    sendChatEvent(\n      createStopTypingEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n    if (typeof onSendCallback === 'function') {\n      onSendCallback();\n    }\n  }\n\n  /**\n   * Send typing event for message preview after the timeout.\n   * @param currentText - current text\n   * @param timeout - timeout in milliseconds\n   * @returns void\n   *\n   */\n  keystrokeForPreview(currentText: string, timeout = 1250): void {\n    this._typingPreviewText = currentText;\n    if (this._typingForPreviewTimeoutID) {\n      return;\n    }\n\n    this._typingForPreviewTimeoutID = setTimeout(() => {\n      this.stopTypingForPreview();\n    }, timeout);\n  }\n\n  /**\n   * Manually send the stop typing event for message preview and clear the keystroke timeout.\n   * @param shouldSendPreview - should send preview\n   * @returns void\n   *\n   */\n  stopTypingForPreview(shouldSendPreview = true): void {\n    clearTimeout(this._typingForPreviewTimeoutID);\n    this._typingForPreviewTimeoutID = undefined;\n    const currentPreviewText = this._typingPreviewText;\n    this._typingPreviewText = '';\n\n    if (shouldSendPreview === false) {\n      return;\n    }\n    this.sendMessagePreview(currentPreviewText);\n  }\n\n  /**\n   * Get Thread Metadata\n   * @returns response otherwise throw an error response\n   * @throws GetMetadataFailedError\n   *  * This exception is thrown when getting thread metadata failed.\n   */\n  public async getMetadata(): Promise<LoadThreadMetadataChatEvent> {\n    const response = await sendChatEvent(\n      createLoadThreadMetadataEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n\n    if (isLoadMetadataSuccessPayload(response)) {\n      return response;\n    }\n\n    throw new GetMetadataFailedError('Get metadata failed', response);\n  }\n\n  public onThreadEvent(\n    type: ChatEventType,\n    handler: EventListenerFunction,\n  ): RemoveListenerFunction {\n    const filteredEventHandler = filterCurrentThreadEventHandler(\n      this.idOnExternalPlatform,\n      handler,\n    );\n\n    this._messageEmitter.addEventListener(type, filteredEventHandler);\n\n    return () => {\n      this._messageEmitter.removeEventListener(type, filteredEventHandler);\n    };\n  }\n\n  /**\n   * Send current Custom Fields\n   */\n  public async sendCustomFields(): Promise<ChatEventData> {\n    const customFieldsData = createSetThreadCustomFieldsPayloadData(\n      getCustomFieldsArray(this._customFields),\n      this.idOnExternalPlatform,\n    );\n\n    return sendChatEvent(customFieldsData, this._websocketClient);\n  }\n\n  /**\n   * Set thread custom fields and send them\n   * @param customFields - custom fields object\n   * @example \\{ indentName: 'value' \\}\n   */\n  public async setCustomFields(\n    customFields: CustomFieldsObject,\n  ): Promise<void> {\n    setCustomFields(this._customFields, customFields);\n\n    if (this._exists === false) {\n      // let customFields be sent by the first message\n      return;\n    }\n\n    await this.sendCustomFields();\n  }\n\n  /**\n   * Set thread custom field\n   * @param name - custom field name\n   * @param value - custom field value\n   */\n  public setCustomField(\n    name: CustomField['ident'],\n    value: CustomField['value'],\n  ): Promise<void> {\n    return this.setCustomFields({ [name]: value });\n  }\n\n  /**\n   * Set thread as archived\n   * @returns Promise true\n   * @throws ArchiveThreadFailedError\n   *  * This exception is thrown when the archive thread failed.\n   */\n  public async archive(): Promise<true> {\n    const response = await sendChatEvent(\n      createArchiveThreadEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n\n    if (isThreadArchivedSuccessPayload(response)) {\n      return true;\n    }\n\n    throw new ArchiveThreadFailedError('Archive Thread failed', response);\n  }\n\n  /**\n   * Set thread name\n   * @param name - New name of the Thread\n   * @returns Promise true\n   * @throws SetThreadNameFailedError\n   *  * This exception is thrown when the set thread name failed.\n   */\n  public async setName(name: string): Promise<true> {\n    const updateThreadData = createUpdateThreadPayloadData(\n      this.idOnExternalPlatform,\n      name,\n    );\n\n    const response = await sendChatEvent(\n      updateThreadData,\n      this._websocketClient,\n    );\n\n    if (isUpdateThreadSuccess(response)) {\n      return true;\n    }\n\n    throw new SetThreadNameFailedError('Set Thread name failed', response);\n  }\n\n  /**\n   * Send message preview\n   * @param text - text\n   */\n  public async sendMessagePreview(text: string): Promise<void> {\n    const payloadData = createSendMessagePreviewPayloadData(\n      this.idOnExternalPlatform,\n      text,\n    );\n\n    await sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  /**\n   * Send conversation transcript to email\n   */\n  public async sendTranscript(\n    contactNumber: ContactNumber,\n    email: string,\n  ): Promise<ChatEventData> {\n    const payloadData = createSendTranscriptPayloadData(contactNumber, email);\n\n    return sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  protected _setThreadAndCustomerExists(): void {\n    this._exists = true;\n    this._customer?.setExists(true);\n  }\n\n  protected _clearCustomFieldsOnContactStatusChangedToClosed(\n    event: ChatCustomEvent,\n  ): void {\n    const eventDetail = event.detail;\n\n    if (!isContactStatusChangedEvent(eventDetail)) {\n      return;\n    }\n\n    if (eventDetail.data.case.status === ContactStatus.CLOSED) {\n      // Delete custom fields after contact closure to prevent sending custom fields from previous contact.\n      this._customFields.clear();\n    }\n  }\n\n  private _mergeCustomFieldsAndAccessTokenWithMessageData<\n    T extends SendMessageEventData | SendOutboundEventData,\n  >(messageData: T, isOutbound: boolean): T {\n    // Access token\n    let accessToken;\n    const storedAccessToken =\n      (this._isAuthorizationEnabled && getAccessToken()) ?? false;\n    if (storedAccessToken !== false) {\n      accessToken = { token: storedAccessToken.token };\n    }\n\n    // Update Thread (Contact) custom fields\n    setCustomFieldsFromArray(\n      this._customFields,\n      messageData.consumerContact.customFields,\n    );\n\n    const consumerContact = {\n      customFields: getCustomFieldsArray(this._customFields),\n    };\n\n    // Update Customer custom fields\n    let consumer;\n    if (!isOutbound) {\n      this._customer?.setCustomFieldsFromArray(\n        (messageData as SendMessageEventData).consumer?.customFields ?? [],\n      );\n      consumer = {\n        customFields: this._customer?.getCustomFieldsArray() ?? [],\n      };\n    }\n\n    return {\n      ...messageData,\n      accessToken,\n      consumer,\n      consumerContact,\n    };\n  }\n\n  private _registerEventHandlers() {\n    this.onThreadEvent(ChatEvent.CASE_CREATED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.CONTACT_CREATED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.THREAD_RECOVERED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.CONTACT_STATUS_CHANGED, (event) =>\n      this._clearCustomFieldsOnContactStatusChangedToClosed(event),\n    );\n  }\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendMessagePayloadData } from './sendMessagePayload';\n\nexport const sendMessage = async (\n  messageData: SendMessageEventData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const sendMessagePayloadData = createSendMessagePayloadData(messageData);\n\n  const response = await sendChatEvent(sendMessagePayloadData, websocketClient);\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send message failed', response);\n};\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendMessagePayloadData = (\n  eventData: SendMessageEventData,\n): EventPayloadData<SendMessageEventData> => ({\n  eventType: AwsInputEventType.SEND_MESSAGE,\n  data: eventData,\n});\n","import { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { MessageContent } from './createMessageData';\n\nexport function getTextMessageContent(messageText: string): MessageContent {\n  return {\n    payload: {\n      text: messageText,\n    },\n    type: MessageType.TEXT,\n  };\n}\n","import { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { MessageContent } from './createMessageData';\n\nexport function getPostbackMessageContent(\n  postback: string,\n  messageText: string,\n): MessageContent {\n  return {\n    payload: {\n      text: messageText,\n      postback, // Leaving this here for backwards compatibility\n    },\n    postback,\n    type: MessageType.TEXT, // MessageType.POSTBACK is deprecated\n  };\n}\n","import { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendOutboundMessagePayloadData } from './sendOutboundMessagePayload';\n\nexport const sendOutboundMessage = async (\n  messageData: SendOutboundEventData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const sendOutboundMessagePayloadData =\n    createSendOutboundMessagePayloadData(messageData);\n\n  const response = await sendChatEvent(\n    sendOutboundMessagePayloadData,\n    websocketClient,\n  );\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send Outbound message failed', response);\n};\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendOutboundMessagePayloadData = (\n  eventData: SendOutboundEventData,\n): EventPayloadData<SendOutboundEventData> => ({\n  eventType: AwsInputEventType.SEND_OUTBOUND,\n  data: eventData,\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { MessageSeenByConsumerEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/MessageSeenByConsumer';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createLastMessageSeenPayloadData(\n  threadIdOnExternalPlatform: string,\n): EventPayloadData<MessageSeenByConsumerEventData> {\n  return {\n    eventType: AwsInputEventType.MESSAGE_SEEN,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SenderTypingEndedEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SenderTypingEnded';\nimport { SenderTypingStartedEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SenderTypingStarted';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createStartTypingEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SenderTypingStartedEventData> {\n  return {\n    eventType: AwsInputEventType.SENDER_TYPING_STARTED,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n\nexport function createStopTypingEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SenderTypingEndedEventData> {\n  return {\n    eventType: AwsInputEventType.SENDER_TYPING_ENDED,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ArchiveThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/ArchiveThread';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createLoadThreadMetadataEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<ArchiveThreadEventData> {\n  return {\n    eventType: AwsInputEventType.LOAD_THREAD_METADATA,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { ChatCustomEvent } from '../event/ChatEvent';\nimport { EventListenerFunction } from '../event/ListenerFunction';\n\ninterface DataWithThread {\n  case?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  message?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  messagePreview?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  thread?: {\n    idOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n}\n\nconst getThreadId = (data: unknown): ThreadIdOnExternalPlatform | undefined => {\n  const dataWithThread = data as DataWithThread;\n\n  return (\n    dataWithThread?.thread?.idOnExternalPlatform ??\n    dataWithThread?.case?.threadIdOnExternalPlatform ??\n    dataWithThread?.message?.threadIdOnExternalPlatform ??\n    dataWithThread?.messagePreview?.threadIdOnExternalPlatform\n  );\n};\n\nexport const filterCurrentThreadEventHandler =\n  (threadId: ThreadIdOnExternalPlatform, handler: EventListenerFunction) =>\n  (event: ChatCustomEvent): void => {\n    const eventData = event.detail.data;\n\n    const eventThreadId = getThreadId(eventData);\n\n    if (eventThreadId === threadId) {\n      handler(event);\n    }\n  };\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SetConsumerContactCustomFieldsEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SetConsumerContactCustomFields';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createSetThreadCustomFieldsPayloadData(\n  customFields: Array<CustomField>,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SetConsumerContactCustomFieldsEventData> {\n  return {\n    eventType: AwsInputEventType.SET_CONSUMER_CONTACT_CUSTOM_FIELD,\n    data: {\n      customFields,\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ArchiveThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/ArchiveThread';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createArchiveThreadEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<ArchiveThreadEventData> {\n  return {\n    eventType: AwsInputEventType.ARCHIVE_THREAD,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { UpdateThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/UpdateThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { isUndefined } from '../utils/is';\n\nexport function createUpdateThreadPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  threadName: string,\n): EventPayloadData<UpdateThreadEventData> {\n  return {\n    eventType: AwsInputEventType.UPDATE_THREAD,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n        threadName,\n      },\n    },\n  };\n}\n\nexport function isUpdateThreadSuccess(response: ChatEventData): boolean {\n  return isUndefined(response.error);\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendMessagePreviewEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessagePreview';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendMessagePreviewPayloadData = (\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  text: string,\n): EventPayloadData<SendMessagePreviewEventData> => ({\n  eventType: AwsInputEventType.SEND_MESSAGE_PREVIEW,\n  data: {\n    thread: {\n      idOnExternalPlatform: threadIdOnExternalPlatform,\n    },\n    messageContent: {\n      payload: { text },\n      type: MessageType.TEXT,\n    },\n  },\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nimport { ContactNumber } from '@brandembassy/ts-types-platform/dist/contact/ContactNumber';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendTranscriptPayloadData = (\n  contactNumber: ContactNumber,\n  email: string,\n): EventPayloadData<AwsInputEventData> => ({\n  eventType: AwsInputEventType.SEND_TRANSCRIPT,\n  data: {\n    consumerContact: {\n      id: contactNumber,\n    },\n    consumerRecipients: [\n      {\n        idOnExternalPlatform: email,\n      },\n    ],\n  },\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RecoverThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/RecoverThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../../sockets/EventPayload';\n\nexport function createRecoverLivechatThreadPayloadData(\n  threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform,\n): EventPayloadData<RecoverThreadEventData> {\n  const emptyData = {\n    eventType: AwsInputEventType.RECOVER_LIVECHAT,\n    data: {},\n  };\n\n  if (threadIdOnExternalPlatform === undefined) {\n    return emptyData;\n  }\n\n  return {\n    ...emptyData,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { Customer } from '../../customer/Customer';\nimport { CustomFieldsObject } from '../../customField/CustomFields';\nimport { ChatSDKVariable } from '../../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../../env/getEnvVariable';\nimport { ChatSDKError } from '../../error/ChatSDKError';\nimport { ChatCustomEvent, ChatEvent } from '../../event/ChatEvent';\nimport { IChatEventTarget } from '../../event/ChatEventTarget';\nimport { sendChatEvent } from '../../event/sendChatEvent';\nimport {\n  isLoadMoreMessagesEventData,\n  MoreMessagesLoadedEvent,\n} from '../../message/loadMoreMessagesEventData';\nimport { createLoadMoreMessagesPayloadData } from '../../message/loadMoreMessagesPayload';\nimport { MessageSuccessEventData } from '../../message/MessageSuccessEventData';\nimport { WebSocketClient } from '../../sockets/WebSocketClient';\nimport { AbortablePromise } from '../../utils/AbortablePromise';\nimport { isEmpty, isUndefined } from '../../utils/is';\nimport { isRecoverSuccessPayload } from '../isRecoverSuccessPayload';\nimport { LoadMoreMessagesFailedError } from '../LoadMoreMessagesFailedError';\nimport { Thread } from '../Thread';\nimport { ThreadRecoveredData } from '../ThreadRecoveredData';\nimport { ThreadRecoverFailedError } from '../ThreadRecoverFailedError';\n\nimport { createEndThreadPayloadData } from './createEndThreadPayloadData';\nimport { createRecoverLivechatThreadPayloadData } from './recoverLivechatThreadPayload';\n\nexport class LivechatThread extends Thread {\n  protected _isInitialized: boolean = false;\n  protected _canSendMessage: boolean = true;\n\n  constructor(\n    idOnExternalPlatform: ThreadIdOnExternalPlatform,\n    websocketClient: WebSocketClient,\n    messageEmitter: IChatEventTarget,\n    customer: Customer | null,\n    customFields: CustomFieldsObject = {},\n    isAuthorizationEnabled: boolean = false,\n  ) {\n    super(\n      idOnExternalPlatform,\n      websocketClient,\n      messageEmitter,\n      customer,\n      customFields,\n      isAuthorizationEnabled,\n    );\n\n    this._registerLivechatEventHandlers();\n  }\n\n  /**\n   * Recover existing live chat\n   * @returns AbortablePromise ThreadRecoveredData\n   * @throws ThreadRecoverFailedError\n   *  * This exception is thrown when the recover fails or the thread does not exist.\n   */\n  public override recover(): AbortablePromise<ThreadRecoveredData> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const response = await sendChatEvent(\n        createRecoverLivechatThreadPayloadData(this.idOnExternalPlatform),\n        this._websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(response)) {\n        const { contact, consumerContact, ...restData } = response.data;\n\n        resolve({\n          ...restData,\n          contact: contact ?? consumerContact,\n        });\n      } else {\n        reject(new ThreadRecoverFailedError('Thread recover fail', response));\n      }\n    });\n  }\n\n  public override async sendMessage(\n    messageData: SendMessageEventData,\n  ): Promise<MessageSuccessEventData> {\n    if (this._canSendMessage === false) {\n      throw new ChatSDKError('Cannot send more messages to Contact');\n    }\n\n    return super.sendMessage(messageData);\n  }\n\n  /**\n   * Start livechat\n   * @param initialMessageText - initial message text\n   */\n  public async startChat(\n    initialMessageText = 'Begin conversation',\n  ): Promise<MessageSuccessEventData | void> {\n    if (this._isInitialized) {\n      throw new ChatSDKError('Chat is already initialized');\n    }\n\n    try {\n      const result = await this.sendTextMessage(initialMessageText);\n      this._isInitialized = true;\n\n      return result;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        throw new ChatSDKError(\n          `Sending initial message failed because of (${error.message})`,\n        );\n      }\n\n      return;\n    }\n  }\n\n  public async endChat(): Promise<void> {\n    const threadDataRaw = SDKVariableStorage.get(\n      ChatSDKVariable.THREAD_DATA,\n      '{}',\n    );\n    const threadData = JSON.parse(threadDataRaw);\n    const contactId = threadData?.contactId;\n\n    if (isUndefined(contactId)) {\n      throw new ChatSDKError(\n        'Cannot end Chat because of missing ContactId in the storage',\n      );\n    }\n\n    await sendChatEvent(\n      createEndThreadPayloadData(this.idOnExternalPlatform, contactId),\n      this._websocketClient,\n    );\n\n    return;\n  }\n\n  /**\n   * Load previous messages\n   * @returns Promise MoreMessagesLoadedEvent | null\n   * @throws LoadMoreMessagesFailedError\n   *  * This exception is thrown when the attempt to load more messages fails.\n   */\n  public async loadMoreMessages(): Promise<MoreMessagesLoadedEvent | null> {\n    const { scrollToken, oldestMessageDatetime, contactId } =\n      JSON.parse(SDKVariableStorage.get(ChatSDKVariable.THREAD_DATA, '{}')) ??\n      {};\n\n    if (isEmpty(scrollToken) || isEmpty(contactId)) {\n      return null;\n    }\n\n    const loadMoreMessagesEventData = {\n      scrollToken,\n      oldestMessageDatetime,\n      thread: { idOnExternalPlatform: this.idOnExternalPlatform },\n      // If a contactId is provided, the search will return messages only for this contact\n      contact: {\n        id: contactId,\n      },\n    };\n\n    const response = await sendChatEvent(\n      createLoadMoreMessagesPayloadData(loadMoreMessagesEventData),\n      this._websocketClient,\n    );\n\n    if (isLoadMoreMessagesEventData(response)) {\n      return response;\n    }\n\n    throw new LoadMoreMessagesFailedError(\n      'Load more messages failed',\n      response,\n    );\n  }\n\n  private _registerLivechatEventHandlers() {\n    this.onThreadEvent(\n      ChatEvent.LIVECHAT_RECOVERED,\n      (event: ChatCustomEvent) => {\n        if (!isRecoverSuccessPayload(event.detail)) {\n          return;\n        }\n\n        this._setThreadAndCustomerExists();\n      },\n    );\n  }\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { EndContactEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/EndContact';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../../sockets/EventPayload';\n\nexport function createEndThreadPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  contactId: CaseId,\n): EventPayloadData<EndContactEventData> {\n  return {\n    eventType: AwsInputEventType.END_CONTACT,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n      contact: { id: contactId },\n    },\n  };\n}\n","import { ThreadListFetchedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadListFetched';\n\nimport { isNull } from '../utils/is';\n\nexport const isThreadListFetchedPostbackData = (\n  data: unknown,\n): data is ThreadListFetchedPostbackData => {\n  if (isNull(data)) {\n    return false;\n  }\n\n  return 'threads' in (data as ThreadListFetchedPostbackData);\n};\n","import { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\n\nexport function storeContactId(contactId: CaseId): void {\n  const originalThreadDataRaw = SDKVariableStorage.get(\n    ChatSDKVariable.THREAD_DATA,\n    '{}',\n  );\n  const originalThreadData = JSON.parse(originalThreadDataRaw) || {};\n\n  SDKVariableStorage.set(\n    ChatSDKVariable.THREAD_DATA,\n    JSON.stringify({\n      ...originalThreadData,\n      contactId,\n    }),\n  );\n}\n","import { ContactNumber } from '@brandembassy/ts-types-platform/dist/contact/ContactNumber';\n\nimport { isContactCreatedEvent } from '../contact/isContactCreatedEvent';\nimport { ChatEventData } from '../event/ChatEvent';\n\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { storeContactId } from './storeContactId';\n\nexport function storeContactIdMiddleware(\n  eventData: ChatEventData,\n): ChatEventData {\n  if (isContactCreatedEvent(eventData)) {\n    const contactId = eventData.data.case.id;\n\n    storeContactId(contactId);\n  }\n\n  if (isRecoverSuccessPayload(eventData)) {\n    const contactId = (eventData.data.consumerContact?.caseId ??\n      eventData.data.contact?.id) as ContactNumber;\n\n    storeContactId(contactId);\n  }\n\n  return eventData;\n}\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { Message } from '../message';\nimport { isUndefined } from '../utils/is';\nimport { lastItemInArray } from '../utils/last';\n\nexport interface ScrollData {\n  messages: Array<Message>;\n  scrollToken: string;\n}\n\nexport function storeThreadScrollData(scrollData: ScrollData): void {\n  const oldestMessageDatetime = lastItemInArray(scrollData.messages)?.createdAt;\n\n  const oldThreadDataRaw = SDKVariableStorage.get(\n    ChatSDKVariable.THREAD_DATA,\n    '{}',\n  );\n  const oldThreadData = JSON.parse(oldThreadDataRaw) || {};\n\n  SDKVariableStorage.set(\n    ChatSDKVariable.THREAD_DATA,\n    JSON.stringify({\n      ...oldThreadData,\n      scrollToken: scrollData.scrollToken,\n      oldestMessageDatetime: isUndefined(oldestMessageDatetime)\n        ? ''\n        : oldestMessageDatetime,\n    }),\n  );\n}\n","import { ChatEventData } from '../event/ChatEvent';\nimport { isLoadMoreMessagesEventData } from '../message/loadMoreMessagesEventData';\n\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { storeThreadScrollData } from './storeThreadScrollData';\n\nexport function storeThreadScrollDataMiddleware(\n  eventData: ChatEventData,\n): ChatEventData {\n  if (isRecoverSuccessPayload(eventData)) {\n    const { messages, messagesScrollToken } = eventData.data;\n\n    storeThreadScrollData({\n      messages,\n      scrollToken: messagesScrollToken,\n    });\n  }\n\n  if (isLoadMoreMessagesEventData(eventData)) {\n    const { scrollToken, messages } = eventData.data;\n\n    storeThreadScrollData({ scrollToken, messages });\n  }\n\n  return eventData;\n}\n","import { WebSocketClientEvent } from '@brandembassy/push-updates-sdk';\nimport { AuthorizationToken } from '@brandembassy/ts-types-chat/dist/authorization/AuthorizationToken';\nimport { ConsumerAuthorizationSuccessPayloadData } from '@brandembassy/ts-types-chat/dist/authorization/ConsumerAuthorizationSuccessPayloadData';\nimport { AwsChatWindowEventActionRoute } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ChannelInfo } from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\nimport { Thread as ThreadView } from '@brandembassy/ts-types-platform/dist/thread/Thread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport {\n  getAccessToken,\n  setAccessToken,\n} from './authorization/accessTokenStorage';\nimport { AuthorizationError } from './authorization/AuthorizationError';\nimport { createAuthorizationPayloadData } from './authorization/authorizationPayloadData';\nimport { authorizationReconnect } from './authorization/authorizationReconnect';\nimport { createRefreshTokenPayload } from './authorization/createRefreshTokenPayload';\nimport { CustomerReconnectSuccessPayloadData } from './authorization/CustomerReconnectSuccessPayloadData';\nimport { createGenerateAuthorizationTokenPayloadData } from './authorization/generateAuthorizationTokenPayload';\nimport { handleRefreshToken } from './authorization/handleRefreshToken';\nimport { isAuthorizationTokenGeneratedPostbackData } from './authorization/isAuthorizationTokenGeneratedPostbackData';\nimport { isAuthSuccessEvent } from './authorization/isAuthSuccessEvent';\nimport { isTokenRefreshedSuccessResponse } from './authorization/isTokenRefreshedSuccessResponse';\nimport { getBrowserLanguage } from './browserFingerprint/getBrowserFingerprint';\nimport {\n  ChannelAvailabilityResponse,\n  fetchChannelAvailability,\n} from './channel/fetchChannelAvailability';\nimport { fetchChannelInfo } from './channel/fetchChannelInfo';\nimport { handleBasicChannelInfo } from './channel/handleBasicChannelInfo';\nimport { type ChatSDKOptions } from './ChatSDKOptions';\nimport { Customer } from './customer/Customer';\nimport { isCustomerIdentityIdValid } from './customer/isCustomerIdentityIdValid';\nimport {\n  CustomFieldsMap,\n  getCustomFields,\n  setCustomFieldsFromArray,\n} from './customField/CustomFields';\nimport { APP_NAME } from './env/appName';\nimport { ChatSDKVariable } from './env/ChatSDKVariable';\nimport { EnvironmentName, getEnvironmentEndpoints } from './env/Environments';\nimport { SDKVariableStorage } from './env/getEnvVariable';\nimport { ChatSDKError } from './error/ChatSDKError';\nimport { ChatCustomEvent, ChatEvent, ChatEventType } from './event/ChatEvent';\nimport { ChatEventMiddleware } from './event/ChatEventMiddleware';\nimport { ChatEventTarget, IChatEventTarget } from './event/ChatEventTarget';\nimport { RemoveListenerFunction } from './event/ListenerFunction';\nimport { chatEventMapper } from './event/middleware/ChatEventMapper';\nimport { sdkVersionCheck } from './event/middleware/sdkVersionCheck';\nimport { sendChatEvent } from './event/sendChatEvent';\nimport { MessageSuccessEventData } from './message/MessageSuccessEventData';\nimport {\n  OfflineMessageData,\n  sendOfflineMessage,\n} from './message/sendOfflineMessage';\nimport { getEventData } from './request/getEventData';\nimport { makeRequest } from './request/makeRequest';\nimport {\n  onMessageHandler,\n  parseWsMessageEvent,\n} from './request/messageHandler';\nimport { createEvent, createEventPayload } from './sockets/EventPayload';\nimport {\n  WebSocketClient,\n  WebSocketClientOptions,\n} from './sockets/WebSocketClient';\nimport { LivechatThread, Thread } from './thread';\nimport {\n  isRecoverSuccessPayload,\n  ThreadRecoveredChatEvent,\n} from './thread/isRecoverSuccessPayload';\nimport { isThreadListFetchedPostbackData } from './thread/isThreadListFetchedPostbackData';\nimport { createRecoverLivechatThreadPayloadData } from './thread/livechatThread/recoverLivechatThreadPayload';\nimport { createRecoverThreadPayloadData } from './thread/recoverThreadPayload';\nimport { storeContactIdMiddleware } from './thread/storeContactIdMiddleware';\nimport { storeThreadScrollDataMiddleware } from './thread/storeThreadScrollDataMiddleware';\nimport { AbortablePromise } from './utils/AbortablePromise';\nimport { assertNonNullable } from './utils/assert';\nimport { generateId } from './utils/generateId';\nimport { getBrandIdAndChannelId } from './utils/getBrandIdAndChannelId';\nimport { isEmpty, isNil, isNull, isUndefined } from './utils/is';\n\nexport class ChatSdk {\n  onError?: (error: Error) => void;\n  onRawEvent?: (event: ChatCustomEvent) => void;\n  private customer: Customer | null = null;\n  public channelId: ChannelId = '';\n  private isAuthorizationEnabled: boolean | undefined;\n  public isLivechat: boolean | undefined;\n  private websocketClient: WebSocketClient | null = null;\n  private _incomingChatEventMiddleware = new ChatEventMiddleware();\n  private _messageEmitter: IChatEventTarget;\n  private _threadCache: Map<\n    ThreadIdOnExternalPlatform,\n    Thread | LivechatThread\n  > = new Map();\n  private _contactCustomFieldsQueue: CustomFieldsMap = new Map();\n\n  constructor(options: ChatSDKOptions) {\n    if (options === undefined) {\n      throw new ChatSDKError(\n        'No options was provided for initialization of ChatSdk',\n      );\n    }\n\n    SDKVariableStorage.set(\n      ChatSDKVariable.AUTHORIZATION_CODE,\n      options.authorizationCode,\n    );\n    SDKVariableStorage.set(ChatSDKVariable.BRAND_ID, `${options.brandId}`);\n    SDKVariableStorage.set(ChatSDKVariable.CHANNEL_ID, options.channelId);\n    SDKVariableStorage.set(\n      ChatSDKVariable.APP_NAME,\n      options.appName ?? APP_NAME,\n    );\n    SDKVariableStorage.set(\n      ChatSDKVariable.APP_VERSION,\n      `${options.appVersion ?? 0}`,\n    );\n    // Store the destinationId, visitId, and visitorId for payload data use\n    SDKVariableStorage.set(ChatSDKVariable.DESTINATION, options.destinationId);\n    SDKVariableStorage.set(ChatSDKVariable.VISIT_ID, options.visitId);\n    SDKVariableStorage.set(ChatSDKVariable.VISITOR_ID, options.visitorId);\n    SDKVariableStorage.set(\n      ChatSDKVariable.LANGUAGE,\n      options.language ?? getBrowserLanguage(),\n    );\n\n    const { brandId, channelId } = getBrandIdAndChannelId();\n\n    this.onError = options.onError;\n    this.onRawEvent = options.onRawEvent;\n\n    // Register middleware for incoming chat events\n    this._incomingChatEventMiddleware.register(chatEventMapper);\n    this._incomingChatEventMiddleware.register(sdkVersionCheck);\n    this._incomingChatEventMiddleware.register(storeThreadScrollDataMiddleware);\n    this._incomingChatEventMiddleware.register(storeContactIdMiddleware);\n\n    this._messageEmitter = new ChatEventTarget();\n\n    try {\n      if (isNaN(brandId)) {\n        throw new Error('Missing BrandID');\n      }\n      if (channelId === undefined) {\n        throw new Error('Missing ChannelId');\n      }\n      if (options.customerId === undefined) {\n        throw new Error('Missing CustomerId');\n      }\n\n      // empty string for backward compatibility\n      const visitorId = options.visitorId ?? '';\n\n      this._initEnvironment(options);\n      this._initWS(brandId, channelId, options.customerId, visitorId);\n      // Init Customer instance after the websocketClient is initialized\n      this.customer = new Customer(\n        options.customerId,\n        options.customerName,\n        options.customerImage,\n        this.websocketClient,\n      );\n      this.channelId = channelId;\n      this.isLivechat = options.isLivechat;\n      this.isAuthorizationEnabled = options.isAuthorizationEnabled;\n    } catch (error: unknown) {\n      this.onErrorHandler(error);\n    }\n  }\n\n  onErrorHandler(error: unknown): void {\n    if (typeof this.onError === 'function') {\n      this.onError(new ChatSDKError(error));\n    } else {\n      throw new ChatSDKError(error);\n    }\n  }\n\n  /**\n   * Get channel info\n   * Returns channel info like feature toggle status, translations, file upload restrictions, theme color settings etc.\n   * @returns ChannelInfo\n   * @throws ChatSDKError\n   */\n  public async getChannelInfo(): Promise<ChannelInfo> {\n    return fetchChannelInfo(\n      SDKVariableStorage.get(ChatSDKVariable.BRAND_ID) as BrandId,\n      SDKVariableStorage.get(ChatSDKVariable.CHANNEL_ID) as ChannelId,\n      SDKVariableStorage.get(ChatSDKVariable.LANGUAGE) as string,\n    );\n  }\n\n  /**\n   * Get channel availability\n   * Returns channel availability Online/Offline\n   * @returns ChannelAvailabilityResponse\n   * @throws ChatSDKError\n   */\n  public async getChannelAvailability(): Promise<ChannelAvailabilityResponse> {\n    return fetchChannelAvailability(\n      SDKVariableStorage.get(ChatSDKVariable.BRAND_ID) as BrandId,\n      SDKVariableStorage.get(ChatSDKVariable.CHANNEL_ID) as ChannelId,\n    );\n  }\n\n  /**\n   * Send Authorization Event\n   * @param authorizationCode - authorization code\n   * @param visitorId - visitor id\n   * @throws AuthorizationError\n   *  * This exception is thrown when the authorization or refresh token fails\n   */\n  public async authorize(\n    authorizationCode?: string,\n    visitorId?: VisitorId,\n  ): Promise<\n    | ConsumerAuthorizationSuccessPayloadData\n    | CustomerReconnectSuccessPayloadData\n  > {\n    const accessToken = getAccessToken();\n\n    // Reconnect first\n    if (accessToken !== null) {\n      try {\n        const reconnectResponse = await authorizationReconnect(\n          this.websocketClient,\n          this._sendRefreshTokenEvent,\n          accessToken,\n          visitorId,\n        );\n\n        return reconnectResponse;\n      } catch (error) {\n        // invalid token, continue with authorization\n      }\n    }\n\n    const basicChannelInfoRequest = handleBasicChannelInfo(\n      this.isAuthorizationEnabled,\n      this.isLivechat,\n    );\n\n    // Authorization\n    const authorizationPayloadData = createAuthorizationPayloadData(\n      authorizationCode ??\n        SDKVariableStorage.get(ChatSDKVariable.AUTHORIZATION_CODE, null),\n      visitorId,\n    );\n\n    const authEvent = createEvent(\n      createEventPayload(authorizationPayloadData),\n      generateId(),\n      AwsChatWindowEventActionRoute.REGISTER,\n    );\n\n    const authorizationRequest = makeRequest(authEvent, this.websocketClient);\n\n    const [authResponse, basicChannelInfo] = await Promise.all([\n      authorizationRequest,\n      basicChannelInfoRequest,\n    ]);\n\n    if (!isAuthSuccessEvent(authResponse)) {\n      this.websocketClient?.disconnect();\n\n      throw new AuthorizationError('Authorization failed', authResponse.error);\n    }\n\n    // Auth successful - Use the response data\n    const { consumerIdentity, customer, contact } = authResponse.data;\n\n    // Setup Customer Identity and Customer Custom Fields\n    const customerId = consumerIdentity?.idOnExternalPlatform;\n    if (!isCustomerIdentityIdValid(customerId)) {\n      this.websocketClient?.disconnect();\n\n      throw new ChatSDKError('Invalid customer identity');\n    }\n\n    Customer.setId(customerId);\n\n    if (\n      consumerIdentity.firstName !== undefined ||\n      consumerIdentity.lastName !== undefined\n    ) {\n      Customer.setName(\n        `${consumerIdentity.firstName} ${consumerIdentity.lastName}`,\n      );\n    }\n\n    const customerImage = consumerIdentity.image;\n    if (customerImage !== undefined) {\n      Customer.setImage(customerImage);\n    }\n\n    if (customer?.customFields) {\n      this.customer?.setCustomFieldsFromArray(customer.customFields);\n    }\n\n    // Queue Contact Custom Fields from the response\n    if (contact?.customFields) {\n      setCustomFieldsFromArray(\n        this._contactCustomFieldsQueue,\n        contact.customFields,\n      );\n    }\n\n    // Set up the thread settings\n    this.isAuthorizationEnabled = basicChannelInfo.isAuthorizationEnabled;\n    this.isLivechat = basicChannelInfo.isLivechat;\n\n    // Set up the access token and its refresh\n    if (authResponse.data.accessToken?.token !== undefined) {\n      setAccessToken(authResponse.data.accessToken);\n      handleRefreshToken(\n        authResponse.data.accessToken,\n        this._sendRefreshTokenEvent,\n      );\n    }\n\n    return authResponse.data;\n  }\n\n  /**\n   * Generate Authorization Token from the given url\n   *\n   * @param threadIdOnExternalPlatform - Thread Id\n   * @param url - Authorization Service URL\n   */\n  public async generateAuthorizationToken(\n    threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n    url: string,\n  ): Promise<AuthorizationToken> {\n    const result = await sendChatEvent(\n      createGenerateAuthorizationTokenPayloadData(\n        threadIdOnExternalPlatform,\n        url,\n      ),\n      this.websocketClient,\n    );\n\n    if (!isAuthorizationTokenGeneratedPostbackData(result.data)) {\n      throw new ChatSDKError(\n        'Invalid response from generate authorization token (generateAuthorizationToken)',\n      );\n    }\n\n    const { authorizationToken } = result.data;\n\n    return authorizationToken;\n  }\n\n  /**\n   * Register handler to chat event\n   *\n   * @param type - type of chat event\n   * @param handler - event handler\n   * @returns function to unregister handler\n   */\n  public onChatEvent(\n    type: ChatEventType,\n    handler: (event: ChatCustomEvent) => void,\n  ): RemoveListenerFunction {\n    this._messageEmitter.addEventListener(type, handler);\n\n    return () => {\n      this._messageEmitter.removeEventListener(type, handler);\n    };\n  }\n\n  /**\n   * Get Customer instance\n   */\n  public getCustomer(): Customer | null {\n    return this.customer;\n  }\n\n  /**\n   * Get Thread instance by id\n   * @param id - thread id\n   * @returns instance of thread based on channel settings\n   */\n  public getThread(id: ThreadIdOnExternalPlatform): Thread | LivechatThread {\n    if (isNull(this.websocketClient)) {\n      throw new ChatSDKError(\n        'Cannot get thread because websocket is disconnected',\n      );\n    }\n\n    if (isNil(id)) {\n      throw new ChatSDKError('Cannot get thread because id is undefined');\n    }\n\n    const cachedThread = this._threadCache.get(id);\n    if (!isUndefined(cachedThread)) {\n      return cachedThread;\n    }\n\n    if (this.isLivechat === true) {\n      const liveThread = new LivechatThread(\n        id,\n        this.websocketClient,\n        this._messageEmitter,\n        this.customer,\n        this._getContactCustomFieldsFromQueue(),\n        this.isAuthorizationEnabled,\n      );\n      this._threadCache.set(id, liveThread);\n\n      return liveThread;\n    }\n\n    const thread = new Thread(\n      id,\n      this.websocketClient,\n      this._messageEmitter,\n      this.customer,\n      this._getContactCustomFieldsFromQueue(),\n      this.isAuthorizationEnabled,\n    );\n    this._threadCache.set(id, thread);\n\n    return thread;\n  }\n\n  /**\n   * Get list of available threads\n   * @returns list of threads\n   */\n  public async getThreadList(): Promise<Array<ThreadView> | null> {\n    if (isNull(this.websocketClient)) {\n      throw new ChatSDKError(\n        'Cannot get thread list because websocket is disconnected',\n      );\n    }\n\n    const eventPayload = {\n      eventType: AwsInputEventType.FETCH_THREAD_LIST,\n      data: {},\n    };\n\n    const result = await sendChatEvent(eventPayload, this.websocketClient);\n\n    if (!isThreadListFetchedPostbackData(result.data)) {\n      throw new ChatSDKError(\n        'Invalid response from fetch thread list (getThreadList)',\n      );\n    }\n\n    return result.data.threads;\n  }\n\n  /**\n   * Get access to a websocket connection\n   * @returns WebSocketClient instance\n   */\n  public getWebsocketClient(): WebSocketClient | null {\n    return this.websocketClient;\n  }\n\n  /**\n   * Send the Offline Message\n   * @param offlineMessageData - offline message data (name, email, message)\n   * @returns success\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error contains (`error.data`) a response from the backend with details.\n   */\n  public async sendOfflineMessage(\n    offlineMessageData: OfflineMessageData,\n  ): Promise<MessageSuccessEventData> {\n    return sendOfflineMessage(offlineMessageData, this.websocketClient);\n  }\n\n  /**\n   * Recover thread data\n   * @param threadIdOnExternalPlatform - thread id on external platform\n   * @returns thread session data\n   */\n  public recoverThreadData(\n    threadIdOnExternalPlatform:\n      | ThreadIdOnExternalPlatform\n      | undefined = undefined,\n  ): AbortablePromise<ThreadRecoveredChatEvent> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const recoverEvent = createRecoverThreadPayloadData(\n        threadIdOnExternalPlatform,\n      );\n      const recoverResponse = await sendChatEvent(\n        recoverEvent,\n        this.websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(recoverResponse)) {\n        // Create a Thread instance after success recover\n        this.getThread(recoverResponse.data.thread.idOnExternalPlatform);\n        // Emit the 'recover' event to properly set up the Thread instance.\n        this._messageEmitter.dispatchEvent(\n          new ChatCustomEvent(ChatEvent.THREAD_RECOVERED, {\n            detail: recoverResponse,\n          }),\n        );\n\n        resolve(recoverResponse);\n      } else {\n        reject(\n          new ChatSDKError('Invalid response from recover livechat thread'),\n        );\n      }\n    });\n  }\n\n  /**\n   * Recover livechat thread data\n   * @param threadIdOnExternalPlatform - thread id on external platform\n   * @returns thread livechat session data\n   */\n  public recoverLivechatThreadData(\n    threadIdOnExternalPlatform:\n      | ThreadIdOnExternalPlatform\n      | undefined = undefined,\n  ): AbortablePromise<ThreadRecoveredChatEvent> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const recoverEvent = createRecoverLivechatThreadPayloadData(\n        threadIdOnExternalPlatform,\n      );\n      const recoverResponse = await sendChatEvent(\n        recoverEvent,\n        this.websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(recoverResponse)) {\n        // Create a Thread instance after success recover\n        this.getThread(recoverResponse.data.thread.idOnExternalPlatform);\n        // Emit the 'recover' event to properly set up the Thread instance.\n        this._messageEmitter.dispatchEvent(\n          new ChatCustomEvent(ChatEvent.LIVECHAT_RECOVERED, {\n            detail: recoverResponse,\n          }),\n        );\n\n        resolve(recoverResponse);\n      } else {\n        reject(\n          new ChatSDKError('Invalid response from recover livechat thread'),\n        );\n      }\n    });\n  }\n\n  private _getContactCustomFieldsFromQueue() {\n    if (this._contactCustomFieldsQueue.size > 0) {\n      const fields = getCustomFields(this._contactCustomFieldsQueue);\n      this._contactCustomFieldsQueue.clear();\n\n      return fields;\n    }\n\n    return {};\n  }\n\n  private _sendRefreshTokenEvent = async (): Promise<void> => {\n    const accessToken = getAccessToken();\n    if (isNull(accessToken)) {\n      return;\n    }\n\n    const refreshTokenResponse = await sendChatEvent(\n      createRefreshTokenPayload(accessToken.token),\n      this.websocketClient,\n    );\n\n    if (isTokenRefreshedSuccessResponse(refreshTokenResponse)) {\n      setAccessToken(refreshTokenResponse.data.accessToken);\n\n      handleRefreshToken(\n        refreshTokenResponse.data.accessToken,\n        this._sendRefreshTokenEvent,\n      );\n\n      return;\n    }\n\n    throw new AuthorizationError(\n      'An error occurred while refreshing the access token',\n      refreshTokenResponse.error,\n    );\n  };\n\n  /**\n   * Setup Environment endpoints\n   */\n  private _initEnvironment(options: ChatSDKOptions): void {\n    // Set custom environment\n    if (options.environment === EnvironmentName.custom) {\n      if (isEmpty(options.customEnvironment)) {\n        throw new ChatSDKError(\n          'customEnvironment must be provided when environment is set to \"custom\"',\n        );\n      }\n      SDKVariableStorage.set(\n        ChatSDKVariable.ENDPOINT_GATEWAY,\n        options.customEnvironment?.gateway,\n      );\n      SDKVariableStorage.set(\n        ChatSDKVariable.ENDPOINT_CHAT,\n        options.customEnvironment?.chat,\n      );\n\n      return;\n    }\n\n    // Set predefined environment\n    const { gateway, chat } = getEnvironmentEndpoints(options.environment);\n    SDKVariableStorage.set(ChatSDKVariable.ENDPOINT_GATEWAY, gateway);\n    SDKVariableStorage.set(ChatSDKVariable.ENDPOINT_CHAT, chat);\n  }\n\n  private _initWS(\n    brandId: BrandId,\n    channelId: ChannelId,\n    customerId: CustomerIdentityIdOnExternalPlatform,\n    visitorId: VisitorId,\n  ): void {\n    const endpoint = SDKVariableStorage.get(ChatSDKVariable.ENDPOINT_GATEWAY);\n    assertNonNullable(endpoint);\n\n    const url = new URL(endpoint);\n    const protocol = url.protocol;\n    const host = url.hostname;\n    const port = url.port;\n    const prefix = url.pathname.substring(1);\n    const forceSecureProtocol = protocol === 'wss:';\n\n    const wsClientOptions: WebSocketClientOptions = {\n      host,\n      port,\n      prefix,\n      forceSecureProtocol,\n    };\n    this.websocketClient = new WebSocketClient(\n      brandId,\n      channelId,\n      customerId,\n      wsClientOptions,\n      this.onError,\n      visitorId,\n    );\n\n    this.websocketClient.on(\n      WebSocketClientEvent.MESSAGE,\n      async (event: ChatCustomEvent) => {\n        try {\n          if (typeof this.onRawEvent === 'function') {\n            this.onRawEvent(event);\n          }\n\n          const eventData = await getEventData(parseWsMessageEvent(event));\n\n          const parsedEvent =\n            this._incomingChatEventMiddleware.process(eventData);\n\n          if (!isNil(parsedEvent)) {\n            const { type } = parsedEvent;\n\n            onMessageHandler(parsedEvent);\n\n            this._messageEmitter.dispatchEvent(\n              new ChatCustomEvent(type ?? '', {\n                detail: parsedEvent,\n              }),\n            );\n          }\n        } catch (error: unknown) {\n          this.onErrorHandler(error);\n        }\n      },\n    );\n  }\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RefreshTokenData } from '@brandembassy/ts-types-chat/dist/awsEvents/RefreshToken';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createRefreshTokenPayload(\n  token: string,\n): EventPayloadData<RefreshTokenData> {\n  return {\n    eventType: AwsInputEventType.REFRESH_TOKEN,\n    data: {\n      accessToken: {\n        token,\n      },\n    },\n  };\n}\n","export const APP_NAME = 'chat-web-sdk';\n","import { ChannelAvailability } from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { CALLER_SERVICE_ID } from '@brandembassy/ts-types-platform/dist/http/headers';\n\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { CHAT_SDK_VERSION } from '../env/version';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SdkVersionNotSupported } from '../error/SdkVersionNotSupported';\nimport { isSdkVersionNotSupportedEvent } from '../event/middleware/sdkVersionCheck';\nimport { getErrorResponseData } from '../request/getErrorResponseData';\n\nexport interface ChannelAvailabilityResponse {\n  status: ChannelAvailability;\n}\n\nexport async function fetchChannelAvailability(\n  brandId: BrandId,\n  channelId: ChannelId,\n): Promise<ChannelAvailabilityResponse> {\n  const CHANNEL_INTEGRATION_URL = SDKVariableStorage.get(\n    ChatSDKVariable.ENDPOINT_CHAT,\n  );\n\n  const response = await fetch(\n    `${CHANNEL_INTEGRATION_URL}/chat/1.0/brand/${brandId}/channel/${channelId}/availability`,\n    {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        [CALLER_SERVICE_ID]: SDKVariableStorage.get(ChatSDKVariable.APP_NAME),\n        'x-sdk-platform': 'web',\n        'x-sdk-version': CHAT_SDK_VERSION,\n      },\n    },\n  );\n\n  if (!response.ok) {\n    const errorData = await getErrorResponseData(response);\n\n    if (isSdkVersionNotSupportedEvent(errorData)) {\n      throw new SdkVersionNotSupported();\n    }\n\n    throw new ChatSDKError(\n      `Failed to fetch channel availability. Status (${response.status})`,\n      { response },\n    );\n  }\n\n  return response.json();\n}\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { AuthorizationError } from './AuthorizationError';\nimport { createReconnectPayloadData } from './createReconnectPayloadData';\nimport { CustomerReconnectSuccessPayloadData } from './CustomerReconnectSuccessPayloadData';\nimport { handleRefreshToken } from './handleRefreshToken';\n\nexport async function authorizationReconnect(\n  websocketClient: WebSocketClient | null,\n  refreshTokenEventCallback: () => Promise<void>,\n  accessToken: AccessToken,\n  visitorId?: string,\n): Promise<CustomerReconnectSuccessPayloadData> {\n  const reconnectPayload = createReconnectPayloadData(accessToken, visitorId);\n\n  const response = await sendChatEvent(reconnectPayload, websocketClient);\n\n  const hasError = response.error !== undefined;\n\n  if (hasError) {\n    throw new AuthorizationError(\n      'Authorization reconnect failed',\n      response.error,\n    );\n  }\n\n  const successReconnectResponse: CustomerReconnectSuccessPayloadData = {\n    reconnected: true,\n  };\n\n  handleRefreshToken(accessToken, refreshTokenEventCallback);\n\n  return successReconnectResponse;\n}\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { isUndefined } from '../utils/is';\n\nimport { fetchChannelInfo } from './fetchChannelInfo';\n\nexport async function handleBasicChannelInfo(\n  isAuthorizationEnabled: undefined | boolean,\n  isLivechat: undefined | boolean,\n): Promise<{\n  isAuthorizationEnabled: boolean;\n  isLivechat: boolean;\n}> {\n  if (!isUndefined(isAuthorizationEnabled) && !isUndefined(isLivechat)) {\n    return {\n      isAuthorizationEnabled,\n      isLivechat,\n    };\n  }\n\n  const channelInfo = await fetchChannelInfo(\n    SDKVariableStorage.get(ChatSDKVariable.BRAND_ID) as BrandId,\n    SDKVariableStorage.get(ChatSDKVariable.CHANNEL_ID) as ChannelId,\n  );\n\n  return {\n    isAuthorizationEnabled: channelInfo.isAuthorizationEnabled,\n    isLivechat: channelInfo.isLiveChat,\n  };\n}\n","import { AuthorizeCustomerData } from '@brandembassy/ts-types-chat/dist/awsEvents/AuthorizeCustomer';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport { CHAT_SDK_VERSION } from '../env/version';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { generateId } from '../utils/generateId';\nimport { createVisitorPayload } from '../visitor/createVisitorPayload';\n\nexport function createAuthorizationPayloadData(\n  authorizationCode: string | null,\n  visitorId: VisitorId = generateId(),\n): EventPayloadData<AuthorizeCustomerData> {\n  return {\n    eventType: AwsInputEventType.AUTHORIZE_CUSTOMER,\n    data: {\n      authorization: {\n        authorizationCode,\n      },\n      disableChannelInfo: true,\n      sdkVersion: CHAT_SDK_VERSION,\n      sdkPlatform: 'web',\n    },\n    ...createVisitorPayload(visitorId as VisitorId),\n  };\n}\n","import { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/customer/CustomerIdentity';\n\nimport { isNil } from '../utils/is';\n\nexport function isCustomerIdentityIdValid(\n  customerIdentityIdOnExternalPlatform:\n    | CustomerIdentityIdOnExternalPlatform\n    | undefined,\n): customerIdentityIdOnExternalPlatform is CustomerIdentityIdOnExternalPlatform {\n  return (\n    !isNil(customerIdentityIdOnExternalPlatform) &&\n    customerIdentityIdOnExternalPlatform !== ''\n  );\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { GenerateAuthorizationTokenData } from '@brandembassy/ts-types-chat/dist/awsEvents/GenerateAuthorizationToken';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createGenerateAuthorizationTokenPayloadData(\n  threadId: ThreadIdOnExternalPlatform,\n  url: string,\n): EventPayloadData<GenerateAuthorizationTokenData> {\n  return {\n    eventType: AwsInputEventType.GENERATE_AUTHORIZATION_TOKEN,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadId,\n      },\n      url,\n    },\n  };\n}\n","import { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendOfflineMessagePayloadData } from './sendOfflineMessagePayload';\n\nexport interface OfflineMessageData {\n  email: string;\n  message: string;\n  name: string;\n}\n\nexport const sendOfflineMessage = async (\n  offlineMessageData: OfflineMessageData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const offlineMessagePayloadData =\n    createSendOfflineMessagePayloadData(offlineMessageData);\n\n  const response = await sendChatEvent(\n    offlineMessagePayloadData,\n    websocketClient,\n  );\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send offline message failed', response);\n};\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendOfflineMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOfflineMessage';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/customer/CustomerIdentity';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nimport { OfflineMessageData } from './sendOfflineMessage';\n\nexport const createSendOfflineMessagePayloadData = (\n  offlineMessageData: OfflineMessageData,\n): EventPayloadData<SendOfflineMessageEventData> => {\n  const [lastName, ...names] = offlineMessageData.name.split(' ').reverse();\n  const firstName = names.reverse().join(' ');\n\n  const authorCustomerIdentity = {\n    idOnExternalPlatform:\n      offlineMessageData.email as CustomerIdentityIdOnExternalPlatform,\n    firstName,\n    lastName,\n  };\n\n  const data = {\n    messageContent: {\n      type: MessageType.TEXT,\n      payload: {\n        text: offlineMessageData.message,\n      },\n    },\n    authorCustomerIdentity,\n  };\n\n  return {\n    eventType: AwsInputEventType.SEND_OFFLINE_MESSAGE,\n    data,\n  };\n};\n","export function assertNonNullable<T>(\n  value: T,\n): asserts value is NonNullable<T> {\n  if (typeof value === 'undefined' || value === null) {\n    throw Error(`Expected non-nullish value, got ${value}`);\n  }\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { normalizeEvent } from '../event/normalizeEvent';\nimport { isNil } from '../utils/is';\n\nimport { isS3ChatEvent } from './isS3ChatEvent';\n\nexport const getEventData = async (\n  eventData: ChatEventData | undefined,\n): Promise<ChatEventData | null> => {\n  if (isNil(eventData)) {\n    return null;\n  }\n\n  if (!isS3ChatEvent(eventData)) {\n    return eventData;\n  }\n\n  const url = eventData.data.s3Object.url;\n\n  const response = await fetch(url);\n\n  if (response.ok) {\n    const responseData = await response.json();\n\n    return normalizeEvent(responseData);\n  }\n\n  throw new ChatSDKError('Failed to fetch S3 event data');\n};\n","import { S3EventData } from '@brandembassy/ts-types-platform/dist/largeEvent/S3Event';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface S3ChatEvent extends ChatEventData {\n  data: S3EventData;\n  type: typeof ChatEvent.EVENT_IN_S3;\n}\n\nexport function isS3ChatEvent(event: unknown): event is S3ChatEvent {\n  return (event as S3ChatEvent).type === PushUpdateEventType.EVENT_IN_S3;\n}\n","import { ChatEventData } from '../event/ChatEvent';\nimport { normalizeEvent } from '../event/normalizeEvent';\n\nimport { requestQueue } from './requestQueue';\n\nexport const parseWsMessageEvent = (\n  event: CustomEvent,\n): ChatEventData | undefined => {\n  const eventDetail = event?.detail;\n\n  if (!eventDetail) {\n    return;\n  }\n\n  let eventData;\n\n  try {\n    eventData = JSON.parse(eventDetail.data);\n  } catch (error) {\n    return;\n  }\n\n  return normalizeEvent(eventData);\n};\n\nexport const onMessageHandler = (event: ChatEventData): void => {\n  const { id } = event;\n\n  if (requestQueue.has(id)) {\n    const resolve = requestQueue.get(id);\n\n    if (typeof resolve === 'function') {\n      resolve(event);\n    }\n\n    requestQueue.delete(id);\n  }\n};\n","import { CaseInboxAssigneeChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseInboxAssigneeChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface AssignedAgentChangedEvent extends ChatEventData {\n  data: CaseInboxAssigneeChangedData;\n  type: typeof ChatEvent.ASSIGNED_AGENT_CHANGED;\n}\n\nexport function isAssignedAgentChangedEvent(\n  event: ChatEventData,\n): event is AssignedAgentChangedEvent {\n  return (\n    event.type === ChatEvent.ASSIGNED_AGENT_CHANGED &&\n    (event as AssignedAgentChangedEvent).data?.case?.id !== undefined\n  );\n}\n","import { TypingEventData } from '@brandembassy/ts-types-platform/dist/user/typing/TypingEventData';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type AgentTypingStartedData = TypingEventData;\n\nexport interface AgentTypingStartedEvent extends ChatEventData {\n  data: AgentTypingStartedData;\n  type: typeof ChatEvent.AGENT_TYPING_STARTED;\n}\n\nexport function isAgentTypingStartedEvent(\n  event: ChatEventData,\n): event is AgentTypingStartedEvent {\n  return (\n    event.type === ChatEvent.AGENT_TYPING_STARTED &&\n    (event as AgentTypingStartedEvent).data?.thread?.idOnExternalPlatform !==\n      undefined\n  );\n}\n","import { TypingEventData } from '@brandembassy/ts-types-platform/dist/user/typing/TypingEventData';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type AgentTypingEndedData = TypingEventData;\n\nexport interface AgentTypingEndedEvent extends ChatEventData {\n  data: AgentTypingEndedData;\n  type: typeof ChatEvent.AGENT_TYPING_ENDED;\n}\n\nexport function isAgentTypingEndedEvent(\n  event: ChatEventData,\n): event is AgentTypingEndedEvent {\n  return (\n    event.type === ChatEvent.AGENT_TYPING_ENDED &&\n    (event as AgentTypingEndedEvent).data?.thread?.idOnExternalPlatform !==\n      undefined\n  );\n}\n","import { Message } from '@brandembassy/ts-types-platform/dist/message/Message';\nimport { MessageDirection } from '@brandembassy/ts-types-platform/dist/message/MessageDirection';\n\n/**\n * Get message author name of given message\n * @param message - message\n * @returns message author name\n */\nexport const getAuthor = (message: Message): string =>\n  message.direction === MessageDirection.INBOUND\n    ? message.authorEndUserIdentity?.fullName ?? ''\n    : `${message.authorUser?.firstName ?? ''} ${\n        message.authorUser?.surname ?? ''\n      }`.trim();\n","import { Message } from '@brandembassy/ts-types-platform/dist/message/Message';\n\nimport { isUndefined } from '../utils/is';\n\nexport function isMessage(item: unknown): item is Message {\n  const hasId = isUndefined((item as Message).id) === false;\n  const hasDirection = isUndefined((item as Message).direction) === false;\n  const hasMessageContent =\n    isUndefined((item as Message).messageContent) === false;\n\n  return hasId && hasDirection && hasMessageContent;\n}\n","import { MessageCreatedData } from '@brandembassy/ts-types-platform/dist/message/MessageCreatedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageCreatedEvent extends ChatEventData {\n  data: MessageCreatedData;\n  type: PushUpdateEventType.MESSAGE_CREATED;\n}\n\nexport function isMessageCreatedEvent(\n  event: unknown,\n): event is MessageCreatedEvent {\n  return (\n    (event as MessageCreatedEvent).type === PushUpdateEventType.MESSAGE_CREATED\n  );\n}\n","import { MessageSentData } from '@brandembassy/ts-types-platform/dist/message/MessageSentEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageSentEvent extends ChatEventData {\n  data: MessageSentData;\n  type: PushUpdateEventType.MESSAGE_SENT;\n}\n\nexport function isMessageSentEvent(event: unknown): event is MessageSentEvent {\n  return (event as MessageSentEvent).type === PushUpdateEventType.MESSAGE_SENT;\n}\n","import { MessageReadChangedData } from '@brandembassy/ts-types-platform/dist/message/MessageReadChangedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageReadChangedEvent extends ChatEventData {\n  data: MessageReadChangedData;\n  type: PushUpdateEventType.MESSAGE_READ_CHANGED;\n}\n\nexport function isMessageReadChangedEvent(\n  event: unknown,\n): event is MessageReadChangedEvent {\n  return (\n    (event as MessageReadChangedEvent).type ===\n    PushUpdateEventType.MESSAGE_READ_CHANGED\n  );\n}\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SetPositionInQueuePayloadData } from '@brandembassy/ts-types-chat/dist/awsEvents/SetPositionInQueuePayload';\nimport { EventId } from '@brandembassy/ts-types-platform/dist/pushUpdate/EventId';\n\nimport { ChatEventData } from '../../event/ChatEvent';\nimport { isEmpty } from '../../utils/is';\n\nexport interface SetPositionInQueueChatEvent extends ChatEventData {\n  data: SetPositionInQueuePayloadData;\n  id: EventId;\n  type: AwsResponseEventType.SET_POSITION_IN_QUEUE;\n}\n\nexport const isSetPositionInQueueEvent = (\n  event: unknown,\n): event is SetPositionInQueueChatEvent => {\n  const setPositionInQueueEvent = event as SetPositionInQueueChatEvent;\n\n  return (\n    Number.isInteger(setPositionInQueueEvent?.data.positionInQueue) &&\n    isEmpty(setPositionInQueueEvent?.id) === false &&\n    setPositionInQueueEvent?.type === AwsResponseEventType.SET_POSITION_IN_QUEUE\n  );\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class CreateInvitationFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { CreateInvitationToGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/InvitationToGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { CreateInvitationFailedError } from './CreateInvitationFailedError';\n\nexport function createCreateInvitationToGroupChatPayloadData(\n  id: CaseId,\n): EventPayloadData<CreateInvitationToGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.CREATE_GROUP_CHAT_INVITE,\n    data: {\n      contact: {\n        id,\n      },\n    },\n  };\n}\n\nexport function isInvitationToGroupChatCreated(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_INVITE_CREATED;\n}\n\nexport async function sendCreateInvitationToGroupChatEvent(\n  createInvitationPayloadData: EventPayloadData<CreateInvitationToGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(createInvitationPayloadData, wsClient);\n\n  if (isInvitationToGroupChatCreated(response)) {\n    return response;\n  }\n\n  throw new CreateInvitationFailedError('Create invitation failed', response);\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class JoinGroupChatFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { JoinGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/JoinGroupChat';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { JoinGroupChatFailedError } from './JoinGroupChatFailedError';\n\nexport function createJoinGroupChatPayloadData(\n  code: string,\n): EventPayloadData<JoinGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.JOIN_GROUP_CHAT,\n    data: {\n      invitation: {\n        code,\n      },\n    },\n  };\n}\n\nexport function isJoinGroupChatSuccessResponse(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_JOINED;\n}\n\nexport async function sendJoinGroupChatEvent(\n  joinGroupChatPayloadData: EventPayloadData<JoinGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(joinGroupChatPayloadData, wsClient);\n\n  if (isJoinGroupChatSuccessResponse(response)) {\n    return response;\n  }\n\n  throw new JoinGroupChatFailedError('Join Group chat failed', response);\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { LeaveGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LeaveGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nexport function createLeaveGroupChatPayloadData(\n  id: CaseId,\n): EventPayloadData<LeaveGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.LEAVE_GROUP_CHAT,\n    data: {\n      contact: {\n        id,\n      },\n    },\n  };\n}\n\nexport async function sendLeaveGroupChatEvent(\n  leaveGroupChatPayloadData: EventPayloadData<LeaveGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  return sendChatEvent(leaveGroupChatPayloadData, wsClient);\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SendEmailInvitaionFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendEmailInvitationToGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendEmailInvitationToGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { SendEmailInvitaionFailedError } from './SendEmailInvitaionFailedError';\n\nexport function createSendEmailInvitationToGroupChatPayloadData(\n  caseId: CaseId,\n  invitationCode: string,\n  email: string,\n): EventPayloadData<SendEmailInvitationToGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.SEND_EMAIL_INVITE_TO_GROUP_CHAT,\n    data: {\n      contact: {\n        id: caseId,\n      },\n      invitation: {\n        code: invitationCode,\n      },\n      recipients: [\n        {\n          idOnExternalPlatform: email,\n        },\n      ],\n    },\n  };\n}\n\nexport function isEmailInvitationToGroupChatSent(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_INVITE_SENT;\n}\n\nexport async function sendEmailInvitationToGroupChatEvent(\n  createInvitationPayloadData: EventPayloadData<SendEmailInvitationToGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(createInvitationPayloadData, wsClient);\n\n  if (isEmailInvitationToGroupChatSent(response)) {\n    return response;\n  }\n\n  throw new SendEmailInvitaionFailedError(\n    'Send Email Invitation failed',\n    response,\n  );\n}\n","export interface CustomerReconnectSuccessPayloadData {\n  reconnected: true;\n}\n\nexport function isCustomerReconnectSuccessPayloadData(\n  payload: unknown,\n): payload is CustomerReconnectSuccessPayloadData {\n  if (typeof payload !== 'object' || payload === null) {\n    return false;\n  }\n\n  if (!('reconnected' in payload)) {\n    return false;\n  }\n\n  return payload.reconnected === true;\n}\n","import { User } from '@brandembassy/ts-types-platform/dist/user/User';\nimport { UserId } from '@brandembassy/ts-types-platform/dist/user/UserId';\n\nimport { ChatSdk } from './ChatSdk';\n\n// Export runtime classes and types\nexport type { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nexport type { ConsumerIdentityInput as CustomerIdentity } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nexport type { CaseInboxAssigneeChangedData as AssignedAgentChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseInboxAssigneeChangedEvent';\nexport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nexport { WebSocketClientEvent } from '@brandembassy/push-updates-sdk';\nexport { WebSocketClientError } from './sockets/WebSocketClientError';\nexport { ChatEvent } from './event/ChatEvent';\nexport type { ChatEventType } from './event/ChatEvent';\nexport { sendChatEvent } from './event/sendChatEvent';\nexport { EnvironmentName, EnvironmentEndpoints } from './env/Environments';\nexport * from './agent';\nexport * from './thread';\nexport * from './contact';\nexport * from './ChatSdk';\nexport * from './message';\nexport { Customer } from './customer/Customer';\nexport type { Customer as CustomerView } from '@brandembassy/ts-types-platform/dist/customer/customer';\nexport * from './utils/narrowing';\nexport { generateId } from './utils/generateId';\nexport { splitName } from './utils/splitName';\nexport type { ChatSDKOptions } from './ChatSDKOptions';\nexport * from './groupChat';\nexport * from './utils/AbortablePromise';\nexport { AbortError } from './error/AbortError';\nexport { SdkVersionNotSupported } from './error/SdkVersionNotSupported';\nexport {\n  getBrowserFingerprint,\n  getDeviceType,\n  BrowserFingerprintOptions,\n  getBrowserLanguage,\n  getBrowserLocation,\n} from './browserFingerprint/getBrowserFingerprint';\n\n// Export types for API Docs availability\nexport * from './authorization/AuthorizeConsumerEventResponse';\nexport type { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nexport type { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nexport {\n  ChannelAvailability,\n  ChannelInfo,\n} from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nexport type { ChannelAvailabilityResponse } from './channel/fetchChannelAvailability';\nexport { Thread as ThreadView } from '@brandembassy/ts-types-platform/dist/thread/Thread';\nexport type { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\nexport type { WebSocketClient } from './sockets/WebSocketClient';\nexport type {\n  EventListenerFunction,\n  RemoveListenerFunction,\n} from './event/ListenerFunction';\nexport type { IChatEventTarget } from './event/ChatEventTarget';\nexport type { ChatEventData } from './event/ChatEvent';\nexport type { MoreMessagesLoadedEvent } from './message/loadMoreMessagesEventData';\nexport type { ThreadRecoveredPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadRecovered';\nexport type { MessageSuccessEventData } from './message/MessageSuccessEventData';\nexport type { ConsumerAuthorizationSuccessPayloadData } from '@brandembassy/ts-types-chat/dist/authorization/ConsumerAuthorizationSuccessPayloadData';\nexport type { UploadFailResponse } from './attachment/uploadAttachment';\nexport { UploadAttachmentError } from './attachment/UploadAttachmentError';\nexport type Agent = User;\nexport type AgentId = UserId;\nexport type { AuthorizationToken } from '@brandembassy/ts-types-chat/dist/authorization/AuthorizationToken';\nexport type { OfflineMessageData } from './message/sendOfflineMessage';\nexport type { EventPayloadData } from './sockets/EventPayload';\nexport type { ThreadRecoveredChatEvent } from './thread/isRecoverSuccessPayload';\nexport * from './authorization/createReconnectPayloadData';\nexport * from './authorization/CustomerReconnectSuccessPayloadData';\nexport { AuthorizationError } from './authorization/AuthorizationError';\nexport { CHAT_SDK_VERSION } from './env/version';\n\n// Export the ChatSDK as default\nexport default ChatSdk;\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__315__","__WEBPACK_EXTERNAL_MODULE__198__","Object","defineProperty","value","removeEmptyValuesFromObject","objectData","entries","filter","_a","reduce","result","key","isoString","milliseconds","Date","parse","isNaN","day","parsedDate","exec","split","map","itm","parseInt","UTC","apply","getDate","NaN","tz","setUTCMinutes","getUTCMinutes","getTime","parseTimestampFromISO8601String","getTimeInMinutes","getTimeInMilliseconds","getTimeInSeconds","padDateTimeUnit","dateTimeUnit","norm","Math","abs","floor","Number","_b","hours","_c","minutes","_d","seconds","_e","getTimezoneISOOffset","misc_1","date","tzo","getTimezoneOffset","concat","createQueryParametersAsString","queryParameters","keys","encodeURIComponent","join","LogLevels","EventTargetPolyfill","this","listeners","prototype","addEventListener","type","callback","push","removeEventListener","stack","l","length","splice","dispatchEvent","event","slice","call","defaultPrevented","WebSocketClientEvent_1","enumerable","get","WebSocketClientEvent","__assign","assign","t","s","n","arguments","p","hasOwnProperty","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","getPushUpdateWebSocket","setupSocketConnection","queryParameters_1","initializeHeartbeat_1","object_1","WebSocketClient_1","socket","defaultConnectionOptions","forceSecureProtocol","heartbeatAfterAuthorize","maxRetries","maxReconnectionDelay","webSocketUrlWithoutProtocol","options","TypeError","connectionOptions","tenantId","userId","brandId","wscOptions","url","query","queryString","protocol","window","location","URL","search","createWebSocketUrlWithProtocol","WebSocketClient","undefined","initializeHeartbeat","HeartBeatState","extendStatics","__extends","d","b","setPrototypeOf","__proto__","Array","__","constructor","create","__importDefault","mod","__esModule","HEART_BEAT_CHECK_TIMEOUT","HEART_BEAT_INTERVAL","Logger_1","reconnecting_websocket_1","EventTargetPolyfill_1","HeartBeatState_1","_super","protocols","_this","heartBeatTimeout","heartBeatCheckTimeout","enableDebugMode","debugMode","log","INFO","disableDebugMode","level","message","args","logger","sendHeartBeat","send","JSON","stringify","action","handleHeartBeatResponse","heartBeatState","DYING","LIVING","dispatchHeartBeatState","setHeartBeatCheckTimeout","clearTimeout","setTimeout","hearbeatState","CustomEvent","isHeartBeatActive","default","onopen","OPEN","onclose","closeEvent","retryCount","DIED","CLOSE","detail","onmessage","data","MESSAGE","onerror","ERROR","startHeartBeat","interval","heartBeatCallback","stopHeartBeat","handleMessage","payload","authorizationStatus","error","warn","__read","o","m","Symbol","iterator","r","ar","next","done","Event","target","ErrorEvent","CloseEvent","code","reason","wasClean","getGlobalWebSocket","WebSocket","DEFAULT","minReconnectionDelay","random","minUptime","reconnectionDelayGrowFactor","connectionTimeout","Infinity","maxEnqueuedMessages","startClosed","debug","ReconnectingWebSocket","_listeners","open","close","_retryCount","_shouldReconnect","_connectLock","_binaryType","_closeCalled","_messageQueue","_handleOpen","_debug","_options","_connectTimeout","_uptimeTimeout","_acceptOpen","_ws","binaryType","forEach","listener","_callEventListener","_handleMessage","_handleError","_disconnect","_connect","_handleClose","_clearTimeouts","_url","_protocols","configurable","CONNECTING","CLOSING","CLOSED","set","max","acc","Blob","size","byteLength","bufferedAmount","extensions","readyState","reconnect","e_1","listeners_1","__values","listeners_1_1","e_1_1","return","_i","console","__spread","_getNextDelay","delay","pow","_wait","Promise","resolve","_getNextUrl","urlProvider","then","Error","_removeListeners","w","_addListeners","_handleTimeout","catch","err","handleEvent","AwsChatWindowEventActionRoute","AwsResponseEventType","AwsInputEventType","ChannelAvailability","DeviceType","CaseStatus_1","CaseStatus","MessageDirection","MessageType","PushUpdateEventType","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","obj","prop","toStringTag","ChatSDKVariable","SDKVariableStorage","_vars","variableName","defaultValue","list","clear","setAccessToken","accessToken","ACCESS_TOKEN","token","ACCESS_TOKEN_EXPIRES_IN","String","expiresIn","getAccessToken","super","name","_getErrorMessage","AuthorizationError","errorMessage","CHAT_SDK_VERSION","createVisitorPayload","visitorId","visitor","id","objectProto","Ctor","func","transform","arg","global","freeSelf","Function","nativeObjectToString","toString","symToStringTag","isOwn","tag","unmasked","uid","maskSrcKey","IE_PROTO","funcToString","reIsHostCtor","reIsNative","RegExp","replace","test","object","mapTag","promiseTag","setTag","weakMapTag","dataViewTag","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","getTag","ArrayBuffer","ctorString","isArray","freeExports","nodeType","freeModule","Buffer","isBuffer","typedArrayTags","freeProcess","process","nodeUtil","types","binding","nodeIsTypedArray","isTypedArray","requestQueue","Map","makeRequest","async","wsClient","eventId","splitName","firstName","names","setCustomFields","fields","setCustomFieldsFromArray","ident","getCustomFields","fromEntries","getCustomFieldsArray","from","Customer","image","websocketClient","_customFields","_exists","_websocketClient","setId","setName","setImage","CUSTOMER_ID","getId","getName","CUSTOMER_NAME","getIdOrCreateNewOne","customerId","getImage","CUSTOMER_IMAGE","setExists","exists","setCustomField","customFields","sendCustomFields","sendChatEvent","eventType","SEND_CONSUMER_CUSTOM_FIELDS","createCustomerIdentityPayload","storedName","storedImage","customerIdentityNamePayload","lastName","idOnExternalPlatform","getBrandIdAndChannelId","BRAND_ID","channelId","CHANNEL_ID","createEventPayload","eventPayloadData","storedDestinationId","DESTINATION","storedVisitId","VISIT_ID","storedVisitorId","VISITOR_ID","consumerIdentity","destination","visit","brand","channel","createEvent","actionRoute","AwsChatWindowEvent","CHAT_WINDOW_EVENT","payloadData","webSocketClient","createReconnectPayloadData","RECONNECT_CONSUMER","refreshTokenTimeoutId","handleRefreshToken","refreshTokenAction","accessTokenExpiresIn","idealTimeToRefreshAccessToken","round","getIdealTimeInSecondsForIssueRefreshToken","isAuthSuccessEvent","status","CONSUMER_AUTHORIZED","isTokenRefreshedSuccessResponse","response","TOKEN_REFRESHED","getBrowserLanguage","navigator","language","getBrowserLocation","Intl","DateTimeFormat","resolvedOptions","timeZone","getDeviceType","deviceType","MOBILE","TABLET","DESKTOP","getBrowserFingerprint","deviceInfoFromUserAgent","userAgent","country","ip","browser","getBrowser","browserVersion","version","os","getOS","osVersion","getDevice","applicationType","BROWSER","ERROR_CODE_SDK_VERSION_NOT_SUPPORTED","SdkVersionNotSupported","isSdkVersionNotSupportedEvent","errorCode","sdkVersionCheck","getErrorResponseData","json","statusText","fetchChannelInfo","languageLocale","CHANNEL_INTEGRATION_URL","ENDPOINT_CHAT","fetch","method","headers","Accept","APP_NAME","ok","EnvironmentName","ChatEvent","AGENT_TYPING_STARTED","AGENT_TYPING_ENDED","ASSIGNED_AGENT_CHANGED","CONTACT_CREATED","CONTACT_STATUS_CHANGED","CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED","ChatCustomEvent","ChatEventMiddleware","middlewares","register","middleware","processedEvent","ChatEventTarget","EventTarget","hasUserData","user","EMPTY_EVENT","createdAt","normalizeEvent","hasEventId","hasError","hasEventType","hasData","context","eventDetailData","postback","isDataWithPostback","postbackData","postbackEventType","rawEventId","restEventData","eventRest","eventTypeMap","SENDER_TYPING_STARTED","SENDER_TYPING_ENDED","CASE_INBOX_ASSIGNEE_CHANGED","CASE_CREATED","CASE_STATUS_CHANGED","CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED","LIVECHAT_RECOVERED","normalizedContactHistoryItems","contactHistory","THREAD_RECOVERED","chatEventMapper","isSendMessageSuccessEventData","SendMessageFailedError","WebSocketClientError","onError","_connection","connect","port","host","prefix","socketUrl","consumerIdOnExternalPlatform","consumerId","v","APP_VERSION","createSocketUrl","errorHandlerBound","_errorHandler","bind","disconnect","stringData","on","handlerCallback","off","eventError","UploadAttachmentError","createAttachmentPayload","file","attachment","reader","reject","FileReader","onloadend","errorEvent","readAsDataURL","createLocalFileReader","mimeType","createPayloadForAttachmentUpload","uploadAttachmentResponse","fileName","requestBody","content","body","uploadAttachment","fileUrl","friendlyName","allowedFileSize","isUploadFailResponse","isContactStatusChangedEvent","case","isContactCreatedEvent","isContactToRoutingQueueAssignmentChangedEvent","isContactRecipientsChangedEvent","CONTACT_RECIPIENTS_CHANGED","createMessageData","messageContent","messageId","threadIdOnExternalPlatform","browserFingerprint","thread","consumer","consumerContact","attachments","isLoadMoreMessagesEventData","MORE_MESSAGES_LOADED","messages","createLoadMoreMessagesPayloadData","eventData","LOAD_MORE_MESSAGES","AbortError","AbortablePromise","executor","abortController","AbortController","abortSignal","signal","abortReason","abort","_abortReason","promise","ArchiveThreadFailedError","GetMetadataFailedError","isLoadMetadataSuccessPayload","THREAD_METADATA_LOADED","lastMessage","isRecoverSuccessPayload","testResponseData","hasPostbackData","hasMessages","isCorrectEventType","hasNoError","isThreadArchivedSuccessPayload","THREAD_ARCHIVED","LoadMoreMessagesFailedError","createRecoverThreadPayloadData","emptyData","RECOVER_THREAD","SetThreadNameFailedError","ThreadRecoverFailedError","Thread","messageEmitter","customer","isAuthorizationEnabled","_typingTimeoutID","_isAuthorizationEnabled","_typingPreviewText","_messageEmitter","_customer","_registerEventHandlers","recover","contact","restData","sendMessage","messageData","sendMessagePayloadData","SEND_MESSAGE","_mergeCustomFieldsAndAccessTokenWithMessageData","sendTextMessage","messageText","textMessageContent","text","TEXT","getTextMessageContent","sendPostbackMessage","postbackMessageContent","getPostbackMessageContent","sendOutboundMessage","sendOutboundMessagePayloadData","SEND_OUTBOUND","loadMoreMessages","scrollToken","oldestMessageDatetime","THREAD_DATA","loadMoreMessagesEventData","lastMessageSeen","MESSAGE_SEEN","sendAttachments","files","all","createAttachmentUploadMessageData","keystroke","timeout","onSendCallback","_stopTypingCallback","stopTyping","keystrokeForPreview","currentText","_typingForPreviewTimeoutID","stopTypingForPreview","shouldSendPreview","currentPreviewText","sendMessagePreview","getMetadata","LOAD_THREAD_METADATA","onThreadEvent","handler","filteredEventHandler","threadId","eventThreadId","dataWithThread","messagePreview","getThreadId","filterCurrentThreadEventHandler","SET_CONSUMER_CONTACT_CUSTOM_FIELD","archive","ARCHIVE_THREAD","updateThreadData","threadName","UPDATE_THREAD","isUpdateThreadSuccess","SEND_MESSAGE_PREVIEW","createSendMessagePreviewPayloadData","sendTranscript","contactNumber","email","SEND_TRANSCRIPT","consumerRecipients","createSendTranscriptPayloadData","_setThreadAndCustomerExists","_clearCustomFieldsOnContactStatusChangedToClosed","eventDetail","ContactStatus","isOutbound","storedAccessToken","createRecoverLivechatThreadPayloadData","RECOVER_LIVECHAT","LivechatThread","_isInitialized","_canSendMessage","_registerLivechatEventHandlers","startChat","initialMessageText","endChat","threadDataRaw","threadData","contactId","END_CONTACT","createEndThreadPayloadData","isThreadListFetchedPostbackData","storeContactId","originalThreadDataRaw","originalThreadData","storeContactIdMiddleware","caseId","array","storeThreadScrollData","scrollData","oldThreadDataRaw","oldThreadData","storeThreadScrollDataMiddleware","messagesScrollToken","ChatSdk","_incomingChatEventMiddleware","_threadCache","_contactCustomFieldsQueue","_sendRefreshTokenEvent","refreshTokenResponse","REFRESH_TOKEN","AUTHORIZATION_CODE","authorizationCode","appName","appVersion","destinationId","visitId","LANGUAGE","onRawEvent","_initEnvironment","_initWS","customerName","customerImage","isLivechat","onErrorHandler","getChannelInfo","getChannelAvailability","fetchChannelAvailability","authorize","reconnectResponse","refreshTokenEventCallback","reconnectPayload","reconnected","authorizationReconnect","basicChannelInfoRequest","channelInfo","isLiveChat","handleBasicChannelInfo","authorizationPayloadData","AUTHORIZE_CUSTOMER","authorization","disableChannelInfo","sdkVersion","sdkPlatform","createAuthorizationPayloadData","authEvent","REGISTER","authorizationRequest","authResponse","basicChannelInfo","customerIdentityIdOnExternalPlatform","generateAuthorizationToken","GENERATE_AUTHORIZATION_TOKEN","createGenerateAuthorizationTokenPayloadData","authorizationToken","onChatEvent","getCustomer","getThread","cachedThread","liveThread","_getContactCustomFieldsFromQueue","getThreadList","eventPayload","FETCH_THREAD_LIST","threads","getWebsocketClient","sendOfflineMessage","offlineMessageData","offlineMessagePayloadData","reverse","authorCustomerIdentity","SEND_OFFLINE_MESSAGE","createSendOfflineMessagePayloadData","recoverThreadData","recoverEvent","recoverResponse","recoverLivechatThreadData","environment","custom","customEnvironment","ENDPOINT_GATEWAY","gateway","chat","placeholder","chatUrlTemplate","gatewayUrlTemplate","AU1","CA1","EU1","JP1","NA1","UK1","getEnvironmentEndpoints","endpoint","assertNonNullable","wsClientOptions","hostname","pathname","substring","EVENT_IN_S3","s3Object","getEventData","parseWsMessageEvent","parsedEvent","has","delete","onMessageHandler","isAssignedAgentChangedEvent","isAgentTypingStartedEvent","isAgentTypingEndedEvent","getAuthor","direction","INBOUND","authorEndUserIdentity","fullName","authorUser","surname","trim","isMessage","item","hasId","hasDirection","hasMessageContent","isMessageCreatedEvent","MESSAGE_CREATED","isMessageSentEvent","MESSAGE_SENT","isMessageReadChangedEvent","MESSAGE_READ_CHANGED","isSetPositionInQueueEvent","setPositionInQueueEvent","isInteger","positionInQueue","SET_POSITION_IN_QUEUE","CreateInvitationFailedError","createCreateInvitationToGroupChatPayloadData","CREATE_GROUP_CHAT_INVITE","sendCreateInvitationToGroupChatEvent","createInvitationPayloadData","GROUP_CHAT_INVITE_CREATED","isInvitationToGroupChatCreated","JoinGroupChatFailedError","createJoinGroupChatPayloadData","JOIN_GROUP_CHAT","invitation","sendJoinGroupChatEvent","joinGroupChatPayloadData","GROUP_CHAT_JOINED","isJoinGroupChatSuccessResponse","createLeaveGroupChatPayloadData","LEAVE_GROUP_CHAT","sendLeaveGroupChatEvent","leaveGroupChatPayloadData","SendEmailInvitaionFailedError","createSendEmailInvitationToGroupChatPayloadData","invitationCode","SEND_EMAIL_INVITE_TO_GROUP_CHAT","recipients","sendEmailInvitationToGroupChatEvent","GROUP_CHAT_INVITE_SENT","isEmailInvitationToGroupChatSent","isCustomerReconnectSuccessPayloadData"],"sourceRoot":""}