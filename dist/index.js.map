{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@brandembassy/chat-web-sdk/webpack/universalModuleDefinition","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/isoString.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/misc.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/timezone.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/query/queryParameters.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/Logger.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/eventTargetPolyfill/EventTargetPolyfill.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/index.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/pushUpdate/pushUpdateWebSocket.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/HeartBeatState.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/ReconnectingWebSocket.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/WebSocketClient.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/WebSocketClientEvent.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/initializeHeartbeat.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/node_modules/@brandembassy/be-javascript-utils/dist/collection/object.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/node_modules/@brandembassy/be-javascript-utils/dist/query/queryParameters.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/channel/ChannelInfo.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/user/BrowserFingerprint.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/contact/ContactStatus.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/http/headers.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/message/MessageDirection.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/message/MessageType.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/post/case/CaseStatus.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType.js","webpack://@brandembassy/chat-web-sdk/external umd \"ua-parser-js\"","webpack://@brandembassy/chat-web-sdk/webpack/bootstrap","webpack://@brandembassy/chat-web-sdk/webpack/runtime/compat get default export","webpack://@brandembassy/chat-web-sdk/webpack/runtime/define property getters","webpack://@brandembassy/chat-web-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@brandembassy/chat-web-sdk/webpack/runtime/make namespace object","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isNull.js","webpack://@brandembassy/chat-web-sdk/./src/variables/VariableStorage.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/accessTokenStorage.ts","webpack://@brandembassy/chat-web-sdk/./src/error/ChatSDKError.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/AuthorizationError.ts","webpack://@brandembassy/chat-web-sdk/./src/env/version.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/generateId.ts","webpack://@brandembassy/chat-web-sdk/./src/visitor/createVisitorPayload.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_isPrototype.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_nativeKeys.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_overArg.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseKeys.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_freeGlobal.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_root.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Symbol.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getRawTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_objectToString.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseGetTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isObject.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isFunction.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_coreJsData.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_isMasked.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_toSource.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsNative.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getNative.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getValue.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_DataView.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Map.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Promise.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Set.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_WeakMap.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isObjectLike.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsArguments.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArguments.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isLength.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isBuffer.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/stubFalse.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsTypedArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_nodeUtil.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isTypedArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseUnary.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isEmpty.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArrayLike.js","webpack://@brandembassy/chat-web-sdk/./src/request/requestQueue.ts","webpack://@brandembassy/chat-web-sdk/./src/request/makeRequest.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/splitName.ts","webpack://@brandembassy/chat-web-sdk/./src/customField/CustomFields.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/Customer.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/setCustomerCustomFieldsPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/customerIdentityPayload.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isNil.js","webpack://@brandembassy/chat-web-sdk/./src/utils/getBrandIdAndChannelId.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isUndefined.js","webpack://@brandembassy/chat-web-sdk/./src/sockets/EventPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/event/sendChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/createReconnectPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/handleRefreshToken.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isAuthorizationTokenGeneratedPostbackData.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isAuthSuccessEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isTokenRefreshedSuccessResponse.ts","webpack://@brandembassy/chat-web-sdk/./src/browserFingerprint/getBrowserFingerprint.ts","webpack://@brandembassy/chat-web-sdk/./src/error/SdkVersionNotSupported.ts","webpack://@brandembassy/chat-web-sdk/./src/event/middleware/sdkVersionCheck.ts","webpack://@brandembassy/chat-web-sdk/./src/request/getErrorResponseData.ts","webpack://@brandembassy/chat-web-sdk/./src/channel/fetchChannelInfo.ts","webpack://@brandembassy/chat-web-sdk/./src/env/Environments.ts","webpack://@brandembassy/chat-web-sdk/./src/env/setEnvironmentEndpoints.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEventMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEventTarget.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/agentTyping.ts","webpack://@brandembassy/chat-web-sdk/./src/event/normalizeEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/event/middleware/ChatEventMapper.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/assignedAgentChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactCreated.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactStatusChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactToRoutingQueueAssignmentChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/livechatRecovered.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/threadRecovered.ts","webpack://@brandembassy/chat-web-sdk/./src/message/MessageSuccessEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/SendMessageFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOfflineMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/cachedTransactionToken.ts","webpack://@brandembassy/chat-web-sdk/./src/sockets/WebSocketClientError.ts","webpack://@brandembassy/chat-web-sdk/./src/sockets/WsEventTarget.ts","webpack://@brandembassy/chat-web-sdk/./src/sockets/WebSocketClient.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/UploadAttachmentError.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/sendAttachments.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/createPayloadForAttachmentUpload.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/localFileReader.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/uploadAttachment.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactStatusChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactCreatedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactToRoutingQueueAssignmentChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactRecipientsChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/createMessageData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/loadMoreMessagesEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/loadMoreMessagesPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/error/AbortError.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/AbortablePromise.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/ArchiveThreadFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getAuthor.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageCreatedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageSentEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageReadChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/GetMetadataFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isLoadMetadataSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isRecoverSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isThreadArchivedSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/LoadMoreMessagesFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/recoverThreadPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/SetThreadNameFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/ThreadRecoverFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/Thread.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/assertNonEmptyTextMessageContent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getTextMessageContent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getPostbackMessageContent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOutboundMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOutboundMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/lastMessageSeenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/typingEvents.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/metadata.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/threadEventHandler.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/setThreadCustomFieldsPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/archiveThread.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/updateThread.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessagePreviewPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/transcript.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/recoverLivechatThreadPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/LivechatThread.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/createEndThreadPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isThreadListFetchedPostbackData.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeContactId.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeContactIdMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/last.js","webpack://@brandembassy/chat-web-sdk/./src/thread/storeThreadScrollData.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeThreadScrollDataMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/assert.ts","webpack://@brandembassy/chat-web-sdk/./src/ChatSdk.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/createRefreshTokenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/env/appName.ts","webpack://@brandembassy/chat-web-sdk/./src/channel/fetchChannelAvailability.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/authorizationReconnect.ts","webpack://@brandembassy/chat-web-sdk/./src/channel/handleBasicChannelInfo.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/authorizationPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/isCustomerIdentityIdValid.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/generateAuthorizationTokenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOfflineMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/request/getEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/request/isS3ChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/request/messageHandler.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAssignedAgentChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAgentTypingStartedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAgentTypingEndedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/isSecuredSession.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/getTransactionToken.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/isSetPositionInQueueEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/CreateInvitationFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/createInvitation.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/JoinGroupChatFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/joinGroupChat.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/leaveGroupChat.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/SendEmailInvitaionFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/sendEmailInvitation.ts","webpack://@brandembassy/chat-web-sdk/./src/storage/CacheStorageError.ts","webpack://@brandembassy/chat-web-sdk/./src/storage/CacheStorage.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/CustomerReconnectSuccessPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"ua-parser-js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"ua-parser-js\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"ua-parser-js\")) : factory(root[\"ua-parser-js\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__198__) => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseTimestampFromISO8601String = exports.fromISOString = exports.isISOStringDateWithTimezoneOffset = exports.toISOStringWithTimezoneOffset = exports.toISOStringWithMilliseconds = exports.toISOString = void 0;\nvar timezone_1 = require(\"./timezone\");\nvar misc_1 = require(\"./misc\");\nvar toISOString = function (date) {\n    return (date.getUTCFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCSeconds()) +\n        '+00:00');\n};\nexports.toISOString = toISOString;\nvar toISOStringWithMilliseconds = function (date) {\n    return (date.getUTCFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCSeconds()) +\n        '.' +\n        (date.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        '+00:00');\n};\nexports.toISOStringWithMilliseconds = toISOStringWithMilliseconds;\nvar toISOStringWithTimezoneOffset = function (date) {\n    return (date.getFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getSeconds()) +\n        (0, timezone_1.getTimezoneISOOffset)(date));\n};\nexports.toISOStringWithTimezoneOffset = toISOStringWithTimezoneOffset;\nfunction isISOStringDateWithTimezoneOffset(isoDateString) {\n    return /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})$/.test(isoDateString);\n}\nexports.isISOStringDateWithTimezoneOffset = isISOStringDateWithTimezoneOffset;\nfunction fromISOString(isoString) {\n    var milliseconds = Date.parse(isoString);\n    if (isNaN(milliseconds)) {\n        milliseconds = parseTimestampFromISO8601String(isoString);\n    }\n    return new Date(milliseconds);\n}\nexports.fromISOString = fromISOString;\nfunction parseTimestampFromISO8601String(isoString) {\n    var day;\n    var rx = /^(\\d{4}-\\d\\d-\\d\\d([tT][\\d:.]*)?)([zZ]|([+-])(\\d\\d):?(\\d\\d))?$/;\n    var parsedDate = rx.exec(isoString) || [];\n    if (parsedDate[1]) {\n        day = parsedDate[1].split(/\\D/).map(function (itm) { return parseInt(itm, 10) || 0; });\n        day[1] -= 1;\n        //@ts-ignore\n        day = new Date(Date.UTC.apply(Date, day));\n        if (!day.getDate()) {\n            return NaN;\n        }\n        if (parsedDate[5]) {\n            var tz = parseInt(parsedDate[5], 10) * 60;\n            if (parsedDate[6]) {\n                tz += parseInt(parsedDate[6], 10);\n            }\n            if (parsedDate[4] === '+') {\n                tz *= -1;\n            }\n            if (tz) {\n                day.setUTCMinutes(day.getUTCMinutes() + tz);\n            }\n        }\n        return day.getTime();\n    }\n    return NaN;\n}\nexports.parseTimestampFromISO8601String = parseTimestampFromISO8601String;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTimeInMinutes = exports.getTimeInMilliseconds = exports.getTimeInSeconds = exports.padDateTimeUnit = void 0;\nvar padDateTimeUnit = function (dateTimeUnit) {\n    var norm = Math.abs(Math.floor(typeof dateTimeUnit === 'string' ? Number(dateTimeUnit) : dateTimeUnit));\n    return (norm < 10 ? '0' : '') + norm;\n};\nexports.padDateTimeUnit = padDateTimeUnit;\nvar getTimeInSeconds = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d;\n    return hours * 60 * 60 + minutes * 60 + seconds;\n};\nexports.getTimeInSeconds = getTimeInSeconds;\nvar getTimeInMilliseconds = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d, _e = _a.milliseconds, milliseconds = _e === void 0 ? 0 : _e;\n    return (0, exports.getTimeInSeconds)({ hours: hours, minutes: minutes, seconds: seconds }) * 1000 + milliseconds;\n};\nexports.getTimeInMilliseconds = getTimeInMilliseconds;\nvar getTimeInMinutes = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d;\n    return (0, exports.getTimeInSeconds)({ hours: hours, minutes: minutes, seconds: seconds }) / 60;\n};\nexports.getTimeInMinutes = getTimeInMinutes;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTimezoneISOOffset = void 0;\nvar misc_1 = require(\"./misc\");\nvar getTimezoneISOOffset = function (date) {\n    if (date === void 0) { date = new Date(); }\n    var tzo = date.getTimezoneOffset();\n    var dif = tzo > 0 ? '-' : '+';\n    return \"\".concat(dif).concat((0, misc_1.padDateTimeUnit)(tzo / 60), \":\").concat((0, misc_1.padDateTimeUnit)(tzo % 60));\n};\nexports.getTimezoneISOOffset = getTimezoneISOOffset;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createQueryParametersAsString = void 0;\nfunction createQueryParametersAsString(queryParameters) {\n    return Object.keys(queryParameters)\n        .filter(function (key) { return queryParameters[key] !== null; })\n        .map(function (key) {\n        return [key, queryParameters[key]].map(encodeURIComponent).join('=');\n    })\n        .join('&');\n}\nexports.createQueryParametersAsString = createQueryParametersAsString;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LogLevels = void 0;\nvar LogLevels;\n(function (LogLevels) {\n    LogLevels[\"ERROR\"] = \"error\";\n    LogLevels[\"INFO\"] = \"info\";\n    LogLevels[\"WARN\"] = \"warn\";\n})(LogLevels = exports.LogLevels || (exports.LogLevels = {}));\n//# sourceMappingURL=Logger.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventTargetPolyfill = void 0;\nvar EventTargetPolyfill = (function () {\n    function EventTargetPolyfill() {\n        this.listeners = {};\n    }\n    EventTargetPolyfill.prototype.addEventListener = function (type, callback) {\n        if (!(type in this.listeners)) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(callback);\n    };\n    EventTargetPolyfill.prototype.removeEventListener = function (type, callback) {\n        if (!(type in this.listeners)) {\n            return;\n        }\n        var stack = this.listeners[type];\n        for (var i = 0, l = stack.length; i < l; i++) {\n            if (stack[i] === callback) {\n                stack.splice(i, 1);\n                return;\n            }\n        }\n    };\n    EventTargetPolyfill.prototype.dispatchEvent = function (event) {\n        if (!(event.type in this.listeners)) {\n            return true;\n        }\n        var stack = this.listeners[event.type].slice();\n        for (var i = 0, l = stack.length; i < l; i++) {\n            stack[i].call(this, event);\n        }\n        return !event.defaultPrevented;\n    };\n    return EventTargetPolyfill;\n}());\nexports.EventTargetPolyfill = EventTargetPolyfill;\n//# sourceMappingURL=EventTargetPolyfill.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketClientEvent = exports.WebSocketClient = exports.EventTargetPolyfill = exports.HeartBeatState = void 0;\nvar HeartBeatState_1 = require(\"./websocket/HeartBeatState\");\nObject.defineProperty(exports, \"HeartBeatState\", { enumerable: true, get: function () { return HeartBeatState_1.HeartBeatState; } });\nvar EventTargetPolyfill_1 = require(\"./eventTargetPolyfill/EventTargetPolyfill\");\nObject.defineProperty(exports, \"EventTargetPolyfill\", { enumerable: true, get: function () { return EventTargetPolyfill_1.EventTargetPolyfill; } });\nvar WebSocketClient_1 = require(\"./websocket/WebSocketClient\");\nObject.defineProperty(exports, \"WebSocketClient\", { enumerable: true, get: function () { return WebSocketClient_1.WebSocketClient; } });\nvar WebSocketClientEvent_1 = require(\"./websocket/WebSocketClientEvent\");\nObject.defineProperty(exports, \"WebSocketClientEvent\", { enumerable: true, get: function () { return WebSocketClientEvent_1.WebSocketClientEvent; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPushUpdateWebSocket = exports.setupSocketConnection = void 0;\nvar queryParameters_1 = require(\"@brandembassy/be-javascript-utils/dist/query/queryParameters\");\nvar initializeHeartbeat_1 = require(\"../websocket/initializeHeartbeat\");\nvar object_1 = require(\"@brandembassy/be-javascript-utils/dist/collection/object\");\nvar WebSocketClient_1 = require(\"../websocket/WebSocketClient\");\nvar socket = null;\nfunction createWebSocketUrlWithProtocol(webSocketUrlWithoutProtocol, forceSecureProtocol, query) {\n    if (query === void 0) { query = {}; }\n    var queryString = (0, queryParameters_1.createQueryParametersAsString)((0, object_1.removeEmptyValuesFromObject)(query));\n    var protocol = forceSecureProtocol || window.location.protocol === 'https:'\n        ? \"wss:\"\n        : 'ws:';\n    if (queryString.length === 0) {\n        return \"\".concat(protocol, \"//\").concat(webSocketUrlWithoutProtocol);\n    }\n    var url = new URL(\"\".concat(protocol, \"//\").concat(webSocketUrlWithoutProtocol));\n    if (url.search.length > 0) {\n        return \"\".concat(protocol, \"//\").concat(webSocketUrlWithoutProtocol, \"&\").concat(queryString);\n    }\n    return \"\".concat(protocol, \"//\").concat(webSocketUrlWithoutProtocol, \"?\").concat(queryString);\n}\nvar defaultConnectionOptions = {\n    forceSecureProtocol: false,\n    heartbeatAfterAuthorize: false,\n    maxRetries: 20,\n    maxReconnectionDelay: 1000,\n};\nvar setupSocketConnection = function (webSocketUrlWithoutProtocol, options) {\n    if (options === void 0) { options = {}; }\n    if (typeof options !== 'object') {\n        throw new TypeError(\"Options parameter must be an object not a \".concat(typeof options));\n    }\n    var connectionOptions = __assign(__assign({}, defaultConnectionOptions), options);\n    var forceSecureProtocol = connectionOptions.forceSecureProtocol, heartbeatAfterAuthorize = connectionOptions.heartbeatAfterAuthorize, tenantId = connectionOptions.tenantId, userId = connectionOptions.userId, brandId = connectionOptions.brandId, wscOptions = __rest(connectionOptions, [\"forceSecureProtocol\", \"heartbeatAfterAuthorize\", \"tenantId\", \"userId\", \"brandId\"]);\n    var url = createWebSocketUrlWithProtocol(webSocketUrlWithoutProtocol, forceSecureProtocol, { tenantId: tenantId, userId: userId, brandId: brandId });\n    socket = new WebSocketClient_1.WebSocketClient(url, undefined, wscOptions);\n    (0, initializeHeartbeat_1.initializeHeartbeat)(heartbeatAfterAuthorize, socket, options);\n    return socket;\n};\nexports.setupSocketConnection = setupSocketConnection;\nvar getPushUpdateWebSocket = function () { return socket; };\nexports.getPushUpdateWebSocket = getPushUpdateWebSocket;\n//# sourceMappingURL=pushUpdateWebSocket.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeartBeatState = void 0;\nvar HeartBeatState;\n(function (HeartBeatState) {\n    HeartBeatState[\"DIED\"] = \"died\";\n    HeartBeatState[\"DYING\"] = \"dying\";\n    HeartBeatState[\"LIVING\"] = \"living\";\n})(HeartBeatState = exports.HeartBeatState || (exports.HeartBeatState = {}));\n//# sourceMappingURL=HeartBeatState.js.map","\"use strict\";\n/*!\n * Reconnecting WebSocket\n * by Pedro Ladaria <pedro.ladaria@gmail.com>\n * https://github.com/pladaria/reconnecting-websocket\n * License MIT\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReconnectingWebSocket = void 0;\nvar DEFAULT = {\n    maxReconnectionDelay: 10000,\n    minReconnectionDelay: 1000 + Math.random() * 4000,\n    minUptime: 5000,\n    reconnectionDelayGrowFactor: 1.3,\n    connectionTimeout: 4000,\n    maxRetries: Infinity,\n    maxEnqueuedMessages: Infinity,\n    startClosed: false,\n    debug: false,\n};\nvar ReconnectingWebSocket = (function () {\n    function ReconnectingWebSocket(url, protocols, options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        this.onclose = null;\n        this.onerror = null;\n        this.onmessage = null;\n        this.onopen = null;\n        this._listeners = {\n            error: [],\n            message: [],\n            open: [],\n            close: [],\n        };\n        this._shouldReconnect = true;\n        this._connectLock = false;\n        this._closeCalled = false;\n        this._messageQueue = [];\n        this._retryCount = -1;\n        this._binaryType = 'blob';\n        this._handleOpen = function (event) {\n            _this._debug('open event');\n            var _a = _this._options.minUptime, minUptime = _a === void 0 ? DEFAULT.minUptime : _a;\n            clearTimeout(_this._connectTimeout);\n            _this._uptimeTimeout = window.setTimeout(function () { return _this._acceptOpen(); }, minUptime);\n            _this._ws.binaryType = _this._binaryType;\n            _this._messageQueue.forEach(function (message) { var _a; return (_a = _this._ws) === null || _a === void 0 ? void 0 : _a.send(message); });\n            _this._messageQueue = [];\n            if (_this.onopen) {\n                _this.onopen(event);\n            }\n            _this._listeners.open.forEach(function (listener) {\n                return _this._callEventListener(event, listener);\n            });\n        };\n        this._handleMessage = function (event) {\n            _this._debug('message event');\n            if (_this.onmessage) {\n                _this.onmessage(event);\n            }\n            _this._listeners.message.forEach(function (listener) {\n                return _this._callEventListener(event, listener);\n            });\n        };\n        this._handleError = function (event) {\n            _this._debug('error event', event);\n            _this._disconnect();\n            if (_this.onerror) {\n                _this.onerror(event);\n            }\n            _this._debug('exec error listeners');\n            _this._listeners.error.forEach(function (listener) {\n                return _this._callEventListener(event, listener);\n            });\n            _this._connect();\n        };\n        this._handleClose = function (event) {\n            _this._debug('close event');\n            _this._clearTimeouts();\n            if (_this._shouldReconnect) {\n                _this._connect();\n            }\n            if (_this.onclose) {\n                _this.onclose(event);\n            }\n            _this._listeners.close.forEach(function (listener) {\n                return _this._callEventListener(event, listener);\n            });\n        };\n        this._url = url;\n        this._protocols = protocols;\n        this._options = options;\n        this._maxRetries =\n            typeof options.maxRetries === 'number'\n                ? options.maxRetries\n                : DEFAULT.maxRetries;\n        if (this._options.startClosed) {\n            this._shouldReconnect = false;\n        }\n        this._connect();\n    }\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"retryCount\", {\n        get: function () {\n            return Math.max(this._retryCount, 0);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"binaryType\", {\n        get: function () {\n            return this._ws ? this._ws.binaryType : this._binaryType;\n        },\n        set: function (value) {\n            this._binaryType = value;\n            if (this._ws) {\n                this._ws.binaryType = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"bufferedAmount\", {\n        get: function () {\n            var bytes = this._messageQueue.reduce(function (acc, message) {\n                if (typeof message === 'string') {\n                    acc += message.length;\n                }\n                else if (message instanceof Blob) {\n                    acc += message.size;\n                }\n                else {\n                    acc += message.byteLength;\n                }\n                return acc;\n            }, 0);\n            return bytes + (this._ws ? this._ws.bufferedAmount : 0);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"extensions\", {\n        get: function () {\n            return this._ws ? this._ws.extensions : '';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"protocol\", {\n        get: function () {\n            return this._ws ? this._ws.protocol : '';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"readyState\", {\n        get: function () {\n            if (this._ws) {\n                return this._ws.readyState;\n            }\n            return this._options.startClosed ? WebSocket.CLOSED : WebSocket.CONNECTING;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"url\", {\n        get: function () {\n            return this._ws ? this._ws.url : '';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ReconnectingWebSocket.prototype.close = function (code, reason) {\n        if (code === void 0) { code = 1000; }\n        this._closeCalled = true;\n        this._shouldReconnect = false;\n        this._clearTimeouts();\n        if (!this._ws) {\n            this._debug('close enqueued: no ws instance');\n            return;\n        }\n        if (this._ws.readyState === WebSocket.CLOSED) {\n            this._debug('close: already closed');\n            return;\n        }\n        this._ws.close(code, reason);\n    };\n    ReconnectingWebSocket.prototype.reconnect = function (code, reason) {\n        this._shouldReconnect = true;\n        this._closeCalled = false;\n        this._retryCount = -1;\n        if (!this._ws || this._ws.readyState === WebSocket.CLOSED) {\n            this._connect();\n        }\n        else {\n            this._disconnect(code, reason);\n            this._connect();\n        }\n    };\n    ReconnectingWebSocket.prototype.send = function (data) {\n        if (this._ws && this._ws.readyState === WebSocket.OPEN) {\n            this._debug('send', data);\n            this._ws.send(data);\n        }\n        else {\n            var _a = this._options.maxEnqueuedMessages, maxEnqueuedMessages = _a === void 0 ? DEFAULT.maxEnqueuedMessages : _a;\n            if (this._messageQueue.length < maxEnqueuedMessages) {\n                this._debug('enqueue', data);\n                this._messageQueue.push(data);\n            }\n        }\n    };\n    ReconnectingWebSocket.prototype.addEventListener = function (type, listener) {\n        if (this._listeners[type]) {\n            this._listeners[type].push(listener);\n        }\n    };\n    ReconnectingWebSocket.prototype.dispatchEvent = function (event) {\n        var e_1, _a;\n        var listeners = this._listeners[event.type];\n        if (listeners) {\n            try {\n                for (var listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {\n                    var listener = listeners_1_1.value;\n                    this._callEventListener(event, listener);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (listeners_1_1 && !listeners_1_1.done && (_a = listeners_1.return)) _a.call(listeners_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        return true;\n    };\n    ReconnectingWebSocket.prototype.removeEventListener = function (type, listener) {\n        if (this._listeners[type]) {\n            this._listeners[type] = this._listeners[type].filter(function (l) { return l !== listener; });\n        }\n    };\n    ReconnectingWebSocket.prototype.setMaxRetires = function (maxRetries) {\n        this._maxRetries = maxRetries;\n    };\n    ReconnectingWebSocket.prototype._debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this._options.debug) {\n            console.log.apply(console, __spreadArray(['RWS>'], __read(args), false));\n        }\n    };\n    ReconnectingWebSocket.prototype._getNextDelay = function () {\n        var _a = this._options, _b = _a.reconnectionDelayGrowFactor, reconnectionDelayGrowFactor = _b === void 0 ? DEFAULT.reconnectionDelayGrowFactor : _b, _c = _a.minReconnectionDelay, minReconnectionDelay = _c === void 0 ? DEFAULT.minReconnectionDelay : _c, _d = _a.maxReconnectionDelay, maxReconnectionDelay = _d === void 0 ? DEFAULT.maxReconnectionDelay : _d;\n        var delay = 0;\n        if (this._retryCount > 0) {\n            delay =\n                minReconnectionDelay *\n                    Math.pow(reconnectionDelayGrowFactor, this._retryCount - 1);\n            if (delay > maxReconnectionDelay) {\n                delay = maxReconnectionDelay;\n            }\n        }\n        this._debug('next delay', delay);\n        return delay;\n    };\n    ReconnectingWebSocket.prototype._wait = function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            setTimeout(resolve, _this._getNextDelay());\n        });\n    };\n    ReconnectingWebSocket.prototype._getNextUrl = function (urlProvider) {\n        if (typeof urlProvider === 'string') {\n            return Promise.resolve(urlProvider);\n        }\n        if (typeof urlProvider === 'function') {\n            var url = urlProvider();\n            if (typeof url === 'string') {\n                return Promise.resolve(url);\n            }\n            if (typeof url.then !== 'undefined') {\n                return url;\n            }\n        }\n        throw Error('Invalid URL');\n    };\n    ReconnectingWebSocket.prototype._connect = function () {\n        var _this = this;\n        if (this._connectLock || !this._shouldReconnect) {\n            return;\n        }\n        this._connectLock = true;\n        var _a = this._options.connectionTimeout, connectionTimeout = _a === void 0 ? DEFAULT.connectionTimeout : _a;\n        if (this._retryCount >= this._maxRetries) {\n            this._debug('max retries reached', this._retryCount, '>=', this._maxRetries);\n            return;\n        }\n        this._retryCount++;\n        this._debug('connect', this._retryCount);\n        this._removeListeners();\n        this._wait()\n            .then(function () { return _this._getNextUrl(_this._url); })\n            .then(function (url) {\n            if (_this._closeCalled) {\n                _this._connectLock = false;\n                return;\n            }\n            _this._debug('connect', { url: url, protocols: _this._protocols });\n            _this._ws = _this._protocols\n                ? new WebSocket(url, _this._protocols)\n                : new WebSocket(url);\n            _this._ws.binaryType = _this._binaryType;\n            _this._connectLock = false;\n            _this._addListeners();\n            _this._connectTimeout = window.setTimeout(function () { return _this._handleTimeout(); }, connectionTimeout);\n        })\n            .catch(function (err) {\n            _this._connectLock = false;\n            _this._handleError(new ErrorEvent(err.message));\n        });\n    };\n    ReconnectingWebSocket.prototype._handleTimeout = function () {\n        this._debug('timeout event');\n        this._handleError(new ErrorEvent('TIMEOUT'));\n    };\n    ReconnectingWebSocket.prototype._disconnect = function (code, reason) {\n        if (code === void 0) { code = 1000; }\n        this._clearTimeouts();\n        if (!this._ws) {\n            return;\n        }\n        this._removeListeners();\n        try {\n            this._ws.close(code, reason);\n            this._handleClose(new CloseEvent('CLOSE', { code: code, reason: reason }));\n        }\n        catch (error) {\n        }\n    };\n    ReconnectingWebSocket.prototype._acceptOpen = function () {\n        this._debug('accept open');\n        this._retryCount = 0;\n    };\n    ReconnectingWebSocket.prototype._callEventListener = function (event, listener) {\n        if ('handleEvent' in listener) {\n            listener.handleEvent(event);\n        }\n        else {\n            listener(event);\n        }\n    };\n    ReconnectingWebSocket.prototype._removeListeners = function () {\n        if (!this._ws) {\n            return;\n        }\n        this._debug('removeListeners');\n        this._ws.removeEventListener('open', this._handleOpen);\n        this._ws.removeEventListener('close', this._handleClose);\n        this._ws.removeEventListener('message', this._handleMessage);\n        this._ws.removeEventListener('error', this._handleError);\n    };\n    ReconnectingWebSocket.prototype._addListeners = function () {\n        if (!this._ws) {\n            return;\n        }\n        this._debug('addListeners');\n        this._ws.addEventListener('open', this._handleOpen);\n        this._ws.addEventListener('close', this._handleClose);\n        this._ws.addEventListener('message', this._handleMessage);\n        this._ws.addEventListener('error', this._handleError);\n    };\n    ReconnectingWebSocket.prototype._clearTimeouts = function () {\n        clearTimeout(this._connectTimeout);\n        clearTimeout(this._uptimeTimeout);\n    };\n    return ReconnectingWebSocket;\n}());\nexports.ReconnectingWebSocket = ReconnectingWebSocket;\n//# sourceMappingURL=ReconnectingWebSocket.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketClient = exports.HEART_BEAT_CHECK_TIMEOUT = exports.HEART_BEAT_INTERVAL = void 0;\nvar Logger_1 = require(\"../Logger\");\nvar ReconnectingWebSocket_1 = require(\"./ReconnectingWebSocket\");\nvar EventTargetPolyfill_1 = require(\"../eventTargetPolyfill/EventTargetPolyfill\");\nvar HeartBeatState_1 = require(\"./HeartBeatState\");\nvar WebSocketClientEvent_1 = require(\"./WebSocketClientEvent\");\nexports.HEART_BEAT_INTERVAL = 15000;\nexports.HEART_BEAT_CHECK_TIMEOUT = exports.HEART_BEAT_INTERVAL * 3;\nvar HEART_BEAT_RESPONSE = 'pong';\nvar HEART_BEAT_ACTION_NAME = 'heartbeat';\nvar WebSocketClient = (function (_super) {\n    __extends(WebSocketClient, _super);\n    function WebSocketClient(url, protocols, options) {\n        var _this = _super.call(this) || this;\n        _this.heartBeatTimeout = null;\n        _this.heartBeatCheckTimeout = null;\n        _this.enableDebugMode = function () {\n            if (!_this.debugMode) {\n                _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--loggerEnabled');\n            }\n            _this.debugMode = true;\n        };\n        _this.disableDebugMode = function () {\n            _this.debugMode = false;\n        };\n        _this.log = function (level, message, args) {\n            if (_this.debugMode && _this.logger) {\n                _this.logger[level](message, args);\n            }\n        };\n        _this.sendHeartBeat = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--sendHeartBeat');\n            _this.send(JSON.stringify({ action: HEART_BEAT_ACTION_NAME }));\n        };\n        _this.handleHeartBeatResponse = function () {\n            if (_this.heartBeatState === HeartBeatState_1.HeartBeatState.DYING) {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.LIVING;\n                _this.dispatchHeartBeatState();\n            }\n            _this.setHeartBeatCheckTimeout();\n        };\n        _this.setHeartBeatCheckTimeout = function () {\n            if (_this.heartBeatCheckTimeout !== null) {\n                clearTimeout(_this.heartBeatCheckTimeout);\n            }\n            _this.heartBeatCheckTimeout = setTimeout(function () {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DYING;\n                _this.dispatchHeartBeatState();\n            }, exports.HEART_BEAT_CHECK_TIMEOUT);\n        };\n        _this.dispatchHeartBeatState = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--dispatchHeartBeatState', [\n                { heartbeatState: _this.heartBeatState },\n            ]);\n            if (_this.heartBeatState !== null) {\n                _this.dispatchEvent(new CustomEvent(_this.heartBeatState));\n            }\n        };\n        _this.isHeartBeatActive = function () { return _this.heartBeatState !== null; };\n        _this.heartBeatState = null;\n        _this.debugMode = false;\n        _this.socket = new ReconnectingWebSocket_1.ReconnectingWebSocket(url, protocols, options);\n        _this.socket.onopen = function () {\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.OPEN));\n        };\n        if (options === null || options === void 0 ? void 0 : options.logger) {\n            _this.logger = options.logger;\n        }\n        _this.socket.onclose = function (closeEvent) {\n            if (_this.socket.retryCount === (options === null || options === void 0 ? void 0 : options.maxRetries)) {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DIED;\n            }\n            else {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DYING;\n            }\n            _this.dispatchHeartBeatState();\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.CLOSE, { detail: closeEvent }));\n        };\n        _this.socket.onmessage = function (event) {\n            _this.handleHeartBeatResponse();\n            if (JSON.parse(event.data) !== HEART_BEAT_RESPONSE) {\n                _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--onmessage', [event]);\n                _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.MESSAGE, { detail: event }));\n            }\n        };\n        _this.socket.onerror = function (event) {\n            _this.log(Logger_1.LogLevels.ERROR, 'websocket-push-updates--onError', [event]);\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.ERROR, { detail: event }));\n        };\n        return _this;\n    }\n    WebSocketClient.prototype.send = function (data) {\n        this.socket.send(data);\n    };\n    WebSocketClient.prototype.startHeartBeat = function () {\n        var _this = this;\n        this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--startHeartBeat', [\n            { interval: exports.HEART_BEAT_INTERVAL },\n        ]);\n        var heartBeatCallback = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--heartBeatCallback');\n            _this.sendHeartBeat();\n            _this.heartBeatTimeout = setTimeout(heartBeatCallback, exports.HEART_BEAT_INTERVAL);\n        };\n        this.setHeartBeatCheckTimeout();\n        heartBeatCallback();\n        this.heartBeatState = HeartBeatState_1.HeartBeatState.LIVING;\n    };\n    WebSocketClient.prototype.stopHeartBeat = function () {\n        this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--stopHeartBeat');\n        if (this.heartBeatTimeout !== null) {\n            clearTimeout(this.heartBeatTimeout);\n        }\n        if (this.heartBeatCheckTimeout !== null) {\n            clearTimeout(this.heartBeatCheckTimeout);\n        }\n        this.heartBeatState = null;\n    };\n    return WebSocketClient;\n}(EventTargetPolyfill_1.EventTargetPolyfill));\nexports.WebSocketClient = WebSocketClient;\n//# sourceMappingURL=WebSocketClient.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketClientEvent = void 0;\nvar WebSocketClientEvent;\n(function (WebSocketClientEvent) {\n    WebSocketClientEvent[\"CLOSE\"] = \"close\";\n    WebSocketClientEvent[\"ERROR\"] = \"error\";\n    WebSocketClientEvent[\"MESSAGE\"] = \"message\";\n    WebSocketClientEvent[\"OPEN\"] = \"open\";\n})(WebSocketClientEvent = exports.WebSocketClientEvent || (exports.WebSocketClientEvent = {}));\n//# sourceMappingURL=WebSocketClientEvent.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initializeHeartbeat = void 0;\nvar WebSocketClientEvent_1 = require(\"./WebSocketClientEvent\");\nfunction initializeHeartbeat(heartbeatAfterAuthorize, socket, connectionOptions) {\n    if (!heartbeatAfterAuthorize) {\n        socket.startHeartBeat();\n        return;\n    }\n    var handleMessage = function (event) {\n        var _a;\n        try {\n            var payload = JSON.parse(event.detail.data);\n            if ((payload === null || payload === void 0 ? void 0 : payload.authorizationStatus) === 'authorized') {\n                socket.startHeartBeat();\n                socket.removeEventListener(WebSocketClientEvent_1.WebSocketClientEvent.MESSAGE, handleMessage);\n            }\n        }\n        catch (error) {\n            (_a = connectionOptions === null || connectionOptions === void 0 ? void 0 : connectionOptions.logger) === null || _a === void 0 ? void 0 : _a.warn('JSON cannot be parsed during the heartbeat initialization process.');\n        }\n    };\n    socket.addEventListener(WebSocketClientEvent_1.WebSocketClientEvent.MESSAGE, handleMessage);\n}\nexports.initializeHeartbeat = initializeHeartbeat;\n//# sourceMappingURL=initializeHeartbeat.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeEmptyValuesFromObject = void 0;\nfunction removeEmptyValuesFromObject(objectData) {\n    return Object.entries(objectData)\n        .filter(function (_a) {\n        var key = _a[0], value = _a[1];\n        return value !== undefined && value !== null;\n    })\n        .reduce(function (result, _a) {\n        var key = _a[0], value = _a[1];\n        result[key] = value;\n        return result;\n    }, {});\n}\nexports.removeEmptyValuesFromObject = removeEmptyValuesFromObject;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createQueryParametersAsString = void 0;\nfunction createQueryParametersAsString(queryParameters) {\n    return Object.keys(queryParameters)\n        .filter(function (key) { return queryParameters[key] !== null; })\n        .map(function (key) {\n        return [key, queryParameters[key]].map(encodeURIComponent).join('=');\n    })\n        .join('&');\n}\nexports.createQueryParametersAsString = createQueryParametersAsString;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AwsChatWindowEventActionRoute;\n(function (AwsChatWindowEventActionRoute) {\n    AwsChatWindowEventActionRoute[\"CHAT_WINDOW_EVENT\"] = \"chatWindowEvent\";\n    AwsChatWindowEventActionRoute[\"REGISTER\"] = \"register\";\n})(AwsChatWindowEventActionRoute = exports.AwsChatWindowEventActionRoute || (exports.AwsChatWindowEventActionRoute = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AwsInputEventType;\n(function (AwsInputEventType) {\n    AwsInputEventType[\"SENDER_TYPING_STARTED\"] = \"SenderTypingStarted\";\n    AwsInputEventType[\"SENDER_TYPING_ENDED\"] = \"SenderTypingEnded\";\n    AwsInputEventType[\"LOAD_MORE_MESSAGES\"] = \"LoadMoreMessages\";\n    AwsInputEventType[\"RECOVER_LIVECHAT\"] = \"RecoverLivechat\";\n    AwsInputEventType[\"RECOVER_THREAD\"] = \"RecoverThread\";\n    AwsInputEventType[\"SEND_MESSAGE\"] = \"SendMessage\";\n    AwsInputEventType[\"SEND_OUTBOUND\"] = \"SendOutbound\";\n    AwsInputEventType[\"SEND_OFFLINE_MESSAGE\"] = \"SendOfflineMessage\";\n    AwsInputEventType[\"SEND_PAGE_VIEWS\"] = \"SendPageViews\";\n    AwsInputEventType[\"SEND_CONSUMER_CUSTOM_FIELDS\"] = \"SetConsumerCustomFields\";\n    AwsInputEventType[\"SET_CONSUMER_CONTACT_CUSTOM_FIELD\"] = \"SetConsumerContactCustomFields\";\n    AwsInputEventType[\"MESSAGE_SEEN\"] = \"MessageSeenByConsumer\";\n    AwsInputEventType[\"SEND_TRANSCRIPT\"] = \"SendTranscript\";\n    AwsInputEventType[\"FETCH_THREAD_LIST\"] = \"FetchThreadList\";\n    AwsInputEventType[\"END_CONTACT\"] = \"EndContact\";\n    AwsInputEventType[\"EXECUTE_TRIGGER\"] = \"ExecuteTrigger\";\n    AwsInputEventType[\"AUTHORIZE_CONSUMER\"] = \"AuthorizeConsumer\";\n    AwsInputEventType[\"AUTHORIZE_CUSTOMER\"] = \"AuthorizeCustomer\";\n    AwsInputEventType[\"RECONNECT_CONSUMER\"] = \"ReconnectConsumer\";\n    AwsInputEventType[\"UPDATE_THREAD\"] = \"UpdateThread\";\n    AwsInputEventType[\"ARCHIVE_THREAD\"] = \"ArchiveThread\";\n    AwsInputEventType[\"LOAD_THREAD_METADATA\"] = \"LoadThreadMetadata\";\n    AwsInputEventType[\"REFRESH_TOKEN\"] = \"RefreshToken\";\n    AwsInputEventType[\"STORE_VISITOR\"] = \"StoreVisitor\";\n    AwsInputEventType[\"STORE_VISITOR_EVENTS\"] = \"StoreVisitorEvents\";\n    AwsInputEventType[\"CREATE_GROUP_CHAT_INVITE\"] = \"CreateInvitationToGroupChat\";\n    AwsInputEventType[\"SEND_EMAIL_INVITE_TO_GROUP_CHAT\"] = \"SendEmailInvitationToGroupChat\";\n    AwsInputEventType[\"JOIN_GROUP_CHAT\"] = \"JoinGroupChat\";\n    AwsInputEventType[\"LEAVE_GROUP_CHAT\"] = \"LeaveGroupChat\";\n    AwsInputEventType[\"GENERATE_AUTHORIZATION_TOKEN\"] = \"GenerateAuthorizationToken\";\n    AwsInputEventType[\"ADD_VISITOR_TAGS\"] = \"AddVisitorTags\";\n    AwsInputEventType[\"REMOVE_VISITOR_TAGS\"] = \"RemoveVisitorTags\";\n    AwsInputEventType[\"SEND_MESSAGE_PREVIEW\"] = \"SendMessagePreview\";\n})(AwsInputEventType = exports.AwsInputEventType || (exports.AwsInputEventType = {}));\nvar AwsResponseEventType;\n(function (AwsResponseEventType) {\n    AwsResponseEventType[\"LIVECHAT_RECOVERED\"] = \"LivechatRecovered\";\n    AwsResponseEventType[\"MORE_MESSAGES_LOADED\"] = \"MoreMessagesLoaded\";\n    AwsResponseEventType[\"OFFLINE_MESSAGE_SENT\"] = \"OfflineMessageSent\";\n    AwsResponseEventType[\"THREAD_LIST_FETCHED\"] = \"ThreadListFetched\";\n    AwsResponseEventType[\"THREAD_RECOVERED\"] = \"ThreadRecovered\";\n    AwsResponseEventType[\"TRANSCRIPT_SENT\"] = \"TranscriptSent\";\n    AwsResponseEventType[\"CONSUMER_AUTHORIZED\"] = \"ConsumerAuthorized\";\n    AwsResponseEventType[\"THREAD_METADATA_LOADED\"] = \"ThreadMetadataLoaded\";\n    AwsResponseEventType[\"SET_POSITION_IN_QUEUE\"] = \"SetPositionInQueue\";\n    AwsResponseEventType[\"GROUP_CHAT_INVITE_CREATED\"] = \"InvitationToGroupChatCreated\";\n    AwsResponseEventType[\"GROUP_CHAT_INVITE_SENT\"] = \"EmailInvitationToGroupChatSent\";\n    AwsResponseEventType[\"GROUP_CHAT_JOINED\"] = \"GroupChatJoined\";\n    AwsResponseEventType[\"TOKEN_REFRESHED\"] = \"TokenRefreshed\";\n    AwsResponseEventType[\"AUTHORIZATION_TOKEN_GENERATED\"] = \"AuthorizationTokenGenerated\";\n    AwsResponseEventType[\"THREAD_ARCHIVED\"] = \"ThreadArchived\";\n})(AwsResponseEventType = exports.AwsResponseEventType || (exports.AwsResponseEventType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ChannelAvailability;\n(function (ChannelAvailability) {\n    ChannelAvailability[\"ONLINE\"] = \"online\";\n    ChannelAvailability[\"OFFLINE\"] = \"offline\";\n})(ChannelAvailability = exports.ChannelAvailability || (exports.ChannelAvailability = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DeviceType;\n(function (DeviceType) {\n    DeviceType[\"DESKTOP\"] = \"desktop\";\n    DeviceType[\"MOBILE\"] = \"mobile\";\n    DeviceType[\"OTHER\"] = \"other\";\n    DeviceType[\"TABLET\"] = \"tablet\";\n})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));\nvar ApplicationType;\n(function (ApplicationType) {\n    ApplicationType[\"BROWSER\"] = \"browser\";\n})(ApplicationType = exports.ApplicationType || (exports.ApplicationType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CaseStatus_1 = require(\"../post/case/CaseStatus\");\nexports.ContactStatus = CaseStatus_1.CaseStatus;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CALLER_SERVICE_ID = 'X-Caller-Service-ID';\nexports.TRACE_ID = 'X-Trace-ID';\nexports.TRANSACTION_ID = 'X-Transaction-ID';\nexports.USER_AGENT = 'User-Agent';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MessageDirection;\n(function (MessageDirection) {\n    MessageDirection[\"INBOUND\"] = \"inbound\";\n    MessageDirection[\"OUTBOUND\"] = \"outbound\";\n})(MessageDirection = exports.MessageDirection || (exports.MessageDirection = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MessageType;\n(function (MessageType) {\n    MessageType[\"TEXT\"] = \"TEXT\";\n    MessageType[\"FILE\"] = \"FILE\";\n    MessageType[\"FORM\"] = \"FORM\";\n    MessageType[\"PLUGIN\"] = \"PLUGIN\";\n    MessageType[\"POSTBACK\"] = \"POSTBACK\";\n    MessageType[\"QUICK_REPLIES\"] = \"QUICK_REPLIES\";\n    MessageType[\"RICH_LINK\"] = \"RICH_LINK\";\n    MessageType[\"LIST_PICKER\"] = \"LIST_PICKER\";\n    MessageType[\"ADAPTIVE_CARD\"] = \"ADAPTIVE_CARD\";\n    MessageType[\"TIME_PICKER\"] = \"TIME_PICKER\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CaseStatus;\n(function (CaseStatus) {\n    CaseStatus[\"NEW\"] = \"new\";\n    CaseStatus[\"OPEN\"] = \"open\";\n    CaseStatus[\"PENDING\"] = \"pending\";\n    CaseStatus[\"ESCALATED\"] = \"escalated\";\n    CaseStatus[\"RESOLVED\"] = \"resolved\";\n    CaseStatus[\"CLOSED\"] = \"closed\";\n    CaseStatus[\"TRASHED\"] = \"trashed\";\n})(CaseStatus = exports.CaseStatus || (exports.CaseStatus = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PushUpdateEventType;\n(function (PushUpdateEventType) {\n    PushUpdateEventType[\"AUTHORIZE_CONSUMER\"] = \"AuthorizeConsumer\";\n    /** @deprecated use CONTACT_CREATED */\n    PushUpdateEventType[\"CASE_CREATED\"] = \"CaseCreated\";\n    /** @deprecated use ASSIGNED_AGENT_CHANGED */\n    PushUpdateEventType[\"CASE_INBOX_ASSIGNEE_CHANGED\"] = \"CaseInboxAssigneeChanged\";\n    /** @deprecated use CONTACT_STATUS_CHANGED */\n    PushUpdateEventType[\"CASE_STATUS_CHANGED\"] = \"CaseStatusChanged\";\n    /** @deprecated use CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED */\n    PushUpdateEventType[\"CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED\"] = \"CaseToRoutingQueueAssignmentChanged\";\n    PushUpdateEventType[\"CONTACT_CREATED\"] = \"CaseCreated\";\n    PushUpdateEventType[\"ASSIGNED_AGENT_CHANGED\"] = \"CaseInboxAssigneeChanged\";\n    PushUpdateEventType[\"CONTACT_STATUS_CHANGED\"] = \"CaseStatusChanged\";\n    PushUpdateEventType[\"CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED\"] = \"CaseToRoutingQueueAssignmentChanged\";\n    PushUpdateEventType[\"CONTACT_PREFERRED_USER_CHANGED\"] = \"ContactPreferredUserChanged\";\n    PushUpdateEventType[\"CONTACT_PROFICIENCY_CHANGED\"] = \"ContactProficiencyChanged\";\n    PushUpdateEventType[\"CONTACT_PRIORITY_CHANGED\"] = \"ContactPriorityChanged\";\n    PushUpdateEventType[\"CONTACT_SYNC\"] = \"ContactSync\";\n    PushUpdateEventType[\"CHANNEL_CREATED\"] = \"ChannelCreated\";\n    PushUpdateEventType[\"CHANNEL_DELETED\"] = \"ChannelDeleted\";\n    PushUpdateEventType[\"CHANNEL_UPDATED\"] = \"ChannelUpdated\";\n    PushUpdateEventType[\"MESSAGE_ADDED_INTO_CASE\"] = \"MessageAddedIntoCase\";\n    PushUpdateEventType[\"MESSAGE_CREATED\"] = \"MessageCreated\";\n    PushUpdateEventType[\"MESSAGE_DELIVERED_TO_END_USER\"] = \"MessageDeliveredToEndUser\";\n    PushUpdateEventType[\"MESSAGE_DELIVERED_TO_USER\"] = \"MessageDeliveredToUser\";\n    PushUpdateEventType[\"MESSAGE_DELIVERY_STATUS_CHANGED\"] = \"MessageDeliveryStatusChanged\";\n    PushUpdateEventType[\"MESSAGE_NOTE_CREATED\"] = \"MessageNoteCreated\";\n    PushUpdateEventType[\"MESSAGE_NOTE_UPDATED\"] = \"MessageNoteUpdated\";\n    PushUpdateEventType[\"MESSAGE_NOTE_DELETED\"] = \"MessageNoteDeleted\";\n    PushUpdateEventType[\"MESSAGE_READ_CHANGED\"] = \"MessageReadChanged\";\n    PushUpdateEventType[\"MESSAGE_SEEN_BY_END_USER\"] = \"MessageSeenByEndUser\";\n    PushUpdateEventType[\"MESSAGE_SEEN_BY_USER\"] = \"MessageSeenByUser\";\n    PushUpdateEventType[\"MESSAGE_SEEN_CHANGED\"] = \"MessageSeenChanged\";\n    PushUpdateEventType[\"MESSAGE_SENT\"] = \"MessageSent\";\n    PushUpdateEventType[\"MESSAGE_UPDATED\"] = \"MessageUpdated\";\n    PushUpdateEventType[\"PAGE_VIEW_CREATED\"] = \"PageViewCreated\";\n    PushUpdateEventType[\"ROUTING_QUEUE_CREATED\"] = \"RoutingQueueCreated\";\n    PushUpdateEventType[\"ROUTING_QUEUE_DELETED\"] = \"RoutingQueueDeleted\";\n    PushUpdateEventType[\"ROUTING_QUEUE_UPDATED\"] = \"RoutingQueueUpdated\";\n    PushUpdateEventType[\"SUBQUEUE_ASSIGNED_TO_ROUTING_QUEUE\"] = \"SubqueueAssignedToRoutingQueue\";\n    PushUpdateEventType[\"SUBQUEUE_UNASSIGNED_TO_ROUTING_QUEUE\"] = \"SubqueueUnassignedFromRoutingQueue\";\n    PushUpdateEventType[\"USER_ASSIGNED_TO_ROUTING_QUEUE\"] = \"UserAssignedToRoutingQueue\";\n    PushUpdateEventType[\"USER_STATUS_CHANGED\"] = \"UserStatusChanged\";\n    PushUpdateEventType[\"USER_UNASSIGNED_FROM_ROUTING_QUEUE\"] = \"UserUnassignedFromRoutingQueue\";\n    PushUpdateEventType[\"AGENT_CONTACT_STARTED\"] = \"AgentContactStarted\";\n    PushUpdateEventType[\"AGENT_CONTACT_ENDED\"] = \"AgentContactEnded\";\n    PushUpdateEventType[\"SENDER_TYPING_STARTED\"] = \"SenderTypingStarted\";\n    PushUpdateEventType[\"SENDER_TYPING_ENDED\"] = \"SenderTypingEnded\";\n    PushUpdateEventType[\"FIRE_PROACTIVE\"] = \"FireProactiveAction\";\n    PushUpdateEventType[\"CONTACT_INBOX_PRE_ASSIGNEE_CHANGED\"] = \"ConsumerContactInboxPreAssigneeChanged\";\n    PushUpdateEventType[\"CONTACT_RECIPIENTS_CHANGED\"] = \"ContactRecipientsChanged\";\n    PushUpdateEventType[\"MESSAGE_PREVIEW_CREATED\"] = \"MessagePreviewCreated\";\n    PushUpdateEventType[\"EVENT_IN_S3\"] = \"EventInS3\";\n})(PushUpdateEventType = exports.PushUpdateEventType || (exports.PushUpdateEventType = {}));\n","module.exports = __WEBPACK_EXTERNAL_MODULE__198__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Checks if `value` is `null`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n * @example\n *\n * _.isNull(null);\n * // => true\n *\n * _.isNull(void 0);\n * // => false\n */\nfunction isNull(value) {\n  return value === null;\n}\n\nexport default isNull;\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { ICacheStorage } from '../storage/CacheStorage';\n\nexport interface ThreadData {\n  contactId?: string;\n  oldestMessageDatetime?: string;\n  scrollToken?: string;\n}\n\nexport interface ChatSDKVariableStorage {\n  ACCESS_TOKEN: string;\n  ACCESS_TOKEN_EXPIRES_IN: number;\n  APP_NAME: string;\n  APP_VERSION: string;\n  AUTHORIZATION_CODE?: string;\n  BRAND_ID: BrandId;\n  CACHE_STORAGE: ICacheStorage;\n  CHANNEL_ID: ChannelId;\n  CUSTOMER_ID: string;\n  CUSTOMER_IMAGE: string;\n  CUSTOMER_NAME: string;\n  DESTINATION?: string;\n  ENDPOINT_AUTHORIZE: string;\n  ENDPOINT_CHAT: string;\n  ENDPOINT_GATEWAY: string;\n  LANGUAGE: string;\n  SECURED_SESSION: boolean;\n  THREAD_DATA: ThreadData;\n  VISITOR_ID?: string;\n  VISIT_ID?: string;\n}\n\nexport const SDKVariableStorage: Partial<ChatSDKVariableStorage> = {};\n\nexport const clearVariableStorage = (): void => {\n  Object.keys(SDKVariableStorage).forEach((key) => {\n    delete SDKVariableStorage[key as keyof ChatSDKVariableStorage];\n  });\n};\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\n\nimport { isNull } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport function setAccessToken(accessToken: AccessToken): void {\n  SDKVariableStorage.ACCESS_TOKEN = accessToken.token;\n  SDKVariableStorage.ACCESS_TOKEN_EXPIRES_IN = accessToken.expiresIn;\n}\n\nexport function getAccessToken(): AccessToken | null {\n  const token = SDKVariableStorage.ACCESS_TOKEN ?? null;\n  const expiresIn = SDKVariableStorage.ACCESS_TOKEN_EXPIRES_IN ?? null;\n\n  if (isNull(token) || isNull(expiresIn)) {\n    return null;\n  }\n\n  return {\n    token,\n    expiresIn: Number(expiresIn),\n  };\n}\n\nexport function resetAccessToken(): void {\n  SDKVariableStorage.ACCESS_TOKEN = undefined;\n  SDKVariableStorage.ACCESS_TOKEN_EXPIRES_IN = undefined;\n}\n","export class ChatSDKError extends Error {\n  name: string = 'ChatSDKError';\n  data: unknown;\n\n  constructor(error: unknown, data?: unknown) {\n    super();\n\n    this.data = data;\n\n    if (error instanceof ChatSDKError) {\n      this.message = error.message;\n      this.stack = error.stack;\n      this.cause = error.cause;\n\n      return;\n    }\n\n    this.message = `[ChatSDKError]: ${this._getErrorMessage(error)}`;\n\n    if (error instanceof Error) {\n      this.stack = error.stack;\n    }\n  }\n\n  private _getErrorMessage(error: unknown): string {\n    if (error instanceof Error) {\n      return error.message;\n    }\n    if (typeof error === 'string') {\n      return error;\n    }\n\n    return JSON.stringify(error);\n  }\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\n\nexport class AuthorizationError extends ChatSDKError {\n  data: MessageFailedEventData['error'] | undefined;\n\n  constructor(\n    message: string,\n    data: MessageFailedEventData['error'] | undefined,\n  ) {\n    super(message, data);\n\n    if (data !== undefined) {\n      this.message = `${message} because of (${data.errorMessage})`;\n    }\n  }\n}\n","export const CHAT_SDK_VERSION: string = process.env.PACKAGE_VERSION ?? '0';\n","export function generateId(): string {\n  return crypto.randomUUID ? crypto.randomUUID() : generateUuidFallback();\n}\n\nexport function generateUuidFallback(): string {\n  const randomValues = new Uint8Array(16);\n\n  // Convert each byte to a hexadecimal string and join it to form the UUID\n  return crypto.getRandomValues(randomValues).reduce((uuid, value, index) => {\n    if ([4, 6, 8, 10].includes(index)) {\n      uuid += '-';\n    }\n\n    return (\n      uuid +\n      (index === 6\n        ? // eslint-disable-next-line no-bitwise\n          (value & 0x0f) | 0x40\n        : index === 8\n        ? // eslint-disable-next-line no-bitwise\n          (value & 0x3f) | 0x80\n        : value\n      )\n        .toString(16)\n        .padStart(2, '0')\n    );\n  }, '');\n}\n","import { VisitorInput } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nexport interface VisitorPayload {\n  visitor: VisitorInput;\n}\n\nexport function createVisitorPayload(visitorId: VisitorId): VisitorPayload {\n  return {\n    visitor: {\n      id: visitorId,\n    },\n  };\n}\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","import baseKeys from './_baseKeys.js';\nimport getTag from './_getTag.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLike from './isArrayLike.js';\nimport isBuffer from './isBuffer.js';\nimport isPrototype from './_isPrototype.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEmpty;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","import { ChatEventData } from '../event/ChatEvent';\n\nexport const requestQueue = new Map<string, (value: ChatEventData) => void>();\n","import { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { Event } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { generateId } from '../utils/generateId';\nimport { isEmpty, isNull } from '../utils/is';\n\nimport { requestQueue } from './requestQueue';\n\nexport const makeRequest = async (\n  event: Event<AwsInputEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> => {\n  if (isNull(wsClient)) {\n    throw new ChatSDKError('WebSocketClient is not initialized');\n  }\n  if (isEmpty(event.eventId)) {\n    event.eventId = generateId();\n  }\n\n  return new Promise<ChatEventData>((resolve) => {\n    requestQueue.set(event.eventId, resolve);\n    wsClient?.send(event);\n  });\n};\n","export function splitName(name: string): [string, string] {\n  const [firstName, ...names] = name.split(' ');\n  const lastName = names.join(' ');\n\n  return [firstName, lastName];\n}\n","import { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { isUndefined } from '../utils/is';\n\ntype Ident = CustomField['ident'];\ntype Value = CustomField['value'];\n\nexport type CustomFieldsObject = Record<Ident, Value>;\nexport type CustomFieldsMap = Map<Ident, Value>;\n\nexport function setCustomFields(\n  fields: CustomFieldsMap,\n  set: CustomFieldsObject = {},\n): void {\n  for (const name of Object.keys(set)) {\n    fields.set(name, set[name]);\n  }\n}\n\nexport function setCustomFieldsFromArray(\n  fields: CustomFieldsMap,\n  set: Array<CustomField> = [],\n): void {\n  for (const { ident, value } of set) {\n    fields.set(ident, value);\n  }\n}\n\nexport function setCustomField(\n  fields: CustomFieldsMap,\n  name: string,\n  value: CustomField['value'],\n): void {\n  if (isUndefined(name) || isUndefined(value)) {\n    throw new ChatSDKError('Custom field name and value must be set');\n  }\n\n  fields.set(name, value);\n}\n\nexport function getCustomFields(fields: CustomFieldsMap): CustomFieldsObject {\n  return Object.fromEntries(fields);\n}\n\nexport function getCustomFieldsArray(\n  fields: CustomFieldsMap,\n): Array<CustomField> {\n  return Array.from(fields).map<CustomField>(([ident, value]) => ({\n    ident,\n    value,\n  }));\n}\n","import { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\n\nimport {\n  CustomFieldsMap,\n  CustomFieldsObject,\n  getCustomFields,\n  getCustomFieldsArray,\n  setCustomFields,\n  setCustomFieldsFromArray,\n} from '../customField/CustomFields';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { generateId } from '../utils/generateId';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { createSetCustomerCustomFieldsPayloadData } from './setCustomerCustomFieldsPayload';\n\nexport class Customer {\n  protected _websocketClient: WebSocketClient | null;\n  protected _customFields: CustomFieldsMap = new Map();\n  protected _exists = false;\n\n  constructor(\n    id: CustomerIdentityIdOnExternalPlatform,\n    name: string | undefined,\n    image: string | undefined,\n    websocketClient: WebSocketClient | null,\n  ) {\n    this._websocketClient = websocketClient;\n    Customer.setId(id);\n    Customer.setName(name);\n    Customer.setImage(image);\n  }\n\n  static setId(id: CustomerIdentityIdOnExternalPlatform): void {\n    SDKVariableStorage.CUSTOMER_ID = id;\n  }\n\n  static getId(): CustomerIdentityIdOnExternalPlatform | null {\n    return SDKVariableStorage.CUSTOMER_ID ?? null;\n  }\n\n  static getName(): string | undefined {\n    return SDKVariableStorage.CUSTOMER_NAME;\n  }\n\n  static setName(name?: string): void {\n    SDKVariableStorage.CUSTOMER_NAME = name;\n  }\n\n  static getIdOrCreateNewOne(): CustomerIdentityIdOnExternalPlatform {\n    let customerId = this.getId();\n\n    if (!customerId) {\n      customerId = generateId();\n      this.setId(customerId);\n    }\n\n    return customerId;\n  }\n\n  static getImage(): string | undefined {\n    return SDKVariableStorage.CUSTOMER_IMAGE;\n  }\n\n  static setImage(image?: string): void {\n    SDKVariableStorage.CUSTOMER_IMAGE = image;\n  }\n\n  public getId(): CustomerIdentityIdOnExternalPlatform {\n    return Customer.getIdOrCreateNewOne();\n  }\n\n  public getName(): string | undefined {\n    return Customer.getName();\n  }\n\n  public setName(name?: string): void {\n    Customer.setName(name);\n  }\n\n  public setImage(image?: string): void {\n    Customer.setImage(image);\n  }\n\n  public setExists(exists: boolean): void {\n    this._exists = exists;\n  }\n\n  /**\n   * Set Customer Custom field\n   * @param name - Custom field name\n   * @param value - Custom field value\n   */\n  public setCustomField(\n    name: CustomField['ident'],\n    value: CustomField['value'],\n  ): Promise<ChatEventData> | undefined {\n    return this.setCustomFields({ [name]: value });\n  }\n\n  /**\n   * Set Customer Custom fields\n   * @param customFields - custom fields object\n   * @example setCustomFields(\\{ identName: 'value', identName2: 'value2' \\})\n   */\n  public setCustomFields(\n    customFields: CustomFieldsObject,\n  ): Promise<ChatEventData> | undefined {\n    setCustomFields(this._customFields, customFields);\n\n    if (this._exists) {\n      return this.sendCustomFields();\n    }\n  }\n\n  /**\n   * Get Customer Custom fields (as object)\n   */\n  public getCustomFields(): CustomFieldsObject {\n    return getCustomFields(this._customFields);\n  }\n\n  /**\n   * Set Customer Custom fields from an array of custom fields\n   * @param customFields - custom fields array\n   */\n  public setCustomFieldsFromArray(customFields: Array<CustomField>): void {\n    setCustomFieldsFromArray(this._customFields, customFields);\n  }\n\n  /**\n   * Get Customer Custom fields (as array of CustomField)\n   */\n  public getCustomFieldsArray(): Array<CustomField> {\n    return getCustomFieldsArray(this._customFields);\n  }\n\n  /**\n   * Send Customer Custom fields\n   * - call this only after the first message or recover event\n   * @returns Promise<ChatEventData>\n   */\n  public async sendCustomFields(): Promise<ChatEventData> {\n    const payloadData = createSetCustomerCustomFieldsPayloadData(\n      getCustomFieldsArray(this._customFields),\n    );\n\n    return sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  destroy(): void {\n    SDKVariableStorage.CUSTOMER_ID = undefined;\n    SDKVariableStorage.CUSTOMER_NAME = undefined;\n    SDKVariableStorage.CUSTOMER_IMAGE = undefined;\n  }\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendConsumerCustomFieldsEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendConsumerCustomFields';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\ntype SendCustomerCustomFieldsEventData = SendConsumerCustomFieldsEventData;\n\nexport function createSetCustomerCustomFieldsPayloadData(\n  customFields: Array<CustomField>,\n): EventPayloadData<SendCustomerCustomFieldsEventData> {\n  return {\n    eventType: AwsInputEventType.SEND_CONSUMER_CUSTOM_FIELDS,\n    data: {\n      customFields,\n    },\n  };\n}\n","import { ConsumerIdentityInput } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { splitName } from '../utils/splitName';\n\nimport { Customer } from './Customer';\n\nexport type ConsumerIdentityPayload = ConsumerIdentityInput;\n\nexport function createCustomerIdentityPayload(\n  name?: string,\n  image?: string,\n): ConsumerIdentityPayload {\n  const storedName = name ?? Customer.getName();\n  const storedImage = image ?? Customer.getImage();\n\n  let customerIdentityNamePayload: Partial<ConsumerIdentityPayload> = {};\n  if (typeof storedName === 'string' && storedName.length > 0) {\n    const [firstName, lastName] = splitName(storedName);\n    customerIdentityNamePayload = { firstName, lastName };\n  }\n\n  if (storedImage) {\n    customerIdentityNamePayload.image = storedImage;\n  }\n\n  return {\n    idOnExternalPlatform: Customer.getIdOrCreateNewOne(),\n    ...customerIdentityNamePayload,\n  };\n}\n","/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nexport default isNil;\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { isNil } from './is';\n\nexport function getBrandIdAndChannelId(): {\n  brandId: BrandId;\n  channelId: ChannelId;\n} {\n  const brandId = SDKVariableStorage.BRAND_ID;\n  const channelId = SDKVariableStorage.CHANNEL_ID;\n\n  if (isNil(brandId) || isNaN(brandId) || isNil(channelId)) {\n    throw new ChatSDKError(\n      `Cannot get BrandId and ChannelId from SDKVariableStorage\n      brandId (${brandId}) |\n      channelId (${channelId})`,\n    );\n  }\n\n  return {\n    brandId,\n    channelId,\n  };\n}\n","/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nexport default isUndefined;\n","import { AwsChatWindowEventActionRoute } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport {\n  AwsInputEvent,\n  AwsInputEventData,\n  ConsumerIdentityInput,\n  DestinationInput,\n  VisitInput,\n  VisitorInput,\n} from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { createCustomerIdentityPayload } from '../customer/customerIdentityPayload';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { generateId } from '../utils/generateId';\nimport { getBrandIdAndChannelId } from '../utils/getBrandIdAndChannelId';\nimport { isUndefined } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport type EventActionRoute = AwsChatWindowEventActionRoute;\nexport type EventPayload<D extends AwsInputEventData> = AwsInputEvent<\n  AwsInputEventType,\n  D\n>;\n\nexport interface Event<D extends AwsInputEventData> {\n  action: EventActionRoute;\n  eventId: string;\n  payload: EventPayload<D>;\n}\n\nexport interface EventPayloadData<D extends AwsInputEventData> {\n  consumerIdentity?: ConsumerIdentityInput;\n  data: D;\n  destination?: DestinationInput;\n  eventType: AwsInputEventType;\n  visit?: VisitInput;\n  visitor?: VisitorInput;\n}\n\nexport function createEventPayload<D extends AwsInputEventData>(\n  eventPayloadData: EventPayloadData<D>,\n): EventPayload<D> {\n  const storedDestinationId = SDKVariableStorage.DESTINATION;\n  const storedVisitId = SDKVariableStorage.VISIT_ID;\n  const storedVisitorId = SDKVariableStorage.VISITOR_ID;\n\n  const {\n    eventType,\n    data,\n    consumerIdentity = createCustomerIdentityPayload(),\n    destination = storedDestinationId ? { id: storedDestinationId } : {},\n    visitor = storedVisitorId ? { id: storedVisitorId } : {},\n    visit = storedVisitId ? { id: storedVisitId } : {},\n  } = eventPayloadData;\n  const { brandId, channelId } = getBrandIdAndChannelId();\n\n  if (isUndefined(eventType)) {\n    throw new ChatSDKError(\n      `Cannot create an event payload because of missing eventType (${eventType})`,\n    );\n  }\n\n  return {\n    eventType,\n    brand: {\n      id: Number(brandId),\n    },\n    channel: {\n      id: channelId,\n    },\n    consumerIdentity,\n    data,\n    destination,\n    visitor,\n    visit,\n  };\n}\n\nexport function createEvent<D extends AwsInputEventData>(\n  payload: EventPayload<D>,\n  eventId: string = generateId(),\n  actionRoute: EventActionRoute = AwsChatWindowEventActionRoute.CHAT_WINDOW_EVENT,\n): Event<D> {\n  return {\n    action: actionRoute,\n    eventId,\n    payload,\n  };\n}\n","import { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { makeRequest } from '../request/makeRequest';\nimport {\n  createEvent,\n  createEventPayload,\n  EventPayloadData,\n} from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { ChatEventData } from './ChatEvent';\n\n/**\n * Send chat event\n * @param payloadData - payload data\n * @param webSocketClient - websocket client\n */\nexport async function sendChatEvent<D extends AwsInputEventData>(\n  payloadData: EventPayloadData<D>,\n  webSocketClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const event = createEvent(createEventPayload(payloadData));\n\n  return makeRequest(event, webSocketClient);\n}\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ReconnectConsumerData } from '@brandembassy/ts-types-chat/dist/awsEvents/ReconnectConsumer';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport { createCustomerIdentityPayload } from '../customer/customerIdentityPayload';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { createVisitorPayload } from '../visitor/createVisitorPayload';\n\nexport function createReconnectPayloadData(\n  accessToken: AccessToken,\n  visitorId?: string,\n): EventPayloadData<ReconnectConsumerData> {\n  return {\n    ...createVisitorPayload(visitorId as VisitorId),\n    ...createCustomerIdentityPayload(),\n    eventType: AwsInputEventType.RECONNECT_CONSUMER,\n    data: {\n      accessToken: {\n        token: accessToken.token,\n      },\n    },\n  };\n}\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\n\nlet refreshTokenTimeoutId: NodeJS.Timeout | null = null;\n\nexport function getIdealTimeInSecondsForIssueRefreshToken(\n  accessTokenExpiresIn: number,\n): number {\n  const idealTimeToRefreshAccessToken = Math.round(accessTokenExpiresIn * 0.9);\n\n  if (idealTimeToRefreshAccessToken < 20) {\n    return 20;\n  }\n\n  return idealTimeToRefreshAccessToken;\n}\n\nexport function handleRefreshToken(\n  accessToken: AccessToken,\n  refreshTokenAction: () => Promise<void>,\n): void {\n  if (refreshTokenTimeoutId !== null) {\n    clearTimeout(refreshTokenTimeoutId);\n  }\n\n  refreshTokenTimeoutId = setTimeout(\n    refreshTokenAction,\n    getIdealTimeInSecondsForIssueRefreshToken(accessToken.expiresIn) * 1000,\n  );\n}\n","import { AuthorizationTokenGeneratedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/AuthorizationTokenGenerated';\n\nexport const isAuthorizationTokenGeneratedPostbackData = (\n  data: unknown,\n): data is AuthorizationTokenGeneratedPostbackData =>\n  'authorizationToken' in (data as AuthorizationTokenGeneratedPostbackData);\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nimport { AuthorizeConsumerEventSuccessResponse } from './AuthorizeConsumerEventResponse';\n\nexport const isAuthSuccessEvent = (\n  payload: ChatEventData,\n): payload is AuthorizeConsumerEventSuccessResponse => {\n  const status = (payload as AuthorizeConsumerEventSuccessResponse)?.data\n    ?.status;\n  const type = payload?.type;\n\n  return (\n    type === AwsResponseEventType.CONSUMER_AUTHORIZED && status === 'success'\n  );\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { TokenRefreshedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/TokenRefreshed';\n\nexport interface TokenRefreshedSuccessResponse {\n  data: TokenRefreshedPostbackData;\n  type: AwsResponseEventType.TOKEN_REFRESHED;\n}\n\nexport function isTokenRefreshedSuccessResponse(\n  response: unknown,\n): response is TokenRefreshedSuccessResponse {\n  return (\n    (response as TokenRefreshedSuccessResponse)?.type ===\n      AwsResponseEventType.TOKEN_REFRESHED &&\n    (response as TokenRefreshedSuccessResponse).data?.accessToken?.token !==\n      undefined\n  );\n}\n","import UAParser from 'ua-parser-js';\n\nimport {\n  ApplicationType,\n  BrowserFingerprint,\n  DeviceType,\n} from '@brandembassy/ts-types-chat/dist/user/BrowserFingerprint';\n\nexport interface BrowserFingerprintOptions {\n  country?: string | null;\n  ip?: string | null;\n  language?: string;\n  location?: string | null;\n}\n\nexport const getBrowserLanguage = (): string => navigator.language;\nexport const getBrowserLocation = (): string =>\n  Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n/**\n * Get Device type\n * @param deviceType - device type\n */\nexport function getDeviceType(deviceType?: string): DeviceType {\n  switch (deviceType) {\n    case 'mobile':\n      return DeviceType.MOBILE;\n    case 'tablet':\n      return DeviceType.TABLET;\n    default:\n      return DeviceType.DESKTOP;\n  }\n}\n\n/**\n * Get Customer Browser fingerprint\n * @param options - options\n */\nexport const getBrowserFingerprint = (\n  options: BrowserFingerprintOptions = {},\n): BrowserFingerprint => {\n  const deviceInfoFromUserAgent = new UAParser(navigator.userAgent);\n\n  const {\n    country = '',\n    location = getBrowserLocation(),\n    language = getBrowserLanguage(),\n    ip = null,\n  } = options;\n\n  return {\n    browser: deviceInfoFromUserAgent.getBrowser().name ?? null,\n    browserVersion: deviceInfoFromUserAgent.getBrowser().version ?? null,\n    country,\n    ip,\n    language,\n    location,\n    os: deviceInfoFromUserAgent.getOS().name ?? null,\n    osVersion: deviceInfoFromUserAgent.getOS().version ?? null,\n    deviceType: getDeviceType(deviceInfoFromUserAgent.getDevice().type),\n    applicationType: ApplicationType.BROWSER,\n  };\n};\n","export const ERROR_CODE_SDK_VERSION_NOT_SUPPORTED = 'SdkVersionNotSupported';\n\nexport class SdkVersionNotSupported extends Error {\n  name = ERROR_CODE_SDK_VERSION_NOT_SUPPORTED;\n  message = 'Please update to the latest ChatSDK version';\n}\n","import {\n  ERROR_CODE_SDK_VERSION_NOT_SUPPORTED,\n  SdkVersionNotSupported,\n} from '../../error/SdkVersionNotSupported';\nimport { ChatEventData } from '../ChatEvent';\n\nexport function isSdkVersionNotSupportedEvent(event: unknown): boolean {\n  return (\n    (event as ChatEventData)?.error?.errorCode ===\n    ERROR_CODE_SDK_VERSION_NOT_SUPPORTED\n  );\n}\n\nexport function sdkVersionCheck(event: ChatEventData): ChatEventData | null {\n  if (isSdkVersionNotSupportedEvent(event)) {\n    throw new SdkVersionNotSupported();\n  }\n\n  return event;\n}\n","export async function getErrorResponseData(\n  response: Response,\n): Promise<unknown> {\n  let data;\n\n  try {\n    data = await response.json();\n  } catch (error) {\n    data = response.statusText;\n  }\n\n  return data;\n}\n","import { ChannelInfo } from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { CALLER_SERVICE_ID } from '@brandembassy/ts-types-platform/dist/http/headers';\n\nimport { getBrowserLanguage } from '../browserFingerprint/getBrowserFingerprint';\nimport { CHAT_SDK_VERSION } from '../env/version';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SdkVersionNotSupported } from '../error/SdkVersionNotSupported';\nimport { isSdkVersionNotSupportedEvent } from '../event/middleware/sdkVersionCheck';\nimport { getErrorResponseData } from '../request/getErrorResponseData';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport async function fetchChannelInfo(\n  brandId: BrandId,\n  channelId: ChannelId,\n  language = getBrowserLanguage(),\n): Promise<ChannelInfo> {\n  const languageLocale = `${language}`.split('-').join('_');\n  const CHANNEL_INTEGRATION_URL = SDKVariableStorage.ENDPOINT_CHAT;\n\n  const response = await fetch(\n    `${CHANNEL_INTEGRATION_URL}/chat/1.0/brand/${brandId}/channel/${channelId}?locale=${languageLocale}`,\n    {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        [CALLER_SERVICE_ID]: SDKVariableStorage.APP_NAME ?? '',\n        'x-sdk-platform': 'web',\n        'x-sdk-version': CHAT_SDK_VERSION,\n      },\n    },\n  );\n\n  if (!response.ok) {\n    const errorData = await getErrorResponseData(response);\n\n    if (isSdkVersionNotSupportedEvent(errorData)) {\n      throw new SdkVersionNotSupported();\n    }\n\n    throw new ChatSDKError(\n      `Failed to fetch channel info. Status (${response.status})`,\n      { response },\n    );\n  }\n\n  return response.json();\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport enum EnvironmentName {\n  AU1 = 'AU1',\n  CA1 = 'CA1',\n  EU1 = 'EU1',\n  JP1 = 'JP1',\n  NA1 = 'NA1',\n  UK1 = 'UK1',\n  custom = 'custom',\n}\n\nexport interface EnvironmentEndpoints {\n  authorize: string;\n  chat: string;\n  gateway: string;\n  name: string;\n}\n\nexport function buildEnvironmentEndpoints(\n  environment: EnvironmentName,\n): EnvironmentEndpoints {\n  if (!(environment in EnvironmentName)) {\n    throw new ChatSDKError(`Unknown environment: ${environment}`);\n  }\n\n  if (environment === EnvironmentName.custom) {\n    throw new ChatSDKError(\n      'The custom environment cannot be constructed using the built-in configuration',\n    );\n  }\n\n  const chat =\n    `https://channels-de-${environment}.niceincontact.com`.toLowerCase();\n  const gateway =\n    `wss://chat-gateway-de-${environment}.niceincontact.com`.toLowerCase();\n  const name = environment;\n  const authorize =\n    `https://digital-oauth-de-${environment}.niceincontact.com`.toLowerCase();\n\n  return {\n    chat,\n    name,\n    gateway,\n    authorize,\n  };\n}\n","import { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { EnvironmentEndpoints } from './Environments';\n\nexport const setEnvironmentEndpoints = (\n  endpoints: EnvironmentEndpoints,\n): void => {\n  SDKVariableStorage.ENDPOINT_GATEWAY = endpoints.gateway;\n  SDKVariableStorage.ENDPOINT_CHAT = endpoints.chat;\n  SDKVariableStorage.ENDPOINT_AUTHORIZE = endpoints.authorize;\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { PushUpdateContext } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateContext';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\n\nexport const ChatEvent = {\n  ...PushUpdateEventType,\n  ...AwsResponseEventType,\n  AGENT_TYPING_STARTED: 'AgentTypingStarted',\n  AGENT_TYPING_ENDED: 'AgentTypingEnded',\n  ASSIGNED_AGENT_CHANGED: 'AssignedAgentChanged',\n  CONTACT_CREATED: 'ContactCreated',\n  CONTACT_STATUS_CHANGED: 'ContactStatusChanged',\n  CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED:\n    'ContactToRoutingQueueAssignmentChanged',\n} as const;\n\nexport class ChatCustomEvent<\n  T extends ChatEventData = ChatEventData,\n> extends CustomEvent<T> {}\n\nexport interface ChatEventData {\n  context?: [] | PushUpdateContext;\n  createdAt: Date;\n  createdAtWithMilliseconds?: Date;\n  data: unknown;\n  error?: MessageFailedEventData['error'];\n  id: string;\n  type?: ChatEventType;\n}\n\nexport type ChatEventKey = keyof typeof ChatEvent;\nexport type ChatEventType = typeof ChatEvent[ChatEventKey];\n","import { isNil } from '../utils/is';\n\nimport { ChatEventData } from './ChatEvent';\n\nexport type EventMiddleware = (\n  eventData: ChatEventData,\n) => ChatEventData | null;\n\nexport class ChatEventMiddleware {\n  middlewares: Array<EventMiddleware> = [];\n\n  register(middleware: EventMiddleware): void {\n    this.middlewares.push(middleware);\n  }\n\n  process(event: ChatEventData | null): ChatEventData | null {\n    if (isNil(event)) {\n      return null;\n    }\n\n    let processedEvent: ChatEventData | null = event;\n\n    for (const middleware of this.middlewares) {\n      if (processedEvent === null) {\n        return null;\n      }\n      processedEvent = middleware(processedEvent);\n    }\n\n    return processedEvent;\n  }\n}\n","import { ChatCustomEvent, ChatEventType } from './ChatEvent';\n\nexport interface IChatEventTarget extends EventTarget {\n  addEventListener<K extends ChatEventType>(\n    type: K,\n    listener: (event: ChatCustomEvent) => void,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  addEventListener(\n    type: string,\n    callback: EventListenerOrEventListenerObject | null,\n    options?: EventListenerOptions | boolean,\n  ): void;\n\n  dispatchEvent(event: ChatCustomEvent): boolean;\n\n  removeEventListener(\n    type: string,\n    callback: EventListenerOrEventListenerObject | null,\n    options?: boolean | EventListenerOptions | undefined,\n  ): void;\n  removeEventListener<K extends ChatEventType>(\n    type: K,\n    callback: (event: ChatCustomEvent) => void,\n    options?: boolean | EventListenerOptions | undefined,\n  ): void;\n}\n\nexport const ChatEventTarget = EventTarget as {\n  new (): IChatEventTarget;\n  prototype: IChatEventTarget;\n};\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { isNil } from '../utils/is';\n\ninterface UserData {\n  user: unknown;\n}\n\nfunction hasUserData(data: unknown): boolean {\n  return !isNil((data as UserData)?.user);\n}\n\nexport function agentTypingStarted(event: ChatEventData): ChatEventData {\n  if (hasUserData(event.data)) {\n    return {\n      ...event,\n      type: ChatEvent.AGENT_TYPING_STARTED,\n    };\n  }\n\n  return event;\n}\n\nexport function agentTypingEnded(event: ChatEventData): ChatEventData {\n  if (hasUserData(event.data)) {\n    return {\n      ...event,\n      type: ChatEvent.AGENT_TYPING_ENDED,\n    };\n  }\n\n  return event;\n}\n","import { fromISOString } from '@brandembassy/be-javascript-utils/dist/dateTime/isoString';\nimport { PushUpdateContext } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateContext';\n\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\nimport { isEmpty } from '../utils/is';\n\nimport { ChatEventData, ChatEventType } from './ChatEvent';\n\ninterface EventBase {\n  createdAt: string;\n}\n\ninterface EventDataWithPostback extends EventBase {\n  postback: {\n    data: Record<string, unknown>;\n    eventType: ChatEventType;\n  };\n}\n\ninterface EventWithEventId extends EventBase {\n  eventId: string;\n}\n\ninterface EventWithData extends EventBase {\n  context?: [] | PushUpdateContext;\n  data: Record<string, unknown>;\n}\ninterface EventWithType extends EventBase {\n  eventType: ChatEventType;\n}\n\nconst EMPTY_EVENT = {\n  id: '',\n  data: null,\n  type: undefined,\n  createdAt: new Date(),\n};\n\nconst hasData = (event: unknown): event is EventWithData =>\n  'data' in (event as EventWithData);\n\nconst hasError = (event: unknown): event is MessageFailedEventData =>\n  'error' in (event as MessageFailedEventData);\n\nconst hasEventId = (event: unknown): event is EventWithEventId =>\n  'eventId' in (event as EventWithEventId);\n\nconst hasEventType = (event: unknown): event is EventWithType =>\n  'eventType' in (event as EventWithType);\n\nconst isDataWithPostback = (\n  eventDetailData: unknown,\n): eventDetailData is EventDataWithPostback => {\n  const postback = (eventDetailData as EventDataWithPostback)?.postback;\n\n  return isEmpty(postback) === false;\n};\n\nexport function normalizeEvent(event: unknown): ChatEventData {\n  if (!hasEventId(event)) {\n    return EMPTY_EVENT;\n  }\n\n  if (hasError(event)) {\n    return {\n      createdAt: fromISOString(event.createdAt ?? new Date().toString()),\n      data: null,\n      error: event.error,\n      id: event.eventId,\n    };\n  }\n\n  const eventType = hasEventType(event) ? event.eventType : undefined;\n\n  if (hasData(event)) {\n    return {\n      createdAt: fromISOString(event.createdAt),\n      context: event.context,\n      data: event.data,\n      id: event.eventId,\n      type: eventType,\n    };\n  }\n\n  if (isDataWithPostback(event)) {\n    const {\n      postback: { data: postbackData, eventType: postbackEventType },\n      eventId: rawEventId,\n      ...restEventData\n    } = event;\n\n    return {\n      type: postbackEventType,\n      data: {\n        ...restEventData,\n        ...postbackData,\n      },\n      createdAt: fromISOString(event.createdAt),\n      id: rawEventId,\n    };\n  }\n\n  const { eventId, ...eventRest } = event;\n\n  return {\n    data: undefined,\n    ...eventRest,\n    id: eventId,\n    type: eventType,\n    createdAt: fromISOString(event.createdAt),\n  };\n}\n","import { agentTypingEnded, agentTypingStarted } from '../../agent/agentTyping';\nimport { assignedAgentChanged } from '../../agent/assignedAgentChanged';\nimport { contactCreated } from '../../contact/contactCreated';\nimport { contactStatusChanged } from '../../contact/contactStatusChanged';\nimport { contactToRoutingQueueAssignmentChanged } from '../../contact/contactToRoutingQueueAssignmentChanged';\nimport { livechatRecovered } from '../../thread/livechatThread/livechatRecovered';\nimport { threadRecovered } from '../../thread/threadRecovered';\nimport { ChatEvent, ChatEventData } from '../ChatEvent';\nimport { EventMiddleware } from '../ChatEventMiddleware';\n\nconst eventTypeMap: Record<string, EventMiddleware> = {\n  [ChatEvent.SENDER_TYPING_STARTED]: agentTypingStarted,\n  [ChatEvent.SENDER_TYPING_ENDED]: agentTypingEnded,\n  [ChatEvent.CASE_INBOX_ASSIGNEE_CHANGED]: assignedAgentChanged,\n  [ChatEvent.CASE_CREATED]: contactCreated,\n  [ChatEvent.CASE_STATUS_CHANGED]: contactStatusChanged,\n  [ChatEvent.CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED]:\n    contactToRoutingQueueAssignmentChanged,\n  [ChatEvent.LIVECHAT_RECOVERED]: livechatRecovered,\n  [ChatEvent.THREAD_RECOVERED]: threadRecovered,\n};\n\nexport function chatEventMapper(event: ChatEventData): ChatEventData | null {\n  if (event.type && eventTypeMap[event.type] !== undefined) {\n    return eventTypeMap[event.type](event);\n  }\n\n  return event;\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport function assignedAgentChanged(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.ASSIGNED_AGENT_CHANGED,\n  };\n}\n","import { CaseCreatedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseCreatedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type ContactCreatedData = CaseCreatedData;\n\nexport interface ContactCreatedChatEvent extends ChatEventData {\n  data: ContactCreatedData;\n  type: typeof ChatEvent.CONTACT_CREATED;\n}\n\nexport function contactCreated(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.CONTACT_CREATED,\n  };\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport function contactStatusChanged(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.CONTACT_STATUS_CHANGED,\n  };\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nimport { ContactToRoutingQueueAssignmentChangedChatEvent } from './isContactToRoutingQueueAssignmentChangedEvent';\n\nexport function contactToRoutingQueueAssignmentChanged(\n  event: ChatEventData,\n): ContactToRoutingQueueAssignmentChangedChatEvent {\n  return {\n    ...(event as ContactToRoutingQueueAssignmentChangedChatEvent),\n    type: ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED,\n  };\n}\n","import { PushUpdateEventFields } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventFields';\n\nimport { ChatEventData } from '../../event/ChatEvent';\nimport { normalizeEvent } from '../../event/normalizeEvent';\n\nexport function livechatRecovered(event: ChatEventData): ChatEventData {\n  const normalizedContactHistoryItems = (\n    (event.data as Record<string, unknown>)\n      .contactHistory as Array<PushUpdateEventFields>\n  ).map(normalizeEvent);\n\n  return {\n    ...event,\n    data: {\n      ...(event.data as Record<string, unknown>),\n      contactHistory: normalizedContactHistoryItems,\n    },\n  };\n}\n","import { PushUpdateEventFields } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventFields';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { normalizeEvent } from '../event/normalizeEvent';\n\nexport function threadRecovered(event: ChatEventData): ChatEventData {\n  const normalizedContactHistoryItems = (\n    (event.data as Record<string, unknown>)\n      .contactHistory as Array<PushUpdateEventFields>\n  ).map(normalizeEvent);\n\n  return {\n    ...event,\n    data: {\n      ...(event.data as Record<string, unknown>),\n      contactHistory: normalizedContactHistoryItems,\n    },\n  };\n}\n","import { ChatEventData } from '../event/ChatEvent';\nimport { isUndefined } from '../utils/is';\n\nexport interface MessageSuccessEventData extends ChatEventData {\n  id: string;\n}\nexport interface MessageFailedEventData extends MessageSuccessEventData {\n  error: {\n    errorCode: string;\n    errorMessage: string;\n    transactionId: string;\n  };\n  id: string;\n}\n\nexport function isSendMessageSuccessEventData(\n  event: ChatEventData,\n): event is MessageSuccessEventData {\n  const hasEventId =\n    isUndefined((event as MessageSuccessEventData)?.id) === false;\n\n  const hasError =\n    isUndefined((event as MessageFailedEventData).error) === false;\n\n  return hasError === false && hasEventId;\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SendMessageFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendOfflineMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOfflineMessage';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/customer/CustomerIdentity';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nimport { OfflineMessageData } from './sendOfflineMessage';\n\nexport const createSendOfflineMessagePayloadData = (\n  offlineMessageData: OfflineMessageData,\n): EventPayloadData<SendOfflineMessageEventData> => {\n  const [lastName, ...names] = offlineMessageData.name.split(' ').reverse();\n  const firstName = names.reverse().join(' ');\n\n  const authorCustomerIdentity = {\n    idOnExternalPlatform:\n      offlineMessageData.email as CustomerIdentityIdOnExternalPlatform,\n    firstName,\n    lastName,\n  };\n\n  const data = {\n    messageContent: {\n      type: MessageType.TEXT,\n      payload: {\n        text: offlineMessageData.message,\n      },\n    },\n    authorCustomerIdentity,\n  };\n\n  return {\n    eventType: AwsInputEventType.SEND_OFFLINE_MESSAGE,\n    data,\n  };\n};\n","import { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { TransactionToken } from './getTransactionToken';\n\nconst TRANSACTION_TOKEN_CACHE_KEY = 'sdkTransactionToken';\n\nexport const getCachedTransactionToken = (): TransactionToken | null => {\n  if (!SDKVariableStorage.CACHE_STORAGE) {\n    return null;\n  }\n\n  return SDKVariableStorage.CACHE_STORAGE.getItem(TRANSACTION_TOKEN_CACHE_KEY);\n};\n\nexport const cacheTransactionToken = (\n  token: TransactionToken,\n  expiresIn: number,\n): void => {\n  if (SDKVariableStorage.CACHE_STORAGE) {\n    SDKVariableStorage.CACHE_STORAGE.setItem(\n      TRANSACTION_TOKEN_CACHE_KEY,\n      token,\n      expiresIn,\n    );\n  }\n};\n\nexport const clearCachedTransactionToken = (): void => {\n  if (!SDKVariableStorage.CACHE_STORAGE) {\n    return;\n  }\n\n  SDKVariableStorage.CACHE_STORAGE.removeItem(TRANSACTION_TOKEN_CACHE_KEY);\n};\n","export class WebSocketClientError extends Error {\n  name: string = 'WebSocketClientError';\n\n  constructor(message: string, reason: string = '') {\n    const reasonMessage = reason ? ` (${reason})` : '';\n    super(`[WebSocketClientError]: ${message}${reasonMessage}`);\n  }\n}\n","import { WebSocketClient as PushUpdateWSClient } from '@brandembassy/push-updates-sdk';\n\nexport type IWsEventTarget = PushUpdateWSClient;\n\nexport const WsEventTarget = EventTarget as {\n  new (): IWsEventTarget;\n  prototype: IWsEventTarget;\n};\n","import { createQueryParametersAsString } from '@brandembassy/be-javascript-utils/dist/query/queryParameters';\nimport {\n  WebSocketClient as PushUpdateWSClient,\n  WebSocketClientEvent as PushUpdatesWebSocketClientEvent,\n} from '@brandembassy/push-updates-sdk';\nimport { setupSocketConnection } from '@brandembassy/push-updates-sdk/dist/pushUpdate/pushUpdateWebSocket';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport { ChatCustomEvent } from '../event/ChatEvent';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { WebSocketClientError } from './WebSocketClientError';\nimport { IWsEventTarget, WsEventTarget } from './WsEventTarget';\nexport interface SocketQueryParameters {\n  [key: string]: string | number | undefined;\n  brandId: BrandId;\n  channelId: ChannelId;\n  consumerId: CustomerIdentityIdOnExternalPlatform;\n  token?: string;\n  visitorId: VisitorId;\n}\n\nconst MAX_SOCKET_RECONNECT_RETRIES = 20;\n\nfunction createSocketUrl(\n  host: string,\n  prefix: string,\n  additionalQueryParameters: SocketQueryParameters,\n): string {\n  const appVersion = SDKVariableStorage.APP_VERSION;\n  const queryParameters = {\n    v: appVersion,\n    ...additionalQueryParameters,\n  };\n\n  const queryParametersAsString =\n    createQueryParametersAsString(queryParameters);\n\n  return `${host}/${prefix}?${queryParametersAsString}`;\n}\n\nexport interface WebSocketClientOptions {\n  forceSecureProtocol?: boolean;\n  host?: string;\n  onError?: (error: WebSocketClientError) => void;\n  port?: string;\n  prefix?: string;\n}\n\n/**\n * Websocket client\n */\nexport class WebSocketClient {\n  #connection: PushUpdateWSClient | null = null;\n  #eventTarget: IWsEventTarget;\n\n  constructor(\n    private brandId: BrandId,\n    private channelId: ChannelId,\n    private customerId: CustomerIdentityIdOnExternalPlatform,\n    private options: WebSocketClientOptions,\n    private onError: ((error: Error) => void) | undefined,\n    private visitorId: VisitorId,\n  ) {\n    this.#eventTarget = new WsEventTarget();\n  }\n\n  /**\n   * Connect websocket\n   */\n  async connect(token?: string): Promise<void> {\n    this.#setupConnection(token);\n\n    this.#connection?.socket?.reconnect();\n  }\n\n  /**\n   * Disconnect websocket\n   */\n  disconnect(): void {\n    this.#connection?.socket.close();\n  }\n\n  /**\n   * Reconnect websocket\n   */\n  reconnect(token?: string): void {\n    this.#setupConnection(token);\n    this.#connection?.socket.reconnect();\n  }\n\n  /**\n   * Send data to active connection\n   * @param data - data to send\n   */\n  send(data: unknown): void {\n    const stringData = JSON.stringify(data);\n    this.#connection?.send(stringData);\n  }\n\n  /**\n   * Register event handler to websocket event\n   * @param eventType - websocket event\n   * @param handlerCallback - event handler\n   */\n  on(\n    eventType: PushUpdatesWebSocketClientEvent,\n    handlerCallback: (event: ChatCustomEvent) => void,\n  ): void {\n    this.#eventTarget.addEventListener(eventType, handlerCallback);\n  }\n\n  /**\n   * Unregister event handler to websocket event\n   * @param eventType - websocket event\n   * @param handlerCallback - event handler\n   */\n  off(\n    eventType: PushUpdatesWebSocketClientEvent,\n    handlerCallback: (event: CustomEvent) => void,\n  ): void {\n    this.#eventTarget.removeEventListener(eventType, handlerCallback);\n  }\n\n  /**\n   * Handle error from event listeners with onError callback or throw error\n   */\n  private _errorHandler(\n    event: CustomEvent<CloseEvent | ErrorEvent | Event>,\n  ): void {\n    const eventError = event.detail;\n    let error: WebSocketClientError | undefined;\n\n    if (eventError instanceof ErrorEvent) {\n      error = new WebSocketClientError('Connection error', eventError.message);\n    }\n    if (eventError instanceof CloseEvent) {\n      error = new WebSocketClientError('Connection closed', eventError.reason);\n    }\n    if (typeof error === 'undefined') {\n      error = new WebSocketClientError('Unknown error', eventError.type);\n    }\n\n    if (typeof this.onError === 'function') {\n      this.onError(error);\n    } else {\n      throw error;\n    }\n  }\n\n  #setupConnection(token?: string): void {\n    const port = this.options?.port ? `:${this.options?.port}` : '';\n    const host = this.options?.host ? `${this.options?.host}${port}` : '';\n    const prefix = this.options?.prefix ?? '';\n    const forceSecureProtocol = this.options?.forceSecureProtocol ?? true;\n\n    const socketUrl = createSocketUrl(host, prefix, {\n      brandId: this.brandId,\n      channelId: this.channelId,\n      consumerId: this.customerId,\n      visitorId: this.visitorId,\n      ...(token ? { transactionToken: token } : {}),\n    });\n\n    const heartbeatAfterAuthorize = !token;\n\n    this.#connection = setupSocketConnection(socketUrl, {\n      startClosed: true,\n      forceSecureProtocol,\n      heartbeatAfterAuthorize,\n      maxRetries: 0, // Disable reconnection attempts on the initial connection to avoid retrying in case of an authorization error. Configure maxRetries later once the connection is successfully established.\n    });\n\n    const errorHandlerBound = this._errorHandler.bind(this);\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.CLOSE,\n      errorHandlerBound,\n    );\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.ERROR,\n      errorHandlerBound,\n    );\n\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.OPEN,\n      (event: CustomEvent<Event>) => {\n        this.#connection?.socket.setMaxRetires(MAX_SOCKET_RECONNECT_RETRIES);\n        this.#socketEventHandler(event);\n      },\n    );\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.CLOSE,\n      this.#socketEventHandler,\n    );\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.MESSAGE,\n      this.#socketEventHandler,\n    );\n  }\n\n  #socketEventHandler = (\n    event: CustomEvent<CloseEvent | ErrorEvent | Event>,\n  ): void => {\n    this.#eventTarget.dispatchEvent(event);\n  };\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class UploadAttachmentError extends ChatSDKError {}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { AttachmentUpload } from '@brandembassy/ts-types-chat/dist/message/AttachmentUpload';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SendMessageOptions } from '../thread/SendMessageOptions';\nimport { generateId } from '../utils/generateId';\nimport { getBrandIdAndChannelId } from '../utils/getBrandIdAndChannelId';\n\nimport { createPayloadForAttachmentUpload } from './createPayloadForAttachmentUpload';\nimport {\n  isUploadFailResponse,\n  isUploadSuccessResponse,\n  uploadAttachment,\n} from './uploadAttachment';\nimport { UploadAttachmentError } from './UploadAttachmentError';\n\nexport const createAttachmentPayload = async (\n  file: File,\n  brandId: BrandId,\n  channelId: ChannelId,\n): Promise<AttachmentUpload> => {\n  const attachment = await createPayloadForAttachmentUpload(file);\n  const uploadAttachmentResponse = await uploadAttachment(\n    brandId,\n    channelId,\n    attachment,\n  );\n\n  if (isUploadSuccessResponse(uploadAttachmentResponse)) {\n    return {\n      url: uploadAttachmentResponse.fileUrl,\n      friendlyName: attachment.name,\n    };\n  }\n\n  if (isUploadFailResponse(uploadAttachmentResponse)) {\n    throw new UploadAttachmentError(\n      'Upload attachment failed',\n      uploadAttachmentResponse,\n    );\n  }\n\n  throw new ChatSDKError(\n    `Unknown file upload response (${uploadAttachmentResponse})`,\n  );\n};\n\nexport const createAttachmentUploadMessageData = async (\n  files: FileList,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  options: SendMessageOptions = {},\n): Promise<SendMessageEventData> => {\n  const { brandId, channelId } = getBrandIdAndChannelId();\n\n  try {\n    const attachments = await Promise.all<AttachmentUpload>(\n      Array.from(files).map(async (file) =>\n        createAttachmentPayload(file, brandId, channelId),\n      ),\n    );\n\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    return {\n      messageContent: {\n        type: MessageType.TEXT,\n        payload: {\n          text: '',\n        },\n      },\n      attachments,\n      browserFingerprint,\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n      idOnExternalPlatform: messageId,\n      consumer: {\n        customFields: [],\n      },\n      consumerContact: {\n        customFields: [],\n      },\n    };\n  } catch (error: unknown) {\n    if (error instanceof UploadAttachmentError) {\n      throw error;\n    }\n\n    if (error instanceof Error) {\n      throw new ChatSDKError(\n        `Send attachment failed because of (${error.message})`,\n      );\n    }\n\n    throw new ChatSDKError(`Unknown error during file upload`);\n  }\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nimport { createLocalFileReader } from './localFileReader';\n\nexport interface AttachmentPayload {\n  mimeType: string;\n  name: string;\n  url: string;\n}\n\nexport const createPayloadForAttachmentUpload = async (\n  file: File,\n): Promise<AttachmentPayload> => {\n  const reader = await createLocalFileReader(file);\n\n  if (reader.error !== null) {\n    throw new ChatSDKError(\n      `Cannot create payload for attachment upload because of error (${reader.error.message})`,\n    );\n  }\n\n  if (typeof reader.result !== 'string') {\n    throw new ChatSDKError(\n      `Cannot create payload for attachment upload because of missing:\n      reader result (${reader.result})`,\n    );\n  }\n\n  return {\n    url: reader.result,\n    name: file.name,\n    mimeType: file.type,\n  };\n};\n","export function createLocalFileReader(file: File): Promise<FileReader> {\n  return new Promise((resolve, reject): void => {\n    const reader = new FileReader();\n    reader.onloadend = (): void => {\n      resolve(reader);\n    };\n    reader.onerror = (errorEvent: ProgressEvent<FileReader>): void =>\n      reject(errorEvent.target?.error?.message);\n    reader.readAsDataURL(file);\n  });\n}\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { CALLER_SERVICE_ID } from '@brandembassy/ts-types-platform/dist/http/headers';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SdkVersionNotSupported } from '../error/SdkVersionNotSupported';\nimport { isSdkVersionNotSupportedEvent } from '../event/middleware/sdkVersionCheck';\nimport { getErrorResponseData } from '../request/getErrorResponseData';\nimport { isUndefined } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { AttachmentPayload } from './createPayloadForAttachmentUpload';\n\nexport interface UploadSuccessResponse {\n  fileUrl: string;\n}\n\nexport interface UploadFailResponse {\n  allowedFileSize: string;\n  allowedFileTypes: Array<{\n    description: string;\n    mimeType: string;\n  }>;\n}\n\nexport function isUploadSuccessResponse(\n  data: unknown,\n): data is UploadSuccessResponse {\n  return isUndefined((data as UploadSuccessResponse)?.fileUrl) === false;\n}\n\nexport function isUploadFailResponse(\n  data: unknown,\n): data is UploadFailResponse {\n  return isUndefined((data as UploadFailResponse)?.allowedFileSize) === false;\n}\n\nexport async function uploadAttachment(\n  brandId: BrandId,\n  channelId: string,\n  attachment: AttachmentPayload,\n): Promise<UploadSuccessResponse | UploadFailResponse> {\n  const { url, name: fileName, mimeType } = attachment;\n  const content = url.split(';base64,')[1];\n  const requestBody = { content, fileName, mimeType };\n  const response = await fetch(\n    `${SDKVariableStorage.ENDPOINT_CHAT}/chat/1.0/brand/${brandId}/channel/${channelId}/attachment`,\n    {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        [CALLER_SERVICE_ID]: SDKVariableStorage.APP_NAME ?? '',\n      },\n    },\n  );\n\n  if (!response.ok) {\n    const errorData = await getErrorResponseData(response);\n\n    if (isSdkVersionNotSupportedEvent(errorData)) {\n      throw new SdkVersionNotSupported();\n    }\n\n    throw new ChatSDKError(\n      `Failed to upload Attachments. Status (${response.status})`,\n    );\n  }\n\n  return response.json();\n}\n","import { CaseStatusChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseStatusChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type ContactStatusChangedData = CaseStatusChangedData;\n\nexport interface ContactStatusChangedChatEvent extends ChatEventData {\n  data: ContactStatusChangedData;\n  type: typeof ChatEvent.CONTACT_STATUS_CHANGED;\n}\n\nexport function isContactStatusChangedEvent(\n  event: ChatEventData,\n): event is ContactStatusChangedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_STATUS_CHANGED &&\n    (event as ContactStatusChangedChatEvent).data?.case?.id !== undefined\n  );\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nimport { ContactCreatedChatEvent } from './contactCreated';\n\nexport function isContactCreatedEvent(\n  event: ChatEventData,\n): event is ContactCreatedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_CREATED &&\n    (event as ContactCreatedChatEvent).data?.case?.id !== undefined\n  );\n}\n","import { ContactToRoutingQueueAssignmentChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseToRoutingQueueAssignmentChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface ContactToRoutingQueueAssignmentChangedChatEvent\n  extends ChatEventData {\n  data: ContactToRoutingQueueAssignmentChangedData;\n  type: typeof ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED;\n}\n\nexport function isContactToRoutingQueueAssignmentChangedEvent(\n  event: ChatEventData,\n): event is ContactToRoutingQueueAssignmentChangedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED &&\n    (event as ContactToRoutingQueueAssignmentChangedChatEvent).data?.case\n      ?.id !== undefined\n  );\n}\n","import { ContactRecipientsChangedData } from '@brandembassy/ts-types-platform/dist/groupChat/ContactRecipientsChangedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface ContactRecipientsChangedChatEvent extends ChatEventData {\n  data: ContactRecipientsChangedData;\n  type: PushUpdateEventType.CONTACT_RECIPIENTS_CHANGED;\n}\n\nexport function isContactRecipientsChangedEvent(\n  event: unknown,\n): event is ContactRecipientsChangedChatEvent {\n  return (\n    (event as ContactRecipientsChangedChatEvent).type ===\n    PushUpdateEventType.CONTACT_RECIPIENTS_CHANGED\n  );\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { BrowserFingerprint } from '@brandembassy/ts-types-chat/dist/user/BrowserFingerprint';\nimport { MessageId } from '@brandembassy/ts-types-platform/dist/message/MessageId';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\n\nexport type MessageContent = SendMessageEventData['messageContent'];\n\nexport const createMessageData = (\n  messageContent: MessageContent,\n  messageId: MessageId,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  browserFingerprint: BrowserFingerprint = getBrowserFingerprint(),\n): SendMessageEventData => ({\n  messageContent,\n  browserFingerprint,\n  idOnExternalPlatform: messageId,\n  thread: {\n    idOnExternalPlatform: threadIdOnExternalPlatform,\n  },\n  consumer: {\n    customFields: [],\n  },\n  consumerContact: {\n    customFields: [],\n  },\n  attachments: [],\n});\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { MoreMessagesLoadedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/MoreMessagesLoaded';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MoreMessagesLoadedEvent extends ChatEventData {\n  data: MoreMessagesLoadedPostbackData;\n}\n\nexport function isLoadMoreMessagesEventData(\n  event: ChatEventData,\n): event is MoreMessagesLoadedEvent {\n  return (\n    (event as MoreMessagesLoadedEvent).type ===\n      AwsResponseEventType.MORE_MESSAGES_LOADED &&\n    (event as MoreMessagesLoadedEvent)?.data?.messages !== undefined\n  );\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { LoadMoreMessagesEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LoadMoreMessages';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createLoadMoreMessagesPayloadData = (\n  eventData: LoadMoreMessagesEventData,\n): EventPayloadData<LoadMoreMessagesEventData> => ({\n  eventType: AwsInputEventType.LOAD_MORE_MESSAGES,\n  data: eventData,\n});\n","export class AbortError extends Error {\n  constructor(message: string = 'Aborted') {\n    super(message);\n    this.name = 'AbortError';\n  }\n}\n","import { AbortError } from '../error/AbortError';\n\nexport interface Abortable {\n  abort: (reason?: string) => void;\n  readonly abortReason?: string;\n}\n\ntype ExecutorFunction<T> = (\n  resolve: (value: PromiseLike<T> | T) => void,\n  reject: (reason?: unknown) => void,\n) => void;\n\ntype AbortableExecutorFunction<T> = (\n  resolve: (value: PromiseLike<T> | T) => void,\n  reject: (reason?: unknown) => void,\n  abortSignal: AbortSignal,\n) => void;\n\n/**\n * AbortablePromise is a Promise that can be aborted.\n * Source: https://github.com/zzdjk6/simple-abortable-promise, MIT License\n */\nexport class AbortablePromise<T> extends Promise<T> implements Abortable {\n  public abort: Abortable['abort'];\n\n  constructor(executor: AbortableExecutorFunction<T>) {\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n\n    const normalExecutor: ExecutorFunction<T> = (resolve, reject) => {\n      abortSignal.addEventListener('abort', () => {\n        reject(new AbortError(this.abortReason));\n      });\n\n      executor?.(resolve, reject, abortSignal);\n    };\n\n    super(normalExecutor);\n    this.abort = (reason) => {\n      this._abortReason = reason ?? 'Aborted';\n      abortController.abort();\n    };\n  }\n\n  private _abortReason?: string;\n\n  public get abortReason(): string | undefined {\n    return this._abortReason;\n  }\n\n  static from = <P>(promise: Promise<P>): AbortablePromise<P> => {\n    // If promise is already an AbortablePromise, return it directly\n    if (promise instanceof AbortablePromise) {\n      return promise;\n    }\n\n    return new AbortablePromise<P>((resolve, reject) => {\n      promise.then(resolve).catch(reject);\n    });\n  };\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class ArchiveThreadFailedError extends ChatSDKError {}\n","import { Message } from '@brandembassy/ts-types-platform/dist/message/Message';\nimport { MessageDirection } from '@brandembassy/ts-types-platform/dist/message/MessageDirection';\n\n/**\n * Get message author name of given message\n * @param message - message\n * @returns message author name\n */\nexport const getAuthor = (message: Message): string =>\n  message.direction === MessageDirection.INBOUND\n    ? message.authorEndUserIdentity?.fullName ?? ''\n    : `${message.authorUser?.firstName ?? ''} ${\n        message.authorUser?.surname ?? ''\n      }`.trim();\n","import { Message } from '@brandembassy/ts-types-platform/dist/message/Message';\n\nimport { isUndefined } from '../utils/is';\n\nexport function isMessage(item: unknown): item is Message {\n  const hasId = isUndefined((item as Message).id) === false;\n  const hasDirection = isUndefined((item as Message).direction) === false;\n  const hasMessageContent =\n    isUndefined((item as Message).messageContent) === false;\n\n  return hasId && hasDirection && hasMessageContent;\n}\n","import { MessageCreatedData } from '@brandembassy/ts-types-platform/dist/message/MessageCreatedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageCreatedEvent extends ChatEventData {\n  data: MessageCreatedData;\n  type: PushUpdateEventType.MESSAGE_CREATED;\n}\n\nexport function isMessageCreatedEvent(\n  event: unknown,\n): event is MessageCreatedEvent {\n  return (\n    (event as MessageCreatedEvent).type === PushUpdateEventType.MESSAGE_CREATED\n  );\n}\n","import { MessageSentData } from '@brandembassy/ts-types-platform/dist/message/MessageSentEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageSentEvent extends ChatEventData {\n  data: MessageSentData;\n  type: PushUpdateEventType.MESSAGE_SENT;\n}\n\nexport function isMessageSentEvent(event: unknown): event is MessageSentEvent {\n  return (event as MessageSentEvent).type === PushUpdateEventType.MESSAGE_SENT;\n}\n","import { MessageReadChangedData } from '@brandembassy/ts-types-platform/dist/message/MessageReadChangedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageReadChangedEvent extends ChatEventData {\n  data: MessageReadChangedData;\n  type: PushUpdateEventType.MESSAGE_READ_CHANGED;\n}\n\nexport function isMessageReadChangedEvent(\n  event: unknown,\n): event is MessageReadChangedEvent {\n  return (\n    (event as MessageReadChangedEvent).type ===\n    PushUpdateEventType.MESSAGE_READ_CHANGED\n  );\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class GetMetadataFailedError extends ChatSDKError {}\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadMetadataLoadedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadMetadataLoaded';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface LoadThreadMetadataChatEvent extends ChatEventData {\n  data: ThreadMetadataLoadedPostbackData;\n  type: AwsResponseEventType.THREAD_METADATA_LOADED;\n}\n\nexport const isLoadMetadataSuccessPayload = (\n  response: ChatEventData,\n): response is LoadThreadMetadataChatEvent =>\n  (response as LoadThreadMetadataChatEvent).type ===\n    AwsResponseEventType.THREAD_METADATA_LOADED &&\n  (response as LoadThreadMetadataChatEvent).data.lastMessage !== undefined;\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadRecoveredPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadRecovered';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { isUndefined } from '../utils/is';\n\nexport interface ThreadRecoveredChatEvent extends ChatEventData {\n  data: ThreadRecoveredPostbackData;\n}\n\nexport const isRecoverSuccessPayload = (\n  response: ChatEventData,\n): response is ThreadRecoveredChatEvent => {\n  const testResponseData = response.data as ThreadRecoveredPostbackData;\n\n  const hasPostbackData = isUndefined(testResponseData) === false;\n  const hasMessages = isUndefined(testResponseData?.messages) === false;\n  const isCorrectEventType =\n    response.type === AwsResponseEventType.THREAD_RECOVERED ||\n    response.type === AwsResponseEventType.LIVECHAT_RECOVERED;\n  const hasNoError = isUndefined(response.error);\n\n  return hasPostbackData && hasMessages && hasNoError && isCorrectEventType;\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface ThreadArchivedEvent extends ChatEventData {\n  type: AwsResponseEventType.THREAD_ARCHIVED;\n}\n\nexport function isThreadArchivedSuccessPayload(\n  response: ChatEventData,\n): response is ThreadArchivedEvent {\n  return (\n    (response as ThreadArchivedEvent).type ===\n    AwsResponseEventType.THREAD_ARCHIVED\n  );\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class LoadMoreMessagesFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RecoverThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/RecoverThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createRecoverThreadPayloadData(\n  threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform,\n): EventPayloadData<RecoverThreadEventData> {\n  const emptyData = {\n    eventType: AwsInputEventType.RECOVER_THREAD,\n    data: {},\n  };\n\n  if (threadIdOnExternalPlatform === undefined) {\n    return emptyData;\n  }\n\n  return {\n    ...emptyData,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SetThreadNameFailedError extends ChatSDKError {}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class ThreadRecoverFailedError extends ChatSDKError {}\n","import { LoadMoreMessagesEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LoadMoreMessages';\nimport { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\nimport { ContactNumber } from '@brandembassy/ts-types-platform/dist/contact/ContactNumber';\nimport { ContactStatus } from '@brandembassy/ts-types-platform/dist/contact/ContactStatus';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { createAttachmentUploadMessageData } from '../attachment/sendAttachments';\nimport { getAccessToken } from '../authorization/accessTokenStorage';\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\nimport { isContactStatusChangedEvent } from '../contact';\nimport { Customer } from '../customer/Customer';\nimport {\n  CustomFieldsMap,\n  CustomFieldsObject,\n  getCustomFieldsArray,\n  setCustomFields,\n  setCustomFieldsFromArray,\n} from '../customField/CustomFields';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport {\n  ChatCustomEvent,\n  ChatEvent,\n  ChatEventData,\n  ChatEventType,\n} from '../event/ChatEvent';\nimport { IChatEventTarget } from '../event/ChatEventTarget';\nimport {\n  EventListenerFunction,\n  RemoveListenerFunction,\n} from '../event/ListenerFunction';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { createMessageData } from '../message/createMessageData';\nimport { getPostbackMessageContent } from '../message/getPostbackMessageContent';\nimport { getTextMessageContent } from '../message/getTextMessageContent';\nimport {\n  isLoadMoreMessagesEventData,\n  MoreMessagesLoadedEvent,\n} from '../message/loadMoreMessagesEventData';\nimport { createLoadMoreMessagesPayloadData } from '../message/loadMoreMessagesPayload';\nimport { MessageSuccessEventData } from '../message/MessageSuccessEventData';\nimport { sendMessage } from '../message/sendMessage';\nimport { createSendMessagePreviewPayloadData } from '../message/sendMessagePreviewPayload';\nimport { sendOutboundMessage } from '../message/sendOutboundMessage';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { AbortablePromise } from '../utils/AbortablePromise';\nimport { generateId } from '../utils/generateId';\nimport { isEmpty, isUndefined } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { createArchiveThreadEventPayloadData } from './archiveThread';\nimport { ArchiveThreadFailedError } from './ArchiveThreadFailedError';\nimport { assertNonEmptyTextMessageContent } from './assertNonEmptyTextMessageContent';\nimport { GetMetadataFailedError } from './GetMetadataFailedError';\nimport {\n  isLoadMetadataSuccessPayload,\n  LoadThreadMetadataChatEvent,\n} from './isLoadMetadataSuccessPayload';\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { isThreadArchivedSuccessPayload } from './isThreadArchivedSuccessPayload';\nimport { createLastMessageSeenPayloadData } from './lastMessageSeenPayload';\nimport { LoadMoreMessagesFailedError } from './LoadMoreMessagesFailedError';\nimport { createLoadThreadMetadataEventPayloadData } from './metadata';\nimport { createRecoverThreadPayloadData } from './recoverThreadPayload';\nimport { SendMessageOptions } from './SendMessageOptions';\nimport { createSetThreadCustomFieldsPayloadData } from './setThreadCustomFieldsPayload';\nimport { SetThreadNameFailedError } from './SetThreadNameFailedError';\nimport { filterCurrentThreadEventHandler } from './threadEventHandler';\nimport { ThreadRecoveredData } from './ThreadRecoveredData';\nimport { ThreadRecoverFailedError } from './ThreadRecoverFailedError';\nimport { createSendTranscriptPayloadData } from './transcript';\nimport {\n  createStartTypingEventPayloadData,\n  createStopTypingEventPayloadData,\n} from './typingEvents';\nimport {\n  createUpdateThreadPayloadData,\n  isUpdateThreadSuccess,\n} from './updateThread';\n\nexport class Thread {\n  public idOnExternalPlatform: ThreadIdOnExternalPlatform;\n\n  protected _websocketClient: WebSocketClient;\n  protected _exists: boolean = false;\n\n  protected _messageEmitter: IChatEventTarget;\n  protected _typingTimeoutID: ReturnType<typeof setTimeout> | undefined =\n    undefined;\n  protected _isAuthorizationEnabled: boolean = false;\n  protected _customer: Customer | null;\n  protected _customFields: CustomFieldsMap = new Map();\n  private _typingForPreviewTimeoutID: ReturnType<typeof setTimeout> | undefined;\n  private _typingPreviewText: string = '';\n\n  constructor(\n    idOnExternalPlatform: ThreadIdOnExternalPlatform,\n    websocketClient: WebSocketClient,\n    messageEmitter: IChatEventTarget,\n    customer: Customer | null,\n    customFields: CustomFieldsObject = {},\n    isAuthorizationEnabled: boolean = false,\n  ) {\n    this.idOnExternalPlatform = idOnExternalPlatform;\n    this._websocketClient = websocketClient;\n    this._messageEmitter = messageEmitter;\n    this._customer = customer;\n    this._isAuthorizationEnabled = isAuthorizationEnabled;\n\n    setCustomFields(this._customFields, customFields);\n    this._registerEventHandlers();\n  }\n\n  /**\n   * Recover existing chat\n   * @returns AbortablePromise<ThreadRecoveredData>\n   * @throws ThreadRecoverFailedError\n   *  * This exception is thrown when the recover fails or the thread does not exist.\n   */\n  public recover(): AbortablePromise<ThreadRecoveredData> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const response = await sendChatEvent(\n        createRecoverThreadPayloadData(this.idOnExternalPlatform),\n        this._websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(response)) {\n        const { contact, consumerContact, ...restData } = response.data;\n\n        resolve({\n          ...restData,\n          contact: contact ?? consumerContact,\n        });\n      } else {\n        reject(new ThreadRecoverFailedError('Thread recover fail', response));\n      }\n    });\n  }\n\n  /**\n   * Send message\n   * @param messageData - message data\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error can contain (`error.data`) a response from the backend with details.\n   */\n  public async sendMessage(\n    messageData: SendMessageEventData,\n  ): Promise<MessageSuccessEventData> {\n    assertNonEmptyTextMessageContent(messageData);\n\n    const messageDataWithCustomFields =\n      this._mergeCustomFieldsAndAccessTokenWithMessageData(messageData, false);\n\n    return sendMessage(messageDataWithCustomFields, this._websocketClient);\n  }\n\n  /**\n   * Send text message\n   * @param messageText - text of message\n   * @param options - options\n   */\n  public async sendTextMessage(\n    messageText: string,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    const textMessageContent = getTextMessageContent(messageText);\n    const messageData = createMessageData(\n      textMessageContent,\n      messageId,\n      this.idOnExternalPlatform,\n      browserFingerprint,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send postback message\n   * @param postback - postback\n   * @param messageText - text of message\n   * @param options - options\n   */\n  public async sendPostbackMessage(\n    postback: string,\n    messageText: string,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    const postbackMessageContent = getPostbackMessageContent(\n      postback,\n      messageText,\n    );\n    const messageData = createMessageData(\n      postbackMessageContent,\n      messageId,\n      this.idOnExternalPlatform,\n      browserFingerprint,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send Outbound Message\n   * @param messageData - message data\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error contains (`error.data`) a response from the backend with details.\n   */\n  public async sendOutboundMessage(\n    messageData: SendOutboundEventData,\n  ): Promise<MessageSuccessEventData> {\n    const outboundEventDataWithCustomFields =\n      this._mergeCustomFieldsAndAccessTokenWithMessageData(messageData, true);\n\n    return sendOutboundMessage(\n      outboundEventDataWithCustomFields,\n      this._websocketClient,\n    );\n  }\n\n  /**\n   * Load previous messages\n   * @returns Promise MoreMessagesLoadedEvent | null\n   * @throws LoadMoreMessagesFailedError\n   *  * This exception is thrown when the attempt to load more messages fails.\n   */\n  public async loadMoreMessages(): Promise<MoreMessagesLoadedEvent | null> {\n    const { scrollToken, oldestMessageDatetime } =\n      SDKVariableStorage.THREAD_DATA ?? {};\n\n    if (isEmpty(scrollToken)) {\n      return null;\n    }\n\n    const loadMoreMessagesEventData: LoadMoreMessagesEventData = {\n      scrollToken: String(scrollToken),\n      // @ts-expect-error oldestMessageDatetime is missing in type definition\n      oldestMessageDatetime,\n      thread: { idOnExternalPlatform: this.idOnExternalPlatform },\n    };\n\n    const response = await sendChatEvent(\n      createLoadMoreMessagesPayloadData(loadMoreMessagesEventData),\n      this._websocketClient,\n    );\n\n    if (isLoadMoreMessagesEventData(response)) {\n      return response;\n    }\n\n    throw new LoadMoreMessagesFailedError(\n      'Load more messages failed',\n      response,\n    );\n  }\n\n  /**\n   * Mark all messages in the thread as seen\n   */\n  public async lastMessageSeen(): Promise<ChatEventData> {\n    const payloadData = createLastMessageSeenPayloadData(\n      this.idOnExternalPlatform,\n    );\n\n    return sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  /**\n   * Send attachment\n   *\n   * Raw function to send attachments\n   * @param files - An object of this type is returned by the files' property of the HTML <input> element; this lets you access the list of files selected with the <input type=\"file\"> element.\n   * @param options - options\n   * @throws UploadAttachmentError\n   *  * This exception is thrown when the file upload fails. The `error.data` contains information about allowed file size and types.\n   */\n  public async sendAttachments(\n    files: FileList,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    if (isUndefined(files) || files.length === 0) {\n      throw new ChatSDKError(\n        'FileList must be provided to sendAttachment method',\n      );\n    }\n\n    const messageData = await createAttachmentUploadMessageData(\n      files,\n      this.idOnExternalPlatform,\n      options,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send start and stop typing events. It sends stop typing event after the timeout. Repeated calls resets this timeout.\n   * @param timeout - The timeout in milliseconds.\n   * @param onSendCallback - Callback to be called after the stop typing event is sent.\n   */\n  public keystroke(timeout = 1000, onSendCallback?: () => void): void {\n    if (!this._typingTimeoutID) {\n      sendChatEvent(\n        createStartTypingEventPayloadData(this.idOnExternalPlatform),\n        this._websocketClient,\n      );\n    }\n\n    clearTimeout(this._typingTimeoutID);\n    this._typingTimeoutID = setTimeout(() => {\n      this._stopTypingCallback(onSendCallback);\n    }, timeout);\n  }\n\n  /**\n   * Manually send the stop typing event and clear the keystroke timeout.\n   */\n  public stopTyping(): void {\n    this._stopTypingCallback();\n  }\n\n  private _stopTypingCallback(onSendCallback?: () => void): void {\n    clearTimeout(this._typingTimeoutID);\n    this._typingTimeoutID = undefined;\n    sendChatEvent(\n      createStopTypingEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n    if (typeof onSendCallback === 'function') {\n      onSendCallback();\n    }\n  }\n\n  /**\n   * Send typing event for message preview after the timeout.\n   * @param currentText - current text\n   * @param timeout - timeout in milliseconds\n   * @returns void\n   *\n   */\n  keystrokeForPreview(currentText: string, timeout = 1250): void {\n    this._typingPreviewText = currentText;\n    if (this._typingForPreviewTimeoutID) {\n      return;\n    }\n\n    this._typingForPreviewTimeoutID = setTimeout(() => {\n      this.stopTypingForPreview();\n    }, timeout);\n  }\n\n  /**\n   * Manually send the stop typing event for message preview and clear the keystroke timeout.\n   * @param shouldSendPreview - should send preview\n   * @returns void\n   *\n   */\n  stopTypingForPreview(shouldSendPreview = true): void {\n    clearTimeout(this._typingForPreviewTimeoutID);\n    this._typingForPreviewTimeoutID = undefined;\n    const currentPreviewText = this._typingPreviewText;\n    this._typingPreviewText = '';\n\n    if (shouldSendPreview === false) {\n      return;\n    }\n    this.sendMessagePreview(currentPreviewText);\n  }\n\n  /**\n   * Get Thread Metadata\n   * @returns response otherwise throw an error response\n   * @throws GetMetadataFailedError\n   *  * This exception is thrown when getting thread metadata failed.\n   */\n  public async getMetadata(): Promise<LoadThreadMetadataChatEvent> {\n    const response = await sendChatEvent(\n      createLoadThreadMetadataEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n\n    if (isLoadMetadataSuccessPayload(response)) {\n      return response;\n    }\n\n    throw new GetMetadataFailedError('Get metadata failed', response);\n  }\n\n  public onThreadEvent(\n    type: ChatEventType,\n    handler: EventListenerFunction,\n  ): RemoveListenerFunction {\n    const filteredEventHandler = filterCurrentThreadEventHandler(\n      this.idOnExternalPlatform,\n      handler,\n    );\n\n    this._messageEmitter.addEventListener(type, filteredEventHandler);\n\n    return () => {\n      this._messageEmitter.removeEventListener(type, filteredEventHandler);\n    };\n  }\n\n  /**\n   * Send current Custom Fields\n   * @param selectedFieldIDs - it will send only custom fields with these IDs, if provided. Otherwise, it will send all custom fields.\n   */\n  public async sendCustomFields(\n    selectedFieldIDs?: Array<CustomField['ident']>,\n  ): Promise<ChatEventData> {\n    const customFieldsArray = getCustomFieldsArray(this._customFields).filter(\n      (customField) => {\n        if (selectedFieldIDs) {\n          return selectedFieldIDs.includes(customField.ident);\n        }\n\n        return true;\n      },\n    );\n\n    const customFieldsData = createSetThreadCustomFieldsPayloadData(\n      customFieldsArray,\n      this.idOnExternalPlatform,\n    );\n\n    return sendChatEvent(customFieldsData, this._websocketClient);\n  }\n\n  /**\n   * Set thread custom fields and send them\n   * @param customFields - custom fields object\n   * @example \\{ indentName: 'value' \\}\n   */\n  public async setCustomFields(\n    customFields: CustomFieldsObject,\n  ): Promise<void> {\n    setCustomFields(this._customFields, customFields);\n\n    if (this._exists === false) {\n      // let customFields be sent by the first message\n      return;\n    }\n\n    await this.sendCustomFields(Object.keys(customFields));\n  }\n\n  /**\n   * Set thread custom field\n   * @param name - custom field name\n   * @param value - custom field value\n   */\n  public setCustomField(\n    name: CustomField['ident'],\n    value: CustomField['value'],\n  ): Promise<void> {\n    return this.setCustomFields({ [name]: value });\n  }\n\n  /**\n   * Set thread as archived\n   * @returns Promise true\n   * @throws ArchiveThreadFailedError\n   *  * This exception is thrown when the archive thread failed.\n   */\n  public async archive(): Promise<true> {\n    const response = await sendChatEvent(\n      createArchiveThreadEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n\n    if (isThreadArchivedSuccessPayload(response)) {\n      return true;\n    }\n\n    throw new ArchiveThreadFailedError('Archive Thread failed', response);\n  }\n\n  /**\n   * Set thread name\n   * @param name - New name of the Thread\n   * @returns Promise true\n   * @throws SetThreadNameFailedError\n   *  * This exception is thrown when the set thread name failed.\n   */\n  public async setName(name: string): Promise<true> {\n    const updateThreadData = createUpdateThreadPayloadData(\n      this.idOnExternalPlatform,\n      name,\n    );\n\n    const response = await sendChatEvent(\n      updateThreadData,\n      this._websocketClient,\n    );\n\n    if (isUpdateThreadSuccess(response)) {\n      return true;\n    }\n\n    throw new SetThreadNameFailedError('Set Thread name failed', response);\n  }\n\n  /**\n   * Send message preview\n   * @param text - text\n   */\n  public async sendMessagePreview(text: string): Promise<void> {\n    const payloadData = createSendMessagePreviewPayloadData(\n      this.idOnExternalPlatform,\n      text,\n    );\n\n    await sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  /**\n   * Send conversation transcript to email\n   */\n  public async sendTranscript(\n    contactNumber: ContactNumber,\n    email: string,\n  ): Promise<ChatEventData> {\n    const payloadData = createSendTranscriptPayloadData(contactNumber, email);\n\n    return sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  protected _setThreadAndCustomerExists(): void {\n    this._exists = true;\n    this._customer?.setExists(true);\n  }\n\n  protected _clearCustomFieldsOnContactStatusChangedToClosed(\n    event: ChatCustomEvent,\n  ): void {\n    const eventDetail = event.detail;\n\n    if (!isContactStatusChangedEvent(eventDetail)) {\n      return;\n    }\n\n    if (eventDetail.data.case.status === ContactStatus.CLOSED) {\n      // Delete custom fields after contact closure to prevent sending custom fields from previous contact.\n      this._customFields.clear();\n    }\n  }\n\n  private _mergeCustomFieldsAndAccessTokenWithMessageData<\n    T extends SendMessageEventData | SendOutboundEventData,\n  >(messageData: T, isOutbound: boolean): T {\n    // Access token\n    let accessToken;\n    const storedAccessToken =\n      (this._isAuthorizationEnabled && getAccessToken()) ?? false;\n    if (storedAccessToken !== false) {\n      accessToken = { token: storedAccessToken.token };\n    }\n\n    // Update Thread (Contact) custom fields\n    setCustomFieldsFromArray(\n      this._customFields,\n      messageData.consumerContact.customFields,\n    );\n\n    const consumerContact = {\n      customFields: getCustomFieldsArray(this._customFields),\n    };\n\n    // Update Customer custom fields\n    let consumer;\n    if (!isOutbound) {\n      this._customer?.setCustomFieldsFromArray(\n        (messageData as SendMessageEventData).consumer?.customFields ?? [],\n      );\n      consumer = {\n        customFields: this._customer?.getCustomFieldsArray() ?? [],\n      };\n    }\n\n    return {\n      ...messageData,\n      accessToken,\n      consumer,\n      consumerContact,\n    };\n  }\n\n  private _registerEventHandlers() {\n    this.onThreadEvent(ChatEvent.CASE_CREATED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.CONTACT_CREATED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.THREAD_RECOVERED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.CONTACT_STATUS_CHANGED, (event) =>\n      this._clearCustomFieldsOnContactStatusChangedToClosed(event),\n    );\n  }\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { SendMessageFailedError } from '../message';\nimport { isEmpty } from '../utils/is';\n\nexport function assertNonEmptyTextMessageContent(\n  messageData: SendMessageEventData,\n): void {\n  if (messageData.messageContent.type !== MessageType.TEXT) {\n    return;\n  }\n\n  if (messageData.attachments.length > 0) {\n    return;\n  }\n\n  if (isEmpty(messageData.messageContent.payload.text) === false) {\n    return;\n  }\n\n  throw new SendMessageFailedError(\n    'Message content cannot be empty for text message',\n  );\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendMessagePayloadData } from './sendMessagePayload';\n\nexport const sendMessage = async (\n  messageData: SendMessageEventData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const sendMessagePayloadData = createSendMessagePayloadData(messageData);\n\n  const response = await sendChatEvent(sendMessagePayloadData, websocketClient);\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send message failed', response);\n};\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendMessagePayloadData = (\n  eventData: SendMessageEventData,\n): EventPayloadData<SendMessageEventData> => ({\n  eventType: AwsInputEventType.SEND_MESSAGE,\n  data: eventData,\n});\n","import { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { MessageContent } from './createMessageData';\n\nexport function getTextMessageContent(messageText: string): MessageContent {\n  return {\n    payload: {\n      text: messageText,\n    },\n    type: MessageType.TEXT,\n  };\n}\n","import { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { MessageContent } from './createMessageData';\n\nexport function getPostbackMessageContent(\n  postback: string,\n  messageText: string,\n): MessageContent {\n  return {\n    payload: {\n      text: messageText,\n      postback, // Leaving this here for backwards compatibility\n    },\n    postback,\n    type: MessageType.TEXT, // MessageType.POSTBACK is deprecated\n  };\n}\n","import { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendOutboundMessagePayloadData } from './sendOutboundMessagePayload';\n\nexport const sendOutboundMessage = async (\n  messageData: SendOutboundEventData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const sendOutboundMessagePayloadData =\n    createSendOutboundMessagePayloadData(messageData);\n\n  const response = await sendChatEvent(\n    sendOutboundMessagePayloadData,\n    websocketClient,\n  );\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send Outbound message failed', response);\n};\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendOutboundMessagePayloadData = (\n  eventData: SendOutboundEventData,\n): EventPayloadData<SendOutboundEventData> => ({\n  eventType: AwsInputEventType.SEND_OUTBOUND,\n  data: eventData,\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { MessageSeenByConsumerEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/MessageSeenByConsumer';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createLastMessageSeenPayloadData(\n  threadIdOnExternalPlatform: string,\n): EventPayloadData<MessageSeenByConsumerEventData> {\n  return {\n    eventType: AwsInputEventType.MESSAGE_SEEN,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SenderTypingEndedEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SenderTypingEnded';\nimport { SenderTypingStartedEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SenderTypingStarted';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createStartTypingEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SenderTypingStartedEventData> {\n  return {\n    eventType: AwsInputEventType.SENDER_TYPING_STARTED,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n\nexport function createStopTypingEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SenderTypingEndedEventData> {\n  return {\n    eventType: AwsInputEventType.SENDER_TYPING_ENDED,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ArchiveThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/ArchiveThread';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createLoadThreadMetadataEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<ArchiveThreadEventData> {\n  return {\n    eventType: AwsInputEventType.LOAD_THREAD_METADATA,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { ChatCustomEvent } from '../event/ChatEvent';\nimport { EventListenerFunction } from '../event/ListenerFunction';\n\ninterface DataWithThread {\n  case?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  message?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  messagePreview?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  thread?: {\n    idOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n}\n\nconst getThreadId = (data: unknown): ThreadIdOnExternalPlatform | undefined => {\n  const dataWithThread = data as DataWithThread;\n\n  return (\n    dataWithThread?.thread?.idOnExternalPlatform ??\n    dataWithThread?.case?.threadIdOnExternalPlatform ??\n    dataWithThread?.message?.threadIdOnExternalPlatform ??\n    dataWithThread?.messagePreview?.threadIdOnExternalPlatform\n  );\n};\n\nexport const filterCurrentThreadEventHandler =\n  (threadId: ThreadIdOnExternalPlatform, handler: EventListenerFunction) =>\n  (event: ChatCustomEvent): void => {\n    const eventData = event.detail.data;\n\n    const eventThreadId = getThreadId(eventData);\n\n    if (eventThreadId === threadId) {\n      handler(event);\n    }\n  };\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SetConsumerContactCustomFieldsEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SetConsumerContactCustomFields';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createSetThreadCustomFieldsPayloadData(\n  customFields: Array<CustomField>,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SetConsumerContactCustomFieldsEventData> {\n  return {\n    eventType: AwsInputEventType.SET_CONSUMER_CONTACT_CUSTOM_FIELD,\n    data: {\n      customFields,\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ArchiveThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/ArchiveThread';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createArchiveThreadEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<ArchiveThreadEventData> {\n  return {\n    eventType: AwsInputEventType.ARCHIVE_THREAD,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { UpdateThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/UpdateThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { isUndefined } from '../utils/is';\n\nexport function createUpdateThreadPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  threadName: string,\n): EventPayloadData<UpdateThreadEventData> {\n  return {\n    eventType: AwsInputEventType.UPDATE_THREAD,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n        threadName,\n      },\n    },\n  };\n}\n\nexport function isUpdateThreadSuccess(response: ChatEventData): boolean {\n  return isUndefined(response.error);\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendMessagePreviewEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessagePreview';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendMessagePreviewPayloadData = (\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  text: string,\n): EventPayloadData<SendMessagePreviewEventData> => ({\n  eventType: AwsInputEventType.SEND_MESSAGE_PREVIEW,\n  data: {\n    thread: {\n      idOnExternalPlatform: threadIdOnExternalPlatform,\n    },\n    messageContent: {\n      payload: { text },\n      type: MessageType.TEXT,\n    },\n  },\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nimport { ContactNumber } from '@brandembassy/ts-types-platform/dist/contact/ContactNumber';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendTranscriptPayloadData = (\n  contactNumber: ContactNumber,\n  email: string,\n): EventPayloadData<AwsInputEventData> => ({\n  eventType: AwsInputEventType.SEND_TRANSCRIPT,\n  data: {\n    consumerContact: {\n      id: contactNumber,\n    },\n    consumerRecipients: [\n      {\n        idOnExternalPlatform: email,\n      },\n    ],\n  },\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RecoverThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/RecoverThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../../sockets/EventPayload';\n\nexport function createRecoverLivechatThreadPayloadData(\n  threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform,\n): EventPayloadData<RecoverThreadEventData> {\n  const emptyData = {\n    eventType: AwsInputEventType.RECOVER_LIVECHAT,\n    data: {},\n  };\n\n  if (threadIdOnExternalPlatform === undefined) {\n    return emptyData;\n  }\n\n  return {\n    ...emptyData,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { LoadMoreMessagesEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LoadMoreMessages';\nimport { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { Customer } from '../../customer/Customer';\nimport { CustomFieldsObject } from '../../customField/CustomFields';\nimport { ChatSDKError } from '../../error/ChatSDKError';\nimport { ChatCustomEvent, ChatEvent } from '../../event/ChatEvent';\nimport { IChatEventTarget } from '../../event/ChatEventTarget';\nimport { sendChatEvent } from '../../event/sendChatEvent';\nimport {\n  isLoadMoreMessagesEventData,\n  MoreMessagesLoadedEvent,\n} from '../../message/loadMoreMessagesEventData';\nimport { createLoadMoreMessagesPayloadData } from '../../message/loadMoreMessagesPayload';\nimport { MessageSuccessEventData } from '../../message/MessageSuccessEventData';\nimport { WebSocketClient } from '../../sockets/WebSocketClient';\nimport { AbortablePromise } from '../../utils/AbortablePromise';\nimport { isEmpty, isUndefined } from '../../utils/is';\nimport { SDKVariableStorage } from '../../variables/VariableStorage';\nimport { isRecoverSuccessPayload } from '../isRecoverSuccessPayload';\nimport { LoadMoreMessagesFailedError } from '../LoadMoreMessagesFailedError';\nimport { Thread } from '../Thread';\nimport { ThreadRecoveredData } from '../ThreadRecoveredData';\nimport { ThreadRecoverFailedError } from '../ThreadRecoverFailedError';\n\nimport { createEndThreadPayloadData } from './createEndThreadPayloadData';\nimport { createRecoverLivechatThreadPayloadData } from './recoverLivechatThreadPayload';\n\nexport class LivechatThread extends Thread {\n  protected _isInitialized: boolean = false;\n  protected _canSendMessage: boolean = true;\n\n  constructor(\n    idOnExternalPlatform: ThreadIdOnExternalPlatform,\n    websocketClient: WebSocketClient,\n    messageEmitter: IChatEventTarget,\n    customer: Customer | null,\n    customFields: CustomFieldsObject = {},\n    isAuthorizationEnabled: boolean = false,\n  ) {\n    super(\n      idOnExternalPlatform,\n      websocketClient,\n      messageEmitter,\n      customer,\n      customFields,\n      isAuthorizationEnabled,\n    );\n\n    this._registerLivechatEventHandlers();\n  }\n\n  /**\n   * Recover existing live chat\n   * @returns AbortablePromise ThreadRecoveredData\n   * @throws ThreadRecoverFailedError\n   *  * This exception is thrown when the recover fails or the thread does not exist.\n   */\n  public override recover(): AbortablePromise<ThreadRecoveredData> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const response = await sendChatEvent(\n        createRecoverLivechatThreadPayloadData(this.idOnExternalPlatform),\n        this._websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(response)) {\n        const { contact, consumerContact, ...restData } = response.data;\n\n        resolve({\n          ...restData,\n          contact: contact ?? consumerContact,\n        });\n      } else {\n        reject(new ThreadRecoverFailedError('Thread recover fail', response));\n      }\n    });\n  }\n\n  public override async sendMessage(\n    messageData: SendMessageEventData,\n  ): Promise<MessageSuccessEventData> {\n    if (this._canSendMessage === false) {\n      throw new ChatSDKError('Cannot send more messages to Contact');\n    }\n\n    return super.sendMessage(messageData);\n  }\n\n  /**\n   * Start livechat\n   * @param initialMessageText - initial message text\n   */\n  public async startChat(\n    initialMessageText = 'Begin conversation',\n  ): Promise<MessageSuccessEventData | void> {\n    if (this._isInitialized) {\n      throw new ChatSDKError('Chat is already initialized');\n    }\n\n    try {\n      const result = await this.sendTextMessage(initialMessageText);\n      this._isInitialized = true;\n\n      return result;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        throw new ChatSDKError(\n          `Sending initial message failed because of (${error.message})`,\n        );\n      }\n\n      return;\n    }\n  }\n\n  public async endChat(): Promise<void> {\n    const threadData = SDKVariableStorage.THREAD_DATA ?? {};\n    const contactId = threadData?.contactId;\n\n    if (isUndefined(contactId)) {\n      throw new ChatSDKError(\n        'Cannot end Chat because of missing ContactId in the storage',\n      );\n    }\n\n    await sendChatEvent(\n      createEndThreadPayloadData(this.idOnExternalPlatform, contactId),\n      this._websocketClient,\n    );\n\n    return;\n  }\n\n  /**\n   * Load previous messages\n   * @returns Promise MoreMessagesLoadedEvent | null\n   * @throws LoadMoreMessagesFailedError\n   *  * This exception is thrown when the attempt to load more messages fails.\n   */\n  public async loadMoreMessages(): Promise<MoreMessagesLoadedEvent | null> {\n    const { scrollToken, oldestMessageDatetime, contactId } =\n      SDKVariableStorage.THREAD_DATA ?? {};\n\n    if (isEmpty(scrollToken) || isEmpty(contactId)) {\n      return null;\n    }\n\n    const loadMoreMessagesEventData: LoadMoreMessagesEventData = {\n      scrollToken: String(scrollToken),\n      // @ts-expect-error oldestMessageDatetime is missing in type definition\n      oldestMessageDatetime,\n      thread: { idOnExternalPlatform: this.idOnExternalPlatform },\n      // If a contactId is provided, the search will return messages only for this contact\n      contact: {\n        id: contactId,\n      },\n    };\n\n    const response = await sendChatEvent(\n      createLoadMoreMessagesPayloadData(loadMoreMessagesEventData),\n      this._websocketClient,\n    );\n\n    if (isLoadMoreMessagesEventData(response)) {\n      return response;\n    }\n\n    throw new LoadMoreMessagesFailedError(\n      'Load more messages failed',\n      response,\n    );\n  }\n\n  private _registerLivechatEventHandlers() {\n    this.onThreadEvent(\n      ChatEvent.LIVECHAT_RECOVERED,\n      (event: ChatCustomEvent) => {\n        if (!isRecoverSuccessPayload(event.detail)) {\n          return;\n        }\n\n        this._setThreadAndCustomerExists();\n      },\n    );\n  }\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { EndContactEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/EndContact';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../../sockets/EventPayload';\n\nexport function createEndThreadPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  contactId: CaseId,\n): EventPayloadData<EndContactEventData> {\n  return {\n    eventType: AwsInputEventType.END_CONTACT,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n      contact: { id: contactId },\n    },\n  };\n}\n","import { ThreadListFetchedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadListFetched';\n\nimport { isNull } from '../utils/is';\n\nexport const isThreadListFetchedPostbackData = (\n  data: unknown,\n): data is ThreadListFetchedPostbackData => {\n  if (isNull(data)) {\n    return false;\n  }\n\n  return 'threads' in (data as ThreadListFetchedPostbackData);\n};\n","import { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport function storeContactId(contactId: CaseId): void {\n  const originalThreadData = SDKVariableStorage.THREAD_DATA ?? {};\n\n  SDKVariableStorage.THREAD_DATA = {\n    ...originalThreadData,\n    contactId,\n  };\n}\n","import { ContactNumber } from '@brandembassy/ts-types-platform/dist/contact/ContactNumber';\n\nimport { isContactCreatedEvent } from '../contact/isContactCreatedEvent';\nimport { ChatEventData } from '../event/ChatEvent';\n\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { storeContactId } from './storeContactId';\n\nexport function storeContactIdMiddleware(\n  eventData: ChatEventData,\n): ChatEventData {\n  if (isContactCreatedEvent(eventData)) {\n    const contactId = eventData.data.case.id;\n\n    storeContactId(contactId);\n  }\n\n  if (isRecoverSuccessPayload(eventData)) {\n    const contactId = (eventData.data.consumerContact?.caseId ??\n      eventData.data.contact?.id) as ContactNumber;\n\n    storeContactId(contactId);\n  }\n\n  return eventData;\n}\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import { Message } from '../message';\nimport { isUndefined } from '../utils/is';\nimport { lastItemInArray } from '../utils/last';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport interface ScrollData {\n  messages: Array<Message>;\n  scrollToken: string;\n}\n\nexport function storeThreadScrollData(scrollData: ScrollData): void {\n  const oldestMessageDatetime = lastItemInArray(scrollData.messages)?.createdAt;\n\n  const oldThreadData = SDKVariableStorage.THREAD_DATA ?? {};\n\n  SDKVariableStorage.THREAD_DATA = {\n    ...oldThreadData,\n    scrollToken: scrollData.scrollToken,\n    oldestMessageDatetime: isUndefined(oldestMessageDatetime)\n      ? ''\n      : oldestMessageDatetime,\n  };\n}\n","import { ChatEventData } from '../event/ChatEvent';\nimport { isLoadMoreMessagesEventData } from '../message/loadMoreMessagesEventData';\n\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { storeThreadScrollData } from './storeThreadScrollData';\n\nexport function storeThreadScrollDataMiddleware(\n  eventData: ChatEventData,\n): ChatEventData {\n  if (isRecoverSuccessPayload(eventData)) {\n    const { messages, messagesScrollToken } = eventData.data;\n\n    storeThreadScrollData({\n      messages,\n      scrollToken: messagesScrollToken,\n    });\n  }\n\n  if (isLoadMoreMessagesEventData(eventData)) {\n    const { scrollToken, messages } = eventData.data;\n\n    storeThreadScrollData({ scrollToken, messages });\n  }\n\n  return eventData;\n}\n","export function assertNonNullable<T>(\n  value: T,\n): asserts value is NonNullable<T> {\n  if (typeof value === 'undefined' || value === null) {\n    throw Error(`Expected non-nullish value, got ${value}`);\n  }\n}\n\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function assertIsCallable<T extends (...args: Array<any>) => any>(\n  value: T,\n): asserts value is T {\n  if (typeof value !== 'function') {\n    throw Error(`Expected a callable function, got ${value}`);\n  }\n}\n","import { WebSocketClientEvent } from '@brandembassy/push-updates-sdk';\nimport { AuthorizationToken } from '@brandembassy/ts-types-chat/dist/authorization/AuthorizationToken';\nimport { ConsumerAuthorizationSuccessPayloadData } from '@brandembassy/ts-types-chat/dist/authorization/ConsumerAuthorizationSuccessPayloadData';\nimport { AwsChatWindowEventActionRoute } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ChannelInfo } from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\nimport { Thread as ThreadView } from '@brandembassy/ts-types-platform/dist/thread/Thread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\nimport { VisitId } from '@brandembassy/ts-types-platform/dist/visit/visitId';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport {\n  getAccessToken,\n  resetAccessToken,\n  setAccessToken,\n} from './authorization/accessTokenStorage';\nimport { AuthorizationError } from './authorization/AuthorizationError';\nimport { createAuthorizationPayloadData } from './authorization/authorizationPayloadData';\nimport { authorizationReconnect } from './authorization/authorizationReconnect';\nimport { createRefreshTokenPayload } from './authorization/createRefreshTokenPayload';\nimport { CustomerReconnectSuccessPayloadData } from './authorization/CustomerReconnectSuccessPayloadData';\nimport { createGenerateAuthorizationTokenPayloadData } from './authorization/generateAuthorizationTokenPayload';\nimport { handleRefreshToken } from './authorization/handleRefreshToken';\nimport { isAuthorizationTokenGeneratedPostbackData } from './authorization/isAuthorizationTokenGeneratedPostbackData';\nimport { isAuthSuccessEvent } from './authorization/isAuthSuccessEvent';\nimport { isTokenRefreshedSuccessResponse } from './authorization/isTokenRefreshedSuccessResponse';\nimport { getBrowserLanguage } from './browserFingerprint/getBrowserFingerprint';\nimport {\n  ChannelAvailabilityResponse,\n  fetchChannelAvailability,\n} from './channel/fetchChannelAvailability';\nimport { fetchChannelInfo } from './channel/fetchChannelInfo';\nimport { handleBasicChannelInfo } from './channel/handleBasicChannelInfo';\nimport { type ChatSDKOptions } from './ChatSDKOptions';\nimport { Customer } from './customer/Customer';\nimport { isCustomerIdentityIdValid } from './customer/isCustomerIdentityIdValid';\nimport {\n  CustomFieldsMap,\n  getCustomFields,\n  setCustomFieldsFromArray,\n} from './customField/CustomFields';\nimport { APP_NAME } from './env/appName';\nimport { EnvironmentName, buildEnvironmentEndpoints } from './env/Environments';\nimport { setEnvironmentEndpoints } from './env/setEnvironmentEndpoints';\nimport { ChatSDKError } from './error/ChatSDKError';\nimport { ChatCustomEvent, ChatEvent, ChatEventType } from './event/ChatEvent';\nimport { ChatEventMiddleware } from './event/ChatEventMiddleware';\nimport { ChatEventTarget, IChatEventTarget } from './event/ChatEventTarget';\nimport { RemoveListenerFunction } from './event/ListenerFunction';\nimport { chatEventMapper } from './event/middleware/ChatEventMapper';\nimport { sdkVersionCheck } from './event/middleware/sdkVersionCheck';\nimport { sendChatEvent } from './event/sendChatEvent';\nimport { MessageSuccessEventData } from './message/MessageSuccessEventData';\nimport {\n  OfflineMessageData,\n  sendOfflineMessage,\n} from './message/sendOfflineMessage';\nimport { getEventData } from './request/getEventData';\nimport { makeRequest } from './request/makeRequest';\nimport {\n  onMessageHandler,\n  parseWsMessageEvent,\n} from './request/messageHandler';\nimport { clearCachedTransactionToken } from './securedSession/cachedTransactionToken';\nimport { getTransactionToken } from './securedSession/getTransactionToken';\nimport { isSecuredSession } from './securedSession/isSecuredSession';\nimport { createEvent, createEventPayload } from './sockets/EventPayload';\nimport {\n  WebSocketClient,\n  WebSocketClientOptions,\n} from './sockets/WebSocketClient';\nimport { LivechatThread, Thread } from './thread';\nimport {\n  isRecoverSuccessPayload,\n  ThreadRecoveredChatEvent,\n} from './thread/isRecoverSuccessPayload';\nimport { isThreadListFetchedPostbackData } from './thread/isThreadListFetchedPostbackData';\nimport { createRecoverLivechatThreadPayloadData } from './thread/livechatThread/recoverLivechatThreadPayload';\nimport { createRecoverThreadPayloadData } from './thread/recoverThreadPayload';\nimport { storeContactIdMiddleware } from './thread/storeContactIdMiddleware';\nimport { storeThreadScrollDataMiddleware } from './thread/storeThreadScrollDataMiddleware';\nimport { AbortablePromise } from './utils/AbortablePromise';\nimport { assertIsCallable, assertNonNullable } from './utils/assert';\nimport { generateId } from './utils/generateId';\nimport { getBrandIdAndChannelId } from './utils/getBrandIdAndChannelId';\nimport { isEmpty, isNil, isNull, isUndefined } from './utils/is';\nimport { SDKVariableStorage } from './variables/VariableStorage';\n\nexport class ChatSdk {\n  onError?: (error: Error) => void;\n  onRawEvent?: (event: ChatCustomEvent) => void;\n  private customer: Customer | null = null;\n  public channelId: ChannelId = '';\n  private isAuthorizationEnabled: boolean | undefined;\n  public isLivechat: boolean | undefined;\n  private websocketClient: WebSocketClient | null = null;\n  private _incomingChatEventMiddleware = new ChatEventMiddleware();\n  private _messageEmitter: IChatEventTarget;\n  private _threadCache: Map<\n    ThreadIdOnExternalPlatform,\n    Thread | LivechatThread\n  > = new Map();\n  private _contactCustomFieldsQueue: CustomFieldsMap = new Map();\n\n  constructor(options: ChatSDKOptions) {\n    if (options === undefined) {\n      throw new ChatSDKError(\n        'No options was provided for initialization of ChatSdk',\n      );\n    }\n\n    SDKVariableStorage.AUTHORIZATION_CODE = options.authorizationCode;\n    SDKVariableStorage.BRAND_ID = options.brandId;\n    SDKVariableStorage.CHANNEL_ID = options.channelId;\n    SDKVariableStorage.APP_NAME = options.appName ?? APP_NAME;\n    SDKVariableStorage.APP_VERSION = `${options.appVersion ?? 0}`;\n    // Store the destinationId, visitId, and visitorId for payload data use\n    SDKVariableStorage.DESTINATION = options.destinationId;\n    SDKVariableStorage.VISIT_ID = options.visitId;\n    SDKVariableStorage.VISITOR_ID = options.visitorId;\n    SDKVariableStorage.LANGUAGE = options.language ?? getBrowserLanguage();\n\n    SDKVariableStorage.SECURED_SESSION = options.securedSession ?? false;\n\n    if (options.cacheStorage) {\n      assertIsCallable(options.cacheStorage.getItem);\n      assertIsCallable(options.cacheStorage.setItem);\n      assertIsCallable(options.cacheStorage.removeItem);\n      SDKVariableStorage.CACHE_STORAGE = options.cacheStorage;\n    }\n\n    const { brandId, channelId } = getBrandIdAndChannelId();\n\n    this.onError = options.onError;\n    this.onRawEvent = options.onRawEvent;\n\n    // Register middleware for incoming chat events\n    this._incomingChatEventMiddleware.register(chatEventMapper);\n    this._incomingChatEventMiddleware.register(sdkVersionCheck);\n    this._incomingChatEventMiddleware.register(storeThreadScrollDataMiddleware);\n    this._incomingChatEventMiddleware.register(storeContactIdMiddleware);\n\n    this._messageEmitter = new ChatEventTarget();\n\n    try {\n      if (isNaN(brandId)) {\n        throw new Error('Missing BrandID');\n      }\n      if (channelId === undefined) {\n        throw new Error('Missing ChannelId');\n      }\n      if (options.customerId === undefined) {\n        throw new Error('Missing CustomerId');\n      }\n\n      // empty string for backward compatibility\n      const visitorId = options.visitorId ?? '';\n\n      this._initEnvironment(options);\n      this.#createConnection(options.customerId, visitorId);\n\n      // Init Customer instance after the websocketClient is initialized\n      this.customer = new Customer(\n        options.customerId,\n        options.customerName,\n        options.customerImage,\n        this.websocketClient,\n      );\n      this.channelId = channelId;\n      this.isLivechat = options.isLivechat;\n      this.isAuthorizationEnabled = options.isAuthorizationEnabled;\n    } catch (error: unknown) {\n      this.onErrorHandler(error);\n    }\n  }\n\n  async #createConnection(\n    customerId: CustomerIdentityIdOnExternalPlatform,\n    visitorId: VisitorId,\n  ): Promise<void> {\n    this._initWS(customerId, visitorId);\n\n    if (isSecuredSession() !== true) {\n      try {\n        this.websocketClient?.connect();\n      } catch (error) {\n        this.onErrorHandler(error);\n      }\n\n      return;\n    }\n\n    try {\n      const transactionToken = await getTransactionToken();\n      await this.websocketClient?.connect(transactionToken);\n    } catch (error) {\n      this.onErrorHandler(error);\n    }\n  }\n\n  onErrorHandler(error: unknown): void {\n    const sdkError = new ChatSDKError(error);\n\n    if (typeof this.onError === 'function') {\n      this.onError(sdkError);\n\n      return;\n    }\n\n    throw sdkError;\n  }\n\n  /**\n   * Get channel info\n   * Returns channel info like feature toggle status, translations, file upload restrictions, theme color settings etc.\n   * @returns ChannelInfo\n   * @throws ChatSDKError\n   */\n  public async getChannelInfo(): Promise<ChannelInfo> {\n    return fetchChannelInfo(\n      SDKVariableStorage.BRAND_ID as BrandId,\n      SDKVariableStorage.CHANNEL_ID as ChannelId,\n      SDKVariableStorage.LANGUAGE,\n    );\n  }\n\n  /**\n   * Get channel availability\n   * Returns channel availability Online/Offline\n   * @returns ChannelAvailabilityResponse\n   * @throws ChatSDKError\n   */\n  public async getChannelAvailability(): Promise<ChannelAvailabilityResponse> {\n    return fetchChannelAvailability(\n      SDKVariableStorage.BRAND_ID as BrandId,\n      SDKVariableStorage.CHANNEL_ID as ChannelId,\n    );\n  }\n\n  /**\n   * Send Authorization Event\n   * @param authorizationCode - authorization code\n   * @param visitorId - visitor id\n   * @throws AuthorizationError\n   *  * This exception is thrown when the authorization or refresh token fails\n   */\n  public async authorize(\n    authorizationCode?: string,\n    visitorId?: VisitorId,\n  ): Promise<\n    | ConsumerAuthorizationSuccessPayloadData\n    | CustomerReconnectSuccessPayloadData\n  > {\n    const accessToken = getAccessToken();\n\n    // Reconnect first\n    if (accessToken !== null) {\n      try {\n        const reconnectResponse = await authorizationReconnect(\n          this.websocketClient,\n          this._sendRefreshTokenEvent,\n          accessToken,\n          visitorId,\n        );\n\n        return reconnectResponse;\n      } catch (error) {\n        // invalid token, continue with authorization\n      }\n    }\n\n    const basicChannelInfoRequest = handleBasicChannelInfo(\n      this.isAuthorizationEnabled,\n      this.isLivechat,\n    );\n\n    // Authorization\n    const authorizationPayloadData = createAuthorizationPayloadData(\n      authorizationCode ?? SDKVariableStorage.AUTHORIZATION_CODE ?? null,\n      visitorId,\n    );\n\n    const authEvent = createEvent(\n      createEventPayload(authorizationPayloadData),\n      generateId(),\n      AwsChatWindowEventActionRoute.REGISTER,\n    );\n\n    const authorizationRequest = makeRequest(authEvent, this.websocketClient);\n\n    const [authResponse, basicChannelInfo] = await Promise.all([\n      authorizationRequest,\n      basicChannelInfoRequest,\n    ]);\n\n    if (!isAuthSuccessEvent(authResponse)) {\n      this.websocketClient?.disconnect();\n\n      throw new AuthorizationError('Authorization failed', authResponse.error);\n    }\n\n    // Auth successful - Use the response data\n    const { consumerIdentity, customer, contact } = authResponse.data;\n\n    // Setup Customer Identity and Customer Custom Fields\n    const customerId = consumerIdentity?.idOnExternalPlatform;\n    if (!isCustomerIdentityIdValid(customerId)) {\n      this.websocketClient?.disconnect();\n\n      throw new ChatSDKError('Invalid customer identity');\n    }\n\n    Customer.setId(customerId);\n\n    if (\n      consumerIdentity.firstName !== undefined ||\n      consumerIdentity.lastName !== undefined\n    ) {\n      Customer.setName(\n        `${consumerIdentity.firstName} ${consumerIdentity.lastName}`,\n      );\n    }\n\n    const customerImage = consumerIdentity.image;\n    if (customerImage !== undefined) {\n      Customer.setImage(customerImage);\n    }\n\n    if (customer?.customFields) {\n      this.customer?.setCustomFieldsFromArray(customer.customFields);\n    }\n\n    // Queue Contact Custom Fields from the response\n    if (contact?.customFields) {\n      setCustomFieldsFromArray(\n        this._contactCustomFieldsQueue,\n        contact.customFields,\n      );\n    }\n\n    // Set up the thread settings\n    this.isAuthorizationEnabled = basicChannelInfo.isAuthorizationEnabled;\n    this.isLivechat = basicChannelInfo.isLivechat;\n\n    // Set up the access token and its refresh\n    if (authResponse.data.accessToken?.token !== undefined) {\n      setAccessToken(authResponse.data.accessToken);\n      handleRefreshToken(\n        authResponse.data.accessToken,\n        this._sendRefreshTokenEvent,\n      );\n    }\n\n    return authResponse.data;\n  }\n\n  /**\n   * Generate Authorization Token from the given url\n   *\n   * @param threadIdOnExternalPlatform - Thread Id\n   * @param url - Authorization Service URL\n   */\n  public async generateAuthorizationToken(\n    threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n    url: string,\n  ): Promise<AuthorizationToken> {\n    const result = await sendChatEvent(\n      createGenerateAuthorizationTokenPayloadData(\n        threadIdOnExternalPlatform,\n        url,\n      ),\n      this.websocketClient,\n    );\n\n    if (!isAuthorizationTokenGeneratedPostbackData(result.data)) {\n      throw new ChatSDKError(\n        'Invalid response from generate authorization token (generateAuthorizationToken)',\n      );\n    }\n\n    const { authorizationToken } = result.data;\n\n    return authorizationToken;\n  }\n\n  /**\n   * Register handler to chat event\n   *\n   * @param type - type of chat event\n   * @param handler - event handler\n   * @returns function to unregister handler\n   */\n  public onChatEvent(\n    type: ChatEventType,\n    handler: (event: ChatCustomEvent) => void,\n  ): RemoveListenerFunction {\n    this._messageEmitter.addEventListener(type, handler);\n\n    return () => {\n      this._messageEmitter.removeEventListener(type, handler);\n    };\n  }\n\n  /**\n   * Get Customer instance\n   */\n  public getCustomer(): Customer | null {\n    return this.customer;\n  }\n\n  /**\n   * Get Thread instance by id\n   * @param id - thread id\n   * @returns instance of thread based on channel settings\n   */\n  public getThread(id: ThreadIdOnExternalPlatform): Thread | LivechatThread {\n    if (isNull(this.websocketClient)) {\n      throw new ChatSDKError(\n        'Cannot get thread because websocket is disconnected',\n      );\n    }\n\n    if (isNil(id)) {\n      throw new ChatSDKError('Cannot get thread because id is undefined');\n    }\n\n    const cachedThread = this._threadCache.get(id);\n    if (!isUndefined(cachedThread)) {\n      return cachedThread;\n    }\n\n    if (this.isLivechat === true) {\n      const liveThread = new LivechatThread(\n        id,\n        this.websocketClient,\n        this._messageEmitter,\n        this.customer,\n        this._getContactCustomFieldsFromQueue(),\n        this.isAuthorizationEnabled,\n      );\n      this._threadCache.set(id, liveThread);\n\n      return liveThread;\n    }\n\n    const thread = new Thread(\n      id,\n      this.websocketClient,\n      this._messageEmitter,\n      this.customer,\n      this._getContactCustomFieldsFromQueue(),\n      this.isAuthorizationEnabled,\n    );\n    this._threadCache.set(id, thread);\n\n    return thread;\n  }\n\n  /**\n   * Get list of available threads\n   * @returns list of threads\n   */\n  public async getThreadList(): Promise<Array<ThreadView> | null> {\n    if (isNull(this.websocketClient)) {\n      throw new ChatSDKError(\n        'Cannot get thread list because websocket is disconnected',\n      );\n    }\n\n    const eventPayload = {\n      eventType: AwsInputEventType.FETCH_THREAD_LIST,\n      data: {},\n    };\n\n    const result = await sendChatEvent(eventPayload, this.websocketClient);\n\n    if (!isThreadListFetchedPostbackData(result.data)) {\n      throw new ChatSDKError(\n        'Invalid response from fetch thread list (getThreadList)',\n      );\n    }\n\n    return result.data.threads;\n  }\n\n  /**\n   * Get access to a websocket connection\n   * @returns WebSocketClient instance\n   */\n  public getWebsocketClient(): WebSocketClient | null {\n    return this.websocketClient;\n  }\n\n  /**\n   * Send the Offline Message\n   * @param offlineMessageData - offline message data (name, email, message)\n   * @returns success\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error contains (`error.data`) a response from the backend with details.\n   */\n  public async sendOfflineMessage(\n    offlineMessageData: OfflineMessageData,\n  ): Promise<MessageSuccessEventData> {\n    return sendOfflineMessage(offlineMessageData, this.websocketClient);\n  }\n\n  /**\n   * Recover thread data\n   * @param threadIdOnExternalPlatform - thread id on external platform\n   * @returns thread session data\n   */\n  public recoverThreadData(\n    threadIdOnExternalPlatform:\n      | ThreadIdOnExternalPlatform\n      | undefined = undefined,\n  ): AbortablePromise<ThreadRecoveredChatEvent> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const recoverEvent = createRecoverThreadPayloadData(\n        threadIdOnExternalPlatform,\n      );\n      const recoverResponse = await sendChatEvent(\n        recoverEvent,\n        this.websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(recoverResponse)) {\n        // Create a Thread instance after success recover\n        this.getThread(recoverResponse.data.thread.idOnExternalPlatform);\n        // Emit the 'recover' event to properly set up the Thread instance.\n        this._messageEmitter.dispatchEvent(\n          new ChatCustomEvent(ChatEvent.THREAD_RECOVERED, {\n            detail: recoverResponse,\n          }),\n        );\n\n        resolve(recoverResponse);\n      } else {\n        reject(\n          new ChatSDKError('Invalid response from recover livechat thread'),\n        );\n      }\n    });\n  }\n\n  /**\n   * Recover livechat thread data\n   * @param threadIdOnExternalPlatform - thread id on external platform\n   * @returns thread livechat session data\n   */\n  public recoverLivechatThreadData(\n    threadIdOnExternalPlatform:\n      | ThreadIdOnExternalPlatform\n      | undefined = undefined,\n  ): AbortablePromise<ThreadRecoveredChatEvent> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const recoverEvent = createRecoverLivechatThreadPayloadData(\n        threadIdOnExternalPlatform,\n      );\n      const recoverResponse = await sendChatEvent(\n        recoverEvent,\n        this.websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(recoverResponse)) {\n        // Create a Thread instance after success recover\n        this.getThread(recoverResponse.data.thread.idOnExternalPlatform);\n        // Emit the 'recover' event to properly set up the Thread instance.\n        this._messageEmitter.dispatchEvent(\n          new ChatCustomEvent(ChatEvent.LIVECHAT_RECOVERED, {\n            detail: recoverResponse,\n          }),\n        );\n\n        resolve(recoverResponse);\n      } else {\n        reject(\n          new ChatSDKError('Invalid response from recover livechat thread'),\n        );\n      }\n    });\n  }\n\n  private _getContactCustomFieldsFromQueue() {\n    if (this._contactCustomFieldsQueue.size > 0) {\n      const fields = getCustomFields(this._contactCustomFieldsQueue);\n      this._contactCustomFieldsQueue.clear();\n\n      return fields;\n    }\n\n    return {};\n  }\n\n  private _sendRefreshTokenEvent = async (): Promise<void> => {\n    const accessToken = getAccessToken();\n    if (isNull(accessToken)) {\n      return;\n    }\n\n    const refreshTokenResponse = await sendChatEvent(\n      createRefreshTokenPayload(accessToken.token),\n      this.websocketClient,\n    );\n\n    if (isTokenRefreshedSuccessResponse(refreshTokenResponse)) {\n      setAccessToken(refreshTokenResponse.data.accessToken);\n\n      handleRefreshToken(\n        refreshTokenResponse.data.accessToken,\n        this._sendRefreshTokenEvent,\n      );\n\n      return;\n    }\n\n    throw new AuthorizationError(\n      'An error occurred while refreshing the access token',\n      refreshTokenResponse.error,\n    );\n  };\n\n  /**\n   * Setup Environment endpoints\n   */\n  private _initEnvironment(options: ChatSDKOptions): void {\n    // Set custom environment\n    if (options.environment === EnvironmentName.custom) {\n      if (\n        isEmpty(options.customEnvironment) ||\n        isNil(options.customEnvironment)\n      ) {\n        throw new ChatSDKError(\n          'customEnvironment must be provided when environment is set to \"custom\"',\n        );\n      }\n\n      setEnvironmentEndpoints(options.customEnvironment);\n\n      return;\n    }\n\n    // Set predefined environment\n    const endpoints = buildEnvironmentEndpoints(options.environment);\n    setEnvironmentEndpoints(endpoints);\n  }\n\n  private _initWS(\n    customerId: CustomerIdentityIdOnExternalPlatform,\n    visitorId: VisitorId,\n  ): void {\n    const { brandId, channelId } = getBrandIdAndChannelId();\n    const endpoint = SDKVariableStorage.ENDPOINT_GATEWAY;\n    assertNonNullable(endpoint);\n\n    const url = new URL(endpoint);\n    const protocol = url.protocol;\n    const host = url.hostname;\n    const port = url.port;\n    const prefix = url.pathname.substring(1);\n    const forceSecureProtocol = protocol === 'wss:';\n\n    const wsClientOptions: WebSocketClientOptions = {\n      host,\n      port,\n      prefix,\n      forceSecureProtocol,\n    };\n    this.websocketClient = new WebSocketClient(\n      brandId,\n      channelId,\n      customerId,\n      wsClientOptions,\n      this.onError,\n      visitorId,\n    );\n\n    this.websocketClient.on(\n      WebSocketClientEvent.MESSAGE,\n      async (event: ChatCustomEvent) => {\n        try {\n          if (typeof this.onRawEvent === 'function') {\n            this.onRawEvent(event);\n          }\n\n          const eventData = await getEventData(parseWsMessageEvent(event));\n\n          const parsedEvent =\n            this._incomingChatEventMiddleware.process(eventData);\n\n          if (!isNil(parsedEvent)) {\n            const { type } = parsedEvent;\n\n            onMessageHandler(parsedEvent);\n\n            this._messageEmitter.dispatchEvent(\n              new ChatCustomEvent(type ?? '', {\n                detail: parsedEvent,\n              }),\n            );\n          }\n        } catch (error: unknown) {\n          this.onErrorHandler(error);\n        }\n      },\n    );\n  }\n\n  /**\n   * Reset the ChatSdk session and clear it from customer data\n   * - it disconnects the WS connection and creates a new one\n   * - generates new IDs if not provided\n   */\n  public resetSession(\n    customerId: CustomerIdentityIdOnExternalPlatform = generateId(),\n    customerName: string = '',\n    customerImage: string = '',\n    visitorId: VisitorId = '',\n    visitId: VisitId = generateId(),\n  ): void {\n    // Close the connection and clear the session data (customer, tokens, etc.)\n    this.websocketClient?.disconnect();\n    this.websocketClient = null;\n    this._threadCache.clear();\n    this._contactCustomFieldsQueue.clear();\n    resetAccessToken();\n    clearCachedTransactionToken();\n\n    // Reinitialize\n    SDKVariableStorage.VISIT_ID = visitId;\n    SDKVariableStorage.VISITOR_ID = visitorId;\n\n    try {\n      this.#createConnection(customerId, visitorId);\n      this.customer = new Customer(\n        customerId,\n        customerName,\n        customerImage,\n        this.websocketClient,\n      );\n    } catch (e) {\n      this.onErrorHandler(e);\n    }\n  }\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RefreshTokenData } from '@brandembassy/ts-types-chat/dist/awsEvents/RefreshToken';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createRefreshTokenPayload(\n  token: string,\n): EventPayloadData<RefreshTokenData> {\n  return {\n    eventType: AwsInputEventType.REFRESH_TOKEN,\n    data: {\n      accessToken: {\n        token,\n      },\n    },\n  };\n}\n","export const APP_NAME = 'chat-web-sdk';\n","import { ChannelAvailability } from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { CALLER_SERVICE_ID } from '@brandembassy/ts-types-platform/dist/http/headers';\n\nimport { CHAT_SDK_VERSION } from '../env/version';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SdkVersionNotSupported } from '../error/SdkVersionNotSupported';\nimport { isSdkVersionNotSupportedEvent } from '../event/middleware/sdkVersionCheck';\nimport { getErrorResponseData } from '../request/getErrorResponseData';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport interface ChannelAvailabilityResponse {\n  status: ChannelAvailability;\n}\n\nexport async function fetchChannelAvailability(\n  brandId: BrandId,\n  channelId: ChannelId,\n): Promise<ChannelAvailabilityResponse> {\n  const CHANNEL_INTEGRATION_URL = SDKVariableStorage.ENDPOINT_CHAT;\n\n  const response = await fetch(\n    `${CHANNEL_INTEGRATION_URL}/chat/1.0/brand/${brandId}/channel/${channelId}/availability`,\n    {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        [CALLER_SERVICE_ID]: SDKVariableStorage.APP_NAME ?? '',\n        'x-sdk-platform': 'web',\n        'x-sdk-version': CHAT_SDK_VERSION,\n      },\n    },\n  );\n\n  if (!response.ok) {\n    const errorData = await getErrorResponseData(response);\n\n    if (isSdkVersionNotSupportedEvent(errorData)) {\n      throw new SdkVersionNotSupported();\n    }\n\n    throw new ChatSDKError(\n      `Failed to fetch channel availability. Status (${response.status})`,\n      { response },\n    );\n  }\n\n  return response.json();\n}\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { AuthorizationError } from './AuthorizationError';\nimport { createReconnectPayloadData } from './createReconnectPayloadData';\nimport { CustomerReconnectSuccessPayloadData } from './CustomerReconnectSuccessPayloadData';\nimport { handleRefreshToken } from './handleRefreshToken';\n\nexport async function authorizationReconnect(\n  websocketClient: WebSocketClient | null,\n  refreshTokenEventCallback: () => Promise<void>,\n  accessToken: AccessToken,\n  visitorId?: string,\n): Promise<CustomerReconnectSuccessPayloadData> {\n  const reconnectPayload = createReconnectPayloadData(accessToken, visitorId);\n\n  const response = await sendChatEvent(reconnectPayload, websocketClient);\n\n  const hasError = response.error !== undefined;\n\n  if (hasError) {\n    throw new AuthorizationError(\n      'Authorization reconnect failed',\n      response.error,\n    );\n  }\n\n  const successReconnectResponse: CustomerReconnectSuccessPayloadData = {\n    reconnected: true,\n  };\n\n  handleRefreshToken(accessToken, refreshTokenEventCallback);\n\n  return successReconnectResponse;\n}\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { isUndefined } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { fetchChannelInfo } from './fetchChannelInfo';\n\nexport async function handleBasicChannelInfo(\n  isAuthorizationEnabled: undefined | boolean,\n  isLivechat: undefined | boolean,\n): Promise<{\n  isAuthorizationEnabled: boolean;\n  isLivechat: boolean;\n}> {\n  if (!isUndefined(isAuthorizationEnabled) && !isUndefined(isLivechat)) {\n    return {\n      isAuthorizationEnabled,\n      isLivechat,\n    };\n  }\n\n  const channelInfo = await fetchChannelInfo(\n    SDKVariableStorage.BRAND_ID as BrandId,\n    SDKVariableStorage.CHANNEL_ID as ChannelId,\n  );\n\n  return {\n    isAuthorizationEnabled: channelInfo.isAuthorizationEnabled,\n    isLivechat: channelInfo.isLiveChat,\n  };\n}\n","import { AuthorizeCustomerData } from '@brandembassy/ts-types-chat/dist/awsEvents/AuthorizeCustomer';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport { CHAT_SDK_VERSION } from '../env/version';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { generateId } from '../utils/generateId';\nimport { createVisitorPayload } from '../visitor/createVisitorPayload';\n\nexport function createAuthorizationPayloadData(\n  authorizationCode: string | null,\n  visitorId: VisitorId = generateId(),\n): EventPayloadData<AuthorizeCustomerData> {\n  return {\n    eventType: AwsInputEventType.AUTHORIZE_CUSTOMER,\n    data: {\n      authorization: {\n        authorizationCode,\n      },\n      disableChannelInfo: true,\n      sdkVersion: CHAT_SDK_VERSION,\n      sdkPlatform: 'web',\n    },\n    ...createVisitorPayload(visitorId as VisitorId),\n  };\n}\n","import { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/customer/CustomerIdentity';\n\nimport { isNil } from '../utils/is';\n\nexport function isCustomerIdentityIdValid(\n  customerIdentityIdOnExternalPlatform:\n    | CustomerIdentityIdOnExternalPlatform\n    | undefined,\n): customerIdentityIdOnExternalPlatform is CustomerIdentityIdOnExternalPlatform {\n  return (\n    !isNil(customerIdentityIdOnExternalPlatform) &&\n    customerIdentityIdOnExternalPlatform !== ''\n  );\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { GenerateAuthorizationTokenData } from '@brandembassy/ts-types-chat/dist/awsEvents/GenerateAuthorizationToken';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createGenerateAuthorizationTokenPayloadData(\n  threadId: ThreadIdOnExternalPlatform,\n  url: string,\n): EventPayloadData<GenerateAuthorizationTokenData> {\n  return {\n    eventType: AwsInputEventType.GENERATE_AUTHORIZATION_TOKEN,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadId,\n      },\n      url,\n    },\n  };\n}\n","import { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendOfflineMessagePayloadData } from './sendOfflineMessagePayload';\n\nexport interface OfflineMessageData {\n  email: string;\n  message: string;\n  name: string;\n}\n\nexport const sendOfflineMessage = async (\n  offlineMessageData: OfflineMessageData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const offlineMessagePayloadData =\n    createSendOfflineMessagePayloadData(offlineMessageData);\n\n  const response = await sendChatEvent(\n    offlineMessagePayloadData,\n    websocketClient,\n  );\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send offline message failed', response);\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { normalizeEvent } from '../event/normalizeEvent';\nimport { isNil } from '../utils/is';\n\nimport { isS3ChatEvent } from './isS3ChatEvent';\n\nexport const getEventData = async (\n  eventData: ChatEventData | undefined,\n): Promise<ChatEventData | null> => {\n  if (isNil(eventData)) {\n    return null;\n  }\n\n  if (!isS3ChatEvent(eventData)) {\n    return eventData;\n  }\n\n  const url = eventData.data.s3Object.url;\n\n  const response = await fetch(url);\n\n  if (response.ok) {\n    const responseData = await response.json();\n\n    return normalizeEvent(responseData);\n  }\n\n  throw new ChatSDKError('Failed to fetch S3 event data');\n};\n","import { S3EventData } from '@brandembassy/ts-types-platform/dist/largeEvent/S3Event';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface S3ChatEvent extends ChatEventData {\n  data: S3EventData;\n  type: typeof ChatEvent.EVENT_IN_S3;\n}\n\nexport function isS3ChatEvent(event: unknown): event is S3ChatEvent {\n  return (event as S3ChatEvent).type === PushUpdateEventType.EVENT_IN_S3;\n}\n","import { ChatEventData } from '../event/ChatEvent';\nimport { normalizeEvent } from '../event/normalizeEvent';\n\nimport { requestQueue } from './requestQueue';\n\nexport const parseWsMessageEvent = (\n  event: CustomEvent,\n): ChatEventData | undefined => {\n  const eventDetail = event?.detail;\n\n  if (!eventDetail) {\n    return;\n  }\n\n  let eventData;\n\n  try {\n    eventData = JSON.parse(eventDetail.data);\n  } catch (error) {\n    return;\n  }\n\n  return normalizeEvent(eventData);\n};\n\nexport const onMessageHandler = (event: ChatEventData): void => {\n  const { id } = event;\n\n  if (requestQueue.has(id)) {\n    const resolve = requestQueue.get(id);\n\n    if (typeof resolve === 'function') {\n      resolve(event);\n    }\n\n    requestQueue.delete(id);\n  }\n};\n","import { CaseInboxAssigneeChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseInboxAssigneeChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface AssignedAgentChangedEvent extends ChatEventData {\n  data: CaseInboxAssigneeChangedData;\n  type: typeof ChatEvent.ASSIGNED_AGENT_CHANGED;\n}\n\nexport function isAssignedAgentChangedEvent(\n  event: ChatEventData,\n): event is AssignedAgentChangedEvent {\n  return (\n    event.type === ChatEvent.ASSIGNED_AGENT_CHANGED &&\n    (event as AssignedAgentChangedEvent).data?.case?.id !== undefined\n  );\n}\n","import { TypingEventData } from '@brandembassy/ts-types-platform/dist/user/typing/TypingEventData';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type AgentTypingStartedData = TypingEventData;\n\nexport interface AgentTypingStartedEvent extends ChatEventData {\n  data: AgentTypingStartedData;\n  type: typeof ChatEvent.AGENT_TYPING_STARTED;\n}\n\nexport function isAgentTypingStartedEvent(\n  event: ChatEventData,\n): event is AgentTypingStartedEvent {\n  return (\n    event.type === ChatEvent.AGENT_TYPING_STARTED &&\n    (event as AgentTypingStartedEvent).data?.thread?.idOnExternalPlatform !==\n      undefined\n  );\n}\n","import { TypingEventData } from '@brandembassy/ts-types-platform/dist/user/typing/TypingEventData';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type AgentTypingEndedData = TypingEventData;\n\nexport interface AgentTypingEndedEvent extends ChatEventData {\n  data: AgentTypingEndedData;\n  type: typeof ChatEvent.AGENT_TYPING_ENDED;\n}\n\nexport function isAgentTypingEndedEvent(\n  event: ChatEventData,\n): event is AgentTypingEndedEvent {\n  return (\n    event.type === ChatEvent.AGENT_TYPING_ENDED &&\n    (event as AgentTypingEndedEvent).data?.thread?.idOnExternalPlatform !==\n      undefined\n  );\n}\n","import { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport const isSecuredSession = (): boolean =>\n  SDKVariableStorage.SECURED_SESSION ?? false;\n","import { CALLER_SERVICE_ID } from '@brandembassy/ts-types-platform/dist/http/headers';\n\nimport { CHAT_SDK_VERSION } from '../env/version';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport {\n  cacheTransactionToken,\n  getCachedTransactionToken,\n} from './cachedTransactionToken';\n\nexport type TransactionToken = string;\nexport interface TransactionTokenResponse {\n  accessToken: TransactionToken;\n  expiresIn: number; // expecting TTL in seconds\n}\n\nexport const getTransactionToken = async (): Promise<TransactionToken> => {\n  if (!SDKVariableStorage.ENDPOINT_AUTHORIZE) {\n    throw new ChatSDKError('Authorize hostname is not set');\n  }\n\n  const authorizeUrl = new URL(SDKVariableStorage.ENDPOINT_AUTHORIZE);\n  authorizeUrl.pathname = '/token';\n  authorizeUrl.searchParams.append(\n    'brandId',\n    String(SDKVariableStorage.BRAND_ID),\n  );\n  authorizeUrl.searchParams.append(\n    'channelId',\n    SDKVariableStorage.CHANNEL_ID ?? '',\n  );\n  authorizeUrl.searchParams.append(\n    'visitorId',\n    SDKVariableStorage.VISITOR_ID ?? '',\n  );\n\n  // Get cached token if available\n  const cachedTransactionToken = getCachedTransactionToken();\n  if (cachedTransactionToken) {\n    return cachedTransactionToken;\n  }\n\n  try {\n    const response = await fetch(authorizeUrl.toString(), {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        [CALLER_SERVICE_ID]: SDKVariableStorage.APP_NAME ?? '',\n        'x-sdk-platform': 'web',\n        'x-sdk-version': CHAT_SDK_VERSION,\n      },\n      body: JSON.stringify({}),\n    });\n\n    if (response.ok) {\n      const { accessToken, expiresIn } =\n        (await response.json()) as TransactionTokenResponse;\n      cacheTransactionToken(accessToken, expiresIn);\n\n      return accessToken;\n    }\n\n    throw new ChatSDKError('Failed to fetch transaction token', response);\n  } catch (error) {\n    if (error instanceof ChatSDKError) {\n      throw error;\n    }\n\n    throw new ChatSDKError('Failed to fetch transaction token', error);\n  }\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SetPositionInQueuePayloadData } from '@brandembassy/ts-types-chat/dist/awsEvents/SetPositionInQueuePayload';\nimport { EventId } from '@brandembassy/ts-types-platform/dist/pushUpdate/EventId';\n\nimport { ChatEventData } from '../../event/ChatEvent';\nimport { isEmpty } from '../../utils/is';\n\nexport interface SetPositionInQueueChatEvent extends ChatEventData {\n  data: SetPositionInQueuePayloadData;\n  id: EventId;\n  type: AwsResponseEventType.SET_POSITION_IN_QUEUE;\n}\n\nexport const isSetPositionInQueueEvent = (\n  event: unknown,\n): event is SetPositionInQueueChatEvent => {\n  const setPositionInQueueEvent = event as SetPositionInQueueChatEvent;\n\n  return (\n    Number.isInteger(setPositionInQueueEvent?.data.positionInQueue) &&\n    isEmpty(setPositionInQueueEvent?.id) === false &&\n    setPositionInQueueEvent?.type === AwsResponseEventType.SET_POSITION_IN_QUEUE\n  );\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class CreateInvitationFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { CreateInvitationToGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/InvitationToGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { CreateInvitationFailedError } from './CreateInvitationFailedError';\n\nexport function createCreateInvitationToGroupChatPayloadData(\n  id: CaseId,\n): EventPayloadData<CreateInvitationToGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.CREATE_GROUP_CHAT_INVITE,\n    data: {\n      contact: {\n        id,\n      },\n    },\n  };\n}\n\nexport function isInvitationToGroupChatCreated(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_INVITE_CREATED;\n}\n\nexport async function sendCreateInvitationToGroupChatEvent(\n  createInvitationPayloadData: EventPayloadData<CreateInvitationToGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(createInvitationPayloadData, wsClient);\n\n  if (isInvitationToGroupChatCreated(response)) {\n    return response;\n  }\n\n  throw new CreateInvitationFailedError('Create invitation failed', response);\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class JoinGroupChatFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { JoinGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/JoinGroupChat';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { JoinGroupChatFailedError } from './JoinGroupChatFailedError';\n\nexport function createJoinGroupChatPayloadData(\n  code: string,\n): EventPayloadData<JoinGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.JOIN_GROUP_CHAT,\n    data: {\n      invitation: {\n        code,\n      },\n    },\n  };\n}\n\nexport function isJoinGroupChatSuccessResponse(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_JOINED;\n}\n\nexport async function sendJoinGroupChatEvent(\n  joinGroupChatPayloadData: EventPayloadData<JoinGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(joinGroupChatPayloadData, wsClient);\n\n  if (isJoinGroupChatSuccessResponse(response)) {\n    return response;\n  }\n\n  throw new JoinGroupChatFailedError('Join Group chat failed', response);\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { LeaveGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LeaveGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nexport function createLeaveGroupChatPayloadData(\n  id: CaseId,\n): EventPayloadData<LeaveGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.LEAVE_GROUP_CHAT,\n    data: {\n      contact: {\n        id,\n      },\n    },\n  };\n}\n\nexport async function sendLeaveGroupChatEvent(\n  leaveGroupChatPayloadData: EventPayloadData<LeaveGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  return sendChatEvent(leaveGroupChatPayloadData, wsClient);\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SendEmailInvitaionFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendEmailInvitationToGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendEmailInvitationToGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { SendEmailInvitaionFailedError } from './SendEmailInvitaionFailedError';\n\nexport function createSendEmailInvitationToGroupChatPayloadData(\n  caseId: CaseId,\n  invitationCode: string,\n  email: string,\n): EventPayloadData<SendEmailInvitationToGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.SEND_EMAIL_INVITE_TO_GROUP_CHAT,\n    data: {\n      contact: {\n        id: caseId,\n      },\n      invitation: {\n        code: invitationCode,\n      },\n      recipients: [\n        {\n          idOnExternalPlatform: email,\n        },\n      ],\n    },\n  };\n}\n\nexport function isEmailInvitationToGroupChatSent(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_INVITE_SENT;\n}\n\nexport async function sendEmailInvitationToGroupChatEvent(\n  createInvitationPayloadData: EventPayloadData<SendEmailInvitationToGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(createInvitationPayloadData, wsClient);\n\n  if (isEmailInvitationToGroupChatSent(response)) {\n    return response;\n  }\n\n  throw new SendEmailInvitaionFailedError(\n    'Send Email Invitation failed',\n    response,\n  );\n}\n","export class CacheStorageError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CacheStorageError';\n  }\n}\n","import { isUndefined } from '../utils/is';\n\nimport { CacheStorageError } from './CacheStorageError';\n\nexport interface ICacheStorage {\n  getItem<T = unknown>(key: string): T | null;\n  removeItem(key: string): void;\n  setItem(key: string, data: unknown, ttl: number): void;\n}\n\nexport interface CachedStorageItem {\n  data: unknown;\n  expiresAt: number;\n}\n\n/**\n * Cache storage wrapper\n * - A simple wrapper around the Storage API with a TTL (Time To Live) per item.\n * - Uses JSON.stringify and JSON.parse to serialize and deserialize data.\n * - Uses Date.getTime() to calculate the expiration time.\n *\n * @param storage - The storage instance (e.g., localStorage or sessionStorage).\n */\nexport class CacheStorage implements ICacheStorage {\n  #storage: Storage;\n\n  /**\n   * Create a new CacheStorage instance\n   * @param storage - storage instance\n   * @throws CacheStorageError\n   */\n  constructor(storage: Storage) {\n    if (\n      !storage ||\n      !storage.getItem ||\n      !storage.setItem ||\n      !storage.removeItem\n    ) {\n      throw new CacheStorageError('CacheStorage: Storage is required');\n    }\n    this.#storage = storage;\n  }\n\n  /**\n   * Get an item from the storage if not expired\n   * @param key - key\n   */\n  public getItem<T = unknown>(key: string): T | null {\n    const item = this.#storage.getItem(key);\n\n    if (!item) {\n      return null;\n    }\n\n    const { data = undefined, expiresAt = 0 }: CachedStorageItem =\n      JSON.parse(item);\n    const isExpired = expiresAt < new Date().getTime();\n\n    if (isExpired || isUndefined(data)) {\n      this.#storage.removeItem(key);\n\n      return null;\n    }\n\n    return data as T;\n  }\n\n  /**\n   * Remove an item from the storage\n   * @param key - key\n   */\n  public removeItem(key: string): void {\n    this.#storage.removeItem(key);\n  }\n\n  /**\n   * Save an item in the storage with a ttl\n   * @param key - key\n   * @param data - data to store\n   * @param ttl - time to live in milliseconds\n   */\n  public setItem(key: string, data: unknown, ttl: number): void {\n    const item: CachedStorageItem = {\n      data,\n      expiresAt: new Date().getTime() + ttl,\n    };\n\n    this.#storage.setItem(key, JSON.stringify(item));\n  }\n}\n","export interface CustomerReconnectSuccessPayloadData {\n  reconnected: true;\n}\n\nexport function isCustomerReconnectSuccessPayloadData(\n  payload: unknown,\n): payload is CustomerReconnectSuccessPayloadData {\n  if (typeof payload !== 'object' || payload === null) {\n    return false;\n  }\n\n  if (!('reconnected' in payload)) {\n    return false;\n  }\n\n  return payload.reconnected === true;\n}\n","import { User } from '@brandembassy/ts-types-platform/dist/user/User';\nimport { UserId } from '@brandembassy/ts-types-platform/dist/user/UserId';\n\nimport { ChatSdk } from './ChatSdk';\n\n// Export runtime classes and types\nexport type { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nexport type { ConsumerIdentityInput as CustomerIdentity } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nexport type { CaseInboxAssigneeChangedData as AssignedAgentChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseInboxAssigneeChangedEvent';\nexport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nexport { WebSocketClientEvent } from '@brandembassy/push-updates-sdk';\nexport { WebSocketClientError } from './sockets/WebSocketClientError';\nexport { ChatEvent } from './event/ChatEvent';\nexport type { ChatEventType } from './event/ChatEvent';\nexport { sendChatEvent } from './event/sendChatEvent';\nexport { EnvironmentName, EnvironmentEndpoints } from './env/Environments';\nexport * from './agent';\nexport * from './thread';\nexport * from './contact';\nexport * from './ChatSdk';\nexport * from './message';\nexport { Customer } from './customer/Customer';\nexport type { Customer as CustomerView } from '@brandembassy/ts-types-platform/dist/customer/customer';\nexport * from './utils/narrowing';\nexport { generateId } from './utils/generateId';\nexport { splitName } from './utils/splitName';\nexport type { ChatSDKOptions } from './ChatSDKOptions';\nexport * from './groupChat';\nexport * from './utils/AbortablePromise';\nexport { AbortError } from './error/AbortError';\nexport { SdkVersionNotSupported } from './error/SdkVersionNotSupported';\nexport {\n  getBrowserFingerprint,\n  getDeviceType,\n  BrowserFingerprintOptions,\n  getBrowserLanguage,\n  getBrowserLocation,\n} from './browserFingerprint/getBrowserFingerprint';\nexport {\n  CacheStorage,\n  ICacheStorage,\n  CachedStorageItem,\n} from './storage/CacheStorage';\nexport { CacheStorageError } from './storage/CacheStorageError';\n\n// Export types for API Docs availability\nexport * from './authorization/AuthorizeConsumerEventResponse';\nexport type { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nexport type { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nexport {\n  ChannelAvailability,\n  ChannelInfo,\n} from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nexport type { ChannelAvailabilityResponse } from './channel/fetchChannelAvailability';\nexport { Thread as ThreadView } from '@brandembassy/ts-types-platform/dist/thread/Thread';\nexport type { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\nexport type { WebSocketClient } from './sockets/WebSocketClient';\nexport type {\n  EventListenerFunction,\n  RemoveListenerFunction,\n} from './event/ListenerFunction';\nexport type { IChatEventTarget } from './event/ChatEventTarget';\nexport type { ChatEventData } from './event/ChatEvent';\nexport type { MoreMessagesLoadedEvent } from './message/loadMoreMessagesEventData';\nexport type { ThreadRecoveredPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadRecovered';\nexport type { MessageSuccessEventData } from './message/MessageSuccessEventData';\nexport type { ConsumerAuthorizationSuccessPayloadData } from '@brandembassy/ts-types-chat/dist/authorization/ConsumerAuthorizationSuccessPayloadData';\nexport type { UploadFailResponse } from './attachment/uploadAttachment';\nexport { UploadAttachmentError } from './attachment/UploadAttachmentError';\nexport type Agent = User;\nexport type AgentId = UserId;\nexport type { AuthorizationToken } from '@brandembassy/ts-types-chat/dist/authorization/AuthorizationToken';\nexport type { OfflineMessageData } from './message/sendOfflineMessage';\nexport type { EventPayloadData } from './sockets/EventPayload';\nexport type { ThreadRecoveredChatEvent } from './thread/isRecoverSuccessPayload';\nexport * from './authorization/createReconnectPayloadData';\nexport * from './authorization/CustomerReconnectSuccessPayloadData';\nexport { AuthorizationError } from './authorization/AuthorizationError';\nexport { CHAT_SDK_VERSION } from './env/version';\n\n// Export the ChatSDK as default\nexport default ChatSdk;\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__198__","isoString","milliseconds","Date","parse","isNaN","day","parsedDate","exec","split","map","itm","parseInt","UTC","apply","getDate","NaN","tz","setUTCMinutes","getUTCMinutes","getTime","parseTimestampFromISO8601String","Object","defineProperty","value","getTimeInMinutes","getTimeInMilliseconds","getTimeInSeconds","padDateTimeUnit","dateTimeUnit","norm","Math","abs","floor","Number","_a","_b","hours","_c","minutes","_d","seconds","_e","getTimezoneISOOffset","misc_1","date","tzo","getTimezoneOffset","concat","queryParameters","keys","filter","key","encodeURIComponent","join","LogLevels","EventTargetPolyfill","this","listeners","prototype","addEventListener","type","callback","push","removeEventListener","stack","l","length","splice","dispatchEvent","event","slice","call","defaultPrevented","WebSocketClientEvent_1","enumerable","get","WebSocketClientEvent","__assign","assign","t","s","n","arguments","p","hasOwnProperty","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","getPushUpdateWebSocket","setupSocketConnection","queryParameters_1","initializeHeartbeat_1","object_1","WebSocketClient_1","socket","defaultConnectionOptions","forceSecureProtocol","heartbeatAfterAuthorize","maxRetries","maxReconnectionDelay","webSocketUrlWithoutProtocol","options","TypeError","connectionOptions","tenantId","userId","brandId","wscOptions","url","query","queryString","createQueryParametersAsString","removeEmptyValuesFromObject","protocol","window","location","URL","search","createWebSocketUrlWithProtocol","WebSocketClient","undefined","initializeHeartbeat","HeartBeatState","__values","o","Symbol","iterator","m","next","done","__read","r","ar","error","__spreadArray","to","from","pack","Array","ReconnectingWebSocket","DEFAULT","minReconnectionDelay","random","minUptime","reconnectionDelayGrowFactor","connectionTimeout","Infinity","maxEnqueuedMessages","startClosed","debug","protocols","_this","onclose","onerror","onmessage","onopen","_listeners","message","open","close","_shouldReconnect","_connectLock","_closeCalled","_messageQueue","_retryCount","_binaryType","_handleOpen","_debug","_options","clearTimeout","_connectTimeout","_uptimeTimeout","setTimeout","_acceptOpen","_ws","binaryType","forEach","send","listener","_callEventListener","_handleMessage","_handleError","_disconnect","_connect","_handleClose","_clearTimeouts","_url","_protocols","_maxRetries","max","configurable","set","reduce","acc","Blob","size","byteLength","bufferedAmount","extensions","readyState","WebSocket","CLOSED","CONNECTING","code","reason","reconnect","data","OPEN","e_1","listeners_1","listeners_1_1","e_1_1","return","setMaxRetires","args","_i","console","log","_getNextDelay","delay","pow","_wait","Promise","resolve","_getNextUrl","urlProvider","then","Error","_removeListeners","_addListeners","_handleTimeout","catch","err","ErrorEvent","CloseEvent","handleEvent","extendStatics","__extends","d","b","setPrototypeOf","__proto__","String","__","constructor","create","HEART_BEAT_CHECK_TIMEOUT","HEART_BEAT_INTERVAL","Logger_1","ReconnectingWebSocket_1","EventTargetPolyfill_1","HeartBeatState_1","_super","heartBeatTimeout","heartBeatCheckTimeout","enableDebugMode","debugMode","INFO","disableDebugMode","level","logger","sendHeartBeat","JSON","stringify","action","handleHeartBeatResponse","heartBeatState","DYING","LIVING","dispatchHeartBeatState","setHeartBeatCheckTimeout","heartbeatState","CustomEvent","isHeartBeatActive","closeEvent","retryCount","DIED","CLOSE","detail","MESSAGE","ERROR","startHeartBeat","interval","heartBeatCallback","stopHeartBeat","handleMessage","payload","authorizationStatus","warn","objectData","entries","result","AwsChatWindowEventActionRoute","AwsResponseEventType","AwsInputEventType","ChannelAvailability","DeviceType","CaseStatus_1","CaseStatus","MessageDirection","MessageType","PushUpdateEventType","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","definition","obj","prop","toStringTag","SDKVariableStorage","setAccessToken","accessToken","ACCESS_TOKEN","token","ACCESS_TOKEN_EXPIRES_IN","expiresIn","getAccessToken","super","name","cause","_getErrorMessage","AuthorizationError","errorMessage","CHAT_SDK_VERSION","generateId","crypto","randomUUID","randomValues","Uint8Array","getRandomValues","uuid","index","includes","toString","padStart","generateUuidFallback","createVisitorPayload","visitorId","visitor","id","objectProto","Ctor","func","transform","arg","global","freeSelf","Function","nativeObjectToString","symToStringTag","isOwn","tag","unmasked","uid","maskSrcKey","IE_PROTO","funcToString","reIsHostCtor","reIsNative","RegExp","replace","test","object","mapTag","promiseTag","setTag","weakMapTag","dataViewTag","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","getTag","ArrayBuffer","ctorString","isArray","freeExports","nodeType","freeModule","Buffer","isBuffer","typedArrayTags","freeProcess","process","nodeUtil","types","binding","nodeIsTypedArray","isTypedArray","requestQueue","Map","makeRequest","async","wsClient","eventId","splitName","firstName","names","setCustomFields","fields","setCustomFieldsFromArray","ident","getCustomFields","fromEntries","getCustomFieldsArray","Customer","image","websocketClient","_customFields","_exists","_websocketClient","setId","setName","setImage","CUSTOMER_ID","getId","getName","CUSTOMER_NAME","getIdOrCreateNewOne","customerId","getImage","CUSTOMER_IMAGE","setExists","exists","setCustomField","customFields","sendCustomFields","sendChatEvent","eventType","SEND_CONSUMER_CUSTOM_FIELDS","destroy","createCustomerIdentityPayload","storedName","storedImage","customerIdentityNamePayload","lastName","idOnExternalPlatform","getBrandIdAndChannelId","BRAND_ID","channelId","CHANNEL_ID","createEventPayload","eventPayloadData","storedDestinationId","DESTINATION","storedVisitId","VISIT_ID","storedVisitorId","VISITOR_ID","consumerIdentity","destination","visit","brand","channel","createEvent","actionRoute","AwsChatWindowEvent","CHAT_WINDOW_EVENT","payloadData","webSocketClient","createReconnectPayloadData","RECONNECT_CONSUMER","refreshTokenTimeoutId","handleRefreshToken","refreshTokenAction","accessTokenExpiresIn","idealTimeToRefreshAccessToken","round","getIdealTimeInSecondsForIssueRefreshToken","isAuthSuccessEvent","status","CONSUMER_AUTHORIZED","isTokenRefreshedSuccessResponse","response","TOKEN_REFRESHED","getBrowserLanguage","navigator","language","getBrowserLocation","Intl","DateTimeFormat","resolvedOptions","timeZone","getDeviceType","deviceType","MOBILE","TABLET","DESKTOP","getBrowserFingerprint","deviceInfoFromUserAgent","userAgent","country","ip","browser","getBrowser","browserVersion","version","os","getOS","osVersion","getDevice","applicationType","BROWSER","ERROR_CODE_SDK_VERSION_NOT_SUPPORTED","SdkVersionNotSupported","isSdkVersionNotSupportedEvent","errorCode","sdkVersionCheck","getErrorResponseData","json","statusText","fetchChannelInfo","languageLocale","CHANNEL_INTEGRATION_URL","ENDPOINT_CHAT","fetch","method","headers","Accept","APP_NAME","ok","EnvironmentName","setEnvironmentEndpoints","endpoints","ENDPOINT_GATEWAY","gateway","chat","ENDPOINT_AUTHORIZE","authorize","ChatEvent","AGENT_TYPING_STARTED","AGENT_TYPING_ENDED","ASSIGNED_AGENT_CHANGED","CONTACT_CREATED","CONTACT_STATUS_CHANGED","CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED","ChatCustomEvent","ChatEventMiddleware","middlewares","register","middleware","processedEvent","ChatEventTarget","EventTarget","hasUserData","user","EMPTY_EVENT","createdAt","normalizeEvent","hasEventId","hasError","hasEventType","hasData","context","eventDetailData","postback","isDataWithPostback","postbackData","postbackEventType","rawEventId","restEventData","eventRest","eventTypeMap","SENDER_TYPING_STARTED","SENDER_TYPING_ENDED","CASE_INBOX_ASSIGNEE_CHANGED","CASE_CREATED","CASE_STATUS_CHANGED","CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED","LIVECHAT_RECOVERED","normalizedContactHistoryItems","contactHistory","THREAD_RECOVERED","chatEventMapper","isSendMessageSuccessEventData","SendMessageFailedError","TRANSACTION_TOKEN_CACHE_KEY","WebSocketClientError","WsEventTarget","onError","connect","disconnect","stringData","on","handlerCallback","off","_errorHandler","eventError","port","host","prefix","socketUrl","additionalQueryParameters","appVersion","APP_VERSION","v","createSocketUrl","consumerId","transactionToken","errorHandlerBound","bind","UploadAttachmentError","createAttachmentPayload","file","attachment","reader","reject","FileReader","onloadend","errorEvent","target","readAsDataURL","createLocalFileReader","mimeType","createPayloadForAttachmentUpload","uploadAttachmentResponse","fileName","requestBody","content","body","uploadAttachment","fileUrl","friendlyName","allowedFileSize","isUploadFailResponse","isContactStatusChangedEvent","case","isContactCreatedEvent","isContactToRoutingQueueAssignmentChangedEvent","isContactRecipientsChangedEvent","CONTACT_RECIPIENTS_CHANGED","createMessageData","messageContent","messageId","threadIdOnExternalPlatform","browserFingerprint","thread","consumer","consumerContact","attachments","isLoadMoreMessagesEventData","MORE_MESSAGES_LOADED","messages","createLoadMoreMessagesPayloadData","eventData","LOAD_MORE_MESSAGES","AbortError","AbortablePromise","executor","abortController","AbortController","abortSignal","signal","abortReason","abort","_abortReason","promise","ArchiveThreadFailedError","getAuthor","direction","INBOUND","authorEndUserIdentity","fullName","authorUser","surname","trim","isMessage","item","hasId","hasDirection","hasMessageContent","isMessageCreatedEvent","MESSAGE_CREATED","isMessageSentEvent","MESSAGE_SENT","isMessageReadChangedEvent","MESSAGE_READ_CHANGED","GetMetadataFailedError","isLoadMetadataSuccessPayload","THREAD_METADATA_LOADED","lastMessage","isRecoverSuccessPayload","testResponseData","hasPostbackData","hasMessages","isCorrectEventType","hasNoError","isThreadArchivedSuccessPayload","THREAD_ARCHIVED","LoadMoreMessagesFailedError","createRecoverThreadPayloadData","emptyData","RECOVER_THREAD","SetThreadNameFailedError","ThreadRecoverFailedError","Thread","messageEmitter","customer","isAuthorizationEnabled","_typingTimeoutID","_isAuthorizationEnabled","_typingPreviewText","_messageEmitter","_customer","_registerEventHandlers","recover","contact","restData","sendMessage","messageData","TEXT","text","assertNonEmptyTextMessageContent","sendMessagePayloadData","SEND_MESSAGE","_mergeCustomFieldsAndAccessTokenWithMessageData","sendTextMessage","messageText","textMessageContent","getTextMessageContent","sendPostbackMessage","postbackMessageContent","getPostbackMessageContent","sendOutboundMessage","sendOutboundMessagePayloadData","SEND_OUTBOUND","loadMoreMessages","scrollToken","oldestMessageDatetime","THREAD_DATA","loadMoreMessagesEventData","lastMessageSeen","MESSAGE_SEEN","sendAttachments","files","all","createAttachmentUploadMessageData","keystroke","timeout","onSendCallback","_stopTypingCallback","stopTyping","keystrokeForPreview","currentText","_typingForPreviewTimeoutID","stopTypingForPreview","shouldSendPreview","currentPreviewText","sendMessagePreview","getMetadata","LOAD_THREAD_METADATA","onThreadEvent","handler","filteredEventHandler","threadId","eventThreadId","dataWithThread","messagePreview","getThreadId","filterCurrentThreadEventHandler","selectedFieldIDs","customField","SET_CONSUMER_CONTACT_CUSTOM_FIELD","archive","ARCHIVE_THREAD","updateThreadData","threadName","UPDATE_THREAD","isUpdateThreadSuccess","SEND_MESSAGE_PREVIEW","createSendMessagePreviewPayloadData","sendTranscript","contactNumber","email","SEND_TRANSCRIPT","consumerRecipients","createSendTranscriptPayloadData","_setThreadAndCustomerExists","_clearCustomFieldsOnContactStatusChangedToClosed","eventDetail","ContactStatus","clear","isOutbound","storedAccessToken","createRecoverLivechatThreadPayloadData","RECOVER_LIVECHAT","LivechatThread","_isInitialized","_canSendMessage","_registerLivechatEventHandlers","startChat","initialMessageText","endChat","threadData","contactId","END_CONTACT","createEndThreadPayloadData","isThreadListFetchedPostbackData","storeContactId","originalThreadData","storeContactIdMiddleware","caseId","array","storeThreadScrollData","scrollData","oldThreadData","storeThreadScrollDataMiddleware","messagesScrollToken","assertIsCallable","ChatSdk","_incomingChatEventMiddleware","_threadCache","_contactCustomFieldsQueue","_sendRefreshTokenEvent","refreshTokenResponse","REFRESH_TOKEN","AUTHORIZATION_CODE","authorizationCode","appName","destinationId","visitId","LANGUAGE","SECURED_SESSION","securedSession","cacheStorage","getItem","setItem","removeItem","CACHE_STORAGE","onRawEvent","_initEnvironment","customerName","customerImage","isLivechat","onErrorHandler","sdkError","getChannelInfo","getChannelAvailability","fetchChannelAvailability","reconnectResponse","refreshTokenEventCallback","reconnectPayload","reconnected","authorizationReconnect","basicChannelInfoRequest","channelInfo","isLiveChat","handleBasicChannelInfo","authorizationPayloadData","AUTHORIZE_CUSTOMER","authorization","disableChannelInfo","sdkVersion","sdkPlatform","createAuthorizationPayloadData","authEvent","REGISTER","authorizationRequest","authResponse","basicChannelInfo","customerIdentityIdOnExternalPlatform","generateAuthorizationToken","GENERATE_AUTHORIZATION_TOKEN","createGenerateAuthorizationTokenPayloadData","authorizationToken","onChatEvent","getCustomer","getThread","cachedThread","liveThread","_getContactCustomFieldsFromQueue","getThreadList","eventPayload","FETCH_THREAD_LIST","threads","getWebsocketClient","sendOfflineMessage","offlineMessageData","offlineMessagePayloadData","reverse","authorCustomerIdentity","SEND_OFFLINE_MESSAGE","createSendOfflineMessagePayloadData","recoverThreadData","recoverEvent","recoverResponse","recoverLivechatThreadData","environment","custom","customEnvironment","toLowerCase","buildEnvironmentEndpoints","_initWS","endpoint","assertNonNullable","wsClientOptions","hostname","pathname","substring","EVENT_IN_S3","s3Object","getEventData","parseWsMessageEvent","parsedEvent","has","delete","onMessageHandler","resetSession","isAssignedAgentChangedEvent","isAgentTypingStartedEvent","isAgentTypingEndedEvent","isSecuredSession","authorizeUrl","searchParams","append","cachedTransactionToken","cacheTransactionToken","getTransactionToken","isSetPositionInQueueEvent","setPositionInQueueEvent","isInteger","positionInQueue","SET_POSITION_IN_QUEUE","CreateInvitationFailedError","createCreateInvitationToGroupChatPayloadData","CREATE_GROUP_CHAT_INVITE","sendCreateInvitationToGroupChatEvent","createInvitationPayloadData","GROUP_CHAT_INVITE_CREATED","isInvitationToGroupChatCreated","JoinGroupChatFailedError","createJoinGroupChatPayloadData","JOIN_GROUP_CHAT","invitation","sendJoinGroupChatEvent","joinGroupChatPayloadData","GROUP_CHAT_JOINED","isJoinGroupChatSuccessResponse","createLeaveGroupChatPayloadData","LEAVE_GROUP_CHAT","sendLeaveGroupChatEvent","leaveGroupChatPayloadData","SendEmailInvitaionFailedError","createSendEmailInvitationToGroupChatPayloadData","invitationCode","SEND_EMAIL_INVITE_TO_GROUP_CHAT","recipients","sendEmailInvitationToGroupChatEvent","GROUP_CHAT_INVITE_SENT","isEmailInvitationToGroupChatSent","CacheStorageError","CacheStorage","storage","expiresAt","ttl","isCustomerReconnectSuccessPayloadData"],"sourceRoot":""}