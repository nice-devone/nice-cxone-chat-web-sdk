{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@brandembassy/chat-web-sdk/webpack/universalModuleDefinition","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/query/queryParameters.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/misc.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/contact/ContactStatus.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/index.js","webpack://@brandembassy/chat-web-sdk/external umd \"ua-parser-js\"","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/WebSocketClient.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/post/case/CaseStatus.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/channel/ChannelInfo.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/eventTargetPolyfill/EventTargetPolyfill.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/WebSocketClientEvent.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/message/MessageType.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/user/BrowserFingerprint.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/node_modules/@brandembassy/be-javascript-utils/dist/collection/object.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/HeartBeatState.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/isoString.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/timezone.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/pushUpdate/pushUpdateWebSocket.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/initializeHeartbeat.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/http/headers.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/Logger.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/node_modules/@brandembassy/be-javascript-utils/dist/query/queryParameters.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/ReconnectingWebSocket.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/message/MessageDirection.js","webpack://@brandembassy/chat-web-sdk/webpack/bootstrap","webpack://@brandembassy/chat-web-sdk/webpack/runtime/compat get default export","webpack://@brandembassy/chat-web-sdk/webpack/runtime/define property getters","webpack://@brandembassy/chat-web-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@brandembassy/chat-web-sdk/webpack/runtime/make namespace object","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isNull.js","webpack://@brandembassy/chat-web-sdk/./src/variables/VariableStorage.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/accessTokenStorage.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isObject.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_freeGlobal.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_root.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Symbol.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getRawTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_objectToString.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseGetTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isObjectLike.js","webpack://@brandembassy/chat-web-sdk/./src/error/ChatSDKError.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isString.js","webpack://@brandembassy/chat-web-sdk/./src/authorization/AuthorizationError.ts","webpack://@brandembassy/chat-web-sdk/./src/env/version.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/generateId.ts","webpack://@brandembassy/chat-web-sdk/./src/visitor/createVisitorPayload.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_isPrototype.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_nativeKeys.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_overArg.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseKeys.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isFunction.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_coreJsData.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_isMasked.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_toSource.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsNative.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getNative.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getValue.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_DataView.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Map.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Promise.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Set.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_WeakMap.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsArguments.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArguments.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isLength.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isBuffer.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/stubFalse.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsTypedArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_nodeUtil.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isTypedArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseUnary.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isEmpty.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArrayLike.js","webpack://@brandembassy/chat-web-sdk/./src/request/requestQueue.ts","webpack://@brandembassy/chat-web-sdk/./src/request/makeRequest.ts","webpack://@brandembassy/chat-web-sdk/./src/request/requestRateLimit.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/splitName.ts","webpack://@brandembassy/chat-web-sdk/./src/customField/CustomFields.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/Customer.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/setCustomerCustomFieldsPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/CustomerInstance.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/customerIdentityPayload.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isNil.js","webpack://@brandembassy/chat-web-sdk/./src/utils/getBrandIdAndChannelId.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isUndefined.js","webpack://@brandembassy/chat-web-sdk/./src/sockets/EventPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/event/sendChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/createReconnectPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/handleRefreshToken.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/getAuthorizationTokenForUrl.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/generateAuthorizationTokenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isAuthorizationTokenGeneratedPostbackData.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isAuthSuccessEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isTokenRefreshedSuccessResponse.ts","webpack://@brandembassy/chat-web-sdk/./src/browserFingerprint/getBrowserFingerprint.ts","webpack://@brandembassy/chat-web-sdk/./src/request/defaultHeaders.ts","webpack://@brandembassy/chat-web-sdk/./src/error/AbortError.ts","webpack://@brandembassy/chat-web-sdk/./src/error/SdkVersionNotSupported.ts","webpack://@brandembassy/chat-web-sdk/./src/event/middleware/sdkVersionCheck.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/getNetworkInfo.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/isWindowClosing.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/SecureSessionsType.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/fetchJSON.ts","webpack://@brandembassy/chat-web-sdk/./src/request/getErrorResponseData.ts","webpack://@brandembassy/chat-web-sdk/./src/channel/fetchChannelAvailability.ts","webpack://@brandembassy/chat-web-sdk/./src/channel/fetchChannelInfo.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/getSecuredSessionType.ts","webpack://@brandembassy/chat-web-sdk/./src/env/Environments.ts","webpack://@brandembassy/chat-web-sdk/./src/env/setEnvironmentEndpoints.ts","webpack://@brandembassy/chat-web-sdk/./src/error/errorMessages.ts","webpack://@brandembassy/chat-web-sdk/./src/error/IpAddressBlockedError.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEventMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEventTarget.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/agentTyping.ts","webpack://@brandembassy/chat-web-sdk/./src/event/normalizeEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/event/middleware/ChatEventMapper.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/assignedAgentChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactCreated.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactStatusChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactToRoutingQueueAssignmentChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/livechatRecovered.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/threadRecovered.ts","webpack://@brandembassy/chat-web-sdk/./src/initializeSdkVariables.ts","webpack://@brandembassy/chat-web-sdk/./src/request/validateAndFilterHttpHeaders.ts","webpack://@brandembassy/chat-web-sdk/./src/request/validateAndFilterWebSocketQuery.ts","webpack://@brandembassy/chat-web-sdk/./src/message/MessageSuccessEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/SendMessageFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getAuthor.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageCreatedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageSentEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageReadChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/fetchMessageWithFullContent.ts","webpack://@brandembassy/chat-web-sdk/./src/request/isS3ChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/request/getEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/cachedTransactionToken.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/getAuthorizeUrl.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/thirdPartyTokenStorage.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/refreshThirdPartyToken.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/handleNewThirdPartyToken.ts","webpack://@brandembassy/chat-web-sdk/./src/sockets/WebSocketClientError.ts","webpack://@brandembassy/chat-web-sdk/./src/sockets/WsEventTarget.ts","webpack://@brandembassy/chat-web-sdk/./src/sockets/WebSocketClient.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/UploadAttachmentError.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/sendAttachments.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/createPayloadForAttachmentUpload.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/localFileReader.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/uploadAttachment.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactStatusChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactCreatedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactToRoutingQueueAssignmentChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactRecipientsChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/createMessageData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/loadMoreMessagesEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/loadMoreMessagesPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/AbortablePromise.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/ArchiveThreadFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/GetMetadataFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isLoadMetadataSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isRecoverSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isThreadArchivedSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/LoadMoreMessagesFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/recoverThreadPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/SetThreadNameFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/ThreadRecoverFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/Thread.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/assertNonEmptyTextMessageContent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getTextMessageContent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getPostbackMessageContent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOutboundMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOutboundMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/lastMessageSeenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/typingEvents.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/metadata.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/threadEventHandler.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/setThreadCustomFieldsPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/archiveThread.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/updateThread.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessagePreviewPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/transcript.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/recoverLivechatThreadPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/LivechatThread.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/createEndThreadPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isThreadListFetchedPostbackData.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeContactId.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeContactIdMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeThreadScrollData.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/last.js","webpack://@brandembassy/chat-web-sdk/./src/thread/storeThreadScrollDataMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/assert.ts","webpack://@brandembassy/chat-web-sdk/./src/ChatSdk.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/getPromiseWithResolvers.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/createRefreshTokenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/env/appName.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/setCustomerIdFromOptions.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/authorizationReconnect.ts","webpack://@brandembassy/chat-web-sdk/./src/channel/handleBasicChannelInfo.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/authorizationPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/isCustomerIdentityIdValid.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOfflineMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOfflineMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAssignedAgentChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAgentTypingStartedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAgentTypingEndedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/securedSession/getTransactionToken.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isIpAddressBlockedError.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getMessageFullContent.ts","webpack://@brandembassy/chat-web-sdk/./src/request/messageHandler.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/isSetPositionInQueueEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/CreateInvitationFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/createInvitation.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/JoinGroupChatFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/joinGroupChat.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/leaveGroupChat.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/SendEmailInvitaionFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/sendEmailInvitation.ts","webpack://@brandembassy/chat-web-sdk/./src/storage/CacheStorageError.ts","webpack://@brandembassy/chat-web-sdk/./src/storage/CacheStorage.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/CustomerReconnectSuccessPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/channel/getChannelInfo.ts","webpack://@brandembassy/chat-web-sdk/./src/channel/getChannelAvailability.ts","webpack://@brandembassy/chat-web-sdk/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"ua-parser-js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"ua-parser-js\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"ua-parser-js\")) : factory(root[\"ua-parser-js\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__198__) => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PushUpdateEventType;\n(function (PushUpdateEventType) {\n    PushUpdateEventType[\"AUTHORIZE_CONSUMER\"] = \"AuthorizeConsumer\";\n    /** @deprecated use CONTACT_CREATED */\n    PushUpdateEventType[\"CASE_CREATED\"] = \"CaseCreated\";\n    /** @deprecated use ASSIGNED_AGENT_CHANGED */\n    PushUpdateEventType[\"CASE_INBOX_ASSIGNEE_CHANGED\"] = \"CaseInboxAssigneeChanged\";\n    /** @deprecated use CONTACT_STATUS_CHANGED */\n    PushUpdateEventType[\"CASE_STATUS_CHANGED\"] = \"CaseStatusChanged\";\n    /** @deprecated use CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED */\n    PushUpdateEventType[\"CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED\"] = \"CaseToRoutingQueueAssignmentChanged\";\n    PushUpdateEventType[\"CONTACT_CREATED\"] = \"CaseCreated\";\n    PushUpdateEventType[\"ASSIGNED_AGENT_CHANGED\"] = \"CaseInboxAssigneeChanged\";\n    PushUpdateEventType[\"CONTACT_STATUS_CHANGED\"] = \"CaseStatusChanged\";\n    PushUpdateEventType[\"CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED\"] = \"CaseToRoutingQueueAssignmentChanged\";\n    PushUpdateEventType[\"CONTACT_PREFERRED_USER_CHANGED\"] = \"ContactPreferredUserChanged\";\n    PushUpdateEventType[\"CONTACT_PROFICIENCY_CHANGED\"] = \"ContactProficiencyChanged\";\n    PushUpdateEventType[\"CONTACT_PRIORITY_CHANGED\"] = \"ContactPriorityChanged\";\n    PushUpdateEventType[\"CONTACT_SYNC\"] = \"ContactSync\";\n    PushUpdateEventType[\"CHANNEL_CREATED\"] = \"ChannelCreated\";\n    PushUpdateEventType[\"CHANNEL_DELETED\"] = \"ChannelDeleted\";\n    PushUpdateEventType[\"CHANNEL_UPDATED\"] = \"ChannelUpdated\";\n    PushUpdateEventType[\"MESSAGE_ADDED_INTO_CASE\"] = \"MessageAddedIntoCase\";\n    PushUpdateEventType[\"MESSAGE_CREATED\"] = \"MessageCreated\";\n    PushUpdateEventType[\"MESSAGE_DELIVERED_TO_END_USER\"] = \"MessageDeliveredToEndUser\";\n    PushUpdateEventType[\"MESSAGE_DELIVERED_TO_USER\"] = \"MessageDeliveredToUser\";\n    PushUpdateEventType[\"MESSAGE_DELIVERY_STATUS_CHANGED\"] = \"MessageDeliveryStatusChanged\";\n    PushUpdateEventType[\"MESSAGE_NOTE_CREATED\"] = \"MessageNoteCreated\";\n    PushUpdateEventType[\"MESSAGE_NOTE_UPDATED\"] = \"MessageNoteUpdated\";\n    PushUpdateEventType[\"MESSAGE_NOTE_DELETED\"] = \"MessageNoteDeleted\";\n    PushUpdateEventType[\"MESSAGE_READ_CHANGED\"] = \"MessageReadChanged\";\n    PushUpdateEventType[\"MESSAGE_SEEN_BY_END_USER\"] = \"MessageSeenByEndUser\";\n    PushUpdateEventType[\"MESSAGE_SEEN_BY_USER\"] = \"MessageSeenByUser\";\n    PushUpdateEventType[\"MESSAGE_SEEN_CHANGED\"] = \"MessageSeenChanged\";\n    PushUpdateEventType[\"MESSAGE_SENT\"] = \"MessageSent\";\n    PushUpdateEventType[\"MESSAGE_UPDATED\"] = \"MessageUpdated\";\n    PushUpdateEventType[\"PAGE_VIEW_CREATED\"] = \"PageViewCreated\";\n    PushUpdateEventType[\"ROUTING_QUEUE_CREATED\"] = \"RoutingQueueCreated\";\n    PushUpdateEventType[\"ROUTING_QUEUE_DELETED\"] = \"RoutingQueueDeleted\";\n    PushUpdateEventType[\"ROUTING_QUEUE_UPDATED\"] = \"RoutingQueueUpdated\";\n    PushUpdateEventType[\"SUBQUEUE_ASSIGNED_TO_ROUTING_QUEUE\"] = \"SubqueueAssignedToRoutingQueue\";\n    PushUpdateEventType[\"SUBQUEUE_UNASSIGNED_TO_ROUTING_QUEUE\"] = \"SubqueueUnassignedFromRoutingQueue\";\n    PushUpdateEventType[\"USER_ASSIGNED_TO_ROUTING_QUEUE\"] = \"UserAssignedToRoutingQueue\";\n    PushUpdateEventType[\"USER_STATUS_CHANGED\"] = \"UserStatusChanged\";\n    PushUpdateEventType[\"USER_UNASSIGNED_FROM_ROUTING_QUEUE\"] = \"UserUnassignedFromRoutingQueue\";\n    PushUpdateEventType[\"AGENT_CONTACT_STARTED\"] = \"AgentContactStarted\";\n    PushUpdateEventType[\"AGENT_CONTACT_ENDED\"] = \"AgentContactEnded\";\n    PushUpdateEventType[\"SENDER_TYPING_STARTED\"] = \"SenderTypingStarted\";\n    PushUpdateEventType[\"SENDER_TYPING_ENDED\"] = \"SenderTypingEnded\";\n    PushUpdateEventType[\"FIRE_PROACTIVE\"] = \"FireProactiveAction\";\n    PushUpdateEventType[\"CONTACT_INBOX_PRE_ASSIGNEE_CHANGED\"] = \"ConsumerContactInboxPreAssigneeChanged\";\n    PushUpdateEventType[\"CONTACT_RECIPIENTS_CHANGED\"] = \"ContactRecipientsChanged\";\n    PushUpdateEventType[\"MESSAGE_PREVIEW_CREATED\"] = \"MessagePreviewCreated\";\n    PushUpdateEventType[\"EVENT_IN_S3\"] = \"EventInS3\";\n})(PushUpdateEventType = exports.PushUpdateEventType || (exports.PushUpdateEventType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createQueryParametersAsString = void 0;\nfunction createQueryParametersAsString(queryParameters) {\n    return Object.keys(queryParameters)\n        .filter(function (key) { return queryParameters[key] !== null; })\n        .map(function (key) {\n        return [key, queryParameters[key]].map(encodeURIComponent).join('=');\n    })\n        .join('&');\n}\nexports.createQueryParametersAsString = createQueryParametersAsString;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTimeInMinutes = exports.getTimeInMilliseconds = exports.getTimeInSeconds = exports.padDateTimeUnit = void 0;\nvar padDateTimeUnit = function (dateTimeUnit) {\n    var norm = Math.abs(Math.floor(typeof dateTimeUnit === 'string' ? Number(dateTimeUnit) : dateTimeUnit));\n    return (norm < 10 ? '0' : '') + norm;\n};\nexports.padDateTimeUnit = padDateTimeUnit;\nvar getTimeInSeconds = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d;\n    return hours * 60 * 60 + minutes * 60 + seconds;\n};\nexports.getTimeInSeconds = getTimeInSeconds;\nvar getTimeInMilliseconds = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d, _e = _a.milliseconds, milliseconds = _e === void 0 ? 0 : _e;\n    return (0, exports.getTimeInSeconds)({ hours: hours, minutes: minutes, seconds: seconds }) * 1000 + milliseconds;\n};\nexports.getTimeInMilliseconds = getTimeInMilliseconds;\nvar getTimeInMinutes = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d;\n    return (0, exports.getTimeInSeconds)({ hours: hours, minutes: minutes, seconds: seconds }) / 60;\n};\nexports.getTimeInMinutes = getTimeInMinutes;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CaseStatus_1 = require(\"../post/case/CaseStatus\");\nexports.ContactStatus = CaseStatus_1.CaseStatus;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupSocketConnection = exports.WebSocketClientEvent = exports.WebSocketClient = exports.EventTargetPolyfill = exports.HeartBeatState = void 0;\nvar HeartBeatState_1 = require(\"./websocket/HeartBeatState\");\nObject.defineProperty(exports, \"HeartBeatState\", { enumerable: true, get: function () { return HeartBeatState_1.HeartBeatState; } });\nvar EventTargetPolyfill_1 = require(\"./eventTargetPolyfill/EventTargetPolyfill\");\nObject.defineProperty(exports, \"EventTargetPolyfill\", { enumerable: true, get: function () { return EventTargetPolyfill_1.EventTargetPolyfill; } });\nvar WebSocketClient_1 = require(\"./websocket/WebSocketClient\");\nObject.defineProperty(exports, \"WebSocketClient\", { enumerable: true, get: function () { return WebSocketClient_1.WebSocketClient; } });\nvar WebSocketClientEvent_1 = require(\"./websocket/WebSocketClientEvent\");\nObject.defineProperty(exports, \"WebSocketClientEvent\", { enumerable: true, get: function () { return WebSocketClientEvent_1.WebSocketClientEvent; } });\nvar pushUpdateWebSocket_1 = require(\"./pushUpdate/pushUpdateWebSocket\");\nObject.defineProperty(exports, \"setupSocketConnection\", { enumerable: true, get: function () { return pushUpdateWebSocket_1.setupSocketConnection; } });\n//# sourceMappingURL=index.js.map","module.exports = __WEBPACK_EXTERNAL_MODULE__198__;","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketClient = exports.HEART_BEAT_CHECK_TIMEOUT = exports.HEART_BEAT_INTERVAL = void 0;\nvar Logger_1 = require(\"../Logger\");\nvar ReconnectingWebSocket_1 = require(\"./ReconnectingWebSocket\");\nvar EventTargetPolyfill_1 = require(\"../eventTargetPolyfill/EventTargetPolyfill\");\nvar HeartBeatState_1 = require(\"./HeartBeatState\");\nvar WebSocketClientEvent_1 = require(\"./WebSocketClientEvent\");\nexports.HEART_BEAT_INTERVAL = 15000;\nexports.HEART_BEAT_CHECK_TIMEOUT = exports.HEART_BEAT_INTERVAL * 3;\nvar HEART_BEAT_RESPONSE = 'pong';\nvar HEART_BEAT_ACTION_NAME = 'heartbeat';\nvar WebSocketClient = (function (_super) {\n    __extends(WebSocketClient, _super);\n    function WebSocketClient(url, protocols, options) {\n        var _this = _super.call(this) || this;\n        _this.heartBeatTimeout = null;\n        _this.heartBeatCheckTimeout = null;\n        _this.enableDebugMode = function () {\n            if (!_this.debugMode) {\n                _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--loggerEnabled');\n            }\n            _this.debugMode = true;\n        };\n        _this.disableDebugMode = function () {\n            _this.debugMode = false;\n        };\n        _this.log = function (level, message, args) {\n            if (_this.debugMode && _this.logger) {\n                _this.logger[level](message, args);\n            }\n        };\n        _this.sendHeartBeat = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--sendHeartBeat');\n            _this.send(JSON.stringify({ action: HEART_BEAT_ACTION_NAME }));\n        };\n        _this.handleHeartBeatResponse = function () {\n            if (_this.heartBeatState === HeartBeatState_1.HeartBeatState.DYING) {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.LIVING;\n                _this.dispatchHeartBeatState();\n            }\n            _this.setHeartBeatCheckTimeout();\n        };\n        _this.setHeartBeatCheckTimeout = function () {\n            if (_this.heartBeatCheckTimeout !== null) {\n                clearTimeout(_this.heartBeatCheckTimeout);\n            }\n            _this.heartBeatCheckTimeout = setTimeout(function () {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DYING;\n                _this.dispatchHeartBeatState();\n            }, exports.HEART_BEAT_CHECK_TIMEOUT);\n        };\n        _this.dispatchHeartBeatState = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--dispatchHeartBeatState', [\n                { heartbeatState: _this.heartBeatState },\n            ]);\n            if (_this.heartBeatState !== null) {\n                _this.dispatchEvent(new CustomEvent(_this.heartBeatState));\n            }\n        };\n        _this.isHeartBeatActive = function () { return _this.heartBeatState !== null; };\n        _this.heartBeatState = null;\n        _this.debugMode = false;\n        _this.socket = new ReconnectingWebSocket_1.ReconnectingWebSocket(url, protocols, options);\n        _this.socket.onopen = function () {\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.OPEN));\n        };\n        if (options === null || options === void 0 ? void 0 : options.logger) {\n            _this.logger = options.logger;\n        }\n        _this.socket.onclose = function (closeEvent) {\n            if (_this.socket.retryCount === (options === null || options === void 0 ? void 0 : options.maxRetries)) {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DIED;\n            }\n            else {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DYING;\n            }\n            _this.dispatchHeartBeatState();\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.CLOSE, { detail: closeEvent }));\n        };\n        _this.socket.onmessage = function (event) {\n            _this.handleHeartBeatResponse();\n            if (JSON.parse(event.data) !== HEART_BEAT_RESPONSE) {\n                _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--onmessage', [event]);\n                _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.MESSAGE, { detail: event }));\n            }\n        };\n        _this.socket.onerror = function (event) {\n            _this.log(Logger_1.LogLevels.ERROR, 'websocket-push-updates--onError', [event]);\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.ERROR, { detail: event }));\n        };\n        return _this;\n    }\n    WebSocketClient.prototype.send = function (data) {\n        this.socket.send(data);\n    };\n    WebSocketClient.prototype.startHeartBeat = function () {\n        var _this = this;\n        this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--startHeartBeat', [\n            { interval: exports.HEART_BEAT_INTERVAL },\n        ]);\n        var heartBeatCallback = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--heartBeatCallback');\n            _this.sendHeartBeat();\n            _this.heartBeatTimeout = setTimeout(heartBeatCallback, exports.HEART_BEAT_INTERVAL);\n        };\n        this.setHeartBeatCheckTimeout();\n        heartBeatCallback();\n        this.heartBeatState = HeartBeatState_1.HeartBeatState.LIVING;\n    };\n    WebSocketClient.prototype.stopHeartBeat = function () {\n        this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--stopHeartBeat');\n        if (this.heartBeatTimeout !== null) {\n            clearTimeout(this.heartBeatTimeout);\n        }\n        if (this.heartBeatCheckTimeout !== null) {\n            clearTimeout(this.heartBeatCheckTimeout);\n        }\n        this.heartBeatState = null;\n    };\n    return WebSocketClient;\n}(EventTargetPolyfill_1.EventTargetPolyfill));\nexports.WebSocketClient = WebSocketClient;\n//# sourceMappingURL=WebSocketClient.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CaseStatus;\n(function (CaseStatus) {\n    CaseStatus[\"NEW\"] = \"new\";\n    CaseStatus[\"OPEN\"] = \"open\";\n    CaseStatus[\"PENDING\"] = \"pending\";\n    CaseStatus[\"ESCALATED\"] = \"escalated\";\n    CaseStatus[\"RESOLVED\"] = \"resolved\";\n    CaseStatus[\"CLOSED\"] = \"closed\";\n    CaseStatus[\"TRASHED\"] = \"trashed\";\n})(CaseStatus = exports.CaseStatus || (exports.CaseStatus = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ChannelAvailability;\n(function (ChannelAvailability) {\n    ChannelAvailability[\"ONLINE\"] = \"online\";\n    ChannelAvailability[\"OFFLINE\"] = \"offline\";\n})(ChannelAvailability = exports.ChannelAvailability || (exports.ChannelAvailability = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventTargetPolyfill = void 0;\nvar EventTargetPolyfill = (function () {\n    function EventTargetPolyfill() {\n        this.listeners = {};\n    }\n    EventTargetPolyfill.prototype.addEventListener = function (type, callback) {\n        if (!(type in this.listeners)) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(callback);\n    };\n    EventTargetPolyfill.prototype.removeEventListener = function (type, callback) {\n        if (!(type in this.listeners)) {\n            return;\n        }\n        var stack = this.listeners[type];\n        for (var i = 0, l = stack.length; i < l; i++) {\n            if (stack[i] === callback) {\n                stack.splice(i, 1);\n                return;\n            }\n        }\n    };\n    EventTargetPolyfill.prototype.dispatchEvent = function (event) {\n        if (!(event.type in this.listeners)) {\n            return true;\n        }\n        var stack = this.listeners[event.type].slice();\n        for (var i = 0, l = stack.length; i < l; i++) {\n            stack[i].call(this, event);\n        }\n        return !event.defaultPrevented;\n    };\n    return EventTargetPolyfill;\n}());\nexports.EventTargetPolyfill = EventTargetPolyfill;\n//# sourceMappingURL=EventTargetPolyfill.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketClientEvent = void 0;\nvar WebSocketClientEvent;\n(function (WebSocketClientEvent) {\n    WebSocketClientEvent[\"CLOSE\"] = \"close\";\n    WebSocketClientEvent[\"ERROR\"] = \"error\";\n    WebSocketClientEvent[\"MESSAGE\"] = \"message\";\n    WebSocketClientEvent[\"OPEN\"] = \"open\";\n    WebSocketClientEvent[\"AUTHORIZATION_FAILED\"] = \"authorizationFailed\";\n})(WebSocketClientEvent = exports.WebSocketClientEvent || (exports.WebSocketClientEvent = {}));\n//# sourceMappingURL=WebSocketClientEvent.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MessageType;\n(function (MessageType) {\n    MessageType[\"TEXT\"] = \"TEXT\";\n    MessageType[\"FILE\"] = \"FILE\";\n    MessageType[\"FORM\"] = \"FORM\";\n    MessageType[\"PLUGIN\"] = \"PLUGIN\";\n    MessageType[\"POSTBACK\"] = \"POSTBACK\";\n    MessageType[\"QUICK_REPLIES\"] = \"QUICK_REPLIES\";\n    MessageType[\"RICH_LINK\"] = \"RICH_LINK\";\n    MessageType[\"LIST_PICKER\"] = \"LIST_PICKER\";\n    MessageType[\"ADAPTIVE_CARD\"] = \"ADAPTIVE_CARD\";\n    MessageType[\"TIME_PICKER\"] = \"TIME_PICKER\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DeviceType;\n(function (DeviceType) {\n    DeviceType[\"DESKTOP\"] = \"desktop\";\n    DeviceType[\"MOBILE\"] = \"mobile\";\n    DeviceType[\"OTHER\"] = \"other\";\n    DeviceType[\"TABLET\"] = \"tablet\";\n})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));\nvar ApplicationType;\n(function (ApplicationType) {\n    ApplicationType[\"BROWSER\"] = \"browser\";\n})(ApplicationType = exports.ApplicationType || (exports.ApplicationType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AwsInputEventType;\n(function (AwsInputEventType) {\n    AwsInputEventType[\"SENDER_TYPING_STARTED\"] = \"SenderTypingStarted\";\n    AwsInputEventType[\"SENDER_TYPING_ENDED\"] = \"SenderTypingEnded\";\n    AwsInputEventType[\"LOAD_MORE_MESSAGES\"] = \"LoadMoreMessages\";\n    AwsInputEventType[\"RECOVER_LIVECHAT\"] = \"RecoverLivechat\";\n    AwsInputEventType[\"RECOVER_THREAD\"] = \"RecoverThread\";\n    AwsInputEventType[\"SEND_MESSAGE\"] = \"SendMessage\";\n    AwsInputEventType[\"SEND_OUTBOUND\"] = \"SendOutbound\";\n    AwsInputEventType[\"SEND_OFFLINE_MESSAGE\"] = \"SendOfflineMessage\";\n    AwsInputEventType[\"SEND_PAGE_VIEWS\"] = \"SendPageViews\";\n    AwsInputEventType[\"SEND_CONSUMER_CUSTOM_FIELDS\"] = \"SetConsumerCustomFields\";\n    AwsInputEventType[\"SET_CONSUMER_CONTACT_CUSTOM_FIELD\"] = \"SetConsumerContactCustomFields\";\n    AwsInputEventType[\"MESSAGE_SEEN\"] = \"MessageSeenByConsumer\";\n    AwsInputEventType[\"SEND_TRANSCRIPT\"] = \"SendTranscript\";\n    AwsInputEventType[\"FETCH_THREAD_LIST\"] = \"FetchThreadList\";\n    AwsInputEventType[\"END_CONTACT\"] = \"EndContact\";\n    AwsInputEventType[\"EXECUTE_TRIGGER\"] = \"ExecuteTrigger\";\n    AwsInputEventType[\"AUTHORIZE_CONSUMER\"] = \"AuthorizeConsumer\";\n    AwsInputEventType[\"AUTHORIZE_CUSTOMER\"] = \"AuthorizeCustomer\";\n    AwsInputEventType[\"RECONNECT_CONSUMER\"] = \"ReconnectConsumer\";\n    AwsInputEventType[\"UPDATE_THREAD\"] = \"UpdateThread\";\n    AwsInputEventType[\"ARCHIVE_THREAD\"] = \"ArchiveThread\";\n    AwsInputEventType[\"LOAD_THREAD_METADATA\"] = \"LoadThreadMetadata\";\n    AwsInputEventType[\"REFRESH_TOKEN\"] = \"RefreshToken\";\n    AwsInputEventType[\"STORE_VISITOR\"] = \"StoreVisitor\";\n    AwsInputEventType[\"STORE_VISITOR_EVENTS\"] = \"StoreVisitorEvents\";\n    AwsInputEventType[\"CREATE_GROUP_CHAT_INVITE\"] = \"CreateInvitationToGroupChat\";\n    AwsInputEventType[\"SEND_EMAIL_INVITE_TO_GROUP_CHAT\"] = \"SendEmailInvitationToGroupChat\";\n    AwsInputEventType[\"JOIN_GROUP_CHAT\"] = \"JoinGroupChat\";\n    AwsInputEventType[\"LEAVE_GROUP_CHAT\"] = \"LeaveGroupChat\";\n    AwsInputEventType[\"GENERATE_AUTHORIZATION_TOKEN\"] = \"GenerateAuthorizationToken\";\n    AwsInputEventType[\"ADD_VISITOR_TAGS\"] = \"AddVisitorTags\";\n    AwsInputEventType[\"REMOVE_VISITOR_TAGS\"] = \"RemoveVisitorTags\";\n    AwsInputEventType[\"SEND_MESSAGE_PREVIEW\"] = \"SendMessagePreview\";\n})(AwsInputEventType = exports.AwsInputEventType || (exports.AwsInputEventType = {}));\nvar AwsResponseEventType;\n(function (AwsResponseEventType) {\n    AwsResponseEventType[\"LIVECHAT_RECOVERED\"] = \"LivechatRecovered\";\n    AwsResponseEventType[\"MORE_MESSAGES_LOADED\"] = \"MoreMessagesLoaded\";\n    AwsResponseEventType[\"OFFLINE_MESSAGE_SENT\"] = \"OfflineMessageSent\";\n    AwsResponseEventType[\"THREAD_LIST_FETCHED\"] = \"ThreadListFetched\";\n    AwsResponseEventType[\"THREAD_RECOVERED\"] = \"ThreadRecovered\";\n    AwsResponseEventType[\"TRANSCRIPT_SENT\"] = \"TranscriptSent\";\n    AwsResponseEventType[\"CONSUMER_AUTHORIZED\"] = \"ConsumerAuthorized\";\n    AwsResponseEventType[\"THREAD_METADATA_LOADED\"] = \"ThreadMetadataLoaded\";\n    AwsResponseEventType[\"SET_POSITION_IN_QUEUE\"] = \"SetPositionInQueue\";\n    AwsResponseEventType[\"GROUP_CHAT_INVITE_CREATED\"] = \"InvitationToGroupChatCreated\";\n    AwsResponseEventType[\"GROUP_CHAT_INVITE_SENT\"] = \"EmailInvitationToGroupChatSent\";\n    AwsResponseEventType[\"GROUP_CHAT_JOINED\"] = \"GroupChatJoined\";\n    AwsResponseEventType[\"TOKEN_REFRESHED\"] = \"TokenRefreshed\";\n    AwsResponseEventType[\"AUTHORIZATION_TOKEN_GENERATED\"] = \"AuthorizationTokenGenerated\";\n    AwsResponseEventType[\"THREAD_ARCHIVED\"] = \"ThreadArchived\";\n})(AwsResponseEventType = exports.AwsResponseEventType || (exports.AwsResponseEventType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeEmptyValuesFromObject = void 0;\nfunction removeEmptyValuesFromObject(objectData) {\n    return Object.entries(objectData)\n        .filter(function (_a) {\n        var key = _a[0], value = _a[1];\n        return value !== undefined && value !== null;\n    })\n        .reduce(function (result, _a) {\n        var key = _a[0], value = _a[1];\n        result[key] = value;\n        return result;\n    }, {});\n}\nexports.removeEmptyValuesFromObject = removeEmptyValuesFromObject;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeartBeatState = void 0;\nvar HeartBeatState;\n(function (HeartBeatState) {\n    HeartBeatState[\"DIED\"] = \"died\";\n    HeartBeatState[\"DYING\"] = \"dying\";\n    HeartBeatState[\"LIVING\"] = \"living\";\n})(HeartBeatState = exports.HeartBeatState || (exports.HeartBeatState = {}));\n//# sourceMappingURL=HeartBeatState.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseTimestampFromISO8601String = exports.fromISOString = exports.isISOStringDateWithTimezoneOffset = exports.toISOStringWithTimezoneOffset = exports.toISOStringWithMilliseconds = exports.toISOString = void 0;\nvar timezone_1 = require(\"./timezone\");\nvar misc_1 = require(\"./misc\");\nvar toISOString = function (date) {\n    return (date.getUTCFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCSeconds()) +\n        '+00:00');\n};\nexports.toISOString = toISOString;\nvar toISOStringWithMilliseconds = function (date) {\n    return (date.getUTCFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCSeconds()) +\n        '.' +\n        (date.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        '+00:00');\n};\nexports.toISOStringWithMilliseconds = toISOStringWithMilliseconds;\nvar toISOStringWithTimezoneOffset = function (date) {\n    return (date.getFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getSeconds()) +\n        (0, timezone_1.getTimezoneISOOffset)(date));\n};\nexports.toISOStringWithTimezoneOffset = toISOStringWithTimezoneOffset;\nfunction isISOStringDateWithTimezoneOffset(isoDateString) {\n    return /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})$/.test(isoDateString);\n}\nexports.isISOStringDateWithTimezoneOffset = isISOStringDateWithTimezoneOffset;\nfunction fromISOString(isoString) {\n    var milliseconds = Date.parse(isoString);\n    if (isNaN(milliseconds)) {\n        milliseconds = parseTimestampFromISO8601String(isoString);\n    }\n    return new Date(milliseconds);\n}\nexports.fromISOString = fromISOString;\nfunction parseTimestampFromISO8601String(isoString) {\n    var day;\n    var rx = /^(\\d{4}-\\d\\d-\\d\\d([tT][\\d:.]*)?)([zZ]|([+-])(\\d\\d):?(\\d\\d))?$/;\n    var parsedDate = rx.exec(isoString) || [];\n    if (parsedDate[1]) {\n        day = parsedDate[1].split(/\\D/).map(function (itm) { return parseInt(itm, 10) || 0; });\n        day[1] -= 1;\n        //@ts-ignore\n        day = new Date(Date.UTC.apply(Date, day));\n        if (!day.getDate()) {\n            return NaN;\n        }\n        if (parsedDate[5]) {\n            var tz = parseInt(parsedDate[5], 10) * 60;\n            if (parsedDate[6]) {\n                tz += parseInt(parsedDate[6], 10);\n            }\n            if (parsedDate[4] === '+') {\n                tz *= -1;\n            }\n            if (tz) {\n                day.setUTCMinutes(day.getUTCMinutes() + tz);\n            }\n        }\n        return day.getTime();\n    }\n    return NaN;\n}\nexports.parseTimestampFromISO8601String = parseTimestampFromISO8601String;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTimezoneISOOffset = void 0;\nvar misc_1 = require(\"./misc\");\nvar getTimezoneISOOffset = function (date) {\n    if (date === void 0) { date = new Date(); }\n    var tzo = date.getTimezoneOffset();\n    var dif = tzo > 0 ? '-' : '+';\n    return \"\".concat(dif).concat((0, misc_1.padDateTimeUnit)(tzo / 60), \":\").concat((0, misc_1.padDateTimeUnit)(tzo % 60));\n};\nexports.getTimezoneISOOffset = getTimezoneISOOffset;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AwsChatWindowEventActionRoute;\n(function (AwsChatWindowEventActionRoute) {\n    AwsChatWindowEventActionRoute[\"CHAT_WINDOW_EVENT\"] = \"chatWindowEvent\";\n    AwsChatWindowEventActionRoute[\"REGISTER\"] = \"register\";\n})(AwsChatWindowEventActionRoute = exports.AwsChatWindowEventActionRoute || (exports.AwsChatWindowEventActionRoute = {}));\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPushUpdateWebSocket = exports.setupSocketConnection = void 0;\nvar queryParameters_1 = require(\"@brandembassy/be-javascript-utils/dist/query/queryParameters\");\nvar initializeHeartbeat_1 = require(\"../websocket/initializeHeartbeat\");\nvar object_1 = require(\"@brandembassy/be-javascript-utils/dist/collection/object\");\nvar WebSocketClient_1 = require(\"../websocket/WebSocketClient\");\nvar socket = null;\nfunction createWebSocketUrlWithProtocol(webSocketUrlWithoutProtocol, forceSecureProtocol, query) {\n    if (query === void 0) { query = {}; }\n    var queryString = (0, queryParameters_1.createQueryParametersAsString)((0, object_1.removeEmptyValuesFromObject)(query));\n    var protocol = forceSecureProtocol || window.location.protocol === 'https:'\n        ? \"wss:\"\n        : 'ws:';\n    if (queryString.length === 0) {\n        return \"\".concat(protocol, \"//\").concat(webSocketUrlWithoutProtocol);\n    }\n    var url = new URL(\"\".concat(protocol, \"//\").concat(webSocketUrlWithoutProtocol));\n    if (url.search.length > 0) {\n        return \"\".concat(protocol, \"//\").concat(webSocketUrlWithoutProtocol, \"&\").concat(queryString);\n    }\n    return \"\".concat(protocol, \"//\").concat(webSocketUrlWithoutProtocol, \"?\").concat(queryString);\n}\nvar defaultConnectionOptions = {\n    forceSecureProtocol: false,\n    heartbeatAfterAuthorize: false,\n    maxRetries: 20,\n    maxReconnectionDelay: 1000,\n};\nvar setupSocketConnection = function (urlProvider, options) {\n    if (options === void 0) { options = {}; }\n    if (typeof options !== 'object') {\n        throw new TypeError(\"Options parameter must be an object not a \".concat(typeof options));\n    }\n    var connectionOptions = __assign(__assign({}, defaultConnectionOptions), options);\n    var forceSecureProtocol = connectionOptions.forceSecureProtocol, heartbeatAfterAuthorize = connectionOptions.heartbeatAfterAuthorize, tenantId = connectionOptions.tenantId, userId = connectionOptions.userId, brandId = connectionOptions.brandId, wscOptions = __rest(connectionOptions, [\"forceSecureProtocol\", \"heartbeatAfterAuthorize\", \"tenantId\", \"userId\", \"brandId\"]);\n    if (typeof urlProvider === 'string') {\n        urlProvider = createWebSocketUrlWithProtocol(urlProvider, forceSecureProtocol, { tenantId: tenantId, userId: userId, brandId: brandId });\n    }\n    socket = new WebSocketClient_1.WebSocketClient(urlProvider, undefined, wscOptions);\n    (0, initializeHeartbeat_1.initializeHeartbeat)(heartbeatAfterAuthorize, socket, options);\n    return socket;\n};\nexports.setupSocketConnection = setupSocketConnection;\nvar getPushUpdateWebSocket = function () { return socket; };\nexports.getPushUpdateWebSocket = getPushUpdateWebSocket;\n//# sourceMappingURL=pushUpdateWebSocket.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initializeHeartbeat = void 0;\nvar WebSocketClientEvent_1 = require(\"./WebSocketClientEvent\");\nfunction initializeHeartbeat(heartbeatAfterAuthorize, socket, connectionOptions) {\n    if (!heartbeatAfterAuthorize) {\n        socket.startHeartBeat();\n        return;\n    }\n    var handleMessage = function (event) {\n        var _a;\n        try {\n            var payload = JSON.parse(event.detail.data);\n            if ((payload === null || payload === void 0 ? void 0 : payload.authorizationStatus) === 'authorized') {\n                socket.startHeartBeat();\n                socket.removeEventListener(WebSocketClientEvent_1.WebSocketClientEvent.MESSAGE, handleMessage);\n            }\n        }\n        catch (error) {\n            (_a = connectionOptions === null || connectionOptions === void 0 ? void 0 : connectionOptions.logger) === null || _a === void 0 ? void 0 : _a.warn('JSON cannot be parsed during the heartbeat initialization process.');\n        }\n    };\n    socket.addEventListener(WebSocketClientEvent_1.WebSocketClientEvent.MESSAGE, handleMessage);\n}\nexports.initializeHeartbeat = initializeHeartbeat;\n//# sourceMappingURL=initializeHeartbeat.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CALLER_SERVICE_ID = 'X-Caller-Service-ID';\nexports.TRACE_ID = 'X-Trace-ID';\nexports.TRANSACTION_ID = 'X-Transaction-ID';\nexports.USER_AGENT = 'User-Agent';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LogLevels = void 0;\nvar LogLevels;\n(function (LogLevels) {\n    LogLevels[\"ERROR\"] = \"error\";\n    LogLevels[\"INFO\"] = \"info\";\n    LogLevels[\"WARN\"] = \"warn\";\n})(LogLevels = exports.LogLevels || (exports.LogLevels = {}));\n//# sourceMappingURL=Logger.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createQueryParametersAsString = void 0;\nfunction createQueryParametersAsString(queryParameters) {\n    return Object.keys(queryParameters)\n        .filter(function (key) { return queryParameters[key] !== null; })\n        .map(function (key) {\n        return [key, queryParameters[key]].map(encodeURIComponent).join('=');\n    })\n        .join('&');\n}\nexports.createQueryParametersAsString = createQueryParametersAsString;\n","\"use strict\";\n/*!\n * Reconnecting WebSocket\n * by Pedro Ladaria <pedro.ladaria@gmail.com>\n * https://github.com/pladaria/reconnecting-websocket\n * License MIT\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReconnectingWebSocket = void 0;\nvar DEFAULT = {\n    maxReconnectionDelay: 10000,\n    minReconnectionDelay: 1000 + Math.random() * 4000,\n    minUptime: 5000,\n    reconnectionDelayGrowFactor: 1.3,\n    connectionTimeout: 4000,\n    maxRetries: Infinity,\n    maxEnqueuedMessages: Infinity,\n    startClosed: false,\n    debug: false,\n};\nvar ReconnectingWebSocket = (function () {\n    function ReconnectingWebSocket(url, protocols, options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        this.onclose = null;\n        this.onerror = null;\n        this.onmessage = null;\n        this.onopen = null;\n        this._listeners = {\n            error: [],\n            message: [],\n            open: [],\n            close: [],\n        };\n        this._shouldReconnect = true;\n        this._connectLock = false;\n        this._closeCalled = false;\n        this._messageQueue = [];\n        this._retryCount = -1;\n        this._binaryType = 'blob';\n        this._handleOpen = function (event) {\n            _this._debug('open event');\n            var _a = _this._options.minUptime, minUptime = _a === void 0 ? DEFAULT.minUptime : _a;\n            clearTimeout(_this._connectTimeout);\n            _this._uptimeTimeout = window.setTimeout(function () { return _this._acceptOpen(); }, minUptime);\n            _this._ws.binaryType = _this._binaryType;\n            _this._messageQueue.forEach(function (message) { var _a; return (_a = _this._ws) === null || _a === void 0 ? void 0 : _a.send(message); });\n            _this._messageQueue = [];\n            if (_this.onopen) {\n                _this.onopen(event);\n            }\n            _this._listeners.open.forEach(function (listener) {\n                return _this._callEventListener(event, listener);\n            });\n        };\n        this._handleMessage = function (event) {\n            _this._debug('message event');\n            if (_this.onmessage) {\n                _this.onmessage(event);\n            }\n            _this._listeners.message.forEach(function (listener) {\n                return _this._callEventListener(event, listener);\n            });\n        };\n        this._handleError = function (event) {\n            _this._debug('error event', event);\n            _this._disconnect();\n            if (_this.onerror) {\n                _this.onerror(event);\n            }\n            _this._debug('exec error listeners');\n            _this._listeners.error.forEach(function (listener) {\n                return _this._callEventListener(event, listener);\n            });\n            _this._connect();\n        };\n        this._handleClose = function (event) {\n            _this._debug('close event');\n            _this._clearTimeouts();\n            if (_this._shouldReconnect) {\n                _this._connect();\n            }\n            if (_this.onclose) {\n                _this.onclose(event);\n            }\n            _this._listeners.close.forEach(function (listener) {\n                return _this._callEventListener(event, listener);\n            });\n        };\n        this._url = url;\n        this._protocols = protocols;\n        this._options = options;\n        this._maxRetries =\n            typeof options.maxRetries === 'number'\n                ? options.maxRetries\n                : DEFAULT.maxRetries;\n        if (this._options.startClosed) {\n            this._shouldReconnect = false;\n        }\n        this._connect();\n    }\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"retryCount\", {\n        get: function () {\n            return Math.max(this._retryCount, 0);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"binaryType\", {\n        get: function () {\n            return this._ws ? this._ws.binaryType : this._binaryType;\n        },\n        set: function (value) {\n            this._binaryType = value;\n            if (this._ws) {\n                this._ws.binaryType = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"bufferedAmount\", {\n        get: function () {\n            var bytes = this._messageQueue.reduce(function (acc, message) {\n                if (typeof message === 'string') {\n                    acc += message.length;\n                }\n                else if (message instanceof Blob) {\n                    acc += message.size;\n                }\n                else {\n                    acc += message.byteLength;\n                }\n                return acc;\n            }, 0);\n            return bytes + (this._ws ? this._ws.bufferedAmount : 0);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"extensions\", {\n        get: function () {\n            return this._ws ? this._ws.extensions : '';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"protocol\", {\n        get: function () {\n            return this._ws ? this._ws.protocol : '';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"readyState\", {\n        get: function () {\n            if (this._ws) {\n                return this._ws.readyState;\n            }\n            return this._options.startClosed ? WebSocket.CLOSED : WebSocket.CONNECTING;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"url\", {\n        get: function () {\n            return this._ws ? this._ws.url : '';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ReconnectingWebSocket.prototype.close = function (code, reason) {\n        if (code === void 0) { code = 1000; }\n        this._closeCalled = true;\n        this._shouldReconnect = false;\n        this._clearTimeouts();\n        if (!this._ws) {\n            this._debug('close enqueued: no ws instance');\n            return;\n        }\n        if (this._ws.readyState === WebSocket.CLOSED) {\n            this._debug('close: already closed');\n            return;\n        }\n        this._ws.close(code, reason);\n    };\n    ReconnectingWebSocket.prototype.reconnect = function (code, reason) {\n        this._shouldReconnect = true;\n        this._closeCalled = false;\n        this._retryCount = -1;\n        if (!this._ws || this._ws.readyState === WebSocket.CLOSED) {\n            this._connect();\n        }\n        else {\n            this._disconnect(code, reason);\n            this._connect();\n        }\n    };\n    ReconnectingWebSocket.prototype.send = function (data) {\n        if (this._ws && this._ws.readyState === WebSocket.OPEN) {\n            this._debug('send', data);\n            this._ws.send(data);\n        }\n        else {\n            var _a = this._options.maxEnqueuedMessages, maxEnqueuedMessages = _a === void 0 ? DEFAULT.maxEnqueuedMessages : _a;\n            if (this._messageQueue.length < maxEnqueuedMessages) {\n                this._debug('enqueue', data);\n                this._messageQueue.push(data);\n            }\n        }\n    };\n    ReconnectingWebSocket.prototype.addEventListener = function (type, listener) {\n        if (this._listeners[type]) {\n            this._listeners[type].push(listener);\n        }\n    };\n    ReconnectingWebSocket.prototype.dispatchEvent = function (event) {\n        var e_1, _a;\n        var listeners = this._listeners[event.type];\n        if (listeners) {\n            try {\n                for (var listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {\n                    var listener = listeners_1_1.value;\n                    this._callEventListener(event, listener);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (listeners_1_1 && !listeners_1_1.done && (_a = listeners_1.return)) _a.call(listeners_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        return true;\n    };\n    ReconnectingWebSocket.prototype.removeEventListener = function (type, listener) {\n        if (this._listeners[type]) {\n            this._listeners[type] = this._listeners[type].filter(function (l) { return l !== listener; });\n        }\n    };\n    ReconnectingWebSocket.prototype.setMaxRetires = function (maxRetries) {\n        this._maxRetries = maxRetries;\n    };\n    ReconnectingWebSocket.prototype._debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this._options.debug) {\n            console.log.apply(console, __spreadArray(['RWS>'], __read(args), false));\n        }\n    };\n    ReconnectingWebSocket.prototype._getNextDelay = function () {\n        var _a = this._options, _b = _a.reconnectionDelayGrowFactor, reconnectionDelayGrowFactor = _b === void 0 ? DEFAULT.reconnectionDelayGrowFactor : _b, _c = _a.minReconnectionDelay, minReconnectionDelay = _c === void 0 ? DEFAULT.minReconnectionDelay : _c, _d = _a.maxReconnectionDelay, maxReconnectionDelay = _d === void 0 ? DEFAULT.maxReconnectionDelay : _d;\n        var delay = 0;\n        if (this._retryCount > 0) {\n            delay =\n                minReconnectionDelay *\n                    Math.pow(reconnectionDelayGrowFactor, this._retryCount - 1);\n            if (delay > maxReconnectionDelay) {\n                delay = maxReconnectionDelay;\n            }\n        }\n        this._debug('next delay', delay);\n        return delay;\n    };\n    ReconnectingWebSocket.prototype._wait = function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            setTimeout(resolve, _this._getNextDelay());\n        });\n    };\n    ReconnectingWebSocket.prototype._getNextUrl = function (urlProvider) {\n        if (typeof urlProvider === 'string') {\n            return Promise.resolve(urlProvider);\n        }\n        if (typeof urlProvider === 'function') {\n            var url = urlProvider();\n            if (typeof url === 'string') {\n                return Promise.resolve(url);\n            }\n            if (typeof url.then !== 'undefined') {\n                return url;\n            }\n        }\n        throw Error('Invalid URL');\n    };\n    ReconnectingWebSocket.prototype._connect = function () {\n        var _this = this;\n        if (this._connectLock || !this._shouldReconnect) {\n            return;\n        }\n        this._connectLock = true;\n        var _a = this._options.connectionTimeout, connectionTimeout = _a === void 0 ? DEFAULT.connectionTimeout : _a;\n        if (this._retryCount >= this._maxRetries) {\n            this._debug('max retries reached', this._retryCount, '>=', this._maxRetries);\n            return;\n        }\n        this._retryCount++;\n        this._debug('connect', this._retryCount);\n        this._removeListeners();\n        this._wait()\n            .then(function () { return _this._getNextUrl(_this._url); })\n            .then(function (url) {\n            if (_this._closeCalled) {\n                _this._connectLock = false;\n                return;\n            }\n            _this._debug('connect', { url: url, protocols: _this._protocols });\n            _this._ws = _this._protocols\n                ? new WebSocket(url, _this._protocols)\n                : new WebSocket(url);\n            _this._ws.binaryType = _this._binaryType;\n            _this._connectLock = false;\n            _this._addListeners();\n            _this._connectTimeout = window.setTimeout(function () { return _this._handleTimeout(); }, connectionTimeout);\n        })\n            .catch(function (err) {\n            _this._connectLock = false;\n            _this._handleError(new ErrorEvent(err.message, { error: err }));\n        });\n    };\n    ReconnectingWebSocket.prototype._handleTimeout = function () {\n        this._debug('timeout event');\n        this._handleError(new ErrorEvent('TIMEOUT'));\n    };\n    ReconnectingWebSocket.prototype._disconnect = function (code, reason) {\n        if (code === void 0) { code = 1000; }\n        this._clearTimeouts();\n        if (!this._ws) {\n            return;\n        }\n        this._removeListeners();\n        try {\n            this._ws.close(code, reason);\n            this._handleClose(new CloseEvent('CLOSE', { code: code, reason: reason }));\n        }\n        catch (error) {\n        }\n    };\n    ReconnectingWebSocket.prototype._acceptOpen = function () {\n        this._debug('accept open');\n        this._retryCount = 0;\n    };\n    ReconnectingWebSocket.prototype._callEventListener = function (event, listener) {\n        if ('handleEvent' in listener) {\n            listener.handleEvent(event);\n        }\n        else {\n            listener(event);\n        }\n    };\n    ReconnectingWebSocket.prototype._removeListeners = function () {\n        if (!this._ws) {\n            return;\n        }\n        this._debug('removeListeners');\n        this._ws.removeEventListener('open', this._handleOpen);\n        this._ws.removeEventListener('close', this._handleClose);\n        this._ws.removeEventListener('message', this._handleMessage);\n        this._ws.removeEventListener('error', this._handleError);\n    };\n    ReconnectingWebSocket.prototype._addListeners = function () {\n        if (!this._ws) {\n            return;\n        }\n        this._debug('addListeners');\n        this._ws.addEventListener('open', this._handleOpen);\n        this._ws.addEventListener('close', this._handleClose);\n        this._ws.addEventListener('message', this._handleMessage);\n        this._ws.addEventListener('error', this._handleError);\n    };\n    ReconnectingWebSocket.prototype._clearTimeouts = function () {\n        clearTimeout(this._connectTimeout);\n        clearTimeout(this._uptimeTimeout);\n    };\n    return ReconnectingWebSocket;\n}());\nexports.ReconnectingWebSocket = ReconnectingWebSocket;\n//# sourceMappingURL=ReconnectingWebSocket.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MessageDirection;\n(function (MessageDirection) {\n    MessageDirection[\"INBOUND\"] = \"inbound\";\n    MessageDirection[\"OUTBOUND\"] = \"outbound\";\n})(MessageDirection = exports.MessageDirection || (exports.MessageDirection = {}));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Checks if `value` is `null`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n * @example\n *\n * _.isNull(null);\n * // => true\n *\n * _.isNull(void 0);\n * // => false\n */\nfunction isNull(value) {\n  return value === null;\n}\n\nexport default isNull;\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { NetworkRequestMetadata } from '../request/NetworkRequestMetadata';\nimport { SecureSessionsType } from '../securedSession/SecureSessionsType';\nimport { ThirdPartyToken } from '../securedSession/ThirdPartyToken';\nimport { ICacheStorage } from '../storage/CacheStorage';\n\nexport interface ThreadData {\n  contactId?: string;\n  oldestMessageDatetime?: string;\n  scrollToken?: string;\n}\n\nexport interface ChatSDKVariableStorage {\n  ACCESS_TOKEN: string;\n  ACCESS_TOKEN_EXPIRES_IN: number;\n  APP_NAME: string;\n  APP_VERSION: string;\n  AUTHORIZATION_CODE?: string;\n  BRAND_ID: BrandId;\n  CACHE_STORAGE: ICacheStorage;\n  CHANNEL_ID: ChannelId;\n  CLIENT_SIDE_EVENTS_THROTTLING: boolean;\n  DESTINATION?: string;\n  ENDPOINT_AUTHORIZE: string;\n  ENDPOINT_CHAT: string;\n  ENDPOINT_GATEWAY: string;\n  LANGUAGE: string;\n  REQUEST_METADATA: NetworkRequestMetadata;\n  SECURED_SESSION: SecureSessionsType;\n  THIRD_PARTY_TOKEN?: ThirdPartyToken;\n  THREAD_DATA: ThreadData;\n  VISITOR_ID?: string;\n  VISIT_ID?: string;\n}\n\nexport const SDKVariableStorage: Partial<ChatSDKVariableStorage> = {};\n\nexport const clearVariableStorage = (): void => {\n  Object.keys(SDKVariableStorage).forEach((key) => {\n    delete SDKVariableStorage[key as keyof ChatSDKVariableStorage];\n  });\n};\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\n\nimport { isNull } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport function setAccessToken(accessToken: AccessToken): void {\n  SDKVariableStorage.ACCESS_TOKEN = accessToken.token;\n  SDKVariableStorage.ACCESS_TOKEN_EXPIRES_IN = accessToken.expiresIn;\n}\n\n/**\n * @deprecated Use ThirdParty Token instead\n */\nexport function getAccessToken(): AccessToken | null {\n  const token = SDKVariableStorage.ACCESS_TOKEN ?? null;\n  const expiresIn = SDKVariableStorage.ACCESS_TOKEN_EXPIRES_IN ?? null;\n\n  if (isNull(token) || isNull(expiresIn)) {\n    return null;\n  }\n\n  return {\n    token,\n    expiresIn: Number(expiresIn),\n  };\n}\n\nexport function resetAccessToken(): void {\n  SDKVariableStorage.ACCESS_TOKEN = undefined;\n  SDKVariableStorage.ACCESS_TOKEN_EXPIRES_IN = undefined;\n}\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import { isObject, isString } from '../utils/is';\n\nexport class ChatSDKError extends Error {\n  name: string = 'ChatSDKError';\n  data: unknown;\n  additionalInfo?: unknown;\n\n  constructor(error: unknown, data?: unknown) {\n    super();\n\n    this.data = data;\n\n    if (error instanceof ChatSDKError) {\n      this.message = error.message;\n      this.stack = error.stack;\n      this.cause = error.cause;\n      this.data = error.data;\n      this.additionalInfo = data;\n\n      return;\n    }\n\n    this.message = `[${this.name}]: ${this._getErrorMessage(error)}`;\n\n    if (error instanceof Error || (isObject(error) && 'stack' in error)) {\n      this.stack = error.stack as string;\n    }\n  }\n\n  private _getErrorMessage(error: unknown): string {\n    if (error instanceof Error) {\n      return error.message;\n    }\n\n    if (typeof error === 'string') {\n      return error;\n    }\n\n    if (isObject(error) && 'message' in error && isString(error.message)) {\n      return error.message;\n    }\n\n    return JSON.stringify(error);\n  }\n}\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\n\nexport class AuthorizationError extends ChatSDKError {\n  data: MessageFailedEventData['error'] | undefined;\n\n  constructor(\n    message: string,\n    data: MessageFailedEventData['error'] | undefined,\n  ) {\n    super(message, data);\n\n    if (data !== undefined) {\n      this.message = `${message} because of (${data.errorMessage})`;\n    }\n  }\n}\n","export const CHAT_SDK_VERSION: string = process.env.PACKAGE_VERSION ?? '0';\n","export function generateId(): string {\n  return crypto.randomUUID ? crypto.randomUUID() : generateUuidFallback();\n}\n\nexport function generateUuidFallback(): string {\n  const randomValues = new Uint8Array(16);\n\n  // Convert each byte to a hexadecimal string and join it to form the UUID\n  return crypto.getRandomValues(randomValues).reduce((uuid, value, index) => {\n    if ([4, 6, 8, 10].includes(index)) {\n      uuid += '-';\n    }\n\n    return (\n      uuid +\n      (index === 6\n        ? // eslint-disable-next-line no-bitwise\n          (value & 0x0f) | 0x40\n        : index === 8\n        ? // eslint-disable-next-line no-bitwise\n          (value & 0x3f) | 0x80\n        : value\n      )\n        .toString(16)\n        .padStart(2, '0')\n    );\n  }, '');\n}\n","import { VisitorInput } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nexport interface VisitorPayload {\n  visitor: VisitorInput;\n}\n\nexport function createVisitorPayload(visitorId: VisitorId): VisitorPayload {\n  return {\n    visitor: {\n      id: visitorId,\n    },\n  };\n}\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","import baseKeys from './_baseKeys.js';\nimport getTag from './_getTag.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLike from './isArrayLike.js';\nimport isBuffer from './isBuffer.js';\nimport isPrototype from './_isPrototype.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEmpty;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","import { ChatEventData } from '../event/ChatEvent';\n\nexport const requestQueue = new Map<string, (value: ChatEventData) => void>();\n","import { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { Event } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { generateId } from '../utils/generateId';\nimport { isEmpty, isNull } from '../utils/is';\n\nimport { requestQueue } from './requestQueue';\n\nexport const makeRequest = async (\n  event: Event<AwsInputEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> => {\n  if (isNull(wsClient)) {\n    throw new ChatSDKError('WebSocketClient is not initialized');\n  }\n  if (isEmpty(event.eventId)) {\n    event.eventId = generateId();\n  }\n\n  return new Promise<ChatEventData>((resolve) => {\n    requestQueue.set(event.eventId, resolve);\n    wsClient?.send(event);\n  });\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nconst MAXIMUM_REQUEST_COUNT: number = 100;\nconst TIME_SLOT_IN_SECONDS: number = 5;\nlet requestRateLimitCounter: number = 0;\nlet requestCounterIntervalId: ReturnType<typeof setInterval> | null = null;\n\nexport class MaximumRequestCountReachError extends Error {\n  name = 'MaximumRequestCountReached';\n  message = 'Maximum request count reached';\n}\n\nexport function resetLimitCounter(): void {\n  requestRateLimitCounter = 0;\n}\n\nexport function requestRateLimit(): void {\n  requestRateLimitCounter += 1;\n\n  if (requestCounterIntervalId === null) {\n    requestCounterIntervalId = setInterval(\n      resetLimitCounter,\n      TIME_SLOT_IN_SECONDS * 1000,\n    );\n  }\n\n  if (requestRateLimitCounter > MAXIMUM_REQUEST_COUNT) {\n    throw new ChatSDKError(new MaximumRequestCountReachError());\n  }\n}\n","export function splitName(name: string): [string, string] {\n  const [firstName, ...names] = name.split(' ');\n  const lastName = names.join(' ');\n\n  return [firstName, lastName];\n}\n","import { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { isUndefined } from '../utils/is';\n\ntype Ident = CustomField['ident'];\ntype Value = CustomField['value'];\n\nexport type CustomFieldsObject = Record<Ident, Value>;\nexport type CustomFieldsMap = Map<Ident, Value>;\n\nexport function setCustomFields(\n  fields: CustomFieldsMap,\n  set: CustomFieldsObject = {},\n): void {\n  for (const ident of Object.keys(set)) {\n    fields.set(ident, set[ident]);\n  }\n}\n\nexport function setCustomFieldsFromArray(\n  fields: CustomFieldsMap,\n  set: Array<CustomField> = [],\n): void {\n  for (const { ident, value } of set) {\n    fields.set(ident, value);\n  }\n}\n\nexport function setCustomField(\n  fields: CustomFieldsMap,\n  ident: Ident,\n  value: CustomField['value'],\n): void {\n  if (isUndefined(ident) || isUndefined(value)) {\n    throw new ChatSDKError('Custom field name and value must be set');\n  }\n\n  fields.set(ident, value);\n}\n\nexport function getCustomFields(fields: CustomFieldsMap): CustomFieldsObject {\n  return Object.fromEntries(fields);\n}\n\nexport function getCustomFieldsArray(\n  fields: CustomFieldsMap,\n): Array<CustomField> {\n  return Array.from(fields).map<CustomField>(([ident, value]) => ({\n    ident,\n    value,\n  }));\n}\n\nexport function removeCustomField(fields: CustomFieldsMap, ident: Ident): void {\n  fields.delete(ident);\n}\n\nexport function getCustomFieldsFromArray(\n  fields: Array<CustomField>,\n): CustomFieldsObject {\n  return Object.fromEntries(fields.map((field) => [field.ident, field.value]));\n}\n","import { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\n\nimport {\n  CustomFieldsMap,\n  CustomFieldsObject,\n  getCustomFields,\n  getCustomFieldsArray,\n  setCustomFields,\n  setCustomFieldsFromArray,\n} from '../customField/CustomFields';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { CustomerIdentity } from '../securedSession/TransactionToken';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { generateId } from '../utils/generateId';\nimport { isArray } from '../utils/is';\n\nimport { createSetCustomerCustomFieldsPayloadData } from './setCustomerCustomFieldsPayload';\n\nexport function setCustomerIdentity(\n  customer: Customer,\n  customerIdentity: CustomerIdentity,\n): void {\n  const {\n    idOnExternalPlatform,\n    firstName = '',\n    lastName = '',\n    image,\n    customFields,\n  } = customerIdentity;\n  customer.setId(idOnExternalPlatform);\n\n  if (firstName || lastName) {\n    customer.setName(`${firstName ?? ''} ${lastName ?? ''}`.trim());\n  }\n\n  if (image) {\n    customer.setImage(image);\n  }\n\n  if (isArray(customFields)) {\n    customer.setCustomFieldsFromArray(customFields);\n  }\n}\n\nexport class Customer {\n  #websocketClient: WebSocketClient | null;\n  #customFields: CustomFieldsMap = new Map();\n  #exists = false;\n  id: CustomerIdentityIdOnExternalPlatform | null = null;\n  name: string | null = null;\n  image: string | null = null;\n\n  constructor(\n    id?: CustomerIdentityIdOnExternalPlatform,\n    name?: string,\n    image?: string,\n    websocketClient?: WebSocketClient | null,\n  ) {\n    this.#websocketClient = websocketClient ?? null;\n\n    if (id) {\n      this.setId(id);\n    }\n    if (name) {\n      this.setName(name);\n    }\n    if (image) {\n      this.setImage(image);\n    }\n  }\n\n  public getIdOrCreateNewOne(): CustomerIdentityIdOnExternalPlatform {\n    let customerId = this.getId();\n\n    if (!customerId) {\n      customerId = generateId();\n      this.id = customerId;\n    }\n\n    return customerId;\n  }\n\n  public destroy(): void {\n    this.id = null;\n    this.name = null;\n    this.image = null;\n    this.#customFields = new Map();\n  }\n\n  public getId(): CustomerIdentityIdOnExternalPlatform | null {\n    return this.id ?? null;\n  }\n\n  public setId(\n    customerIdentityIdOnExternalPlatform: CustomerIdentityIdOnExternalPlatform,\n  ): void {\n    this.id = customerIdentityIdOnExternalPlatform;\n  }\n\n  public getName(): string | null {\n    return this.name;\n  }\n\n  public setName(name: string): void {\n    this.name = name;\n  }\n\n  public getImage(): string | null {\n    return this.image ?? null;\n  }\n\n  public setImage(image: string): void {\n    this.image = image;\n  }\n\n  public setExists(exists: boolean): void {\n    this.#exists = exists;\n  }\n\n  public setWebsocketClient(websocketClient: WebSocketClient): void {\n    this.#websocketClient = websocketClient;\n  }\n\n  /**\n   * Set Customer Custom field\n   * @param name - Custom field name\n   * @param value - Custom field value\n   */\n  public setCustomField(\n    name: CustomField['ident'],\n    value: CustomField['value'],\n  ): Promise<ChatEventData> | undefined {\n    return this.setCustomFields({ [name]: value });\n  }\n\n  /**\n   * Set Customer Custom fields\n   * @param customFields - custom fields object\n   * @example setCustomFields(\\{ identName: 'value', identName2: 'value2' \\})\n   */\n  public setCustomFields(\n    customFields: CustomFieldsObject,\n  ): Promise<ChatEventData> | undefined {\n    setCustomFields(this.#customFields, customFields);\n\n    if (this.#exists) {\n      return this.sendCustomFields();\n    }\n  }\n\n  /**\n   * Get Customer Custom fields (as object)\n   */\n  public getCustomFields(): CustomFieldsObject {\n    return getCustomFields(this.#customFields);\n  }\n\n  /**\n   * Set Customer Custom fields from an array of custom fields\n   * @param customFields - custom fields array\n   */\n  public setCustomFieldsFromArray(customFields: Array<CustomField>): void {\n    setCustomFieldsFromArray(this.#customFields, customFields);\n  }\n\n  /**\n   * Get Customer Custom fields (as array of CustomField)\n   */\n  public getCustomFieldsArray(): Array<CustomField> {\n    return getCustomFieldsArray(this.#customFields);\n  }\n\n  /**\n   * Send Customer Custom fields\n   * - call this only after the first message or recover event\n   * @returns Promise<ChatEventData>\n   */\n  public async sendCustomFields(): Promise<ChatEventData> {\n    const payloadData = createSetCustomerCustomFieldsPayloadData(\n      getCustomFieldsArray(this.#customFields),\n    );\n\n    return sendChatEvent(payloadData, this.#websocketClient);\n  }\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendConsumerCustomFieldsEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendConsumerCustomFields';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\ntype SendCustomerCustomFieldsEventData = SendConsumerCustomFieldsEventData;\n\nexport function createSetCustomerCustomFieldsPayloadData(\n  customFields: Array<CustomField>,\n): EventPayloadData<SendCustomerCustomFieldsEventData> {\n  return {\n    eventType: AwsInputEventType.SEND_CONSUMER_CUSTOM_FIELDS,\n    data: {\n      customFields,\n    },\n  };\n}\n","import { Customer } from './Customer';\n\nexport class CustomerInstance {\n  private static instance: Customer;\n\n  public static getInstance(): Customer {\n    if (!CustomerInstance.instance) {\n      CustomerInstance.instance = new Customer();\n    }\n\n    return CustomerInstance.instance;\n  }\n}\n","import { ConsumerIdentityInput } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { splitName } from '../utils/splitName';\n\nimport { CustomerInstance } from './CustomerInstance';\n\nexport type ConsumerIdentityPayload = ConsumerIdentityInput;\n\nexport function createCustomerIdentityPayload(\n  name?: string,\n  image?: string,\n): ConsumerIdentityPayload {\n  const customer = CustomerInstance.getInstance();\n  const storedName = name ?? customer.getName();\n  const storedImage = image ?? customer.getImage();\n\n  let customerIdentityNamePayload: Partial<ConsumerIdentityPayload> = {};\n  if (typeof storedName === 'string' && storedName.length > 0) {\n    const [firstName, lastName] = splitName(storedName);\n    customerIdentityNamePayload = { firstName, lastName };\n  }\n\n  if (storedImage) {\n    customerIdentityNamePayload.image = storedImage;\n  }\n\n  return {\n    idOnExternalPlatform: customer.getIdOrCreateNewOne(),\n    ...customerIdentityNamePayload,\n  };\n}\n","/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nexport default isNil;\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { isNil } from './is';\n\nexport function getBrandIdAndChannelId(): {\n  brandId: BrandId;\n  channelId: ChannelId;\n} {\n  const brandId = SDKVariableStorage.BRAND_ID;\n  const channelId = SDKVariableStorage.CHANNEL_ID;\n\n  if (isNil(brandId) || isNaN(brandId) || isNil(channelId)) {\n    throw new ChatSDKError(\n      `Cannot get BrandId and ChannelId from SDKVariableStorage\n      brandId (${brandId}) |\n      channelId (${channelId})`,\n    );\n  }\n\n  return {\n    brandId,\n    channelId,\n  };\n}\n","/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nexport default isUndefined;\n","import { AwsChatWindowEventActionRoute } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport {\n  AwsInputEvent,\n  AwsInputEventData,\n  ConsumerIdentityInput,\n  DestinationInput,\n  VisitInput,\n  VisitorInput,\n} from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { createCustomerIdentityPayload } from '../customer/customerIdentityPayload';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { generateId } from '../utils/generateId';\nimport { getBrandIdAndChannelId } from '../utils/getBrandIdAndChannelId';\nimport { isUndefined } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport type EventActionRoute = AwsChatWindowEventActionRoute;\nexport type EventPayload<D extends AwsInputEventData> = AwsInputEvent<\n  AwsInputEventType,\n  D\n>;\n\nexport interface Event<D extends AwsInputEventData> {\n  action: EventActionRoute;\n  eventId: string;\n  payload: EventPayload<D>;\n}\n\nexport interface EventPayloadData<D extends AwsInputEventData> {\n  consumerIdentity?: ConsumerIdentityInput;\n  data: D;\n  destination?: DestinationInput;\n  eventType: AwsInputEventType;\n  visit?: VisitInput;\n  visitor?: VisitorInput;\n}\n\nexport function createEventPayload<D extends AwsInputEventData>(\n  eventPayloadData: EventPayloadData<D>,\n): EventPayload<D> {\n  const storedDestinationId = SDKVariableStorage.DESTINATION;\n  const storedVisitId = SDKVariableStorage.VISIT_ID;\n  const storedVisitorId = SDKVariableStorage.VISITOR_ID;\n\n  const {\n    eventType,\n    data,\n    consumerIdentity = createCustomerIdentityPayload(),\n    destination = storedDestinationId ? { id: storedDestinationId } : {},\n    visitor = storedVisitorId ? { id: storedVisitorId } : {},\n    visit = storedVisitId ? { id: storedVisitId } : {},\n  } = eventPayloadData;\n  const { brandId, channelId } = getBrandIdAndChannelId();\n\n  if (isUndefined(eventType)) {\n    throw new ChatSDKError(\n      `Cannot create an event payload because of missing eventType (${eventType})`,\n    );\n  }\n\n  return {\n    eventType,\n    brand: {\n      id: Number(brandId),\n    },\n    channel: {\n      id: channelId,\n    },\n    consumerIdentity,\n    data,\n    destination,\n    visitor,\n    visit,\n  };\n}\n\nexport function createEvent<D extends AwsInputEventData>(\n  payload: EventPayload<D>,\n  eventId: string = generateId(),\n  actionRoute: EventActionRoute = AwsChatWindowEventActionRoute.CHAT_WINDOW_EVENT,\n): Event<D> {\n  return {\n    action: actionRoute,\n    eventId,\n    payload,\n  };\n}\n","import { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { makeRequest } from '../request/makeRequest';\nimport { requestRateLimit } from '../request/requestRateLimit';\nimport {\n  createEvent,\n  createEventPayload,\n  EventPayloadData,\n} from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { ChatEventData } from './ChatEvent';\n\n/**\n * Send chat event\n * @param payloadData - payload data\n * @param webSocketClient - websocket client\n */\nexport async function sendChatEvent<D extends AwsInputEventData>(\n  payloadData: EventPayloadData<D>,\n  webSocketClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  if (SDKVariableStorage.CLIENT_SIDE_EVENTS_THROTTLING) {\n    requestRateLimit();\n  }\n  const event = createEvent(createEventPayload(payloadData));\n\n  return makeRequest(event, webSocketClient);\n}\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ReconnectConsumerData } from '@brandembassy/ts-types-chat/dist/awsEvents/ReconnectConsumer';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport { createCustomerIdentityPayload } from '../customer/customerIdentityPayload';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { createVisitorPayload } from '../visitor/createVisitorPayload';\n\nexport function createReconnectPayloadData(\n  accessToken: AccessToken,\n  visitorId?: string,\n): EventPayloadData<ReconnectConsumerData> {\n  return {\n    ...createVisitorPayload(visitorId as VisitorId),\n    ...createCustomerIdentityPayload(),\n    eventType: AwsInputEventType.RECONNECT_CONSUMER,\n    data: {\n      accessToken: {\n        token: accessToken.token,\n      },\n    },\n  };\n}\n","let refreshTokenTimeoutId: NodeJS.Timeout | null = null;\n\nexport function getIdealTimeInSecondsForIssueRefreshToken(\n  accessTokenExpiresIn: number,\n): number {\n  const idealTimeToRefreshAccessToken = Math.round(accessTokenExpiresIn * 0.9);\n\n  if (idealTimeToRefreshAccessToken < 20) {\n    return 20;\n  }\n\n  return idealTimeToRefreshAccessToken;\n}\n\nexport function handleRefreshToken(\n  token: { expiresIn: number },\n  refreshTokenAction: () => Promise<void>,\n): void {\n  if (refreshTokenTimeoutId !== null) {\n    clearTimeout(refreshTokenTimeoutId);\n  }\n\n  refreshTokenTimeoutId = setTimeout(\n    refreshTokenAction,\n    getIdealTimeInSecondsForIssueRefreshToken(token.expiresIn) * 1000,\n  );\n}\n","import { AuthorizationToken } from '@brandembassy/ts-types-chat/dist/authorization/AuthorizationToken';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { createGenerateAuthorizationTokenPayloadData } from './generateAuthorizationTokenPayload';\nimport { isAuthorizationTokenGeneratedPostbackData } from './isAuthorizationTokenGeneratedPostbackData';\n\nexport async function getAuthorizationTokenForUrl(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  url: string,\n  websocketClient: WebSocketClient,\n): Promise<AuthorizationToken> {\n  const result = await sendChatEvent(\n    createGenerateAuthorizationTokenPayloadData(\n      threadIdOnExternalPlatform,\n      url,\n    ),\n    websocketClient,\n  );\n\n  if (!isAuthorizationTokenGeneratedPostbackData(result?.data)) {\n    throw new ChatSDKError(\n      'Invalid response from generate authorization token (generateAuthorizationToken)',\n      { result },\n    );\n  }\n\n  const { authorizationToken } = result.data;\n\n  return authorizationToken;\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { GenerateAuthorizationTokenData } from '@brandembassy/ts-types-chat/dist/awsEvents/GenerateAuthorizationToken';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createGenerateAuthorizationTokenPayloadData(\n  threadId: ThreadIdOnExternalPlatform,\n  url: string,\n): EventPayloadData<GenerateAuthorizationTokenData> {\n  return {\n    eventType: AwsInputEventType.GENERATE_AUTHORIZATION_TOKEN,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadId,\n      },\n      url,\n    },\n  };\n}\n","import { AuthorizationTokenGeneratedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/AuthorizationTokenGenerated';\n\nimport { isObject } from '../utils/is';\n\nexport const isAuthorizationTokenGeneratedPostbackData = (\n  data: unknown,\n): data is AuthorizationTokenGeneratedPostbackData =>\n  isObject(data) &&\n  'authorizationToken' in (data as AuthorizationTokenGeneratedPostbackData);\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nimport { AuthorizeConsumerEventSuccessResponse } from './AuthorizeConsumerEventResponse';\n\nexport const isAuthSuccessEvent = (\n  payload: ChatEventData,\n): payload is AuthorizeConsumerEventSuccessResponse => {\n  const status = (payload as AuthorizeConsumerEventSuccessResponse)?.data\n    ?.status;\n  const type = payload?.type;\n\n  return (\n    type === AwsResponseEventType.CONSUMER_AUTHORIZED && status === 'success'\n  );\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { TokenRefreshedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/TokenRefreshed';\n\nexport interface TokenRefreshedSuccessResponse {\n  data: TokenRefreshedPostbackData;\n  type: AwsResponseEventType.TOKEN_REFRESHED;\n}\n\nexport function isTokenRefreshedSuccessResponse(\n  response: unknown,\n): response is TokenRefreshedSuccessResponse {\n  return (\n    (response as TokenRefreshedSuccessResponse)?.type ===\n      AwsResponseEventType.TOKEN_REFRESHED &&\n    (response as TokenRefreshedSuccessResponse).data?.accessToken?.token !==\n      undefined\n  );\n}\n","import UAParser from 'ua-parser-js';\n\nimport {\n  ApplicationType,\n  BrowserFingerprint,\n  DeviceType,\n} from '@brandembassy/ts-types-chat/dist/user/BrowserFingerprint';\n\nexport interface BrowserFingerprintOptions {\n  country?: string | null;\n  ip?: string | null;\n  language?: string;\n  location?: string | null;\n}\n\nexport const DEFAULT_LANGUAGE = 'en-US';\n\nexport const getBrowserLanguage = (): string => navigator.language;\n\nexport const getBrowserLocation = (): string =>\n  Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n/**\n * Get Device type\n * @param deviceType - device type\n */\nexport function getDeviceType(deviceType?: string): DeviceType {\n  switch (deviceType) {\n    case 'mobile':\n      return DeviceType.MOBILE;\n    case 'tablet':\n      return DeviceType.TABLET;\n    default:\n      return DeviceType.DESKTOP;\n  }\n}\n\n/**\n * Get Customer Browser fingerprint\n * @param options - options\n */\nexport const getBrowserFingerprint = (\n  options: BrowserFingerprintOptions = {},\n): BrowserFingerprint => {\n  const deviceInfoFromUserAgent = new UAParser(navigator.userAgent);\n\n  const {\n    country = '',\n    location = getBrowserLocation(),\n    language = getBrowserLanguage(),\n    ip = null,\n  } = options;\n\n  return {\n    browser: deviceInfoFromUserAgent.getBrowser().name ?? null,\n    browserVersion: deviceInfoFromUserAgent.getBrowser().version ?? null,\n    country,\n    ip,\n    language,\n    location,\n    os: deviceInfoFromUserAgent.getOS().name ?? null,\n    osVersion: deviceInfoFromUserAgent.getOS().version ?? null,\n    deviceType: getDeviceType(deviceInfoFromUserAgent.getDevice().type),\n    applicationType: ApplicationType.BROWSER,\n  };\n};\n\nexport const getValidLanguage = (language: string): string => {\n  const cleanedLanguage = language.replace(/_/g, '-').split(/[^a-z0-9-]/i)[0];\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    if (typeof Intl.getCanonicalLocales === 'function') {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      return Intl.getCanonicalLocales(cleanedLanguage)[0];\n    }\n\n    return new Intl.Locale(cleanedLanguage).baseName;\n  } catch (error) {\n    return DEFAULT_LANGUAGE;\n  }\n};\n","import { CALLER_SERVICE_ID } from '@brandembassy/ts-types-platform/dist/http/headers';\n\nimport { CHAT_SDK_VERSION } from '../env/version';\nimport { generateId } from '../utils/generateId';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { NetworkRequestMetadata } from './NetworkRequestMetadata';\n\ninterface DefaultHeaders {\n  Accept: string;\n  [CALLER_SERVICE_ID]: string;\n  'Content-Type': string;\n  'X-Trace-ID': string;\n  'x-sdk-platform': string;\n  'x-sdk-version': string;\n}\n\nexport const getDefaultHeaders = (\n  requestMetadata: NetworkRequestMetadata['httpHeaders'],\n  callerServiceId?: string,\n): DefaultHeaders => {\n  const requestMetadataHeaders = requestMetadata ?? {};\n\n  return {\n    ...requestMetadataHeaders,\n    // Default headers for the fetch requests\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    [CALLER_SERVICE_ID]: callerServiceId ?? SDKVariableStorage.APP_NAME ?? '',\n    'X-Trace-ID': requestMetadataHeaders['x-trace-id'] ?? generateId(),\n    'x-sdk-platform': 'web',\n    'x-sdk-version': CHAT_SDK_VERSION,\n  };\n};\n","import { ChatSDKError } from './ChatSDKError';\n\nexport class AbortError extends ChatSDKError {\n  constructor(message: string = 'Aborted') {\n    super(message);\n    this.name = 'AbortError';\n  }\n}\n","export const ERROR_CODE_SDK_VERSION_NOT_SUPPORTED = 'SdkVersionNotSupported';\n\nexport class SdkVersionNotSupported extends Error {\n  name = ERROR_CODE_SDK_VERSION_NOT_SUPPORTED;\n  message = 'Please update to the latest ChatSDK version';\n}\n","import {\n  ERROR_CODE_SDK_VERSION_NOT_SUPPORTED,\n  SdkVersionNotSupported,\n} from '../../error/SdkVersionNotSupported';\nimport { ChatEventData } from '../ChatEvent';\n\nexport function isSdkVersionNotSupportedEvent(event: unknown): boolean {\n  return (\n    (event as ChatEventData)?.error?.errorCode ===\n    ERROR_CODE_SDK_VERSION_NOT_SUPPORTED\n  );\n}\n\nexport function sdkVersionCheck(event: ChatEventData): ChatEventData | null {\n  if (isSdkVersionNotSupportedEvent(event)) {\n    throw new SdkVersionNotSupported();\n  }\n\n  return event;\n}\n","export function getNetworkInfo(): Record<string, unknown> | undefined {\n  // @ts-expect-error navigator.connection to be available in modern browsers\n  const connection = navigator?.connection;\n\n  if (!connection) {\n    return undefined;\n  }\n\n  return {\n    type: connection?.type || 'unknown',\n    effectiveType: connection?.effectiveType || 'unknown',\n    downlink: connection?.downlink || 0,\n    rtt: connection?.rtt || 0,\n    online: navigator.onLine,\n  };\n}\n","let isPageUnloading = false;\n\nexport function isWindowClosing(): boolean {\n  return isPageUnloading;\n}\n\nfunction unloadHandler() {\n  isPageUnloading = true;\n  window.removeEventListener('beforeunload', unloadHandler);\n}\n\nexport const registerWindowUnload = (): void => {\n  if (isPageUnloading) {\n    return;\n  }\n\n  window.addEventListener('beforeunload', unloadHandler);\n};\n","export enum SecureSessions {\n  ANONYMOUS = 'anonymous',\n  SECURED_COOKIES = 'securedCookies',\n  THIRD_PARTY = 'thirdParty',\n}\n\nexport type SecureSessionsType = SecureSessions | null;\n","import { AbortError } from '../error/AbortError';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SdkVersionNotSupported } from '../error/SdkVersionNotSupported';\nimport { isSdkVersionNotSupportedEvent } from '../event/middleware/sdkVersionCheck';\nimport { getDefaultHeaders } from '../request/defaultHeaders';\nimport { getErrorResponseData } from '../request/getErrorResponseData';\n\nimport { getNetworkInfo } from './getNetworkInfo';\nimport { isWindowClosing } from './isWindowClosing';\n\nexport interface FetchOptions extends Omit<RequestInit, 'headers'> {\n  /**\n   * Additional headers\n   */\n  headers?: Record<string, string>;\n}\n\n/**\n * Make a request and parse the response as JSON, otherwise throws the response or error\n *\n * @throws Response - If the response status is not ok\n * @throws AbortError - The request was aborted\n * @throws NotAllowedError\n * @throws TypeError\n * @throws DOMException - The request was aborted\n * @throws SyntaxError - The response body cannot be parsed as JSON\n */\nexport async function fetchJSON<T = unknown>(\n  resource: RequestInfo,\n  options?: FetchOptions,\n  callerServiceId?: string,\n): Promise<T> {\n  const { signal, headers, ...restOptions } = options || {};\n\n  const abortController = new AbortController();\n  const onAbort = () => {\n    abortController.abort(new AbortError('Fetch aborted by signal'));\n  };\n\n  if (signal) {\n    signal.addEventListener('abort', onAbort, { once: true });\n  }\n\n  const requestInit = {\n    headers: {\n      ...getDefaultHeaders(headers, callerServiceId),\n    },\n    signal: abortController.signal,\n    ...restOptions,\n  };\n\n  if (isWindowClosing()) {\n    throw new AbortError('Fetch aborted because the window is closing');\n  }\n\n  const unloadHandler = () => {\n    abortController.abort(\n      new AbortError('Fetch aborted because the window is closing'),\n    );\n  };\n  window?.addEventListener('beforeunload', () => unloadHandler);\n  const requestTimeStart = Date.now();\n  let responseBody;\n\n  try {\n    const response = await fetch(resource, requestInit);\n\n    if (response.ok) {\n      responseBody = await response.json();\n\n      return responseBody;\n    }\n\n    const errorData = await getErrorResponseData(response);\n\n    if (isSdkVersionNotSupportedEvent(errorData)) {\n      throw new SdkVersionNotSupported();\n    }\n\n    try {\n      responseBody = await response.json();\n    } catch {\n      try {\n        responseBody = await response.text();\n      } catch {\n        // Ignore errors when reading the response body\n      }\n    }\n\n    throw new ChatSDKError(`Request failed with status ${response.status}`, {\n      requestDuration: Date.now() - requestTimeStart,\n      requestUrl: resource,\n      requestOptions: requestInit,\n      responseStatus: response.status,\n      responseStatusText: response.statusText,\n      networkInfo: getNetworkInfo(),\n      responseBody,\n    });\n  } catch (error) {\n    if (abortController.signal.aborted || isWindowClosing()) {\n      throw new AbortError('Fetch aborted');\n    }\n\n    if (error instanceof ChatSDKError) {\n      throw error;\n    }\n\n    throw new ChatSDKError(error, {\n      requestDuration: Date.now() - requestTimeStart,\n      requestUrl: resource,\n      requestOptions: requestInit,\n      networkInfo: getNetworkInfo(),\n    });\n  } finally {\n    window?.removeEventListener('beforeunload', unloadHandler);\n    signal?.removeEventListener('abort', onAbort);\n  }\n}\n\n/**\n * Make a GET request\n *\n * @throws Response - If the response status is not ok\n * @throws AbortError - The request was aborted\n * @throws NotAllowedError\n * @throws TypeError\n * @throws DOMException - The request was aborted\n * @throws SyntaxError - The response body cannot be parsed as JSON\n */\nexport async function getJSON<T = unknown>(\n  resource: RequestInfo,\n  options?: FetchOptions,\n  callerServiceId?: string,\n): Promise<T> {\n  return fetchJSON(resource, { method: 'GET', ...options }, callerServiceId);\n}\n\n/**\n * Make a POST request with JSON body\n *\n * @throws Response - If the response status is not ok\n * @throws AbortError - The request was aborted\n * @throws NotAllowedError\n * @throws TypeError\n * @throws DOMException - The request was aborted\n * @throws SyntaxError - The response body cannot be parsed as JSON\n */\nexport async function postJSON<T = unknown>(\n  resource: RequestInfo,\n  body: unknown,\n  options?: FetchOptions,\n  callerServiceId?: string,\n): Promise<T> {\n  return fetchJSON(\n    resource,\n    {\n      method: 'POST',\n      body: JSON.stringify(body ?? {}),\n      ...options,\n    },\n    callerServiceId,\n  );\n}\n","export async function getErrorResponseData(\n  response: Response,\n): Promise<unknown> {\n  let data;\n\n  try {\n    data = await response.json();\n  } catch (error) {\n    data = response.statusText;\n  }\n\n  return data;\n}\n","import { ChannelAvailability } from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { getDefaultHeaders } from '../request/defaultHeaders';\nimport { NetworkRequestMetadata } from '../request/NetworkRequestMetadata';\nimport { getJSON } from '../utils/fetchJSON';\n\nexport interface ChannelAvailabilityResponse {\n  status: ChannelAvailability;\n}\n\nexport async function fetchChannelAvailability(\n  brandId: BrandId,\n  channelId: ChannelId,\n  chatEndpoint: string,\n  requestMetadataHttpHeaders: NetworkRequestMetadata['httpHeaders'] = {},\n  callerServiceId?: string,\n): Promise<ChannelAvailabilityResponse> {\n  const resource = `${chatEndpoint}/chat/1.0/brand/${brandId}/channel/${channelId}/availability`;\n  const options = {\n    headers: {\n      ...getDefaultHeaders(requestMetadataHttpHeaders, callerServiceId),\n    },\n  };\n\n  try {\n    return getJSON<ChannelAvailabilityResponse>(\n      resource,\n      options,\n      callerServiceId,\n    );\n  } catch (error) {\n    throw new ChatSDKError('Failed to fetch channel availability.', { error });\n  }\n}\n","import { ChannelInfo } from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { getBrowserLanguage } from '../browserFingerprint/getBrowserFingerprint';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { getDefaultHeaders } from '../request/defaultHeaders';\nimport { NetworkRequestMetadata } from '../request/NetworkRequestMetadata';\nimport { FetchOptions, getJSON } from '../utils/fetchJSON';\n\nexport async function fetchChannelInfo(\n  brandId: BrandId,\n  channelId: ChannelId,\n  language = getBrowserLanguage(),\n  chatEndpoint: string,\n  requestMetadataHttpHeaders: NetworkRequestMetadata['httpHeaders'] = {},\n  callerServiceId?: string,\n): Promise<ChannelInfo> {\n  const languageLocale = `${language}`.split('-').join('_');\n  const resource = `${chatEndpoint}/chat/1.0/brand/${brandId}/channel/${channelId}?locale=${languageLocale}`;\n\n  const options: FetchOptions = {\n    headers: {\n      ...getDefaultHeaders(requestMetadataHttpHeaders, callerServiceId),\n    },\n  };\n\n  try {\n    return getJSON<ChannelInfo>(resource, options, callerServiceId);\n  } catch (error) {\n    throw new ChatSDKError('Failed to fetch channel info.', { error });\n  }\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { isNil } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { SecureSessions, SecureSessionsType } from './SecureSessionsType';\n\nexport const getSecuredSessionType = (): SecureSessionsType =>\n  SDKVariableStorage.SECURED_SESSION ?? null;\n\nexport const shouldHandleCustomerIdForSecureSessions = (): boolean =>\n  SDKVariableStorage.SECURED_SESSION === SecureSessions.ANONYMOUS;\n\nexport const isSecureSessions = (): boolean => getSecuredSessionType() !== null;\n\nexport const getSecureSessionsTypeFromOptions = (\n  secureSessionsOption: unknown,\n): SecureSessionsType => {\n  if (isNil(secureSessionsOption)) {\n    return null;\n  }\n\n  const secureSessionType = Object.values(SecureSessions).includes(\n    secureSessionsOption as SecureSessions,\n  );\n\n  if (secureSessionType === false) {\n    throw new ChatSDKError(\n      `Expected a SecureSessions value, got ${secureSessionsOption}`,\n    );\n  }\n\n  return secureSessionsOption as SecureSessions;\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport enum EnvironmentName {\n  AU1 = 'AU1',\n  CA1 = 'CA1',\n  EU1 = 'EU1',\n  JP1 = 'JP1',\n  NA1 = 'NA1',\n  UK1 = 'UK1',\n  custom = 'custom',\n}\n\nexport interface EnvironmentEndpoints {\n  authorize: string;\n  chat: string;\n  gateway: string;\n  name: string;\n}\n\nexport function buildEnvironmentEndpoints(\n  environment: EnvironmentName,\n): EnvironmentEndpoints {\n  if (!(environment in EnvironmentName)) {\n    throw new ChatSDKError(`Unknown environment: ${environment}`);\n  }\n\n  if (environment === EnvironmentName.custom) {\n    throw new ChatSDKError(\n      'The custom environment cannot be constructed using the built-in configuration',\n    );\n  }\n\n  const chat =\n    `https://channels-de-${environment}.niceincontact.com`.toLowerCase();\n  const gateway =\n    `wss://chat-gateway-de-${environment}.niceincontact.com`.toLowerCase();\n  const name = environment;\n  const authorize =\n    `https://digital-oauth-de-${environment}.niceincontact.com`.toLowerCase();\n\n  return {\n    chat,\n    name,\n    gateway,\n    authorize,\n  };\n}\n","import { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { EnvironmentEndpoints } from './Environments';\n\nexport const setEnvironmentEndpoints = (\n  endpoints: EnvironmentEndpoints,\n): void => {\n  assertEndpoint(endpoints.gateway, 'gateway');\n  assertEndpoint(endpoints.chat, 'chat');\n  assertEndpoint(endpoints.authorize, 'authorize');\n\n  SDKVariableStorage.ENDPOINT_GATEWAY = endpoints.gateway;\n  SDKVariableStorage.ENDPOINT_CHAT = endpoints.chat;\n  SDKVariableStorage.ENDPOINT_AUTHORIZE = endpoints.authorize;\n};\n\nconst validateEndpoint = (endpoint: string): boolean => {\n  try {\n    new URL(endpoint);\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n};\n\nconst assertEndpoint = (endpoint: string, endpointName: string): void => {\n  if (!validateEndpoint(endpoint)) {\n    throw new Error(\n      `Invalid ${endpointName} endpoint: ${endpoint}. Must be a valid URL.`,\n    );\n  }\n};\n","export const ERROR_AUTHORIZE_HOSTNAME_NOT_SET = 'Authorize hostname is not set';\nexport const ERROR_CANNOT_REFRESH_THIRD_PARTY_TOKEN =\n  'Cannot refresh ThirdParty token';\n\nexport const ERROR_CANNOT_FETCH_TRANSACTION_TOKEN =\n  'Failed to fetch transaction token';\n","export const ERROR_CODE_IP_ADDRESS_BLOCKED = 'ipAddressBlocked';\n\nexport class IpAddressBlockedError extends Error {\n  name = ERROR_CODE_IP_ADDRESS_BLOCKED;\n}\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { PushUpdateContext } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateContext';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\n\nexport const ChatEvent = {\n  ...PushUpdateEventType,\n  ...AwsResponseEventType,\n  AGENT_TYPING_STARTED: 'AgentTypingStarted',\n  AGENT_TYPING_ENDED: 'AgentTypingEnded',\n  ASSIGNED_AGENT_CHANGED: 'AssignedAgentChanged',\n  CONTACT_CREATED: 'ContactCreated',\n  CONTACT_STATUS_CHANGED: 'ContactStatusChanged',\n  CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED:\n    'ContactToRoutingQueueAssignmentChanged',\n} as const;\n\nexport class ChatCustomEvent<\n  T extends ChatEventData = ChatEventData,\n> extends CustomEvent<T> {}\n\nexport interface ChatEventData {\n  context?: [] | PushUpdateContext;\n  createdAt: Date;\n  createdAtWithMilliseconds?: Date;\n  data: unknown;\n  error?: MessageFailedEventData['error'];\n  id: string;\n  type?: ChatEventType;\n}\n\nexport type ChatEventKey = keyof typeof ChatEvent;\nexport type ChatEventType = typeof ChatEvent[ChatEventKey];\n","import { isNil } from '../utils/is';\n\nimport { ChatEventData } from './ChatEvent';\n\nexport type EventMiddleware = (\n  eventData: ChatEventData,\n) => ChatEventData | null;\n\nexport class ChatEventMiddleware {\n  middlewares: Array<EventMiddleware> = [];\n\n  register(middleware: EventMiddleware): void {\n    this.middlewares.push(middleware);\n  }\n\n  process(event: ChatEventData | null): ChatEventData | null {\n    if (isNil(event)) {\n      return null;\n    }\n\n    let processedEvent: ChatEventData | null = event;\n\n    for (const middleware of this.middlewares) {\n      if (processedEvent === null) {\n        return null;\n      }\n      processedEvent = middleware(processedEvent);\n    }\n\n    return processedEvent;\n  }\n}\n","import { ChatCustomEvent, ChatEventType } from './ChatEvent';\n\nexport interface IChatEventTarget extends EventTarget {\n  addEventListener<K extends ChatEventType>(\n    type: K,\n    listener: (event: ChatCustomEvent) => void,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  addEventListener(\n    type: string,\n    callback: EventListenerOrEventListenerObject | null,\n    options?: EventListenerOptions | boolean,\n  ): void;\n\n  dispatchEvent(event: ChatCustomEvent): boolean;\n\n  removeEventListener(\n    type: string,\n    callback: EventListenerOrEventListenerObject | null,\n    options?: boolean | EventListenerOptions | undefined,\n  ): void;\n  removeEventListener<K extends ChatEventType>(\n    type: K,\n    callback: (event: ChatCustomEvent) => void,\n    options?: boolean | EventListenerOptions | undefined,\n  ): void;\n}\n\nexport const ChatEventTarget = EventTarget as {\n  new (): IChatEventTarget;\n  prototype: IChatEventTarget;\n};\n","import { TypingEventData } from '@brandembassy/ts-types-platform/dist/user/typing/TypingEventData';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nfunction isOutbound(data: unknown): boolean {\n  return (data as TypingEventData)?.direction === 'outbound';\n}\n\nexport function agentTypingStarted(event: ChatEventData): ChatEventData {\n  if (isOutbound(event.data)) {\n    return {\n      ...event,\n      type: ChatEvent.AGENT_TYPING_STARTED,\n    };\n  }\n\n  return event;\n}\n\nexport function agentTypingEnded(event: ChatEventData): ChatEventData {\n  if (isOutbound(event.data)) {\n    return {\n      ...event,\n      type: ChatEvent.AGENT_TYPING_ENDED,\n    };\n  }\n\n  return event;\n}\n","import { fromISOString } from '@brandembassy/be-javascript-utils/dist/dateTime/isoString';\nimport { PushUpdateContext } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateContext';\n\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\nimport { isEmpty } from '../utils/is';\n\nimport { ChatEventData, ChatEventType } from './ChatEvent';\n\ninterface EventBase {\n  createdAt: string;\n}\n\ninterface EventDataWithPostback extends EventBase {\n  postback: {\n    data: Record<string, unknown>;\n    eventType: ChatEventType;\n  };\n}\n\ninterface EventWithEventId extends EventBase {\n  eventId: string;\n}\n\ninterface EventWithData extends EventBase {\n  context?: [] | PushUpdateContext;\n  data: Record<string, unknown>;\n}\ninterface EventWithType extends EventBase {\n  eventType: ChatEventType;\n}\n\nconst EMPTY_EVENT = {\n  id: '',\n  data: null,\n  type: undefined,\n  createdAt: new Date(),\n};\n\nconst hasData = (event: unknown): event is EventWithData =>\n  'data' in (event as EventWithData);\n\nconst hasError = (event: unknown): event is MessageFailedEventData =>\n  'error' in (event as MessageFailedEventData);\n\nconst hasEventId = (event: unknown): event is EventWithEventId =>\n  'eventId' in (event as EventWithEventId);\n\nconst hasEventType = (event: unknown): event is EventWithType =>\n  'eventType' in (event as EventWithType);\n\nconst isDataWithPostback = (\n  eventDetailData: unknown,\n): eventDetailData is EventDataWithPostback => {\n  const postback = (eventDetailData as EventDataWithPostback)?.postback;\n\n  return isEmpty(postback) === false;\n};\n\nexport function normalizeEvent(event: unknown): ChatEventData {\n  if (!hasEventId(event)) {\n    return EMPTY_EVENT;\n  }\n\n  if (hasError(event)) {\n    return {\n      createdAt: fromISOString(event.createdAt ?? new Date().toString()),\n      data: null,\n      error: event.error,\n      id: event.eventId,\n    };\n  }\n\n  const eventType = hasEventType(event) ? event.eventType : undefined;\n\n  if (hasData(event)) {\n    return {\n      createdAt: fromISOString(event.createdAt),\n      context: event.context,\n      data: event.data,\n      id: event.eventId,\n      type: eventType,\n    };\n  }\n\n  if (isDataWithPostback(event)) {\n    const {\n      postback: { data: postbackData, eventType: postbackEventType },\n      eventId: rawEventId,\n      ...restEventData\n    } = event;\n\n    return {\n      type: postbackEventType,\n      data: {\n        ...restEventData,\n        ...postbackData,\n      },\n      createdAt: fromISOString(event.createdAt),\n      id: rawEventId,\n    };\n  }\n\n  const { eventId, ...eventRest } = event;\n\n  return {\n    data: undefined,\n    ...eventRest,\n    id: eventId,\n    type: eventType,\n    createdAt: fromISOString(event.createdAt),\n  };\n}\n","import { agentTypingEnded, agentTypingStarted } from '../../agent/agentTyping';\nimport { assignedAgentChanged } from '../../agent/assignedAgentChanged';\nimport { contactCreated } from '../../contact/contactCreated';\nimport { contactStatusChanged } from '../../contact/contactStatusChanged';\nimport { contactToRoutingQueueAssignmentChanged } from '../../contact/contactToRoutingQueueAssignmentChanged';\nimport { livechatRecovered } from '../../thread/livechatThread/livechatRecovered';\nimport { threadRecovered } from '../../thread/threadRecovered';\nimport { ChatEvent, ChatEventData } from '../ChatEvent';\nimport { EventMiddleware } from '../ChatEventMiddleware';\n\nconst eventTypeMap: Record<string, EventMiddleware> = {\n  [ChatEvent.SENDER_TYPING_STARTED]: agentTypingStarted,\n  [ChatEvent.SENDER_TYPING_ENDED]: agentTypingEnded,\n  [ChatEvent.CASE_INBOX_ASSIGNEE_CHANGED]: assignedAgentChanged,\n  [ChatEvent.CASE_CREATED]: contactCreated,\n  [ChatEvent.CASE_STATUS_CHANGED]: contactStatusChanged,\n  [ChatEvent.CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED]:\n    contactToRoutingQueueAssignmentChanged,\n  [ChatEvent.LIVECHAT_RECOVERED]: livechatRecovered,\n  [ChatEvent.THREAD_RECOVERED]: threadRecovered,\n} as const;\n\nexport function chatEventMapper(event: ChatEventData): ChatEventData | null {\n  if (event.type && eventTypeMap[event.type] !== undefined) {\n    return eventTypeMap[event.type](event);\n  }\n\n  return event;\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport function assignedAgentChanged(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.ASSIGNED_AGENT_CHANGED,\n  };\n}\n","import { CaseCreatedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseCreatedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type ContactCreatedData = CaseCreatedData;\n\nexport interface ContactCreatedChatEvent extends ChatEventData {\n  data: ContactCreatedData;\n  type: typeof ChatEvent.CONTACT_CREATED;\n}\n\nexport function contactCreated(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.CONTACT_CREATED,\n  };\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport function contactStatusChanged(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.CONTACT_STATUS_CHANGED,\n  };\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nimport { ContactToRoutingQueueAssignmentChangedChatEvent } from './isContactToRoutingQueueAssignmentChangedEvent';\n\nexport function contactToRoutingQueueAssignmentChanged(\n  event: ChatEventData,\n): ContactToRoutingQueueAssignmentChangedChatEvent {\n  return {\n    ...(event as ContactToRoutingQueueAssignmentChangedChatEvent),\n    type: ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED,\n  };\n}\n","import { PushUpdateEventFields } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventFields';\n\nimport { ChatEventData } from '../../event/ChatEvent';\nimport { chatEventMapper } from '../../event/middleware/ChatEventMapper';\nimport { normalizeEvent } from '../../event/normalizeEvent';\n\nexport function livechatRecovered(event: ChatEventData): ChatEventData {\n  const normalizedContactHistoryItems = (\n    (event.data as Record<string, unknown>)\n      .contactHistory as Array<PushUpdateEventFields>\n  )\n    .map(normalizeEvent)\n    // to apply new event types for all contact history items\n    .map(chatEventMapper)\n    .filter((item): item is ChatEventData => Boolean(item));\n\n  return {\n    ...event,\n    data: {\n      ...(event.data as Record<string, unknown>),\n      contactHistory: normalizedContactHistoryItems,\n    },\n  };\n}\n","import { ThreadRecoveredPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadRecovered';\nimport { PushUpdateEventFields } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventFields';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { chatEventMapper } from '../event/middleware/ChatEventMapper';\nimport { normalizeEvent } from '../event/normalizeEvent';\n\nimport { ThreadRecoveredChatEvent } from './isRecoverSuccessPayload';\n\nexport function threadRecovered(\n  event: ChatEventData,\n): ThreadRecoveredChatEvent {\n  const normalizedContactHistoryItems = (\n    (event.data as ThreadRecoveredPostbackData)\n      .contactHistory as Array<PushUpdateEventFields>\n  )\n    .map(normalizeEvent)\n    // to apply new event types for all contact history items\n    .map(chatEventMapper)\n    .filter((item): item is ChatEventData => Boolean(item));\n\n  return {\n    ...event,\n    data: {\n      ...(event.data as ThreadRecoveredPostbackData),\n      contactHistory: normalizedContactHistoryItems,\n    },\n  };\n}\n","import { getBrowserLanguage } from './browserFingerprint/getBrowserFingerprint';\nimport type { ChatSDKOptions } from './ChatSDKOptions';\nimport { APP_NAME } from './env/appName';\nimport { NetworkRequestMetadata } from './request/NetworkRequestMetadata';\nimport { validateAndFilterHttpHeaders } from './request/validateAndFilterHttpHeaders';\nimport { validateAndFilterWebSocketQuery } from './request/validateAndFilterWebSocketQuery';\nimport { getSecureSessionsTypeFromOptions } from './securedSession/getSecuredSessionType';\nimport { SDKVariableStorage } from './variables/VariableStorage';\n\nexport function initializeSdkVariables(options: ChatSDKOptions): void {\n  SDKVariableStorage.AUTHORIZATION_CODE = options.authorizationCode;\n  SDKVariableStorage.BRAND_ID = options.brandId;\n  SDKVariableStorage.CHANNEL_ID = options.channelId;\n  SDKVariableStorage.APP_NAME = options.appName ?? APP_NAME;\n  SDKVariableStorage.APP_VERSION = `${options.appVersion ?? 0}`;\n  // Store the destinationId, visitId, and visitorId for payload data use\n  SDKVariableStorage.DESTINATION = options.destinationId;\n  SDKVariableStorage.VISIT_ID = options.visitId;\n  SDKVariableStorage.VISITOR_ID = options.visitorId;\n  SDKVariableStorage.LANGUAGE = options.language ?? getBrowserLanguage();\n  SDKVariableStorage.SECURED_SESSION = getSecureSessionsTypeFromOptions(\n    options.securedSession,\n  );\n  SDKVariableStorage.CLIENT_SIDE_EVENTS_THROTTLING =\n    options.isClientSideEventsThrottlingEnabled;\n\n  SDKVariableStorage.REQUEST_METADATA = initializeRequestMetadata(options);\n}\n\nexport const initializeRequestMetadata = (\n  options: ChatSDKOptions,\n): NetworkRequestMetadata => {\n  const onError = options.onError;\n\n  // validate http headers\n  const httpHeaders = validateAndFilterHttpHeaders(\n    options.networkRequestMetadata?.httpHeaders,\n    onError,\n  );\n\n  // validate websocket query params\n  const websocketQuery = validateAndFilterWebSocketQuery(\n    options.networkRequestMetadata?.websocketQuery,\n    onError,\n  );\n\n  return {\n    httpHeaders,\n    websocketQuery,\n  };\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport const validateAndFilterHttpHeaders = (\n  httpHeaders: Record<string | number, unknown> | undefined,\n  onError?: (error: Error) => void,\n): Record<string, string> => {\n  if (!httpHeaders) {\n    return {};\n  }\n\n  const validHttpHeaders = Object.entries(httpHeaders).reduce(\n    (acc, entry) => validateAndFilterHeader(acc, entry, onError),\n    {} as Record<string, string>,\n  );\n\n  return validHttpHeaders;\n};\n\nexport const validateAndFilterHeader = (\n  acc: Record<string, string>,\n  [key, value]: [unknown, unknown],\n  onError?: (error: Error) => void,\n): Record<string, string> => {\n  if (\n    (typeof key !== 'string' && typeof key !== 'number') ||\n    (typeof value !== 'string' && typeof value !== 'number')\n  ) {\n    onError?.(\n      new ChatSDKError(\n        `Invalid HTTP header: key \"${key}\" and value \"${value}\" must be strings or numbers.`,\n      ),\n    );\n\n    return acc;\n  }\n\n  // Convert key to string\n  const headerKey = String(key);\n\n  // check for empty key\n  if (headerKey.trim() === '') {\n    onError?.(\n      new ChatSDKError(\n        `Invalid HTTP header: key \"${headerKey}\" must not be an empty string.`,\n      ),\n    );\n\n    return acc;\n  }\n\n  const headerObject = new Headers();\n  try {\n    headerObject.append(headerKey, String(value));\n  } catch (e) {\n    onError?.(\n      new ChatSDKError(\n        `Invalid HTTP header: key \"${headerKey}\" and value \"${value}\" cannot be added to Headers.`,\n      ),\n    );\n\n    return acc;\n  }\n\n  acc[headerKey] = String(value);\n\n  return acc;\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport const validateAndFilterWebSocketQuery = (\n  websocketQuery: Record<string | number, unknown> | undefined,\n  onError?: (error: Error) => void,\n): Record<string, string> => {\n  if (!websocketQuery) {\n    return {};\n  }\n\n  const validWebSocketQuery = Object.entries(websocketQuery).reduce(\n    (acc, entry) => validateAndFilterQueryParam(acc, entry, onError),\n    {} as Record<string, string>,\n  );\n\n  return validWebSocketQuery;\n};\n\nconst validateAndFilterQueryParam = (\n  acc: Record<string, string>,\n  [key, value]: [unknown, unknown],\n  onError?: (error: Error) => void,\n): Record<string, string> => {\n  if (\n    (typeof key !== 'string' && typeof key !== 'number') ||\n    (typeof value !== 'string' && typeof value !== 'number')\n  ) {\n    onError?.(\n      new ChatSDKError(\n        `Invalid WebSocket query parameter: key \"${key}\" and value \"${value}\" must be strings or numbers.`,\n      ),\n    );\n\n    return acc;\n  }\n\n  // Convert key to string\n  const queryKey = String(key);\n\n  // check for empty key\n  if (queryKey.trim() === '') {\n    onError?.(\n      new ChatSDKError(\n        `Invalid WebSocket query parameter: key \"${queryKey}\" must not be an empty string.`,\n      ),\n    );\n\n    return acc;\n  }\n\n  const searchParams = new URLSearchParams();\n\n  try {\n    searchParams.append(queryKey, String(value));\n    searchParams.toString(); // This will throw error if searchParams is invalid\n  } catch (e) {\n    onError?.(\n      new ChatSDKError(\n        `Invalid WebSocket query parameter: key \"${queryKey}\" and value \"${value}\" must not be empty strings.`,\n      ),\n    );\n\n    return acc;\n  }\n\n  acc[queryKey] = String(value);\n\n  return acc;\n};\n","import { ChatEventData } from '../event/ChatEvent';\nimport { isUndefined } from '../utils/is';\n\nexport interface MessageSuccessEventData extends ChatEventData {\n  id: string;\n}\nexport interface MessageFailedEventData extends MessageSuccessEventData {\n  error: {\n    errorCode: string;\n    errorMessage: string;\n    transactionId: string;\n  };\n  id: string;\n}\n\nexport function isSendMessageSuccessEventData(\n  event: ChatEventData,\n): event is MessageSuccessEventData {\n  const hasEventId =\n    isUndefined((event as MessageSuccessEventData)?.id) === false;\n\n  const hasError =\n    isUndefined((event as MessageFailedEventData).error) === false;\n\n  return hasError === false && hasEventId;\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SendMessageFailedError extends ChatSDKError {}\n","import { Message } from '@brandembassy/ts-types-platform/dist/message/Message';\nimport { MessageDirection } from '@brandembassy/ts-types-platform/dist/message/MessageDirection';\n\n/**\n * Get message author name of given message\n * @param message - message\n * @returns message author name\n */\nexport const getAuthor = (message: Message): string =>\n  message.direction === MessageDirection.INBOUND\n    ? message.authorEndUserIdentity?.fullName ?? ''\n    : `${message.authorUser?.firstName ?? ''} ${\n        message.authorUser?.surname ?? ''\n      }`.trim();\n","import { Message } from '@brandembassy/ts-types-platform/dist/message/Message';\n\nimport { isUndefined } from '../utils/is';\n\nexport function isMessage(item: unknown): item is Message {\n  const hasId = isUndefined((item as Message).id) === false;\n  const hasDirection = isUndefined((item as Message).direction) === false;\n  const hasMessageContent =\n    isUndefined((item as Message).messageContent) === false;\n\n  return hasId && hasDirection && hasMessageContent;\n}\n","import { MessageCreatedData } from '@brandembassy/ts-types-platform/dist/message/MessageCreatedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageCreatedEvent extends ChatEventData {\n  data: MessageCreatedData;\n  type: PushUpdateEventType.MESSAGE_CREATED;\n}\n\nexport function isMessageCreatedEvent(\n  event: unknown,\n): event is MessageCreatedEvent {\n  return (\n    (event as MessageCreatedEvent).type === PushUpdateEventType.MESSAGE_CREATED\n  );\n}\n","import { MessageSentData } from '@brandembassy/ts-types-platform/dist/message/MessageSentEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageSentEvent extends ChatEventData {\n  data: MessageSentData;\n  type: PushUpdateEventType.MESSAGE_SENT;\n}\n\nexport function isMessageSentEvent(event: unknown): event is MessageSentEvent {\n  return (event as MessageSentEvent).type === PushUpdateEventType.MESSAGE_SENT;\n}\n","import { MessageReadChangedData } from '@brandembassy/ts-types-platform/dist/message/MessageReadChangedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageReadChangedEvent extends ChatEventData {\n  data: MessageReadChangedData;\n  type: PushUpdateEventType.MESSAGE_READ_CHANGED;\n}\n\nexport function isMessageReadChangedEvent(\n  event: unknown,\n): event is MessageReadChangedEvent {\n  return (\n    (event as MessageReadChangedEvent).type ===\n    PushUpdateEventType.MESSAGE_READ_CHANGED\n  );\n}\n","import { AuthorizationToken } from '@brandembassy/ts-types-chat/dist/authorization/AuthorizationToken';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { Message } from '@brandembassy/ts-types-platform/dist/message/Message';\nimport { MessageId } from '@brandembassy/ts-types-platform/dist/message/MessageId';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { getDefaultHeaders } from '../request/defaultHeaders';\nimport { FetchOptions, getJSON } from '../utils/fetchJSON';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport function getUrlPathForMessageWithFullContent(\n  brandId: BrandId,\n  messageId: MessageId,\n): string {\n  return `/chat/1.0/brand/${brandId}/messages/${messageId}`;\n}\n\nexport async function fetchMessageWithFullContent(\n  message: Message,\n  brandId: BrandId,\n  authorizationToken: AuthorizationToken,\n): Promise<Message> {\n  const resource = `${\n    SDKVariableStorage.ENDPOINT_CHAT\n  }${getUrlPathForMessageWithFullContent(brandId, message.id)}`;\n\n  const requestMetadataHttpHeaders =\n    SDKVariableStorage.REQUEST_METADATA?.httpHeaders || {};\n\n  const options: FetchOptions = {\n    headers: {\n      ...getDefaultHeaders(requestMetadataHttpHeaders),\n      Authorization: `Bearer ${authorizationToken.token}`,\n    },\n  };\n\n  try {\n    return getJSON<Message>(resource, options);\n  } catch (error) {\n    throw new ChatSDKError('Failed to fetch message content.', { error });\n  }\n}\n","import { S3EventData } from '@brandembassy/ts-types-platform/dist/largeEvent/S3Event';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface S3ChatEvent extends ChatEventData {\n  data: S3EventData;\n  type: typeof ChatEvent.EVENT_IN_S3;\n}\n\nexport function isS3ChatEvent(event: unknown): event is S3ChatEvent {\n  return (event as S3ChatEvent).type === PushUpdateEventType.EVENT_IN_S3;\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { normalizeEvent } from '../event/normalizeEvent';\nimport { isMessageCreatedEvent } from '../message';\nimport { getMessageWithFullContent } from '../message/getMessageFullContent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { getJSON } from '../utils/fetchJSON';\nimport { isNil } from '../utils/is';\n\nimport { isS3ChatEvent } from './isS3ChatEvent';\n\nexport const getEventData = async (\n  eventData: ChatEventData | undefined,\n  websocketClient: WebSocketClient | null,\n): Promise<ChatEventData | null> => {\n  if (isNil(eventData)) {\n    return null;\n  }\n\n  if (!isS3ChatEvent(eventData) && !isMessageCreatedEvent(eventData)) {\n    return eventData;\n  }\n\n  if (isMessageCreatedEvent(eventData)) {\n    return getMessageWithFullContent(eventData, websocketClient);\n  }\n\n  if (isS3ChatEvent(eventData)) {\n    const response = await getJSON<ChatEventData>(eventData.data.s3Object.url);\n\n    return normalizeEvent(response);\n  }\n\n  throw new ChatSDKError('Failed to fetch additional data for event');\n};\n","import { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { TransactionAccessToken } from './TransactionToken';\n\nconst TRANSACTION_TOKEN_CACHE_KEY = 'sdkTransactionToken';\n\nexport const getCachedTransactionToken = (): TransactionAccessToken | null => {\n  if (!SDKVariableStorage.CACHE_STORAGE) {\n    return null;\n  }\n\n  return SDKVariableStorage.CACHE_STORAGE.getItem(TRANSACTION_TOKEN_CACHE_KEY);\n};\n\nexport const cacheTransactionToken = (\n  token: TransactionAccessToken,\n  expiresIn: number,\n): void => {\n  if (!SDKVariableStorage.CACHE_STORAGE) {\n    return;\n  }\n\n  SDKVariableStorage.CACHE_STORAGE.setItem(\n    TRANSACTION_TOKEN_CACHE_KEY,\n    token,\n    expiresIn * 1000,\n  );\n};\n\nexport const clearCachedTransactionToken = (): void => {\n  if (!SDKVariableStorage.CACHE_STORAGE) {\n    return;\n  }\n\n  SDKVariableStorage.CACHE_STORAGE.removeItem(TRANSACTION_TOKEN_CACHE_KEY);\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { ERROR_AUTHORIZE_HOSTNAME_NOT_SET } from '../error/errorMessages';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport function getAuthorizeUrl(): string {\n  if (!SDKVariableStorage.ENDPOINT_AUTHORIZE) {\n    throw new ChatSDKError(ERROR_AUTHORIZE_HOSTNAME_NOT_SET);\n  }\n\n  const authorizeUrl = new URL(SDKVariableStorage.ENDPOINT_AUTHORIZE);\n  authorizeUrl.pathname = '/oauth/token';\n  authorizeUrl.searchParams.append(\n    'brandId',\n    String(SDKVariableStorage.BRAND_ID),\n  );\n  authorizeUrl.searchParams.append(\n    'channelId',\n    SDKVariableStorage.CHANNEL_ID ?? '',\n  );\n  authorizeUrl.searchParams.append(\n    'visitorId',\n    SDKVariableStorage.VISITOR_ID ?? '',\n  );\n\n  return authorizeUrl.toString();\n}\n","import { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { ThirdPartyToken } from './ThirdPartyToken';\n\nexport function setThirdPartyToken(token: ThirdPartyToken): void {\n  SDKVariableStorage.THIRD_PARTY_TOKEN = token;\n}\nexport function getThirdPartyToken(): ThirdPartyToken | null {\n  return SDKVariableStorage.THIRD_PARTY_TOKEN ?? null;\n}\nexport function resetThirdPartyToken(): void {\n  SDKVariableStorage.THIRD_PARTY_TOKEN = undefined;\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { ERROR_CANNOT_REFRESH_THIRD_PARTY_TOKEN } from '../error/errorMessages';\nimport { postJSON } from '../utils/fetchJSON';\nimport { isNull } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { getAuthorizeUrl } from './getAuthorizeUrl';\nimport { handleNewThirdPartyToken } from './handleNewThirdPartyToken';\nimport { getThirdPartyToken } from './thirdPartyTokenStorage';\nimport { RefreshTokenResponse } from './TransactionToken';\n\nexport async function refreshThirdPartyToken(): Promise<void> {\n  const token = getThirdPartyToken();\n  if (isNull(token)) {\n    throw new ChatSDKError(ERROR_CANNOT_REFRESH_THIRD_PARTY_TOKEN);\n  }\n\n  const refreshUrl = getAuthorizeUrl();\n  try {\n    const { thirdParty } = await postJSON<RefreshTokenResponse>(\n      refreshUrl,\n      {\n        thirdParty: {\n          grant_type: 'refresh_token',\n          refresh_token: token.refresh_token,\n        },\n      },\n      {\n        credentials: 'include',\n        headers: {\n          ...SDKVariableStorage.REQUEST_METADATA?.httpHeaders,\n        },\n      },\n    );\n\n    if (!thirdParty) {\n      throw new ChatSDKError(ERROR_CANNOT_REFRESH_THIRD_PARTY_TOKEN);\n    }\n\n    return handleNewThirdPartyToken(thirdParty);\n  } catch (error) {\n    if (error instanceof ChatSDKError) {\n      throw error;\n    }\n\n    throw new ChatSDKError(ERROR_CANNOT_REFRESH_THIRD_PARTY_TOKEN, error);\n  }\n}\n","import { handleRefreshToken } from '../authorization/handleRefreshToken';\n\nimport { refreshThirdPartyToken } from './refreshThirdPartyToken';\nimport { ThirdPartyToken } from './ThirdPartyToken';\nimport { setThirdPartyToken } from './thirdPartyTokenStorage';\n\nexport function handleNewThirdPartyToken(token: ThirdPartyToken): void {\n  setThirdPartyToken(token);\n  handleRefreshToken({ expiresIn: token.expires_in }, refreshThirdPartyToken);\n}\n","export class WebSocketClientError extends Error {\n  name: string = 'WebSocketClientError';\n\n  constructor(message: string, reason: string = '') {\n    const reasonMessage = reason ? ` (${reason})` : '';\n    super(`[WebSocketClientError]: ${message}${reasonMessage}`);\n  }\n}\n","import { WebSocketClient as PushUpdateWSClient } from '@brandembassy/push-updates-sdk';\n\nexport type IWsEventTarget = PushUpdateWSClient;\n\nexport const WsEventTarget = EventTarget as {\n  new (): IWsEventTarget;\n  prototype: IWsEventTarget;\n};\n","import {\n  WebSocketClient as PushUpdateWSClient,\n  WebSocketClientEvent as PushUpdatesWebSocketClientEvent,\n  setupSocketConnection,\n} from '@brandembassy/push-updates-sdk';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport { ChatCustomEvent } from '../event/ChatEvent';\nimport { isSecureSessions } from '../securedSession/getSecuredSessionType';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { WebSocketClientError } from './WebSocketClientError';\nimport { IWsEventTarget, WsEventTarget } from './WsEventTarget';\n\nexport interface SocketQueryParameters {\n  [key: string]: string | number | undefined;\n  brandId: BrandId;\n  channelId: ChannelId;\n  consumerId: CustomerIdentityIdOnExternalPlatform;\n  token?: string;\n  visitorId: VisitorId;\n}\n\nconst MAX_SOCKET_RECONNECT_RETRIES = 20;\n\n/**\n * Websocket client\n */\nexport class WebSocketClient {\n  #connection: PushUpdateWSClient | null = null;\n  #eventTarget: IWsEventTarget;\n  #alreadyConnected: boolean = false;\n\n  constructor(\n    private onError: ((error: Error) => void) | undefined,\n    private socketURLGetter: () => Promise<string>,\n  ) {\n    this.#eventTarget = new WsEventTarget();\n  }\n\n  /**\n   * Connect websocket\n   */\n  async connect(): Promise<void> {\n    this.#setupConnection();\n\n    this.#connection?.socket?.reconnect();\n  }\n\n  /**\n   * Disconnect websocket\n   */\n  disconnect(): void {\n    this.#connection?.socket.close();\n  }\n\n  /**\n   * Reconnect websocket\n   */\n  reconnect(): void {\n    this.#setupConnection();\n    this.#connection?.socket.reconnect();\n  }\n\n  /**\n   * Send data to active connection\n   * @param data - data to send\n   */\n  send(data: unknown): void {\n    const stringData = JSON.stringify(data);\n    this.#connection?.send(stringData);\n  }\n\n  /**\n   * Register event handler to websocket event\n   * @param eventType - websocket event\n   * @param handlerCallback - event handler\n   */\n  on(\n    eventType: PushUpdatesWebSocketClientEvent,\n    handlerCallback: (event: ChatCustomEvent) => void,\n  ): void {\n    this.#eventTarget.addEventListener(eventType, handlerCallback);\n  }\n\n  /**\n   * Unregister event handler to websocket event\n   * @param eventType - websocket event\n   * @param handlerCallback - event handler\n   */\n  off(\n    eventType: PushUpdatesWebSocketClientEvent,\n    handlerCallback: (event: CustomEvent) => void,\n  ): void {\n    this.#eventTarget.removeEventListener(eventType, handlerCallback);\n  }\n\n  /**\n   * Handle error from event listeners with onError callback or throw error\n   */\n  private _errorHandler(\n    event: CustomEvent<CloseEvent | ErrorEvent | Event>,\n  ): void {\n    const eventError = event.detail;\n    let error: WebSocketClientError | undefined;\n\n    if (eventError instanceof ErrorEvent) {\n      error = new WebSocketClientError('Connection error', eventError.message);\n    }\n    if (eventError instanceof CloseEvent) {\n      error = new WebSocketClientError('Connection closed', eventError.reason);\n    }\n    if (typeof error === 'undefined') {\n      error = new WebSocketClientError('Unknown error', eventError.type);\n    }\n\n    if (typeof this.onError === 'function') {\n      this.onError(error);\n    } else {\n      throw error;\n    }\n  }\n\n  #setupConnection(): void {\n    // if secured session is ON; start the heartbeat right away because there is no authorization response from lambda\n    const heartbeatAfterAuthorize = !isSecureSessions();\n\n    const endpoint = SDKVariableStorage.ENDPOINT_GATEWAY ?? '';\n    const forceSecureProtocol = endpoint.startsWith('wss');\n\n    this.#connection = setupSocketConnection(this.socketURLGetter, {\n      forceSecureProtocol,\n      startClosed: true,\n      heartbeatAfterAuthorize,\n      maxRetries: 0, // Disable reconnection attempts on the initial connection to avoid retrying in case of an authorization error. Configure maxRetries later once the connection is successfully established.\n    });\n\n    const errorHandlerBound = this._errorHandler.bind(this);\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.CLOSE,\n      errorHandlerBound,\n    );\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.ERROR,\n      errorHandlerBound,\n    );\n\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.OPEN,\n      (event: CustomEvent<Event>) => {\n        this.#connection?.socket.setMaxRetires(MAX_SOCKET_RECONNECT_RETRIES);\n        this.#alreadyConnected = true;\n        this.#socketEventHandler(event);\n      },\n    );\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.CLOSE,\n      (event: CustomEvent<CloseEvent>) => {\n        if (!this.#alreadyConnected) {\n          // if the connection was not establish before close event.\n          // It is most probably because of the Authorization failed\n          this.#eventTarget.dispatchEvent(\n            new CustomEvent(\n              PushUpdatesWebSocketClientEvent.AUTHORIZATION_FAILED,\n            ),\n          );\n        }\n\n        this.#socketEventHandler(event);\n      },\n    );\n    this.#connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.MESSAGE,\n      this.#socketEventHandler,\n    );\n  }\n\n  #socketEventHandler = (\n    event: CustomEvent<CloseEvent | ErrorEvent | Event>,\n  ): void => {\n    this.#eventTarget.dispatchEvent(event);\n  };\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class UploadAttachmentError extends ChatSDKError {}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { AttachmentUpload } from '@brandembassy/ts-types-chat/dist/message/AttachmentUpload';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SendMessageOptions } from '../thread/SendMessageOptions';\nimport { generateId } from '../utils/generateId';\nimport { getBrandIdAndChannelId } from '../utils/getBrandIdAndChannelId';\n\nimport { createPayloadForAttachmentUpload } from './createPayloadForAttachmentUpload';\nimport {\n  isUploadFailResponse,\n  isUploadSuccessResponse,\n  uploadAttachment,\n} from './uploadAttachment';\nimport { UploadAttachmentError } from './UploadAttachmentError';\n\nexport const createAttachmentPayload = async (\n  file: File,\n  brandId: BrandId,\n  channelId: ChannelId,\n  abortSignal?: AbortSignal,\n): Promise<AttachmentUpload> => {\n  const attachment = await createPayloadForAttachmentUpload(file);\n  const uploadAttachmentResponse = await uploadAttachment(\n    brandId,\n    channelId,\n    attachment,\n    abortSignal,\n  );\n\n  if (isUploadSuccessResponse(uploadAttachmentResponse)) {\n    return {\n      url: uploadAttachmentResponse.fileUrl,\n      friendlyName: attachment.name,\n    };\n  }\n\n  if (isUploadFailResponse(uploadAttachmentResponse)) {\n    throw new UploadAttachmentError(\n      'Upload attachment failed',\n      uploadAttachmentResponse,\n    );\n  }\n\n  throw new ChatSDKError(\n    `Unknown file upload response (${uploadAttachmentResponse})`,\n  );\n};\n\nexport const isAttachmentUpload = (\n  files: FileList | Array<File> | Array<AttachmentUpload>,\n): files is Array<AttachmentUpload> => {\n  const filesToTest: Array<File | AttachmentUpload> = Array.from<\n    File | AttachmentUpload\n  >(files);\n\n  return (filesToTest as Array<AttachmentUpload>).every(\n    (file) => 'url' in file && 'friendlyName' in file,\n  );\n};\n\nexport const createTemporaryAttachmentsUpload = async (\n  files: FileList | Array<File>,\n  brandId: BrandId,\n  channelId: ChannelId,\n  abortSignal?: AbortSignal,\n): Promise<Array<AttachmentUpload>> =>\n  Promise.all<AttachmentUpload>(\n    Array.from(files).map((file) =>\n      createAttachmentPayload(file, brandId, channelId, abortSignal),\n    ),\n  );\n\nexport const createAttachmentUploadMessageData = async (\n  files: FileList | Array<File> | Array<AttachmentUpload>,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  options: SendMessageOptions = {},\n): Promise<SendMessageEventData> => {\n  const { brandId, channelId } = getBrandIdAndChannelId();\n\n  try {\n    const attachments = isAttachmentUpload(files)\n      ? files\n      : await createTemporaryAttachmentsUpload(files, brandId, channelId);\n\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    return {\n      messageContent: {\n        type: MessageType.TEXT,\n        payload: {\n          text: '',\n        },\n      },\n      attachments,\n      browserFingerprint,\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n      idOnExternalPlatform: messageId,\n      consumer: {\n        customFields: [],\n      },\n      consumerContact: {\n        customFields: [],\n      },\n    };\n  } catch (error: unknown) {\n    if (error instanceof UploadAttachmentError) {\n      throw error;\n    }\n\n    if (error instanceof Error) {\n      throw new ChatSDKError(\n        `Send attachment failed because of (${error.message})`,\n      );\n    }\n\n    throw new ChatSDKError(`Unknown error during file upload`);\n  }\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nimport { createLocalFileReader } from './localFileReader';\n\nexport interface AttachmentPayload {\n  mimeType: string;\n  name: string;\n  url: string;\n}\n\nexport const createPayloadForAttachmentUpload = async (\n  file: File,\n): Promise<AttachmentPayload> => {\n  const reader = await createLocalFileReader(file);\n\n  if (reader.error !== null) {\n    throw new ChatSDKError(\n      `Cannot create payload for attachment upload because of error (${reader.error.message})`,\n    );\n  }\n\n  if (typeof reader.result !== 'string') {\n    throw new ChatSDKError(\n      `Cannot create payload for attachment upload because of missing:\n      reader result (${reader.result})`,\n    );\n  }\n\n  return {\n    url: reader.result,\n    name: file.name,\n    mimeType: file.type,\n  };\n};\n","export function createLocalFileReader(file: File): Promise<FileReader> {\n  return new Promise((resolve, reject): void => {\n    const reader = new FileReader();\n    reader.onloadend = (): void => {\n      resolve(reader);\n    };\n    reader.onerror = (errorEvent: ProgressEvent<FileReader>): void =>\n      reject(errorEvent.target?.error?.message);\n    reader.readAsDataURL(file);\n  });\n}\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\n\nimport { getDefaultHeaders } from '../request/defaultHeaders';\nimport { FetchOptions, postJSON } from '../utils/fetchJSON';\nimport { isUndefined } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { AttachmentPayload } from './createPayloadForAttachmentUpload';\n\nexport interface UploadSuccessResponse {\n  fileUrl: string;\n}\n\nexport interface UploadFailResponse {\n  allowedFileSize: string;\n  allowedFileTypes: Array<{\n    description: string;\n    mimeType: string;\n  }>;\n}\n\nexport function isUploadSuccessResponse(\n  data: unknown,\n): data is UploadSuccessResponse {\n  return isUndefined((data as UploadSuccessResponse)?.fileUrl) === false;\n}\n\nexport function isUploadFailResponse(\n  data: unknown,\n): data is UploadFailResponse {\n  return isUndefined((data as UploadFailResponse)?.allowedFileSize) === false;\n}\n\nexport async function uploadAttachment(\n  brandId: BrandId,\n  channelId: string,\n  attachment: AttachmentPayload,\n  abortSignal?: AbortSignal,\n): Promise<UploadSuccessResponse | UploadFailResponse> {\n  const { url, name: fileName, mimeType } = attachment;\n  const content = url.split(';base64,')[1];\n  const requestBody = { content, fileName, mimeType };\n  const headers = {\n    ...SDKVariableStorage.REQUEST_METADATA?.httpHeaders,\n  };\n\n  const resource = `${SDKVariableStorage.ENDPOINT_CHAT}/chat/1.0/brand/${brandId}/channel/${channelId}/attachment`;\n\n  const fetchOptions: FetchOptions = {\n    headers: {\n      ...getDefaultHeaders(headers, SDKVariableStorage.APP_NAME),\n    },\n    signal: abortSignal,\n  };\n\n  return postJSON(resource, requestBody, fetchOptions);\n}\n","import { CaseStatusChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseStatusChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type ContactStatusChangedData = CaseStatusChangedData;\n\nexport interface ContactStatusChangedChatEvent extends ChatEventData {\n  data: ContactStatusChangedData;\n  type: typeof ChatEvent.CONTACT_STATUS_CHANGED;\n}\n\nexport function isContactStatusChangedEvent(\n  event: ChatEventData,\n): event is ContactStatusChangedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_STATUS_CHANGED &&\n    (event as ContactStatusChangedChatEvent).data?.case?.id !== undefined\n  );\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nimport { ContactCreatedChatEvent } from './contactCreated';\n\nexport function isContactCreatedEvent(\n  event: ChatEventData,\n): event is ContactCreatedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_CREATED &&\n    (event as ContactCreatedChatEvent).data?.case?.id !== undefined\n  );\n}\n","import { ContactToRoutingQueueAssignmentChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseToRoutingQueueAssignmentChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface ContactToRoutingQueueAssignmentChangedChatEvent\n  extends ChatEventData {\n  data: ContactToRoutingQueueAssignmentChangedData;\n  type: typeof ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED;\n}\n\nexport function isContactToRoutingQueueAssignmentChangedEvent(\n  event: ChatEventData,\n): event is ContactToRoutingQueueAssignmentChangedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED &&\n    (event as ContactToRoutingQueueAssignmentChangedChatEvent).data?.case\n      ?.id !== undefined\n  );\n}\n","import { ContactRecipientsChangedData } from '@brandembassy/ts-types-platform/dist/groupChat/ContactRecipientsChangedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface ContactRecipientsChangedChatEvent extends ChatEventData {\n  data: ContactRecipientsChangedData;\n  type: PushUpdateEventType.CONTACT_RECIPIENTS_CHANGED;\n}\n\nexport function isContactRecipientsChangedEvent(\n  event: unknown,\n): event is ContactRecipientsChangedChatEvent {\n  return (\n    (event as ContactRecipientsChangedChatEvent).type ===\n    PushUpdateEventType.CONTACT_RECIPIENTS_CHANGED\n  );\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { BrowserFingerprint } from '@brandembassy/ts-types-chat/dist/user/BrowserFingerprint';\nimport { MessageId } from '@brandembassy/ts-types-platform/dist/message/MessageId';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\n\nexport type MessageContent = SendMessageEventData['messageContent'];\n\nexport const createMessageData = (\n  messageContent: MessageContent,\n  messageId: MessageId,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  browserFingerprint: BrowserFingerprint = getBrowserFingerprint(),\n): SendMessageEventData => ({\n  messageContent,\n  browserFingerprint,\n  idOnExternalPlatform: messageId,\n  thread: {\n    idOnExternalPlatform: threadIdOnExternalPlatform,\n  },\n  consumer: {\n    customFields: [],\n  },\n  consumerContact: {\n    customFields: [],\n  },\n  attachments: [],\n});\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { MoreMessagesLoadedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/MoreMessagesLoaded';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MoreMessagesLoadedEvent extends ChatEventData {\n  data: MoreMessagesLoadedPostbackData;\n}\n\nexport function isLoadMoreMessagesEventData(\n  event: ChatEventData,\n): event is MoreMessagesLoadedEvent {\n  return (\n    (event as MoreMessagesLoadedEvent).type ===\n      AwsResponseEventType.MORE_MESSAGES_LOADED &&\n    (event as MoreMessagesLoadedEvent)?.data?.messages !== undefined\n  );\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { LoadMoreMessagesEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LoadMoreMessages';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createLoadMoreMessagesPayloadData = (\n  eventData: LoadMoreMessagesEventData,\n): EventPayloadData<LoadMoreMessagesEventData> => ({\n  eventType: AwsInputEventType.LOAD_MORE_MESSAGES,\n  data: eventData,\n});\n","import { AbortError } from '../error/AbortError';\n\nexport interface Abortable {\n  abort: (reason?: string) => void;\n  readonly abortReason?: string;\n}\n\ntype ExecutorFunction<T> = (\n  resolve: (value: PromiseLike<T> | T) => void,\n  reject: (reason?: unknown) => void,\n) => void;\n\ntype AbortableExecutorFunction<T> = (\n  resolve: (value: PromiseLike<T> | T) => void,\n  reject: (reason?: unknown) => void,\n  abortSignal: AbortSignal,\n) => void;\n\n/**\n * AbortablePromise is a Promise that can be aborted.\n * Source: https://github.com/zzdjk6/simple-abortable-promise, MIT License\n */\nexport class AbortablePromise<T> extends Promise<T> implements Abortable {\n  public abort: Abortable['abort'];\n\n  constructor(executor: AbortableExecutorFunction<T>) {\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n\n    const normalExecutor: ExecutorFunction<T> = (resolve, reject) => {\n      abortSignal.addEventListener('abort', () => {\n        reject(new AbortError(this.abortReason));\n      });\n\n      executor?.(resolve, reject, abortSignal);\n    };\n\n    super(normalExecutor);\n    this.abort = (reason) => {\n      this._abortReason = reason ?? 'Aborted';\n      abortController.abort();\n    };\n  }\n\n  private _abortReason?: string;\n\n  public get abortReason(): string | undefined {\n    return this._abortReason;\n  }\n\n  static from = <P>(promise: Promise<P>): AbortablePromise<P> => {\n    // If promise is already an AbortablePromise, return it directly\n    if (promise instanceof AbortablePromise) {\n      return promise;\n    }\n\n    return new AbortablePromise<P>((resolve, reject) => {\n      promise.then(resolve).catch(reject);\n    });\n  };\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class ArchiveThreadFailedError extends ChatSDKError {}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class GetMetadataFailedError extends ChatSDKError {}\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadMetadataLoadedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadMetadataLoaded';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface LoadThreadMetadataChatEvent extends ChatEventData {\n  data: ThreadMetadataLoadedPostbackData;\n  type: AwsResponseEventType.THREAD_METADATA_LOADED;\n}\n\nexport const isLoadMetadataSuccessPayload = (\n  response: ChatEventData,\n): response is LoadThreadMetadataChatEvent =>\n  (response as LoadThreadMetadataChatEvent).type ===\n    AwsResponseEventType.THREAD_METADATA_LOADED &&\n  (response as LoadThreadMetadataChatEvent).data.lastMessage !== undefined;\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { isNil } from '../utils/is';\n\nimport { ThreadRecoveredData } from './ThreadRecoveredData';\n\nexport interface ThreadRecoveredChatEvent extends ChatEventData {\n  data: ThreadRecoveredData;\n}\n\nexport const isRecoverSuccessPayload = (\n  response: ChatEventData,\n): response is ThreadRecoveredChatEvent => {\n  const testResponseData = response.data as ThreadRecoveredData;\n\n  const hasPostbackData = isNil(testResponseData) === false;\n  if (hasPostbackData === false) {\n    return false;\n  }\n\n  const hasMessages = isNil(testResponseData?.messages) === false;\n  if (hasMessages === false) {\n    return false;\n  }\n\n  const isCorrectEventType =\n    response.type === AwsResponseEventType.THREAD_RECOVERED ||\n    response.type === AwsResponseEventType.LIVECHAT_RECOVERED;\n  if (isCorrectEventType === false) {\n    return false;\n  }\n\n  const hasNoError = isNil(response.error);\n  if (hasNoError === false) {\n    return false;\n  }\n\n  const hasThreadId = isNil(testResponseData?.thread) === false;\n  if (hasThreadId === false) {\n    return false;\n  }\n\n  return true;\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface ThreadArchivedEvent extends ChatEventData {\n  type: AwsResponseEventType.THREAD_ARCHIVED;\n}\n\nexport function isThreadArchivedSuccessPayload(\n  response: ChatEventData,\n): response is ThreadArchivedEvent {\n  return (\n    (response as ThreadArchivedEvent).type ===\n    AwsResponseEventType.THREAD_ARCHIVED\n  );\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class LoadMoreMessagesFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RecoverThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/RecoverThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createRecoverThreadPayloadData(\n  threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform,\n): EventPayloadData<RecoverThreadEventData> {\n  const emptyData = {\n    eventType: AwsInputEventType.RECOVER_THREAD,\n    data: {},\n  };\n\n  if (threadIdOnExternalPlatform === undefined) {\n    return emptyData;\n  }\n\n  return {\n    ...emptyData,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SetThreadNameFailedError extends ChatSDKError {}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class ThreadRecoverFailedError extends ChatSDKError {}\n","import { LoadMoreMessagesEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LoadMoreMessages';\nimport { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\nimport { AttachmentUpload } from '@brandembassy/ts-types-chat/dist/message/AttachmentUpload';\nimport { ContactNumber } from '@brandembassy/ts-types-platform/dist/contact/ContactNumber';\nimport { ContactStatus } from '@brandembassy/ts-types-platform/dist/contact/ContactStatus';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { createAttachmentUploadMessageData } from '../attachment/sendAttachments';\nimport { getAccessToken } from '../authorization/accessTokenStorage';\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\nimport { isContactStatusChangedEvent } from '../contact';\nimport { Customer } from '../customer/Customer';\nimport {\n  CustomFieldsMap,\n  CustomFieldsObject,\n  getCustomFieldsArray,\n  removeCustomField,\n  setCustomFields,\n  setCustomFieldsFromArray,\n} from '../customField/CustomFields';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport {\n  ChatCustomEvent,\n  ChatEvent,\n  ChatEventData,\n  ChatEventType,\n} from '../event/ChatEvent';\nimport { IChatEventTarget } from '../event/ChatEventTarget';\nimport {\n  EventListenerFunction,\n  RemoveListenerFunction,\n} from '../event/ListenerFunction';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { createMessageData } from '../message/createMessageData';\nimport { getPostbackMessageContent } from '../message/getPostbackMessageContent';\nimport { getTextMessageContent } from '../message/getTextMessageContent';\nimport {\n  isLoadMoreMessagesEventData,\n  MoreMessagesLoadedEvent,\n} from '../message/loadMoreMessagesEventData';\nimport { createLoadMoreMessagesPayloadData } from '../message/loadMoreMessagesPayload';\nimport { MessageSuccessEventData } from '../message/MessageSuccessEventData';\nimport { sendMessage } from '../message/sendMessage';\nimport { createSendMessagePreviewPayloadData } from '../message/sendMessagePreviewPayload';\nimport { sendOutboundMessage } from '../message/sendOutboundMessage';\nimport { getThirdPartyToken } from '../securedSession/thirdPartyTokenStorage';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { AbortablePromise } from '../utils/AbortablePromise';\nimport { generateId } from '../utils/generateId';\nimport { isEmpty, isUndefined } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { createArchiveThreadEventPayloadData } from './archiveThread';\nimport { ArchiveThreadFailedError } from './ArchiveThreadFailedError';\nimport { assertNonEmptyTextMessageContent } from './assertNonEmptyTextMessageContent';\nimport { GetMetadataFailedError } from './GetMetadataFailedError';\nimport {\n  isLoadMetadataSuccessPayload,\n  LoadThreadMetadataChatEvent,\n} from './isLoadMetadataSuccessPayload';\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { isThreadArchivedSuccessPayload } from './isThreadArchivedSuccessPayload';\nimport { createLastMessageSeenPayloadData } from './lastMessageSeenPayload';\nimport { LoadMoreMessagesFailedError } from './LoadMoreMessagesFailedError';\nimport { createLoadThreadMetadataEventPayloadData } from './metadata';\nimport { createRecoverThreadPayloadData } from './recoverThreadPayload';\nimport { SendMessageOptions } from './SendMessageOptions';\nimport { createSetThreadCustomFieldsPayloadData } from './setThreadCustomFieldsPayload';\nimport { SetThreadNameFailedError } from './SetThreadNameFailedError';\nimport { filterCurrentThreadEventHandler } from './threadEventHandler';\nimport { ThreadRecoveredData } from './ThreadRecoveredData';\nimport { ThreadRecoverFailedError } from './ThreadRecoverFailedError';\nimport { createSendTranscriptPayloadData } from './transcript';\nimport {\n  createStartTypingEventPayloadData,\n  createStopTypingEventPayloadData,\n} from './typingEvents';\nimport {\n  createUpdateThreadPayloadData,\n  isUpdateThreadSuccess,\n} from './updateThread';\n\nexport class Thread {\n  public idOnExternalPlatform: ThreadIdOnExternalPlatform;\n\n  protected _websocketClient: WebSocketClient;\n  protected _exists: boolean = false;\n\n  protected _messageEmitter: IChatEventTarget;\n  protected _typingTimeoutID: ReturnType<typeof setTimeout> | undefined =\n    undefined;\n  protected _isAuthorizationEnabled: boolean = false;\n  protected _customer: Customer | null;\n  protected _customFields: CustomFieldsMap = new Map();\n  private _typingForPreviewTimeoutID: ReturnType<typeof setTimeout> | undefined;\n  private _typingPreviewText: string = '';\n\n  constructor(\n    idOnExternalPlatform: ThreadIdOnExternalPlatform,\n    websocketClient: WebSocketClient,\n    messageEmitter: IChatEventTarget,\n    customer: Customer | null,\n    customFields: CustomFieldsObject = {},\n    isAuthorizationEnabled: boolean = false,\n  ) {\n    this.idOnExternalPlatform = idOnExternalPlatform;\n    this._websocketClient = websocketClient;\n    this._messageEmitter = messageEmitter;\n    this._customer = customer;\n    this._isAuthorizationEnabled = isAuthorizationEnabled;\n\n    setCustomFields(this._customFields, customFields);\n    this._registerEventHandlers();\n  }\n\n  /**\n   * Recover existing chat\n   * @returns AbortablePromise<ThreadRecoveredData>\n   * @throws ThreadRecoverFailedError\n   *  * This exception is thrown when the recover fails or the thread does not exist.\n   */\n  public recover(): AbortablePromise<ThreadRecoveredData> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const response = await sendChatEvent(\n        createRecoverThreadPayloadData(this.idOnExternalPlatform),\n        this._websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(response)) {\n        resolve(response.data);\n      } else {\n        reject(new ThreadRecoverFailedError('Thread not found', response));\n      }\n    });\n  }\n\n  /**\n   * Send message\n   * @param messageData - message data\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error can contain (`error.data`) a response from the backend with details.\n   */\n  public async sendMessage(\n    messageData: SendMessageEventData,\n  ): Promise<MessageSuccessEventData> {\n    assertNonEmptyTextMessageContent(messageData);\n\n    const messageDataWithCustomFields =\n      this._mergeCustomFieldsAndAccessTokenWithMessageData(messageData, false);\n\n    return sendMessage(messageDataWithCustomFields, this._websocketClient);\n  }\n\n  /**\n   * Send text message\n   * @param messageText - text of message\n   * @param options - options\n   */\n  public async sendTextMessage(\n    messageText: string,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    const textMessageContent = getTextMessageContent(messageText);\n    const messageData = createMessageData(\n      textMessageContent,\n      messageId,\n      this.idOnExternalPlatform,\n      browserFingerprint,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send postback message\n   * @param postback - postback\n   * @param messageText - text of message\n   * @param options - options\n   */\n  public async sendPostbackMessage(\n    postback: string,\n    messageText: string,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    const postbackMessageContent = getPostbackMessageContent(\n      postback,\n      messageText,\n    );\n    const messageData = createMessageData(\n      postbackMessageContent,\n      messageId,\n      this.idOnExternalPlatform,\n      browserFingerprint,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send Outbound Message\n   * @param messageData - message data\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error contains (`error.data`) a response from the backend with details.\n   */\n  public async sendOutboundMessage(\n    messageData: SendOutboundEventData,\n  ): Promise<MessageSuccessEventData> {\n    const outboundEventDataWithCustomFields =\n      this._mergeCustomFieldsAndAccessTokenWithMessageData(messageData, true);\n\n    return sendOutboundMessage(\n      outboundEventDataWithCustomFields,\n      this._websocketClient,\n    );\n  }\n\n  /**\n   * Load previous messages\n   * @returns Promise MoreMessagesLoadedEvent | null\n   * @throws LoadMoreMessagesFailedError\n   *  * This exception is thrown when the attempt to load more messages fails.\n   */\n  public async loadMoreMessages(): Promise<MoreMessagesLoadedEvent | null> {\n    const { scrollToken, oldestMessageDatetime } =\n      SDKVariableStorage.THREAD_DATA ?? {};\n\n    if (isEmpty(scrollToken)) {\n      return null;\n    }\n\n    const loadMoreMessagesEventData: LoadMoreMessagesEventData = {\n      scrollToken: String(scrollToken),\n      // @ts-expect-error oldestMessageDatetime is missing in type definition\n      oldestMessageDatetime,\n      thread: { idOnExternalPlatform: this.idOnExternalPlatform },\n    };\n\n    const response = await sendChatEvent(\n      createLoadMoreMessagesPayloadData(loadMoreMessagesEventData),\n      this._websocketClient,\n    );\n\n    if (isLoadMoreMessagesEventData(response)) {\n      return response;\n    }\n\n    throw new LoadMoreMessagesFailedError(\n      'Load more messages failed',\n      response,\n    );\n  }\n\n  /**\n   * Mark all messages in the thread as seen\n   */\n  public async lastMessageSeen(): Promise<ChatEventData> {\n    const payloadData = createLastMessageSeenPayloadData(\n      this.idOnExternalPlatform,\n    );\n\n    return sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  /**\n   * Send attachment\n   *\n   * Raw function to send attachments\n   * @param files - An object of this type is returned by the files' property of the HTML <input> element; this lets you access the list of files selected with the <input type=\"file\"> element.\n   * @param options - options\n   * @throws UploadAttachmentError\n   *  * This exception is thrown when the file upload fails. The `error.data` contains information about allowed file size and types.\n   */\n  public async sendAttachments(\n    files: FileList | Array<File> | Array<AttachmentUpload>,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    if (isUndefined(files) || files.length === 0) {\n      throw new ChatSDKError(\n        'FileList must be provided to sendAttachment method',\n      );\n    }\n\n    const messageData = await createAttachmentUploadMessageData(\n      files,\n      this.idOnExternalPlatform,\n      options,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send start and stop typing events. It sends stop typing event after the timeout. Repeated calls resets this timeout.\n   * @param timeout - The timeout in milliseconds.\n   * @param onSendCallback - Callback to be called after the stop typing event is sent.\n   */\n  public keystroke(timeout = 1000, onSendCallback?: () => void): void {\n    if (!this._typingTimeoutID) {\n      sendChatEvent(\n        createStartTypingEventPayloadData(this.idOnExternalPlatform),\n        this._websocketClient,\n      );\n    }\n\n    clearTimeout(this._typingTimeoutID);\n    this._typingTimeoutID = setTimeout(() => {\n      this._stopTypingCallback(onSendCallback);\n    }, timeout);\n  }\n\n  /**\n   * Manually send the stop typing event and clear the keystroke timeout.\n   */\n  public stopTyping(): void {\n    this._stopTypingCallback();\n  }\n\n  private _stopTypingCallback(onSendCallback?: () => void): void {\n    clearTimeout(this._typingTimeoutID);\n    this._typingTimeoutID = undefined;\n    sendChatEvent(\n      createStopTypingEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n    if (typeof onSendCallback === 'function') {\n      onSendCallback();\n    }\n  }\n\n  /**\n   * Send typing event for message preview after the timeout.\n   * @param currentText - current text\n   * @param timeout - timeout in milliseconds\n   * @returns void\n   *\n   */\n  keystrokeForPreview(currentText: string, timeout = 1250): void {\n    this._typingPreviewText = currentText;\n    if (this._typingForPreviewTimeoutID) {\n      return;\n    }\n\n    this._typingForPreviewTimeoutID = setTimeout(() => {\n      this.stopTypingForPreview();\n    }, timeout);\n  }\n\n  /**\n   * Manually send the stop typing event for message preview and clear the keystroke timeout.\n   * @param shouldSendPreview - should send preview\n   * @returns void\n   *\n   */\n  stopTypingForPreview(shouldSendPreview = true): void {\n    clearTimeout(this._typingForPreviewTimeoutID);\n    this._typingForPreviewTimeoutID = undefined;\n    const currentPreviewText = this._typingPreviewText;\n    this._typingPreviewText = '';\n\n    if (shouldSendPreview === false) {\n      return;\n    }\n    this.sendMessagePreview(currentPreviewText);\n  }\n\n  /**\n   * Get Thread Metadata\n   * @returns response otherwise throw an error response\n   * @throws GetMetadataFailedError\n   *  * This exception is thrown when getting thread metadata failed.\n   */\n  public async getMetadata(): Promise<LoadThreadMetadataChatEvent> {\n    const response = await sendChatEvent(\n      createLoadThreadMetadataEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n\n    if (isLoadMetadataSuccessPayload(response)) {\n      return response;\n    }\n\n    throw new GetMetadataFailedError('Get metadata failed', response);\n  }\n\n  public onThreadEvent(\n    type: ChatEventType,\n    handler: EventListenerFunction,\n  ): RemoveListenerFunction {\n    const filteredEventHandler = filterCurrentThreadEventHandler(\n      this.idOnExternalPlatform,\n      handler,\n    );\n\n    this._messageEmitter.addEventListener(type, filteredEventHandler);\n\n    return () => {\n      this._messageEmitter.removeEventListener(type, filteredEventHandler);\n    };\n  }\n\n  /**\n   * Send current Custom Fields\n   * @param selectedFieldIdents - it will send only custom fields with these IDs, if provided. Otherwise, it will send all custom fields.\n   */\n  public async sendCustomFields(\n    selectedFieldIdents?: Array<CustomField['ident']>,\n  ): Promise<ChatEventData> {\n    const customFieldsArray = getCustomFieldsArray(this._customFields).filter(\n      (customField) => {\n        if (selectedFieldIdents) {\n          return selectedFieldIdents.includes(customField.ident);\n        }\n\n        return true;\n      },\n    );\n\n    const customFieldsData = createSetThreadCustomFieldsPayloadData(\n      customFieldsArray,\n      this.idOnExternalPlatform,\n    );\n\n    return sendChatEvent(customFieldsData, this._websocketClient);\n  }\n\n  /**\n   * Set thread custom fields and send them\n   * @param customFields - custom fields object\n   * @example \\{ ident: 'value' \\}\n   */\n  public async setCustomFields(\n    customFields: CustomFieldsObject,\n  ): Promise<void> {\n    setCustomFields(this._customFields, customFields);\n\n    if (this._exists === false) {\n      // let customFields be sent by the first message\n      return;\n    }\n\n    await this.sendCustomFields(Object.keys(customFields));\n  }\n\n  /**\n   * Remove thread custom fields\n   * @param ident - custom field ident\n   */\n  public removeCustomField(ident: CustomField['ident']): void {\n    removeCustomField(this._customFields, ident);\n  }\n\n  /**\n   * Set thread custom field\n   * @param ident - custom field name\n   * @param value - custom field value\n   */\n  public setCustomField(\n    ident: CustomField['ident'],\n    value: CustomField['value'],\n  ): Promise<void> {\n    return this.setCustomFields({ [ident]: value });\n  }\n\n  /**\n   * Set thread as archived\n   * @returns Promise true\n   * @throws ArchiveThreadFailedError\n   *  * This exception is thrown when the archive thread failed.\n   */\n  public async archive(): Promise<true> {\n    const response = await sendChatEvent(\n      createArchiveThreadEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n\n    if (isThreadArchivedSuccessPayload(response)) {\n      return true;\n    }\n\n    throw new ArchiveThreadFailedError('Archive Thread failed', response);\n  }\n\n  /**\n   * Set thread name\n   * @param name - New name of the Thread\n   * @returns Promise true\n   * @throws SetThreadNameFailedError\n   *  * This exception is thrown when the set thread name failed.\n   */\n  public async setName(name: string): Promise<true> {\n    const updateThreadData = createUpdateThreadPayloadData(\n      this.idOnExternalPlatform,\n      name,\n    );\n\n    const response = await sendChatEvent(\n      updateThreadData,\n      this._websocketClient,\n    );\n\n    if (isUpdateThreadSuccess(response)) {\n      return true;\n    }\n\n    throw new SetThreadNameFailedError('Set Thread name failed', response);\n  }\n\n  /**\n   * Send message preview\n   * @param text - text\n   */\n  public async sendMessagePreview(text: string): Promise<void> {\n    const payloadData = createSendMessagePreviewPayloadData(\n      this.idOnExternalPlatform,\n      text,\n    );\n\n    await sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  /**\n   * Send conversation transcript to email\n   */\n  public async sendTranscript(\n    contactNumber: ContactNumber,\n    email: string,\n  ): Promise<ChatEventData> {\n    const payloadData = createSendTranscriptPayloadData(contactNumber, email);\n\n    return sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  protected _setThreadAndCustomerExists(): void {\n    this._exists = true;\n    this._customer?.setExists(true);\n  }\n\n  protected _clearCustomFieldsOnContactStatusChangedToClosed(\n    event: ChatCustomEvent,\n  ): void {\n    const eventDetail = event.detail;\n\n    if (!isContactStatusChangedEvent(eventDetail)) {\n      return;\n    }\n\n    if (eventDetail.data.case.status === ContactStatus.CLOSED) {\n      // Delete custom fields after contact closure to prevent sending custom fields from previous contact.\n      this._customFields.clear();\n      this._exists = false;\n    }\n  }\n\n  private _mergeCustomFieldsWithMessageData<\n    T extends SendMessageEventData | SendOutboundEventData,\n  >(messageData: T, isOutbound: boolean): T {\n    if (this._exists) {\n      // Do not send custom fields with a message to an existing contact.\n      // They will be sent in a separate event.\n      return {\n        ...messageData,\n        consumer: { customFields: [] },\n        consumerContact: { customFields: [] },\n      };\n    }\n\n    // Update Thread (Contact) custom fields\n    setCustomFieldsFromArray(\n      this._customFields,\n      messageData.consumerContact.customFields,\n    );\n\n    const consumerContact = {\n      customFields: getCustomFieldsArray(this._customFields),\n    };\n\n    // Update Customer custom fields\n    let consumer;\n    if (!isOutbound) {\n      this._customer?.setCustomFieldsFromArray(\n        (messageData as SendMessageEventData).consumer?.customFields ?? [],\n      );\n      consumer = {\n        customFields: this._customer?.getCustomFieldsArray() ?? [],\n      };\n    }\n\n    return {\n      ...messageData,\n      consumer,\n      consumerContact,\n    };\n  }\n\n  private _mergeAccessTokenWithMessageData<\n    T extends SendMessageEventData | SendOutboundEventData,\n  >(messageData: T): T {\n    // Access token\n    let accessToken;\n\n    const storedThirdPartyToken = getThirdPartyToken();\n    const storedAccessToken = getAccessToken();\n\n    if (\n      this._isAuthorizationEnabled &&\n      (storedThirdPartyToken || storedAccessToken)\n    ) {\n      accessToken = {\n        token: storedThirdPartyToken?.access_token ?? storedAccessToken?.token,\n      };\n    }\n\n    return {\n      ...messageData,\n      accessToken,\n    };\n  }\n\n  private _mergeCustomFieldsAndAccessTokenWithMessageData<\n    T extends SendMessageEventData | SendOutboundEventData,\n  >(messageData: T, isOutbound: boolean): T {\n    const messageDataWithCustomFields = this._mergeCustomFieldsWithMessageData(\n      messageData,\n      isOutbound,\n    );\n\n    return this._mergeAccessTokenWithMessageData(messageDataWithCustomFields);\n  }\n\n  private _registerEventHandlers() {\n    this.onThreadEvent(ChatEvent.CASE_CREATED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.CONTACT_CREATED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.THREAD_RECOVERED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.CONTACT_STATUS_CHANGED, (event) =>\n      this._clearCustomFieldsOnContactStatusChangedToClosed(event),\n    );\n  }\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { SendMessageFailedError } from '../message';\nimport { isEmpty } from '../utils/is';\n\nexport function assertNonEmptyTextMessageContent(\n  messageData: SendMessageEventData,\n): void {\n  if (messageData.messageContent.type !== MessageType.TEXT) {\n    return;\n  }\n\n  if (messageData.attachments.length > 0) {\n    return;\n  }\n\n  if (isEmpty(messageData.messageContent.payload.text) === false) {\n    return;\n  }\n\n  throw new SendMessageFailedError(\n    'Message content cannot be empty for text message',\n  );\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendMessagePayloadData } from './sendMessagePayload';\n\nexport const sendMessage = async (\n  messageData: SendMessageEventData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const sendMessagePayloadData = createSendMessagePayloadData(messageData);\n\n  const response = await sendChatEvent(sendMessagePayloadData, websocketClient);\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send message failed', response);\n};\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendMessagePayloadData = (\n  eventData: SendMessageEventData,\n): EventPayloadData<SendMessageEventData> => ({\n  eventType: AwsInputEventType.SEND_MESSAGE,\n  data: eventData,\n});\n","import { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { MessageContent } from './createMessageData';\n\nexport function getTextMessageContent(messageText: string): MessageContent {\n  return {\n    payload: {\n      text: messageText,\n    },\n    type: MessageType.TEXT,\n  };\n}\n","import { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { MessageContent } from './createMessageData';\n\nexport function getPostbackMessageContent(\n  postback: string,\n  messageText: string,\n): MessageContent {\n  return {\n    payload: {\n      text: messageText,\n      postback, // Leaving this here for backwards compatibility\n    },\n    postback,\n    type: MessageType.TEXT, // MessageType.POSTBACK is deprecated\n  };\n}\n","import { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendOutboundMessagePayloadData } from './sendOutboundMessagePayload';\n\nexport const sendOutboundMessage = async (\n  messageData: SendOutboundEventData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const sendOutboundMessagePayloadData =\n    createSendOutboundMessagePayloadData(messageData);\n\n  const response = await sendChatEvent(\n    sendOutboundMessagePayloadData,\n    websocketClient,\n  );\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send Outbound message failed', response);\n};\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendOutboundMessagePayloadData = (\n  eventData: SendOutboundEventData,\n): EventPayloadData<SendOutboundEventData> => ({\n  eventType: AwsInputEventType.SEND_OUTBOUND,\n  data: eventData,\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { MessageSeenByConsumerEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/MessageSeenByConsumer';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createLastMessageSeenPayloadData(\n  threadIdOnExternalPlatform: string,\n): EventPayloadData<MessageSeenByConsumerEventData> {\n  return {\n    eventType: AwsInputEventType.MESSAGE_SEEN,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SenderTypingEndedEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SenderTypingEnded';\nimport { SenderTypingStartedEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SenderTypingStarted';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createStartTypingEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SenderTypingStartedEventData> {\n  return {\n    eventType: AwsInputEventType.SENDER_TYPING_STARTED,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n\nexport function createStopTypingEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SenderTypingEndedEventData> {\n  return {\n    eventType: AwsInputEventType.SENDER_TYPING_ENDED,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ArchiveThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/ArchiveThread';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createLoadThreadMetadataEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<ArchiveThreadEventData> {\n  return {\n    eventType: AwsInputEventType.LOAD_THREAD_METADATA,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { ChatCustomEvent } from '../event/ChatEvent';\nimport { EventListenerFunction } from '../event/ListenerFunction';\n\ninterface DataWithThread {\n  case?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  message?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  messagePreview?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  thread?: {\n    idOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n}\n\nconst getThreadId = (data: unknown): ThreadIdOnExternalPlatform | undefined => {\n  const dataWithThread = data as DataWithThread;\n\n  return (\n    dataWithThread?.thread?.idOnExternalPlatform ??\n    dataWithThread?.case?.threadIdOnExternalPlatform ??\n    dataWithThread?.message?.threadIdOnExternalPlatform ??\n    dataWithThread?.messagePreview?.threadIdOnExternalPlatform\n  );\n};\n\nexport const filterCurrentThreadEventHandler =\n  (threadId: ThreadIdOnExternalPlatform, handler: EventListenerFunction) =>\n  (event: ChatCustomEvent): void => {\n    const eventData = event.detail.data;\n\n    const eventThreadId = getThreadId(eventData);\n\n    if (eventThreadId === threadId) {\n      handler(event);\n    }\n  };\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SetConsumerContactCustomFieldsEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SetConsumerContactCustomFields';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createSetThreadCustomFieldsPayloadData(\n  customFields: Array<CustomField>,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SetConsumerContactCustomFieldsEventData> {\n  return {\n    eventType: AwsInputEventType.SET_CONSUMER_CONTACT_CUSTOM_FIELD,\n    data: {\n      customFields,\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ArchiveThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/ArchiveThread';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createArchiveThreadEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<ArchiveThreadEventData> {\n  return {\n    eventType: AwsInputEventType.ARCHIVE_THREAD,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { UpdateThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/UpdateThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { isUndefined } from '../utils/is';\n\nexport function createUpdateThreadPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  threadName: string,\n): EventPayloadData<UpdateThreadEventData> {\n  return {\n    eventType: AwsInputEventType.UPDATE_THREAD,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n        threadName,\n      },\n    },\n  };\n}\n\nexport function isUpdateThreadSuccess(response: ChatEventData): boolean {\n  return isUndefined(response.error);\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendMessagePreviewEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessagePreview';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendMessagePreviewPayloadData = (\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  text: string,\n): EventPayloadData<SendMessagePreviewEventData> => ({\n  eventType: AwsInputEventType.SEND_MESSAGE_PREVIEW,\n  data: {\n    thread: {\n      idOnExternalPlatform: threadIdOnExternalPlatform,\n    },\n    messageContent: {\n      payload: { text },\n      type: MessageType.TEXT,\n    },\n  },\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nimport { ContactNumber } from '@brandembassy/ts-types-platform/dist/contact/ContactNumber';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendTranscriptPayloadData = (\n  contactNumber: ContactNumber,\n  email: string,\n): EventPayloadData<AwsInputEventData> => ({\n  eventType: AwsInputEventType.SEND_TRANSCRIPT,\n  data: {\n    consumerContact: {\n      id: contactNumber,\n    },\n    consumerRecipients: [\n      {\n        idOnExternalPlatform: email,\n      },\n    ],\n  },\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RecoverThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/RecoverThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../../sockets/EventPayload';\n\nexport function createRecoverLivechatThreadPayloadData(\n  threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform,\n): EventPayloadData<RecoverThreadEventData> {\n  const emptyData = {\n    eventType: AwsInputEventType.RECOVER_LIVECHAT,\n    data: {},\n  };\n\n  if (threadIdOnExternalPlatform === undefined) {\n    return emptyData;\n  }\n\n  return {\n    ...emptyData,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { LoadMoreMessagesEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LoadMoreMessages';\nimport { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { Customer } from '../../customer/Customer';\nimport { CustomFieldsObject } from '../../customField/CustomFields';\nimport { ChatSDKError } from '../../error/ChatSDKError';\nimport { ChatCustomEvent, ChatEvent } from '../../event/ChatEvent';\nimport { IChatEventTarget } from '../../event/ChatEventTarget';\nimport { sendChatEvent } from '../../event/sendChatEvent';\nimport {\n  isLoadMoreMessagesEventData,\n  MoreMessagesLoadedEvent,\n} from '../../message/loadMoreMessagesEventData';\nimport { createLoadMoreMessagesPayloadData } from '../../message/loadMoreMessagesPayload';\nimport { MessageSuccessEventData } from '../../message/MessageSuccessEventData';\nimport { WebSocketClient } from '../../sockets/WebSocketClient';\nimport { AbortablePromise } from '../../utils/AbortablePromise';\nimport { isEmpty, isUndefined } from '../../utils/is';\nimport { SDKVariableStorage } from '../../variables/VariableStorage';\nimport { isRecoverSuccessPayload } from '../isRecoverSuccessPayload';\nimport { LoadMoreMessagesFailedError } from '../LoadMoreMessagesFailedError';\nimport { Thread } from '../Thread';\nimport { ThreadRecoveredData } from '../ThreadRecoveredData';\nimport { ThreadRecoverFailedError } from '../ThreadRecoverFailedError';\n\nimport { createEndThreadPayloadData } from './createEndThreadPayloadData';\nimport { createRecoverLivechatThreadPayloadData } from './recoverLivechatThreadPayload';\n\nexport class LivechatThread extends Thread {\n  protected _isInitialized: boolean = false;\n  protected _canSendMessage: boolean = true;\n\n  constructor(\n    idOnExternalPlatform: ThreadIdOnExternalPlatform,\n    websocketClient: WebSocketClient,\n    messageEmitter: IChatEventTarget,\n    customer: Customer | null,\n    customFields: CustomFieldsObject = {},\n    isAuthorizationEnabled: boolean = false,\n  ) {\n    super(\n      idOnExternalPlatform,\n      websocketClient,\n      messageEmitter,\n      customer,\n      customFields,\n      isAuthorizationEnabled,\n    );\n\n    this._registerLivechatEventHandlers();\n  }\n\n  /**\n   * Recover existing live chat\n   * @returns AbortablePromise ThreadRecoveredData\n   * @throws ThreadRecoverFailedError\n   *  * This exception is thrown when the recover fails or the thread does not exist.\n   */\n  public override recover(): AbortablePromise<ThreadRecoveredData> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const response = await sendChatEvent(\n        createRecoverLivechatThreadPayloadData(this.idOnExternalPlatform),\n        this._websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(response)) {\n        resolve(response.data);\n      } else {\n        reject(new ThreadRecoverFailedError('Thread not found', response));\n      }\n    });\n  }\n\n  public override async sendMessage(\n    messageData: SendMessageEventData,\n  ): Promise<MessageSuccessEventData> {\n    if (this._canSendMessage === false) {\n      throw new ChatSDKError('Cannot send more messages to Contact');\n    }\n\n    return super.sendMessage(messageData);\n  }\n\n  /**\n   * Start livechat\n   * @param initialMessageText - initial message text\n   */\n  public async startChat(\n    initialMessageText = 'Begin conversation',\n  ): Promise<MessageSuccessEventData | void> {\n    if (this._isInitialized) {\n      throw new ChatSDKError('Chat is already initialized');\n    }\n\n    try {\n      const result = await this.sendTextMessage(initialMessageText);\n      this._isInitialized = true;\n\n      return result;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        throw new ChatSDKError(\n          `Sending initial message failed because of (${error.message})`,\n        );\n      }\n\n      return;\n    }\n  }\n\n  public async endChat(): Promise<void> {\n    const threadData = SDKVariableStorage.THREAD_DATA ?? {};\n    const contactId = threadData?.contactId;\n\n    if (isUndefined(contactId)) {\n      throw new ChatSDKError(\n        'Cannot end Chat because of missing ContactId in the storage',\n      );\n    }\n\n    await sendChatEvent(\n      createEndThreadPayloadData(this.idOnExternalPlatform, contactId),\n      this._websocketClient,\n    );\n\n    return;\n  }\n\n  /**\n   * Load previous messages\n   * @returns Promise MoreMessagesLoadedEvent | null\n   * @throws LoadMoreMessagesFailedError\n   *  * This exception is thrown when the attempt to load more messages fails.\n   */\n  public async loadMoreMessages(): Promise<MoreMessagesLoadedEvent | null> {\n    const { scrollToken, oldestMessageDatetime, contactId } =\n      SDKVariableStorage.THREAD_DATA ?? {};\n\n    if (isEmpty(scrollToken) || isEmpty(contactId)) {\n      return null;\n    }\n\n    const loadMoreMessagesEventData: LoadMoreMessagesEventData = {\n      scrollToken: String(scrollToken),\n      // @ts-expect-error oldestMessageDatetime is missing in type definition\n      oldestMessageDatetime,\n      thread: { idOnExternalPlatform: this.idOnExternalPlatform },\n      // If a contactId is provided, the search will return messages only for this contact\n      contact: {\n        id: contactId,\n      },\n    };\n\n    const response = await sendChatEvent(\n      createLoadMoreMessagesPayloadData(loadMoreMessagesEventData),\n      this._websocketClient,\n    );\n\n    if (isLoadMoreMessagesEventData(response)) {\n      return response;\n    }\n\n    throw new LoadMoreMessagesFailedError(\n      'Load more messages failed',\n      response,\n    );\n  }\n\n  private _registerLivechatEventHandlers() {\n    this.onThreadEvent(\n      ChatEvent.LIVECHAT_RECOVERED,\n      (event: ChatCustomEvent) => {\n        if (!isRecoverSuccessPayload(event.detail)) {\n          return;\n        }\n\n        this._setThreadAndCustomerExists();\n      },\n    );\n  }\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { EndContactEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/EndContact';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../../sockets/EventPayload';\n\nexport function createEndThreadPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  contactId: CaseId,\n): EventPayloadData<EndContactEventData> {\n  return {\n    eventType: AwsInputEventType.END_CONTACT,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n      contact: { id: contactId },\n    },\n  };\n}\n","import { ThreadListFetchedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadListFetched';\n\nimport { isNull } from '../utils/is';\n\nexport const isThreadListFetchedPostbackData = (\n  data: unknown,\n): data is ThreadListFetchedPostbackData => {\n  if (isNull(data)) {\n    return false;\n  }\n\n  return 'threads' in (data as ThreadListFetchedPostbackData);\n};\n","import { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport function storeContactId(contactId: CaseId): void {\n  const originalThreadData = SDKVariableStorage.THREAD_DATA ?? {};\n\n  SDKVariableStorage.THREAD_DATA = {\n    ...originalThreadData,\n    contactId,\n  };\n}\n","import { isContactCreatedEvent } from '../contact/isContactCreatedEvent';\nimport { ChatEventData } from '../event/ChatEvent';\n\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { storeContactId } from './storeContactId';\n\nexport function storeContactIdMiddleware(\n  eventData: ChatEventData,\n): ChatEventData {\n  if (isContactCreatedEvent(eventData)) {\n    const contactId = eventData.data.case.id;\n\n    storeContactId(contactId);\n  }\n\n  if (isRecoverSuccessPayload(eventData)) {\n    const contactId = eventData.data.contact.id;\n\n    storeContactId(contactId);\n  }\n\n  return eventData;\n}\n","import { Message } from '../message';\nimport { isUndefined } from '../utils/is';\nimport { lastItemInArray } from '../utils/last';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nexport interface ScrollData {\n  messages: Array<Message>;\n  scrollToken: string;\n}\n\nexport function storeThreadScrollData(scrollData: ScrollData): void {\n  const oldestMessageDatetime = lastItemInArray(scrollData.messages)?.createdAt;\n\n  const oldThreadData = SDKVariableStorage.THREAD_DATA ?? {};\n\n  SDKVariableStorage.THREAD_DATA = {\n    ...oldThreadData,\n    scrollToken: scrollData.scrollToken,\n    oldestMessageDatetime: isUndefined(oldestMessageDatetime)\n      ? ''\n      : oldestMessageDatetime,\n  };\n}\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import { ChatEventData } from '../event/ChatEvent';\nimport { isLoadMoreMessagesEventData } from '../message/loadMoreMessagesEventData';\n\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { storeThreadScrollData } from './storeThreadScrollData';\n\nexport function storeThreadScrollDataMiddleware(\n  eventData: ChatEventData,\n): ChatEventData {\n  if (isRecoverSuccessPayload(eventData)) {\n    const { messages, messagesScrollToken } = eventData.data;\n\n    storeThreadScrollData({\n      messages,\n      scrollToken: messagesScrollToken,\n    });\n  }\n\n  if (isLoadMoreMessagesEventData(eventData)) {\n    const { scrollToken, messages } = eventData.data;\n\n    storeThreadScrollData({ scrollToken, messages });\n  }\n\n  return eventData;\n}\n","export function assertNonNullable<T>(\n  value: T,\n): asserts value is NonNullable<T> {\n  if (typeof value === 'undefined' || value === null) {\n    throw Error(`Expected non-nullish value, got ${value}`);\n  }\n}\n\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function assertIsCallable<T extends (...args: Array<any>) => any>(\n  value: T,\n): asserts value is T {\n  if (typeof value !== 'function') {\n    throw Error(`Expected a callable function, got ${value}`);\n  }\n}\n","import { createQueryParametersAsString } from '@brandembassy/be-javascript-utils/dist/query/queryParameters';\nimport { WebSocketClientEvent } from '@brandembassy/push-updates-sdk';\nimport { AuthorizationToken } from '@brandembassy/ts-types-chat/dist/authorization/AuthorizationToken';\nimport { ConsumerAuthorizationSuccessPayloadData } from '@brandembassy/ts-types-chat/dist/authorization/ConsumerAuthorizationSuccessPayloadData';\nimport { AwsChatWindowEventActionRoute } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ChannelInfo } from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nimport { BrowserFingerprint } from '@brandembassy/ts-types-chat/dist/user/BrowserFingerprint';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\nimport { Thread as ThreadView } from '@brandembassy/ts-types-platform/dist/thread/Thread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\nimport { VisitId } from '@brandembassy/ts-types-platform/dist/visit/visitId';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport {\n  getAccessToken,\n  resetAccessToken,\n  setAccessToken,\n} from './authorization/accessTokenStorage';\nimport { AuthorizationError } from './authorization/AuthorizationError';\nimport { createAuthorizationPayloadData } from './authorization/authorizationPayloadData';\nimport { authorizationReconnect } from './authorization/authorizationReconnect';\nimport { createRefreshTokenPayload } from './authorization/createRefreshTokenPayload';\nimport { CustomerReconnectSuccessPayloadData } from './authorization/CustomerReconnectSuccessPayloadData';\nimport { getAuthorizationTokenForUrl } from './authorization/getAuthorizationTokenForUrl';\nimport { handleRefreshToken } from './authorization/handleRefreshToken';\nimport { isAuthSuccessEvent } from './authorization/isAuthSuccessEvent';\nimport { isIpAddressBlockedError } from './authorization/isIpAddressBlockedError';\nimport { isTokenRefreshedSuccessResponse } from './authorization/isTokenRefreshedSuccessResponse';\nimport { getBrowserLanguage } from './browserFingerprint/getBrowserFingerprint';\nimport {\n  ChannelAvailabilityResponse,\n  fetchChannelAvailability,\n} from './channel/fetchChannelAvailability';\nimport { fetchChannelInfo } from './channel/fetchChannelInfo';\nimport { handleBasicChannelInfo } from './channel/handleBasicChannelInfo';\nimport { type ChatSDKOptions } from './ChatSDKOptions';\nimport { Customer, setCustomerIdentity } from './customer/Customer';\nimport { CustomerInstance } from './customer/CustomerInstance';\nimport { isCustomerIdentityIdValid } from './customer/isCustomerIdentityIdValid';\nimport { setCustomerIdFromOptions } from './customer/setCustomerIdFromOptions';\nimport {\n  CustomFieldsMap,\n  CustomFieldsObject,\n  getCustomFields,\n  setCustomFieldsFromArray,\n} from './customField/CustomFields';\nimport { buildEnvironmentEndpoints, EnvironmentName } from './env/Environments';\nimport { setEnvironmentEndpoints } from './env/setEnvironmentEndpoints';\nimport { CHAT_SDK_VERSION } from './env/version';\nimport { ChatSDKError } from './error/ChatSDKError';\nimport { ERROR_CANNOT_FETCH_TRANSACTION_TOKEN } from './error/errorMessages';\nimport { IpAddressBlockedError } from './error/IpAddressBlockedError';\nimport { ChatCustomEvent, ChatEvent, ChatEventType } from './event/ChatEvent';\nimport { ChatEventMiddleware } from './event/ChatEventMiddleware';\nimport { ChatEventTarget, IChatEventTarget } from './event/ChatEventTarget';\nimport { RemoveListenerFunction } from './event/ListenerFunction';\nimport { chatEventMapper } from './event/middleware/ChatEventMapper';\nimport { sdkVersionCheck } from './event/middleware/sdkVersionCheck';\nimport { sendChatEvent } from './event/sendChatEvent';\nimport { initializeSdkVariables } from './initializeSdkVariables';\nimport { MessageSuccessEventData } from './message/MessageSuccessEventData';\nimport {\n  OfflineMessageData,\n  sendOfflineMessage,\n} from './message/sendOfflineMessage';\nimport { getEventData } from './request/getEventData';\nimport { makeRequest } from './request/makeRequest';\nimport {\n  onMessageHandler,\n  parseWsMessageEvent,\n} from './request/messageHandler';\nimport { clearCachedTransactionToken } from './securedSession/cachedTransactionToken';\nimport {\n  getSecuredSessionType,\n  isSecureSessions,\n  shouldHandleCustomerIdForSecureSessions,\n} from './securedSession/getSecuredSessionType';\nimport { getTransactionToken } from './securedSession/getTransactionToken';\nimport { handleNewThirdPartyToken } from './securedSession/handleNewThirdPartyToken';\nimport { SecureSessions } from './securedSession/SecureSessionsType';\nimport { resetThirdPartyToken } from './securedSession/thirdPartyTokenStorage';\nimport { createEvent, createEventPayload } from './sockets/EventPayload';\nimport { WebSocketClient } from './sockets/WebSocketClient';\nimport { LivechatThread, Thread, ThreadRecoverFailedError } from './thread';\nimport {\n  isRecoverSuccessPayload,\n  ThreadRecoveredChatEvent,\n} from './thread/isRecoverSuccessPayload';\nimport { isThreadListFetchedPostbackData } from './thread/isThreadListFetchedPostbackData';\nimport { createRecoverLivechatThreadPayloadData } from './thread/livechatThread/recoverLivechatThreadPayload';\nimport { createRecoverThreadPayloadData } from './thread/recoverThreadPayload';\nimport { storeContactIdMiddleware } from './thread/storeContactIdMiddleware';\nimport { storeThreadScrollDataMiddleware } from './thread/storeThreadScrollDataMiddleware';\nimport { AbortablePromise } from './utils/AbortablePromise';\nimport { assertIsCallable, assertNonNullable } from './utils/assert';\nimport { generateId } from './utils/generateId';\nimport { getBrandIdAndChannelId } from './utils/getBrandIdAndChannelId';\nimport { getPromiseWithResolvers } from './utils/getPromiseWithResolvers';\nimport { isEmpty, isNil, isNull, isUndefined } from './utils/is';\nimport { SDKVariableStorage } from './variables/VariableStorage';\n\nexport class ChatSdk {\n  onError?: (error: Error) => void;\n  onRawEvent?: (event: ChatCustomEvent) => void;\n  public isLivechat: boolean | undefined;\n  public channelId: ChannelId = '';\n\n  #customer: Customer;\n  readonly #customerImage: string | undefined;\n  readonly #customerName: string | undefined;\n  readonly #customerId: CustomerIdentityIdOnExternalPlatform | undefined;\n  #isAuthorizationEnabled: boolean | undefined;\n  #websocketClient: WebSocketClient | null = null;\n\n  readonly #contactCustomFieldsQueue: CustomFieldsMap = new Map();\n  readonly #threadCache: Map<\n    ThreadIdOnExternalPlatform,\n    Thread | LivechatThread\n  > = new Map();\n  readonly #incomingChatEventMiddleware = new ChatEventMiddleware();\n  readonly #messageEmitter: IChatEventTarget;\n  readonly #ready = getPromiseWithResolvers<void>();\n\n  constructor(options: ChatSDKOptions) {\n    if (options === undefined) {\n      throw new ChatSDKError(\n        'No options was provided for initialization of ChatSdk',\n      );\n    }\n\n    this.#customerImage = options.customerImage;\n    this.#customerName = options.customerName;\n    this.#customerId = options.customerId;\n\n    initializeSdkVariables(options);\n\n    this.#customer = CustomerInstance.getInstance();\n\n    if (typeof options.customerId !== 'undefined') {\n      setCustomerIdFromOptions(options.customerId);\n    }\n\n    if (options.cacheStorage) {\n      assertIsCallable(options.cacheStorage.getItem);\n      assertIsCallable(options.cacheStorage.setItem);\n      assertIsCallable(options.cacheStorage.removeItem);\n      SDKVariableStorage.CACHE_STORAGE = options.cacheStorage;\n    }\n\n    const { brandId, channelId } = getBrandIdAndChannelId();\n\n    this.onError = options.onError;\n    this.onRawEvent = options.onRawEvent;\n\n    // Register middleware for incoming chat events\n    this.#incomingChatEventMiddleware.register(chatEventMapper);\n    this.#incomingChatEventMiddleware.register(sdkVersionCheck);\n    this.#incomingChatEventMiddleware.register(storeThreadScrollDataMiddleware);\n    this.#incomingChatEventMiddleware.register(storeContactIdMiddleware);\n\n    this.#messageEmitter = new ChatEventTarget();\n\n    try {\n      if (isNaN(brandId)) {\n        throw new Error('Missing BrandID');\n      }\n      if (channelId === undefined) {\n        throw new Error('Missing ChannelId');\n      }\n      if (options.customerId === undefined && !isSecureSessions()) {\n        throw new Error('Missing CustomerId');\n      }\n\n      this.channelId = channelId;\n      this.isLivechat = options.isLivechat;\n      this.#isAuthorizationEnabled =\n        getSecuredSessionType() === SecureSessions.THIRD_PARTY ||\n        options.isAuthorizationEnabled;\n\n      this.#initEnvironment(options);\n    } catch (error: unknown) {\n      this.#onErrorHandler(error);\n    }\n  }\n\n  /**\n   * Initiate a WebSocket connection\n   * @param authorizationCode - authorization code\n   * @returns Promise<boolean> - true if the connection was created, false if the connection already exists\n   * @throws ChatSDKError\n   */\n  public async connect(authorizationCode?: string): Promise<boolean> {\n    if (authorizationCode) {\n      SDKVariableStorage.AUTHORIZATION_CODE = authorizationCode;\n    }\n    // Do not create a new connection if there is already one\n    if (this.#websocketClient !== null) {\n      return false;\n    }\n    await this.#createConnection();\n\n    if (isSecureSessions()) {\n      await this.ready();\n    }\n\n    // Init Customer instance after the websocketClient is initialized\n    if (this.#customerId !== undefined) {\n      this.#customer.setId(this.#customerId);\n    }\n\n    if (this.#customerName !== undefined) {\n      this.#customer.setName(this.#customerName);\n    }\n\n    if (this.#customerImage !== undefined) {\n      this.#customer.setImage(this.#customerImage);\n    }\n\n    if (this.#websocketClient !== null) {\n      this.#customer.setWebsocketClient(this.#websocketClient);\n    }\n\n    // Mark the instance as ready (if not already)\n    this.#ready.resolve();\n\n    return true;\n  }\n\n  public async ready(): Promise<void> {\n    return this.#ready.promise;\n  }\n\n  #onErrorHandler(error: unknown): void {\n    const sdkError =\n      error instanceof ChatSDKError ? error : new ChatSDKError(error);\n\n    if (typeof this.onError === 'function') {\n      this.onError(sdkError);\n\n      return;\n    }\n\n    throw sdkError;\n  }\n\n  /**\n   * Get channel info\n   * Returns channel info like feature toggle status, translations, file upload restrictions, theme color settings etc.\n   * @returns ChannelInfo\n   * @throws ChatSDKError\n   */\n  public async getChannelInfo(): Promise<ChannelInfo> {\n    return fetchChannelInfo(\n      SDKVariableStorage.BRAND_ID as BrandId,\n      SDKVariableStorage.CHANNEL_ID as ChannelId,\n      SDKVariableStorage.LANGUAGE ?? getBrowserLanguage(),\n      SDKVariableStorage.ENDPOINT_CHAT as string,\n      SDKVariableStorage.REQUEST_METADATA?.httpHeaders || {},\n    );\n  }\n\n  /**\n   * Get channel availability\n   * Returns channel availability Online/Offline\n   * @returns ChannelAvailabilityResponse\n   * @throws ChatSDKError\n   */\n  public async getChannelAvailability(): Promise<ChannelAvailabilityResponse> {\n    return fetchChannelAvailability(\n      SDKVariableStorage.BRAND_ID as BrandId,\n      SDKVariableStorage.CHANNEL_ID as ChannelId,\n      SDKVariableStorage.ENDPOINT_CHAT as string,\n      SDKVariableStorage.REQUEST_METADATA?.httpHeaders || {},\n      SDKVariableStorage.APP_NAME,\n    );\n  }\n\n  /**\n   * Send Authorization Event\n   * @deprecated - use Secured Session flow instead (SDK option `securedSession` and {@link ChatSdk.connect})\n   * @param authorizationCode - authorization code\n   * @param visitorId - visitor id\n   * @param browserFingerprint - BrowserFingerprint object, use getBrowserFingerprint helper function to create it\n   * @throws AuthorizationError\n   *  * This exception is thrown when the authorization or refresh token fails\n   */\n  public async authorize(\n    authorizationCode?: string,\n    visitorId?: VisitorId,\n    browserFingerprint?: BrowserFingerprint,\n  ): Promise<\n    | ConsumerAuthorizationSuccessPayloadData\n    | CustomerReconnectSuccessPayloadData\n  > {\n    await this.ready(); // Wait for the instance to be ready\n\n    const accessToken = getAccessToken();\n\n    // Reconnect first\n    if (accessToken !== null) {\n      try {\n        const reconnectResponse = await authorizationReconnect(\n          this.#websocketClient,\n          this.#sendRefreshTokenEvent,\n          accessToken,\n          visitorId,\n        );\n\n        return reconnectResponse;\n      } catch (error) {\n        // invalid token, continue with authorization\n      }\n    }\n\n    const basicChannelInfoRequest = handleBasicChannelInfo(\n      this.#isAuthorizationEnabled,\n      this.isLivechat,\n    );\n\n    // Authorization\n    const authorizationPayloadData = createAuthorizationPayloadData(\n      authorizationCode ?? SDKVariableStorage.AUTHORIZATION_CODE ?? null,\n      visitorId,\n      browserFingerprint,\n    );\n\n    const authEvent = createEvent(\n      createEventPayload(authorizationPayloadData),\n      generateId(),\n      AwsChatWindowEventActionRoute.REGISTER,\n    );\n\n    const authorizationRequest = makeRequest(authEvent, this.#websocketClient);\n\n    const [authResponse, basicChannelInfo] = await Promise.all([\n      authorizationRequest,\n      basicChannelInfoRequest,\n    ]);\n\n    if (!isAuthSuccessEvent(authResponse)) {\n      this.#websocketClient?.disconnect();\n\n      throw new AuthorizationError('Authorization failed', authResponse.error);\n    }\n\n    // Auth successful - Use the response data\n    const { consumerIdentity, customer, contact } = authResponse.data;\n\n    // Setup Customer Identity and Customer Custom Fields\n    const customerId = consumerIdentity?.idOnExternalPlatform;\n    if (!isCustomerIdentityIdValid(customerId)) {\n      this.#websocketClient?.disconnect();\n\n      throw new ChatSDKError('Invalid customer identity');\n    }\n\n    setCustomerIdentity(this.#customer, consumerIdentity);\n\n    if (customer?.customFields) {\n      this.#customer.setCustomFieldsFromArray(customer.customFields);\n    }\n\n    // Queue Contact Custom Fields from the response\n    if (contact?.customFields) {\n      setCustomFieldsFromArray(\n        this.#contactCustomFieldsQueue,\n        contact.customFields,\n      );\n    }\n\n    // Set up the thread settings\n    this.#isAuthorizationEnabled = basicChannelInfo.isAuthorizationEnabled;\n    this.isLivechat = basicChannelInfo.isLivechat;\n\n    // Set up the access token and its refresh\n    if (authResponse.data.accessToken?.token !== undefined) {\n      setAccessToken(authResponse.data.accessToken);\n      handleRefreshToken(\n        authResponse.data.accessToken,\n        this.#sendRefreshTokenEvent,\n      );\n    }\n\n    return authResponse.data;\n  }\n\n  /**\n   * Generate Authorization Token from the given url\n   *\n   * @deprecated the additional message content is handled internally, there is no need to use this method\n   * @param threadIdOnExternalPlatform - Thread Id\n   * @param url - Authorization Service URL\n   */\n  public async generateAuthorizationToken(\n    threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n    url: string,\n  ): Promise<AuthorizationToken> {\n    if (this.#websocketClient === null) {\n      throw new ChatSDKError('Websocket client is not initialized');\n    }\n\n    return getAuthorizationTokenForUrl(\n      threadIdOnExternalPlatform,\n      url,\n      this.#websocketClient,\n    );\n  }\n\n  /**\n   * Register handler to chat event\n   *\n   * @param type - type of chat event\n   * @param handler - event handler\n   * @returns function to unregister handler\n   */\n  public onChatEvent(\n    type: ChatEventType,\n    handler: (event: ChatCustomEvent) => void,\n  ): RemoveListenerFunction {\n    this.#messageEmitter.addEventListener(type, handler);\n\n    return () => {\n      this.#messageEmitter.removeEventListener(type, handler);\n    };\n  }\n\n  /**\n   * Get Customer instance\n   */\n  public getCustomer(): Customer {\n    return this.#customer;\n  }\n\n  /**\n   * Get Thread instance by id\n   * @param id - thread id\n   * @returns instance of thread based on channel settings\n   */\n  public getThread(id: ThreadIdOnExternalPlatform): Thread | LivechatThread {\n    if (isNull(this.#websocketClient)) {\n      throw new ChatSDKError(\n        'Cannot get thread because websocket is disconnected',\n      );\n    }\n\n    if (isNil(id)) {\n      throw new ChatSDKError('Cannot get thread because id is undefined');\n    }\n\n    const cachedThread = this.#threadCache.get(id);\n    if (!isUndefined(cachedThread)) {\n      return cachedThread;\n    }\n\n    if (this.isLivechat === true) {\n      const liveThread = new LivechatThread(\n        id,\n        this.#websocketClient,\n        this.#messageEmitter,\n        this.#customer,\n        this._getContactCustomFieldsFromQueue(),\n        this.#isAuthorizationEnabled,\n      );\n      this.#threadCache.set(id, liveThread);\n\n      return liveThread;\n    }\n\n    const thread = new Thread(\n      id,\n      this.#websocketClient,\n      this.#messageEmitter,\n      this.#customer,\n      this._getContactCustomFieldsFromQueue(),\n      this.#isAuthorizationEnabled,\n    );\n    this.#threadCache.set(id, thread);\n\n    return thread;\n  }\n\n  /**\n   * Get list of available threads\n   * @returns list of threads\n   */\n  public async getThreadList(): Promise<Array<ThreadView> | null> {\n    if (isNull(this.#websocketClient)) {\n      throw new ChatSDKError(\n        'Cannot get thread list because websocket is disconnected',\n      );\n    }\n\n    const eventPayload = {\n      eventType: AwsInputEventType.FETCH_THREAD_LIST,\n      data: {},\n    };\n\n    const result = await sendChatEvent(eventPayload, this.#websocketClient);\n\n    if (!isThreadListFetchedPostbackData(result.data)) {\n      throw new ChatSDKError(\n        'Invalid response from fetch thread list (getThreadList)',\n      );\n    }\n\n    return result.data.threads;\n  }\n\n  /**\n   * Get access to a websocket connection\n   * @returns WebSocketClient instance\n   */\n  public getWebsocketClient(): WebSocketClient | null {\n    return this.#websocketClient;\n  }\n\n  /**\n   * Send the Offline Message\n   * @param offlineMessageData - offline message data (name, email, message)\n   * @returns success\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error contains (`error.data`) a response from the backend with details.\n   */\n  public async sendOfflineMessage(\n    offlineMessageData: OfflineMessageData,\n  ): Promise<MessageSuccessEventData> {\n    return sendOfflineMessage(offlineMessageData, this.#websocketClient);\n  }\n\n  /**\n   * Recover thread data\n   * @param threadIdOnExternalPlatform - thread id on external platform\n   * @returns thread session data\n   * @throws ThreadRecoverFailedError\n   *  * This exception is thrown when the recover fails or the thread does not exist.\n   */\n  public recoverThreadData(\n    threadIdOnExternalPlatform:\n      | ThreadIdOnExternalPlatform\n      | undefined = undefined,\n  ): AbortablePromise<ThreadRecoveredChatEvent> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const recoverEvent = createRecoverThreadPayloadData(\n        threadIdOnExternalPlatform,\n      );\n      const recoverResponse = await sendChatEvent(\n        recoverEvent,\n        this.#websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(recoverResponse)) {\n        // Create a Thread instance after success recover\n        this.getThread(recoverResponse.data.thread.idOnExternalPlatform);\n        // Emit the 'recover' event to properly set up the Thread instance.\n        this.#messageEmitter.dispatchEvent(\n          new ChatCustomEvent(ChatEvent.THREAD_RECOVERED, {\n            detail: recoverResponse,\n          }),\n        );\n\n        resolve(recoverResponse);\n      } else {\n        reject(\n          new ThreadRecoverFailedError('Thread not found', recoverResponse),\n        );\n      }\n    });\n  }\n\n  /**\n   * Recover livechat thread data\n   * @param threadIdOnExternalPlatform - thread id on external platform\n   * @returns thread livechat session data\n   * @throws ThreadRecoverFailedError\n   *  * This exception is thrown when the recover fails or the thread does not exist.\n   */\n  public recoverLivechatThreadData(\n    threadIdOnExternalPlatform:\n      | ThreadIdOnExternalPlatform\n      | undefined = undefined,\n  ): AbortablePromise<ThreadRecoveredChatEvent> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const recoverEvent = createRecoverLivechatThreadPayloadData(\n        threadIdOnExternalPlatform,\n      );\n      const recoverResponse = await sendChatEvent(\n        recoverEvent,\n        this.#websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(recoverResponse)) {\n        // Create a Thread instance after success recover\n        this.getThread(recoverResponse.data.thread.idOnExternalPlatform);\n        // Emit the 'recover' event to properly set up the Thread instance.\n        this.#messageEmitter.dispatchEvent(\n          new ChatCustomEvent(ChatEvent.LIVECHAT_RECOVERED, {\n            detail: recoverResponse,\n          }),\n        );\n\n        resolve(recoverResponse);\n      } else {\n        reject(\n          new ThreadRecoverFailedError('Thread not found', recoverResponse),\n        );\n      }\n    });\n  }\n\n  /**\n   * Reset the ChatSdk session and clear it from customer data\n   * - it disconnects the WS connection and creates a new one\n   * - generates new IDs if not provided\n   */\n  public async resetSession(\n    customerId: CustomerIdentityIdOnExternalPlatform = generateId(),\n    customerName: string = '',\n    customerImage: string = '',\n    visitorId: VisitorId = '',\n    visitId: VisitId = generateId(),\n  ): Promise<void> {\n    // Close the connection and clear the session data (customer, tokens, etc.)\n    this.#websocketClient?.disconnect();\n    this.#websocketClient = null;\n    this.#threadCache.clear();\n    this.#contactCustomFieldsQueue.clear();\n    resetAccessToken();\n    resetThirdPartyToken();\n    clearCachedTransactionToken();\n\n    this.#customer.destroy();\n\n    // Reinitialize\n    SDKVariableStorage.VISIT_ID = visitId;\n    SDKVariableStorage.VISITOR_ID = visitorId;\n\n    try {\n      await this.#createConnection();\n      this.#customer = new Customer(\n        customerId,\n        customerName,\n        customerImage,\n        this.#websocketClient,\n      );\n    } catch (e) {\n      this.#onErrorHandler(e);\n    }\n  }\n\n  async #createSocketUrl(): Promise<string> {\n    const { brandId, channelId } = getBrandIdAndChannelId();\n    const endpoint = SDKVariableStorage.ENDPOINT_GATEWAY;\n    const appVersion = SDKVariableStorage.APP_VERSION;\n    let accessToken: string | undefined;\n\n    assertNonNullable(endpoint);\n\n    const visitorId = SDKVariableStorage.VISITOR_ID ?? '';\n\n    if (isSecureSessions()) {\n      const customerId = shouldHandleCustomerIdForSecureSessions()\n        ? this.#customer.getId()\n        : null;\n      const authorizationCode = this.#isAuthorizationEnabled\n        ? SDKVariableStorage.AUTHORIZATION_CODE\n        : undefined;\n      const useCache = getSecuredSessionType() !== SecureSessions.THIRD_PARTY;\n\n      try {\n        const transactionTokenResponse = await getTransactionToken(\n          authorizationCode,\n          customerId,\n          useCache,\n        );\n        accessToken = transactionTokenResponse.accessToken;\n\n        const { customerIdentity, thirdParty, contact } =\n          transactionTokenResponse;\n        // Set Customer Identity\n        if (customerIdentity) {\n          setCustomerIdentity(this.#customer, customerIdentity);\n        }\n        // Set Third Party Token\n        if (thirdParty) {\n          handleNewThirdPartyToken(thirdParty);\n        }\n        // Set Contact custom fields\n        if (contact?.customFields) {\n          setCustomFieldsFromArray(\n            this.#contactCustomFieldsQueue,\n            contact.customFields,\n          );\n        }\n      } catch (error) {\n        if (isIpAddressBlockedError(error)) {\n          if (typeof this.onError === 'function') {\n            this.onError(\n              new IpAddressBlockedError('Your IP address is blocked.'),\n            );\n          }\n\n          throw new IpAddressBlockedError('Your IP address is blocked.');\n        } else {\n          const sdkError = new ChatSDKError(\n            ERROR_CANNOT_FETCH_TRANSACTION_TOKEN,\n            error,\n          );\n          this.#onErrorHandler(sdkError);\n\n          throw sdkError;\n        }\n      }\n    }\n\n    // Mark the instance as ready\n    this.#ready.resolve();\n\n    const customMetadataHeaders =\n      SDKVariableStorage.REQUEST_METADATA?.websocketQuery ?? {};\n\n    const queryParameters = {\n      ...customMetadataHeaders,\n      v: appVersion,\n      sdkPlatform: 'web',\n      sdkVersion: CHAT_SDK_VERSION,\n      brandId,\n      channelId,\n      ...(isSecureSessions() ? {} : { customerId: this.#customer.getId() }),\n      visitorId,\n      ...(isSecureSessions() ? { transactionToken: accessToken } : {}),\n    };\n\n    const queryParametersAsString =\n      createQueryParametersAsString(queryParameters);\n\n    try {\n      const url = new URL(endpoint);\n      url.search = queryParametersAsString;\n\n      return url.toString();\n    } catch (error) {\n      this.#onErrorHandler(\n        new ChatSDKError(\n          `Invalid URL: ${endpoint}. Make sure it is a valid URL.`,\n          error,\n        ),\n      );\n\n      return '';\n    }\n  }\n\n  async #createConnection(): Promise<void> {\n    try {\n      this.#websocketClient = this.#initWS();\n      await this.#websocketClient.connect();\n    } catch (error) {\n      this.#onErrorHandler(error);\n    }\n  }\n\n  _getContactCustomFieldsFromQueue(): CustomFieldsObject {\n    if (this.#contactCustomFieldsQueue.size > 0) {\n      const fields = getCustomFields(this.#contactCustomFieldsQueue);\n      this.#contactCustomFieldsQueue.clear();\n\n      return fields;\n    }\n\n    return {};\n  }\n\n  /**\n   * @deprecated - do not use\n   */\n  #sendRefreshTokenEvent = async (): Promise<void> => {\n    const accessToken = getAccessToken();\n    if (isNull(accessToken)) {\n      return;\n    }\n\n    const refreshTokenResponse = await sendChatEvent(\n      createRefreshTokenPayload(accessToken.token),\n      this.#websocketClient,\n    );\n\n    if (isTokenRefreshedSuccessResponse(refreshTokenResponse)) {\n      setAccessToken(refreshTokenResponse.data.accessToken);\n\n      handleRefreshToken(\n        refreshTokenResponse.data.accessToken,\n        this.#sendRefreshTokenEvent,\n      );\n\n      return;\n    }\n\n    throw new AuthorizationError(\n      'An error occurred while refreshing the access token',\n      refreshTokenResponse.error,\n    );\n  };\n\n  /**\n   * Setup Environment endpoints\n   */\n  #initEnvironment(options: ChatSDKOptions): void {\n    // Set custom environment\n    if (options.environment === EnvironmentName.custom) {\n      if (\n        isEmpty(options.customEnvironment) ||\n        isNil(options.customEnvironment)\n      ) {\n        throw new ChatSDKError(\n          'customEnvironment must be provided when environment is set to \"custom\"',\n        );\n      }\n\n      setEnvironmentEndpoints(options.customEnvironment);\n\n      return;\n    }\n\n    // Set predefined environment\n    const endpoints = buildEnvironmentEndpoints(options.environment);\n    setEnvironmentEndpoints(endpoints);\n  }\n\n  #initWS(): WebSocketClient {\n    const client = new WebSocketClient(\n      this.onError,\n      this.#createSocketUrl.bind(this),\n    );\n\n    client.on(WebSocketClientEvent.MESSAGE, async (event: ChatCustomEvent) => {\n      try {\n        if (typeof this.onRawEvent === 'function') {\n          this.onRawEvent(event);\n        }\n\n        const eventData = await getEventData(\n          parseWsMessageEvent(event),\n          this.#websocketClient,\n        );\n\n        const parsedEvent =\n          this.#incomingChatEventMiddleware.process(eventData);\n\n        if (!isNil(parsedEvent)) {\n          const { type } = parsedEvent;\n\n          onMessageHandler(parsedEvent);\n\n          this.#messageEmitter.dispatchEvent(\n            new ChatCustomEvent(type ?? '', {\n              detail: parsedEvent,\n            }),\n          );\n        }\n      } catch (error: unknown) {\n        this.#onErrorHandler(error);\n      }\n    });\n\n    return client;\n  }\n}\n","interface PromiseWithResolvers<T = unknown> {\n  promise: Promise<T>;\n  reject: (reason: unknown) => void;\n  resolve: (value: T) => void;\n}\n\nexport function getPromiseWithResolvers<T>(): PromiseWithResolvers<T> {\n  let resolve, reject;\n  const promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n\n  return { promise, resolve, reject } as unknown as PromiseWithResolvers<T>;\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RefreshTokenData } from '@brandembassy/ts-types-chat/dist/awsEvents/RefreshToken';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createRefreshTokenPayload(\n  token: string,\n): EventPayloadData<RefreshTokenData> {\n  return {\n    eventType: AwsInputEventType.REFRESH_TOKEN,\n    data: {\n      accessToken: {\n        token,\n      },\n    },\n  };\n}\n","export const APP_NAME = 'chat-web-sdk';\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport {\n  isSecureSessions,\n  shouldHandleCustomerIdForSecureSessions,\n} from '../securedSession/getSecuredSessionType';\nimport { isEmpty } from '../utils/is';\n\nimport { CustomerInstance } from './CustomerInstance';\n\nexport function setCustomerIdFromOptions(customerIdOption: unknown): void {\n  if (\n    isSecureSessions() &&\n    shouldHandleCustomerIdForSecureSessions() === false &&\n    typeof customerIdOption !== 'undefined'\n  ) {\n    throw new ChatSDKError(\n      'The CustomerId cannot be set when secured sessions are enabled',\n    );\n  }\n\n  if (\n    isSecureSessions() &&\n    shouldHandleCustomerIdForSecureSessions() &&\n    isEmpty(customerIdOption)\n  ) {\n    throw new ChatSDKError(\n      'The CustomerId cannot be empty string when \"anonymous\" secured sessions are enabled',\n    );\n  }\n\n  if (typeof customerIdOption === 'string') {\n    CustomerInstance.getInstance().setId(customerIdOption);\n  }\n}\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { AuthorizationError } from './AuthorizationError';\nimport { createReconnectPayloadData } from './createReconnectPayloadData';\nimport { CustomerReconnectSuccessPayloadData } from './CustomerReconnectSuccessPayloadData';\nimport { handleRefreshToken } from './handleRefreshToken';\n\nexport async function authorizationReconnect(\n  websocketClient: WebSocketClient | null,\n  refreshTokenEventCallback: () => Promise<void>,\n  accessToken: AccessToken,\n  visitorId?: string,\n): Promise<CustomerReconnectSuccessPayloadData> {\n  const reconnectPayload = createReconnectPayloadData(accessToken, visitorId);\n\n  const response = await sendChatEvent(reconnectPayload, websocketClient);\n\n  const hasError = response.error !== undefined;\n\n  if (hasError) {\n    throw new AuthorizationError(\n      'Authorization reconnect failed',\n      response.error,\n    );\n  }\n\n  const successReconnectResponse: CustomerReconnectSuccessPayloadData = {\n    reconnected: true,\n  };\n\n  handleRefreshToken(accessToken, refreshTokenEventCallback);\n\n  return successReconnectResponse;\n}\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { isUndefined } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport { fetchChannelInfo } from './fetchChannelInfo';\n\nexport async function handleBasicChannelInfo(\n  isAuthorizationEnabled: undefined | boolean,\n  isLivechat: undefined | boolean,\n): Promise<{\n  isAuthorizationEnabled: boolean;\n  isLivechat: boolean;\n}> {\n  if (!isUndefined(isAuthorizationEnabled) && !isUndefined(isLivechat)) {\n    return {\n      isAuthorizationEnabled,\n      isLivechat,\n    };\n  }\n\n  const channelInfo = await fetchChannelInfo(\n    SDKVariableStorage.BRAND_ID as BrandId,\n    SDKVariableStorage.CHANNEL_ID as ChannelId,\n    SDKVariableStorage.LANGUAGE,\n    SDKVariableStorage.ENDPOINT_CHAT as string,\n    SDKVariableStorage.REQUEST_METADATA?.httpHeaders,\n    SDKVariableStorage.APP_NAME,\n  );\n\n  return {\n    isAuthorizationEnabled: channelInfo.isAuthorizationEnabled,\n    isLivechat: channelInfo.isLiveChat,\n  };\n}\n","import { AuthorizeCustomerData } from '@brandembassy/ts-types-chat/dist/awsEvents/AuthorizeCustomer';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { BrowserFingerprint } from '@brandembassy/ts-types-chat/dist/user/BrowserFingerprint';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport { CHAT_SDK_VERSION } from '../env/version';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { generateId } from '../utils/generateId';\nimport { createVisitorPayload } from '../visitor/createVisitorPayload';\n\nexport function createAuthorizationPayloadData(\n  authorizationCode: string | null,\n  visitorId: VisitorId = generateId(),\n  browserFingerprint?: BrowserFingerprint,\n): EventPayloadData<AuthorizeCustomerData> {\n  return {\n    eventType: AwsInputEventType.AUTHORIZE_CUSTOMER,\n    data: {\n      authorization: {\n        authorizationCode,\n      },\n      browserFingerprint,\n      disableChannelInfo: true,\n      sdkVersion: CHAT_SDK_VERSION,\n      sdkPlatform: 'web',\n    },\n    ...createVisitorPayload(visitorId as VisitorId),\n  };\n}\n","import { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/customer/CustomerIdentity';\n\nimport { isNil } from '../utils/is';\n\nexport function isCustomerIdentityIdValid(\n  customerIdentityIdOnExternalPlatform:\n    | CustomerIdentityIdOnExternalPlatform\n    | undefined,\n): customerIdentityIdOnExternalPlatform is CustomerIdentityIdOnExternalPlatform {\n  return (\n    !isNil(customerIdentityIdOnExternalPlatform) &&\n    customerIdentityIdOnExternalPlatform !== ''\n  );\n}\n","import { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendOfflineMessagePayloadData } from './sendOfflineMessagePayload';\n\nexport interface OfflineMessageData {\n  email: string;\n  message: string;\n  name: string;\n}\n\nexport const sendOfflineMessage = async (\n  offlineMessageData: OfflineMessageData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const offlineMessagePayloadData =\n    createSendOfflineMessagePayloadData(offlineMessageData);\n\n  const response = await sendChatEvent(\n    offlineMessagePayloadData,\n    websocketClient,\n  );\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send offline message failed', response);\n};\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendOfflineMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOfflineMessage';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/customer/CustomerIdentity';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nimport { OfflineMessageData } from './sendOfflineMessage';\n\nexport const createSendOfflineMessagePayloadData = (\n  offlineMessageData: OfflineMessageData,\n): EventPayloadData<SendOfflineMessageEventData> => {\n  const [lastName, ...names] = offlineMessageData.name.split(' ').reverse();\n  const firstName = names.reverse().join(' ');\n\n  const authorCustomerIdentity = {\n    idOnExternalPlatform:\n      offlineMessageData.email as CustomerIdentityIdOnExternalPlatform,\n    firstName,\n    lastName,\n  };\n\n  const data = {\n    messageContent: {\n      type: MessageType.TEXT,\n      payload: {\n        text: offlineMessageData.message,\n      },\n    },\n    authorCustomerIdentity,\n  };\n\n  return {\n    eventType: AwsInputEventType.SEND_OFFLINE_MESSAGE,\n    data,\n  };\n};\n","import { CaseInboxAssigneeChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseInboxAssigneeChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface AssignedAgentChangedEvent extends ChatEventData {\n  data: CaseInboxAssigneeChangedData;\n  type: typeof ChatEvent.ASSIGNED_AGENT_CHANGED;\n}\n\nexport function isAssignedAgentChangedEvent(\n  event: ChatEventData,\n): event is AssignedAgentChangedEvent {\n  return (\n    event.type === ChatEvent.ASSIGNED_AGENT_CHANGED &&\n    (event as AssignedAgentChangedEvent).data?.case?.id !== undefined\n  );\n}\n","import { TypingEventData } from '@brandembassy/ts-types-platform/dist/user/typing/TypingEventData';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type AgentTypingStartedData = TypingEventData;\n\nexport interface AgentTypingStartedEvent extends ChatEventData {\n  data: AgentTypingStartedData;\n  type: typeof ChatEvent.AGENT_TYPING_STARTED;\n}\n\nexport function isAgentTypingStartedEvent(\n  event: ChatEventData,\n): event is AgentTypingStartedEvent {\n  return (\n    event.type === ChatEvent.AGENT_TYPING_STARTED &&\n    (event as AgentTypingStartedEvent).data?.thread?.idOnExternalPlatform !==\n      undefined\n  );\n}\n","import { TypingEventData } from '@brandembassy/ts-types-platform/dist/user/typing/TypingEventData';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type AgentTypingEndedData = TypingEventData;\n\nexport interface AgentTypingEndedEvent extends ChatEventData {\n  data: AgentTypingEndedData;\n  type: typeof ChatEvent.AGENT_TYPING_ENDED;\n}\n\nexport function isAgentTypingEndedEvent(\n  event: ChatEventData,\n): event is AgentTypingEndedEvent {\n  return (\n    event.type === ChatEvent.AGENT_TYPING_ENDED &&\n    (event as AgentTypingEndedEvent).data?.thread?.idOnExternalPlatform !==\n      undefined\n  );\n}\n","import { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { ERROR_CANNOT_FETCH_TRANSACTION_TOKEN } from '../error/errorMessages';\nimport { postJSON } from '../utils/fetchJSON';\nimport { isNil } from '../utils/is';\nimport { SDKVariableStorage } from '../variables/VariableStorage';\n\nimport {\n  cacheTransactionToken,\n  getCachedTransactionToken,\n} from './cachedTransactionToken';\nimport { getAuthorizeUrl } from './getAuthorizeUrl';\nimport { TransactionTokenResponse } from './TransactionToken';\n\ninterface ThirdPartyAuthorizationPayload {\n  authorization_code: string;\n  code_verifier?: string;\n  grant_type: 'authorization_code';\n}\n\ninterface ThirdPartyAuthorizePayload {\n  thirdParty: ThirdPartyAuthorizationPayload;\n}\n\ninterface AnonymousAuthorizationPayload {\n  customerIdentity: {\n    idOnExternalPlatform: CustomerIdentityIdOnExternalPlatform;\n  };\n}\n\ntype AuthorizePayload =\n  | ThirdPartyAuthorizePayload\n  | AnonymousAuthorizationPayload;\n\nfunction getAuthorizePayload(\n  authorizationCode?: string,\n  customerIdentityIdOnExternalPlatform?: CustomerIdentityIdOnExternalPlatform | null,\n): AuthorizePayload {\n  const payload = {} as AuthorizePayload;\n\n  if (authorizationCode) {\n    (payload as ThirdPartyAuthorizePayload).thirdParty = {\n      authorization_code: authorizationCode,\n      grant_type: 'authorization_code',\n    };\n  }\n\n  if (!isNil(customerIdentityIdOnExternalPlatform)) {\n    (payload as AnonymousAuthorizationPayload).customerIdentity = {\n      idOnExternalPlatform: customerIdentityIdOnExternalPlatform,\n    };\n  }\n\n  return payload;\n}\n\nexport const getTransactionToken = async (\n  authorizationCode?: string,\n  customerIdentityIdOnExternalPlatform?: CustomerIdentityIdOnExternalPlatform | null,\n  useCache: boolean = false,\n): Promise<Partial<TransactionTokenResponse> & { cached?: boolean }> => {\n  // Get cached token if available\n  if (useCache) {\n    const cachedTransactionToken = getCachedTransactionToken();\n    if (cachedTransactionToken) {\n      return { accessToken: cachedTransactionToken, cached: true };\n    }\n  }\n\n  const authorizeUrl = getAuthorizeUrl();\n  const data = await postJSON<TransactionTokenResponse>(\n    authorizeUrl,\n    getAuthorizePayload(\n      authorizationCode,\n      customerIdentityIdOnExternalPlatform,\n    ),\n    {\n      credentials: 'include',\n      headers: {\n        ...SDKVariableStorage.REQUEST_METADATA?.httpHeaders,\n      },\n    },\n  );\n\n  if (!data.accessToken) {\n    throw new ChatSDKError(ERROR_CANNOT_FETCH_TRANSACTION_TOKEN, data);\n  }\n\n  cacheTransactionToken(data.accessToken, data.expiresIn);\n\n  return data;\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport function isIpAddressBlockedError(error: unknown): boolean {\n  return (\n    error instanceof ChatSDKError &&\n    // @ts-expect-error unknown data type\n    (error.data as unknown)?.responseBody?.errorCode === 'ip_blocked'\n  );\n}\n","import { getAuthorizationTokenForUrl } from '../authorization/getAuthorizationTokenForUrl';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  fetchMessageWithFullContent,\n  getUrlPathForMessageWithFullContent,\n} from './fetchMessageWithFullContent';\nimport { MessageCreatedEvent } from './isMessageCreatedEvent';\n\nexport async function getMessageWithFullContent(\n  messageCreatedEvent: MessageCreatedEvent,\n  websocketClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  if (\n    messageCreatedEvent.data.message.hasAdditionalMessageContent === false ||\n    websocketClient === null\n  ) {\n    return messageCreatedEvent;\n  }\n\n  try {\n    const { brand, message, thread } = messageCreatedEvent.data;\n    const messageUrl = getUrlPathForMessageWithFullContent(\n      brand.id,\n      message.id,\n    );\n    const authorizationToken = await getAuthorizationTokenForUrl(\n      thread.idOnExternalPlatform,\n      messageUrl,\n      websocketClient,\n    );\n    const messageWithFullContent = await fetchMessageWithFullContent(\n      message,\n      brand.id,\n      authorizationToken,\n    );\n\n    return {\n      ...messageCreatedEvent,\n      data: {\n        ...messageCreatedEvent.data,\n        message: messageWithFullContent,\n      },\n    };\n  } catch (error) {\n    throw new ChatSDKError('Failed to fetch additional message content', error);\n  }\n}\n","import { ChatEventData } from '../event/ChatEvent';\nimport { normalizeEvent } from '../event/normalizeEvent';\n\nimport { requestQueue } from './requestQueue';\n\nexport const parseWsMessageEvent = (\n  event: CustomEvent,\n): ChatEventData | undefined => {\n  const eventDetail = event?.detail;\n\n  if (!eventDetail) {\n    return;\n  }\n\n  let eventData;\n\n  try {\n    eventData = JSON.parse(eventDetail.data);\n  } catch (error) {\n    return;\n  }\n\n  return normalizeEvent(eventData);\n};\n\nexport const onMessageHandler = (event: ChatEventData): void => {\n  const { id } = event;\n\n  if (requestQueue.has(id)) {\n    const resolve = requestQueue.get(id);\n\n    if (typeof resolve === 'function') {\n      resolve(event);\n    }\n\n    requestQueue.delete(id);\n  }\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SetPositionInQueuePayloadData } from '@brandembassy/ts-types-chat/dist/awsEvents/SetPositionInQueuePayload';\nimport { EventId } from '@brandembassy/ts-types-platform/dist/pushUpdate/EventId';\n\nimport { ChatEventData } from '../../event/ChatEvent';\nimport { isEmpty } from '../../utils/is';\n\nexport interface SetPositionInQueueChatEvent extends ChatEventData {\n  data: SetPositionInQueuePayloadData;\n  id: EventId;\n  type: AwsResponseEventType.SET_POSITION_IN_QUEUE;\n}\n\nexport const isSetPositionInQueueEvent = (\n  event: unknown,\n): event is SetPositionInQueueChatEvent => {\n  const setPositionInQueueEvent = event as SetPositionInQueueChatEvent;\n\n  return (\n    Number.isInteger(setPositionInQueueEvent?.data.positionInQueue) &&\n    isEmpty(setPositionInQueueEvent?.id) === false &&\n    setPositionInQueueEvent?.type === AwsResponseEventType.SET_POSITION_IN_QUEUE\n  );\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class CreateInvitationFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { CreateInvitationToGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/InvitationToGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { CreateInvitationFailedError } from './CreateInvitationFailedError';\n\nexport function createCreateInvitationToGroupChatPayloadData(\n  id: CaseId,\n): EventPayloadData<CreateInvitationToGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.CREATE_GROUP_CHAT_INVITE,\n    data: {\n      contact: {\n        id,\n      },\n    },\n  };\n}\n\nexport function isInvitationToGroupChatCreated(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_INVITE_CREATED;\n}\n\nexport async function sendCreateInvitationToGroupChatEvent(\n  createInvitationPayloadData: EventPayloadData<CreateInvitationToGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(createInvitationPayloadData, wsClient);\n\n  if (isInvitationToGroupChatCreated(response)) {\n    return response;\n  }\n\n  throw new CreateInvitationFailedError('Create invitation failed', response);\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class JoinGroupChatFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { JoinGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/JoinGroupChat';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { JoinGroupChatFailedError } from './JoinGroupChatFailedError';\n\nexport function createJoinGroupChatPayloadData(\n  code: string,\n): EventPayloadData<JoinGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.JOIN_GROUP_CHAT,\n    data: {\n      invitation: {\n        code,\n      },\n    },\n  };\n}\n\nexport function isJoinGroupChatSuccessResponse(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_JOINED;\n}\n\nexport async function sendJoinGroupChatEvent(\n  joinGroupChatPayloadData: EventPayloadData<JoinGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(joinGroupChatPayloadData, wsClient);\n\n  if (isJoinGroupChatSuccessResponse(response)) {\n    return response;\n  }\n\n  throw new JoinGroupChatFailedError('Join Group chat failed', response);\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { LeaveGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LeaveGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nexport function createLeaveGroupChatPayloadData(\n  id: CaseId,\n): EventPayloadData<LeaveGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.LEAVE_GROUP_CHAT,\n    data: {\n      contact: {\n        id,\n      },\n    },\n  };\n}\n\nexport async function sendLeaveGroupChatEvent(\n  leaveGroupChatPayloadData: EventPayloadData<LeaveGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  return sendChatEvent(leaveGroupChatPayloadData, wsClient);\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SendEmailInvitaionFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendEmailInvitationToGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendEmailInvitationToGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { SendEmailInvitaionFailedError } from './SendEmailInvitaionFailedError';\n\nexport function createSendEmailInvitationToGroupChatPayloadData(\n  caseId: CaseId,\n  invitationCode: string,\n  email: string,\n): EventPayloadData<SendEmailInvitationToGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.SEND_EMAIL_INVITE_TO_GROUP_CHAT,\n    data: {\n      contact: {\n        id: caseId,\n      },\n      invitation: {\n        code: invitationCode,\n      },\n      recipients: [\n        {\n          idOnExternalPlatform: email,\n        },\n      ],\n    },\n  };\n}\n\nexport function isEmailInvitationToGroupChatSent(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_INVITE_SENT;\n}\n\nexport async function sendEmailInvitationToGroupChatEvent(\n  createInvitationPayloadData: EventPayloadData<SendEmailInvitationToGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(createInvitationPayloadData, wsClient);\n\n  if (isEmailInvitationToGroupChatSent(response)) {\n    return response;\n  }\n\n  throw new SendEmailInvitaionFailedError(\n    'Send Email Invitation failed',\n    response,\n  );\n}\n","export class CacheStorageError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CacheStorageError';\n  }\n}\n","import { isUndefined } from '../utils/is';\n\nimport { CacheStorageError } from './CacheStorageError';\n\nexport interface ICacheStorage {\n  getItem<T = unknown>(key: string): T | null;\n  removeItem(key: string): void;\n  setItem(key: string, data: unknown, ttl: number): void;\n}\n\nexport interface CachedStorageItem {\n  data: unknown;\n  expiresAt: number;\n}\n\n/**\n * Cache storage wrapper\n * - A simple wrapper around the Storage API with a TTL (Time To Live) per item.\n * - Uses JSON.stringify and JSON.parse to serialize and deserialize data.\n * - Uses Date.getTime() to calculate the expiration time.\n *\n * @param storage - The storage instance (e.g., localStorage or sessionStorage).\n */\nexport class CacheStorage implements ICacheStorage {\n  #storage: Storage;\n\n  /**\n   * Create a new CacheStorage instance\n   * @param storage - storage instance\n   * @throws CacheStorageError\n   */\n  constructor(storage: Storage) {\n    if (\n      !storage ||\n      !storage.getItem ||\n      !storage.setItem ||\n      !storage.removeItem\n    ) {\n      throw new CacheStorageError('CacheStorage: Storage is required');\n    }\n    this.#storage = storage;\n  }\n\n  /**\n   * Get an item from the storage if not expired\n   * @param key - key\n   */\n  public getItem<T = unknown>(key: string): T | null {\n    const item = this.#storage.getItem(key);\n\n    if (!item) {\n      return null;\n    }\n\n    const { data = undefined, expiresAt = 0 }: CachedStorageItem =\n      JSON.parse(item);\n    const isExpired = expiresAt < new Date().getTime();\n\n    if (isExpired || isUndefined(data)) {\n      this.#storage.removeItem(key);\n\n      return null;\n    }\n\n    return data as T;\n  }\n\n  /**\n   * Remove an item from the storage\n   * @param key - key\n   */\n  public removeItem(key: string): void {\n    this.#storage.removeItem(key);\n  }\n\n  /**\n   * Save an item in the storage with a ttl\n   * @param key - key\n   * @param data - data to store\n   * @param ttl - time to live in milliseconds\n   */\n  public setItem(key: string, data: unknown, ttl: number): void {\n    const item: CachedStorageItem = {\n      data,\n      expiresAt: new Date().getTime() + ttl,\n    };\n\n    this.#storage.setItem(key, JSON.stringify(item));\n  }\n}\n","export interface CustomerReconnectSuccessPayloadData {\n  reconnected: true;\n}\n\nexport function isCustomerReconnectSuccessPayloadData(\n  payload: unknown,\n): payload is CustomerReconnectSuccessPayloadData {\n  if (typeof payload !== 'object' || payload === null) {\n    return false;\n  }\n\n  if (!('reconnected' in payload)) {\n    return false;\n  }\n\n  return payload.reconnected === true;\n}\n","import { ChannelInfo } from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { getBrowserLanguage } from '../browserFingerprint/getBrowserFingerprint';\nimport {\n  EnvironmentName,\n  buildEnvironmentEndpoints,\n} from '../env/Environments';\n\nimport { ChannelInfoOptions } from './ChannelInfoOptions';\nimport { fetchChannelInfo } from './fetchChannelInfo';\n\n/**\n * Get channel info\n * Returns channel info like feature toggle status, translations, file upload restrictions, theme color settings etc.\n * @see {@link ChannelInfo}\n */\nexport async function getChannelInfo(\n  brandId: BrandId,\n  channelId: ChannelId,\n  language = getBrowserLanguage(),\n  options: ChannelInfoOptions,\n): Promise<ChannelInfo> {\n  const { httpHeaders, environment, customEnvironment, appName, appVersion } =\n    options;\n\n  const additionalHttpHeaders = {\n    ...(httpHeaders ?? {}),\n    ...(appVersion ? { 'x-app-version': String(appVersion) } : {}),\n  };\n\n  const chatEndpoint =\n    environment === EnvironmentName.custom\n      ? customEnvironment.chat\n      : buildEnvironmentEndpoints(environment).chat;\n\n  return fetchChannelInfo(\n    brandId,\n    channelId,\n    language,\n    chatEndpoint,\n    additionalHttpHeaders,\n    appName,\n  );\n}\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport {\n  EnvironmentName,\n  buildEnvironmentEndpoints,\n} from '../env/Environments';\n\nimport { ChannelAvailabilityOptions } from './ChannelAvailabilityOptions';\nimport {\n  ChannelAvailabilityResponse,\n  fetchChannelAvailability,\n} from './fetchChannelAvailability';\n\n/**\n * Get channel availability\n * Returns the availability status of a channel, indicating whether it is online or offline.\n * @see {@link ChannelAvailabilityResponse}\n */\nexport async function getChannelAvailability(\n  brandId: BrandId,\n  channelId: ChannelId,\n  options: ChannelAvailabilityOptions,\n): Promise<ChannelAvailabilityResponse> {\n  const { httpHeaders, appName, appVersion, customEnvironment, environment } =\n    options;\n\n  const additionalHttpHeaders = {\n    ...(httpHeaders ?? {}),\n    ...(appVersion ? { 'x-app-version': String(appVersion) } : {}),\n  };\n\n  const chatEndpoint =\n    environment === EnvironmentName.custom\n      ? customEnvironment.chat\n      : buildEnvironmentEndpoints(environment).chat;\n\n  return fetchChannelAvailability(\n    brandId,\n    channelId,\n    chatEndpoint,\n    additionalHttpHeaders,\n    appName,\n  );\n}\n","import { User } from '@brandembassy/ts-types-platform/dist/user/User';\nimport { UserId } from '@brandembassy/ts-types-platform/dist/user/UserId';\n\nimport { ChatSdk } from './ChatSdk';\n\n// Export runtime classes and types\nexport type { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nexport type { ConsumerIdentityInput as CustomerIdentity } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nexport type { CaseInboxAssigneeChangedData as AssignedAgentChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseInboxAssigneeChangedEvent';\nexport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nexport { WebSocketClientEvent } from '@brandembassy/push-updates-sdk';\nexport { WebSocketClientError } from './sockets/WebSocketClientError';\nexport { ChatEvent } from './event/ChatEvent';\nexport type { ChatEventType } from './event/ChatEvent';\nexport { sendChatEvent } from './event/sendChatEvent';\nexport { EnvironmentName, EnvironmentEndpoints } from './env/Environments';\nexport * from './agent';\nexport * from './thread';\nexport * from './contact';\nexport * from './ChatSdk';\nexport * from './message';\nexport { Customer } from './customer/Customer';\nexport type { Customer as CustomerView } from '@brandembassy/ts-types-platform/dist/customer/customer';\nexport * from './utils/narrowing';\nexport { generateId } from './utils/generateId';\nexport { splitName } from './utils/splitName';\nexport type { ChatSDKOptions } from './ChatSDKOptions';\nexport type { SecureSessionsType } from './securedSession/SecureSessionsType';\nexport { SecureSessions } from './securedSession/SecureSessionsType';\nexport * from './groupChat';\nexport * from './utils/AbortablePromise';\nexport { AbortError } from './error/AbortError';\nexport { ChatSDKError } from './error/ChatSDKError';\nexport { IpAddressBlockedError } from './error/IpAddressBlockedError';\nexport { SdkVersionNotSupported } from './error/SdkVersionNotSupported';\nexport {\n  getBrowserFingerprint,\n  getDeviceType,\n  BrowserFingerprintOptions,\n  getBrowserLanguage,\n  getBrowserLocation,\n  getValidLanguage,\n} from './browserFingerprint/getBrowserFingerprint';\nexport {\n  CacheStorage,\n  ICacheStorage,\n  CachedStorageItem,\n} from './storage/CacheStorage';\nexport { CacheStorageError } from './storage/CacheStorageError';\nexport * from './attachment/sendAttachments';\n\n// Export types for API Docs availability\nexport * from './authorization/AuthorizeConsumerEventResponse';\nexport type { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nexport type { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nexport {\n  ChannelAvailability,\n  ChannelInfo,\n} from '@brandembassy/ts-types-chat/dist/channel/ChannelInfo';\nexport type { ChannelAvailabilityResponse } from './channel/fetchChannelAvailability';\nexport { Thread as ThreadView } from '@brandembassy/ts-types-platform/dist/thread/Thread';\nexport type { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\nexport type { WebSocketClient } from './sockets/WebSocketClient';\nexport type {\n  EventListenerFunction,\n  RemoveListenerFunction,\n} from './event/ListenerFunction';\nexport type { IChatEventTarget } from './event/ChatEventTarget';\nexport type { ChatEventData } from './event/ChatEvent';\nexport type { MoreMessagesLoadedEvent } from './message/loadMoreMessagesEventData';\nexport type { ThreadRecoveredPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadRecovered';\nexport type { MessageSuccessEventData } from './message/MessageSuccessEventData';\nexport type { ConsumerAuthorizationSuccessPayloadData } from '@brandembassy/ts-types-chat/dist/authorization/ConsumerAuthorizationSuccessPayloadData';\nexport type { UploadFailResponse } from './attachment/uploadAttachment';\nexport { UploadAttachmentError } from './attachment/UploadAttachmentError';\nexport type Agent = User;\nexport type AgentId = UserId;\nexport type { AuthorizationToken } from '@brandembassy/ts-types-chat/dist/authorization/AuthorizationToken';\nexport type { OfflineMessageData } from './message/sendOfflineMessage';\nexport type { EventPayloadData } from './sockets/EventPayload';\nexport type { ThreadRecoveredChatEvent } from './thread/isRecoverSuccessPayload';\nexport * from './authorization/createReconnectPayloadData';\nexport * from './authorization/CustomerReconnectSuccessPayloadData';\nexport { AuthorizationError } from './authorization/AuthorizationError';\nexport { CHAT_SDK_VERSION } from './env/version';\nexport { registerWindowUnload, isWindowClosing } from './utils/isWindowClosing';\nexport type { CustomFieldsObject } from './customField/CustomFields';\nexport {\n  getCustomFieldsArray,\n  getCustomFieldsFromArray,\n} from './customField/CustomFields';\nexport { getChannelInfo } from './channel/getChannelInfo';\nexport type { ChannelInfoOptions } from './channel/ChannelInfoOptions';\nexport { getChannelAvailability } from './channel/getChannelAvailability';\nexport type { ChannelAvailabilityOptions } from './channel/ChannelAvailabilityOptions';\nexport type { NetworkRequestMetadata } from './request/NetworkRequestMetadata';\n\n// Export the ChatSDK as default\nexport default ChatSdk;\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__198__","PushUpdateEventType","queryParameters","Object","keys","filter","key","map","encodeURIComponent","join","defineProperty","value","getTimeInMinutes","getTimeInMilliseconds","getTimeInSeconds","padDateTimeUnit","dateTimeUnit","norm","Math","abs","floor","Number","_a","_b","hours","_c","minutes","_d","seconds","_e","milliseconds","CaseStatus_1","CaseStatus","WebSocketClientEvent_1","enumerable","get","WebSocketClientEvent","pushUpdateWebSocket_1","setupSocketConnection","extendStatics","__extends","this","d","b","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","WebSocketClient","HEART_BEAT_CHECK_TIMEOUT","HEART_BEAT_INTERVAL","Logger_1","ReconnectingWebSocket_1","EventTargetPolyfill_1","HeartBeatState_1","_super","url","protocols","options","_this","heartBeatTimeout","heartBeatCheckTimeout","enableDebugMode","debugMode","log","LogLevels","INFO","disableDebugMode","level","message","args","logger","sendHeartBeat","send","JSON","stringify","action","handleHeartBeatResponse","heartBeatState","HeartBeatState","DYING","LIVING","dispatchHeartBeatState","setHeartBeatCheckTimeout","clearTimeout","setTimeout","heartbeatState","dispatchEvent","CustomEvent","isHeartBeatActive","socket","ReconnectingWebSocket","onopen","OPEN","onclose","closeEvent","retryCount","maxRetries","DIED","CLOSE","detail","onmessage","event","parse","data","MESSAGE","onerror","ERROR","startHeartBeat","interval","heartBeatCallback","stopHeartBeat","EventTargetPolyfill","ChannelAvailability","listeners","addEventListener","type","callback","push","removeEventListener","stack","l","length","splice","slice","defaultPrevented","MessageType","DeviceType","AwsResponseEventType","AwsInputEventType","removeEmptyValuesFromObject","objectData","entries","reduce","result","isoString","Date","isNaN","day","parsedDate","exec","split","itm","parseInt","UTC","apply","getDate","NaN","tz","setUTCMinutes","getUTCMinutes","getTime","parseTimestampFromISO8601String","getTimezoneISOOffset","misc_1","date","tzo","getTimezoneOffset","concat","AwsChatWindowEventActionRoute","__assign","assign","t","s","n","arguments","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","getPushUpdateWebSocket","queryParameters_1","initializeHeartbeat_1","object_1","WebSocketClient_1","defaultConnectionOptions","forceSecureProtocol","heartbeatAfterAuthorize","maxReconnectionDelay","urlProvider","connectionOptions","tenantId","userId","brandId","wscOptions","webSocketUrlWithoutProtocol","query","queryString","createQueryParametersAsString","protocol","window","location","URL","search","createWebSocketUrlWithProtocol","undefined","initializeHeartbeat","handleMessage","payload","authorizationStatus","error","warn","__values","o","Symbol","iterator","m","next","done","__read","r","ar","__spreadArray","to","from","pack","DEFAULT","minReconnectionDelay","random","minUptime","reconnectionDelayGrowFactor","connectionTimeout","Infinity","maxEnqueuedMessages","startClosed","debug","_listeners","open","close","_shouldReconnect","_connectLock","_closeCalled","_messageQueue","_retryCount","_binaryType","_handleOpen","_debug","_options","_connectTimeout","_uptimeTimeout","_acceptOpen","_ws","binaryType","forEach","listener","_callEventListener","_handleMessage","_handleError","_disconnect","_connect","_handleClose","_clearTimeouts","_url","_protocols","_maxRetries","max","configurable","set","acc","Blob","size","byteLength","bufferedAmount","extensions","readyState","WebSocket","CLOSED","CONNECTING","code","reason","reconnect","e_1","listeners_1","listeners_1_1","e_1_1","return","setMaxRetires","_i","console","_getNextDelay","delay","pow","_wait","Promise","resolve","_getNextUrl","then","Error","_removeListeners","_addListeners","_handleTimeout","catch","err","ErrorEvent","CloseEvent","handleEvent","MessageDirection","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","definition","obj","prop","toStringTag","SDKVariableStorage","setAccessToken","accessToken","ACCESS_TOKEN","token","ACCESS_TOKEN_EXPIRES_IN","expiresIn","getAccessToken","global","freeSelf","Function","objectProto","nativeObjectToString","toString","symToStringTag","isOwn","tag","unmasked","isArray","super","name","cause","additionalInfo","_getErrorMessage","AuthorizationError","errorMessage","CHAT_SDK_VERSION","generateId","crypto","randomUUID","randomValues","Uint8Array","getRandomValues","uuid","index","includes","padStart","generateUuidFallback","createVisitorPayload","visitorId","visitor","id","Ctor","func","transform","arg","uid","maskSrcKey","IE_PROTO","funcToString","reIsHostCtor","reIsNative","RegExp","replace","test","object","mapTag","promiseTag","setTag","weakMapTag","dataViewTag","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","getTag","ArrayBuffer","ctorString","freeExports","nodeType","freeModule","Buffer","isBuffer","typedArrayTags","freeProcess","process","nodeUtil","types","binding","nodeIsTypedArray","isTypedArray","requestQueue","Map","makeRequest","async","wsClient","eventId","MAXIMUM_REQUEST_COUNT","TIME_SLOT_IN_SECONDS","requestRateLimitCounter","requestCounterIntervalId","MaximumRequestCountReachError","resetLimitCounter","splitName","firstName","names","setCustomFields","fields","ident","setCustomFieldsFromArray","getCustomFields","fromEntries","getCustomFieldsArray","getCustomFieldsFromArray","field","setCustomerIdentity","customer","customerIdentity","idOnExternalPlatform","lastName","image","customFields","setId","setName","trim","setImage","Customer","websocketClient","getIdOrCreateNewOne","customerId","getId","destroy","customerIdentityIdOnExternalPlatform","getName","getImage","setExists","exists","setWebsocketClient","setCustomField","sendCustomFields","sendChatEvent","eventType","SEND_CONSUMER_CUSTOM_FIELDS","CustomerInstance","getInstance","instance","createCustomerIdentityPayload","storedName","storedImage","customerIdentityNamePayload","getBrandIdAndChannelId","BRAND_ID","channelId","CHANNEL_ID","createEventPayload","eventPayloadData","storedDestinationId","DESTINATION","storedVisitId","VISIT_ID","storedVisitorId","VISITOR_ID","consumerIdentity","destination","visit","brand","channel","createEvent","actionRoute","AwsChatWindowEvent","CHAT_WINDOW_EVENT","payloadData","webSocketClient","CLIENT_SIDE_EVENTS_THROTTLING","setInterval","requestRateLimit","createReconnectPayloadData","RECONNECT_CONSUMER","refreshTokenTimeoutId","handleRefreshToken","refreshTokenAction","accessTokenExpiresIn","idealTimeToRefreshAccessToken","round","getIdealTimeInSecondsForIssueRefreshToken","getAuthorizationTokenForUrl","threadIdOnExternalPlatform","threadId","GENERATE_AUTHORIZATION_TOKEN","thread","createGenerateAuthorizationTokenPayloadData","authorizationToken","isAuthSuccessEvent","status","CONSUMER_AUTHORIZED","isTokenRefreshedSuccessResponse","response","TOKEN_REFRESHED","getBrowserLanguage","navigator","language","getBrowserLocation","Intl","DateTimeFormat","resolvedOptions","timeZone","getDeviceType","deviceType","MOBILE","TABLET","DESKTOP","getBrowserFingerprint","deviceInfoFromUserAgent","userAgent","country","ip","browser","getBrowser","browserVersion","version","os","getOS","osVersion","getDevice","applicationType","BROWSER","getValidLanguage","cleanedLanguage","getCanonicalLocales","Locale","baseName","getDefaultHeaders","requestMetadata","callerServiceId","requestMetadataHeaders","Accept","APP_NAME","AbortError","ERROR_CODE_SDK_VERSION_NOT_SUPPORTED","SdkVersionNotSupported","isSdkVersionNotSupportedEvent","errorCode","sdkVersionCheck","getNetworkInfo","connection","effectiveType","downlink","rtt","online","onLine","isPageUnloading","isWindowClosing","unloadHandler","registerWindowUnload","SecureSessions","fetchJSON","resource","signal","headers","restOptions","abortController","AbortController","onAbort","abort","once","requestInit","requestTimeStart","now","responseBody","fetch","ok","json","errorData","statusText","getErrorResponseData","text","requestDuration","requestUrl","requestOptions","responseStatus","responseStatusText","networkInfo","aborted","getJSON","method","postJSON","body","fetchChannelAvailability","chatEndpoint","requestMetadataHttpHeaders","fetchChannelInfo","getSecuredSessionType","SECURED_SESSION","shouldHandleCustomerIdForSecureSessions","ANONYMOUS","isSecureSessions","EnvironmentName","buildEnvironmentEndpoints","environment","custom","chat","toLowerCase","gateway","authorize","setEnvironmentEndpoints","endpoints","assertEndpoint","ENDPOINT_GATEWAY","ENDPOINT_CHAT","ENDPOINT_AUTHORIZE","endpoint","endpointName","validateEndpoint","ERROR_CANNOT_REFRESH_THIRD_PARTY_TOKEN","ERROR_CANNOT_FETCH_TRANSACTION_TOKEN","IpAddressBlockedError","ChatEvent","AGENT_TYPING_STARTED","AGENT_TYPING_ENDED","ASSIGNED_AGENT_CHANGED","CONTACT_CREATED","CONTACT_STATUS_CHANGED","CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED","ChatCustomEvent","ChatEventMiddleware","middlewares","register","middleware","processedEvent","ChatEventTarget","EventTarget","isOutbound","direction","EMPTY_EVENT","createdAt","normalizeEvent","hasEventId","hasError","hasEventType","hasData","context","eventDetailData","postback","isDataWithPostback","postbackData","postbackEventType","rawEventId","restEventData","eventRest","eventTypeMap","SENDER_TYPING_STARTED","SENDER_TYPING_ENDED","CASE_INBOX_ASSIGNEE_CHANGED","CASE_CREATED","CASE_STATUS_CHANGED","CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED","LIVECHAT_RECOVERED","normalizedContactHistoryItems","contactHistory","chatEventMapper","item","Boolean","THREAD_RECOVERED","initializeRequestMetadata","onError","httpHeaders","entry","headerKey","headerObject","Headers","append","validateAndFilterHeader","validateAndFilterHttpHeaders","networkRequestMetadata","websocketQuery","queryKey","searchParams","URLSearchParams","validateAndFilterQueryParam","validateAndFilterWebSocketQuery","isSendMessageSuccessEventData","SendMessageFailedError","getAuthor","INBOUND","authorEndUserIdentity","fullName","authorUser","surname","isMessage","hasId","hasDirection","hasMessageContent","messageContent","isMessageCreatedEvent","MESSAGE_CREATED","isMessageSentEvent","MESSAGE_SENT","isMessageReadChangedEvent","MESSAGE_READ_CHANGED","getUrlPathForMessageWithFullContent","messageId","isS3ChatEvent","EVENT_IN_S3","TRANSACTION_TOKEN_CACHE_KEY","getAuthorizeUrl","authorizeUrl","pathname","getThirdPartyToken","THIRD_PARTY_TOKEN","refreshThirdPartyToken","refreshUrl","thirdParty","grant_type","refresh_token","credentials","REQUEST_METADATA","handleNewThirdPartyToken","setThirdPartyToken","expires_in","WebSocketClientError","WsEventTarget","socketURLGetter","connect","disconnect","stringData","on","handlerCallback","off","_errorHandler","eventError","startsWith","errorHandlerBound","bind","AUTHORIZATION_FAILED","UploadAttachmentError","createAttachmentPayload","file","abortSignal","attachment","reader","reject","FileReader","onloadend","errorEvent","target","readAsDataURL","createLocalFileReader","mimeType","createPayloadForAttachmentUpload","uploadAttachmentResponse","fileName","requestBody","content","uploadAttachment","fileUrl","friendlyName","allowedFileSize","isUploadFailResponse","isAttachmentUpload","files","every","createTemporaryAttachmentsUpload","all","createAttachmentUploadMessageData","attachments","browserFingerprint","TEXT","consumer","consumerContact","isContactStatusChangedEvent","case","isContactCreatedEvent","isContactToRoutingQueueAssignmentChangedEvent","isContactRecipientsChangedEvent","CONTACT_RECIPIENTS_CHANGED","createMessageData","isLoadMoreMessagesEventData","MORE_MESSAGES_LOADED","messages","createLoadMoreMessagesPayloadData","eventData","LOAD_MORE_MESSAGES","AbortablePromise","executor","abortReason","_abortReason","promise","ArchiveThreadFailedError","GetMetadataFailedError","isLoadMetadataSuccessPayload","THREAD_METADATA_LOADED","lastMessage","isRecoverSuccessPayload","testResponseData","isThreadArchivedSuccessPayload","THREAD_ARCHIVED","LoadMoreMessagesFailedError","createRecoverThreadPayloadData","emptyData","RECOVER_THREAD","SetThreadNameFailedError","ThreadRecoverFailedError","Thread","messageEmitter","isAuthorizationEnabled","_exists","_typingTimeoutID","_isAuthorizationEnabled","_customFields","_typingPreviewText","_websocketClient","_messageEmitter","_customer","_registerEventHandlers","recover","sendMessage","messageData","assertNonEmptyTextMessageContent","sendMessagePayloadData","SEND_MESSAGE","_mergeCustomFieldsAndAccessTokenWithMessageData","sendTextMessage","messageText","textMessageContent","getTextMessageContent","sendPostbackMessage","postbackMessageContent","getPostbackMessageContent","sendOutboundMessage","sendOutboundMessagePayloadData","SEND_OUTBOUND","loadMoreMessages","scrollToken","oldestMessageDatetime","THREAD_DATA","loadMoreMessagesEventData","lastMessageSeen","MESSAGE_SEEN","sendAttachments","keystroke","timeout","onSendCallback","_stopTypingCallback","stopTyping","keystrokeForPreview","currentText","_typingForPreviewTimeoutID","stopTypingForPreview","shouldSendPreview","currentPreviewText","sendMessagePreview","getMetadata","LOAD_THREAD_METADATA","onThreadEvent","handler","filteredEventHandler","eventThreadId","dataWithThread","messagePreview","getThreadId","filterCurrentThreadEventHandler","selectedFieldIdents","customField","SET_CONSUMER_CONTACT_CUSTOM_FIELD","removeCustomField","delete","archive","ARCHIVE_THREAD","updateThreadData","threadName","UPDATE_THREAD","isUpdateThreadSuccess","SEND_MESSAGE_PREVIEW","createSendMessagePreviewPayloadData","sendTranscript","contactNumber","email","SEND_TRANSCRIPT","consumerRecipients","createSendTranscriptPayloadData","_setThreadAndCustomerExists","_clearCustomFieldsOnContactStatusChangedToClosed","eventDetail","ContactStatus","clear","_mergeCustomFieldsWithMessageData","_mergeAccessTokenWithMessageData","storedThirdPartyToken","storedAccessToken","access_token","messageDataWithCustomFields","createRecoverLivechatThreadPayloadData","RECOVER_LIVECHAT","LivechatThread","_isInitialized","_canSendMessage","_registerLivechatEventHandlers","startChat","initialMessageText","endChat","threadData","contactId","END_CONTACT","contact","createEndThreadPayloadData","isThreadListFetchedPostbackData","storeContactId","originalThreadData","storeContactIdMiddleware","storeThreadScrollData","scrollData","array","oldThreadData","storeThreadScrollDataMiddleware","messagesScrollToken","assertIsCallable","ChatSdk","res","rej","getPromiseWithResolvers","refreshTokenResponse","REFRESH_TOKEN","customerImage","customerName","AUTHORIZATION_CODE","authorizationCode","appName","APP_VERSION","appVersion","destinationId","visitId","LANGUAGE","secureSessionsOption","values","getSecureSessionsTypeFromOptions","securedSession","isClientSideEventsThrottlingEnabled","initializeSdkVariables","customerIdOption","setCustomerIdFromOptions","cacheStorage","getItem","setItem","removeItem","CACHE_STORAGE","onRawEvent","isLivechat","THIRD_PARTY","ready","getChannelInfo","getChannelAvailability","reconnectResponse","refreshTokenEventCallback","reconnectPayload","reconnected","authorizationReconnect","basicChannelInfoRequest","channelInfo","isLiveChat","handleBasicChannelInfo","authorizationPayloadData","AUTHORIZE_CUSTOMER","authorization","disableChannelInfo","sdkVersion","sdkPlatform","createAuthorizationPayloadData","authEvent","REGISTER","authorizationRequest","authResponse","basicChannelInfo","generateAuthorizationToken","onChatEvent","getCustomer","getThread","cachedThread","liveThread","_getContactCustomFieldsFromQueue","getThreadList","eventPayload","FETCH_THREAD_LIST","threads","getWebsocketClient","sendOfflineMessage","offlineMessageData","offlineMessagePayloadData","reverse","authorCustomerIdentity","SEND_OFFLINE_MESSAGE","createSendOfflineMessagePayloadData","recoverThreadData","recoverEvent","recoverResponse","recoverLivechatThreadData","resetSession","isAssignedAgentChangedEvent","isAgentTypingStartedEvent","isAgentTypingEndedEvent","sdkError","assertNonNullable","useCache","transactionTokenResponse","cachedTransactionToken","cached","authorization_code","getAuthorizePayload","getTransactionToken","isIpAddressBlockedError","customMetadataHeaders","v","transactionToken","queryParametersAsString","customEnvironment","client","messageCreatedEvent","hasAdditionalMessageContent","messageUrl","messageWithFullContent","Authorization","fetchMessageWithFullContent","getMessageWithFullContent","s3Object","getEventData","parseWsMessageEvent","parsedEvent","has","onMessageHandler","isSetPositionInQueueEvent","setPositionInQueueEvent","isInteger","positionInQueue","SET_POSITION_IN_QUEUE","CreateInvitationFailedError","createCreateInvitationToGroupChatPayloadData","CREATE_GROUP_CHAT_INVITE","sendCreateInvitationToGroupChatEvent","createInvitationPayloadData","GROUP_CHAT_INVITE_CREATED","isInvitationToGroupChatCreated","JoinGroupChatFailedError","createJoinGroupChatPayloadData","JOIN_GROUP_CHAT","invitation","sendJoinGroupChatEvent","joinGroupChatPayloadData","GROUP_CHAT_JOINED","isJoinGroupChatSuccessResponse","createLeaveGroupChatPayloadData","LEAVE_GROUP_CHAT","sendLeaveGroupChatEvent","leaveGroupChatPayloadData","SendEmailInvitaionFailedError","createSendEmailInvitationToGroupChatPayloadData","caseId","invitationCode","SEND_EMAIL_INVITE_TO_GROUP_CHAT","recipients","sendEmailInvitationToGroupChatEvent","GROUP_CHAT_INVITE_SENT","isEmailInvitationToGroupChatSent","CacheStorageError","CacheStorage","storage","expiresAt","ttl","isCustomerReconnectSuccessPayloadData","additionalHttpHeaders"],"sourceRoot":""}