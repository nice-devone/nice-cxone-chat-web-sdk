{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@brandembassy/chat-web-sdk/webpack/universalModuleDefinition","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/isoString.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/misc.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/dateTime/timezone.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/be-javascript-utils/dist/query/queryParameters.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/Logger.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/eventTargetPolyfill/EventTargetPolyfill.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/index.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/pushUpdate/pushUpdateWebSocket.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/HeartBeatState.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/WebSocketClient.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/push-updates-sdk/dist/websocket/WebSocketClientEvent.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/reconnecting-websocket/dist/reconnecting-websocket-mjs.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-chat/dist/user/BrowserFingerprint.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/contact/ContactStatus.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/http/headers.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/message/MessageDirection.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/message/MessageType.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/post/case/CaseStatus.js","webpack://@brandembassy/chat-web-sdk/./node_modules/@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType.js","webpack://@brandembassy/chat-web-sdk/external umd \"ua-parser-js\"","webpack://@brandembassy/chat-web-sdk/external umd \"uuid\"","webpack://@brandembassy/chat-web-sdk/webpack/bootstrap","webpack://@brandembassy/chat-web-sdk/webpack/runtime/compat get default export","webpack://@brandembassy/chat-web-sdk/webpack/runtime/define property getters","webpack://@brandembassy/chat-web-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@brandembassy/chat-web-sdk/webpack/runtime/make namespace object","webpack://@brandembassy/chat-web-sdk/./src/env/ChatSDKVariable.ts","webpack://@brandembassy/chat-web-sdk/./src/env/getEnvVariable.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isNull.js","webpack://@brandembassy/chat-web-sdk/./src/authorization/accessTokenStorage.ts","webpack://@brandembassy/chat-web-sdk/./src/error/ChatSDKError.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/AuthorizationError.ts","webpack://@brandembassy/chat-web-sdk/./src/visitor/createVisitorPayload.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_isPrototype.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_nativeKeys.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_overArg.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseKeys.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_freeGlobal.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_root.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Symbol.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getRawTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_objectToString.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseGetTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isObject.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isFunction.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_coreJsData.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_isMasked.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_toSource.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsNative.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getNative.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getValue.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_DataView.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Map.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Promise.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_Set.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_WeakMap.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_getTag.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isObjectLike.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsArguments.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArguments.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isLength.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isBuffer.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/stubFalse.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseIsTypedArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_nodeUtil.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isTypedArray.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/_baseUnary.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isEmpty.js","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isArrayLike.js","webpack://@brandembassy/chat-web-sdk/./src/request/requestQueue.ts","webpack://@brandembassy/chat-web-sdk/./src/request/makeRequest.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/splitName.ts","webpack://@brandembassy/chat-web-sdk/./src/customField/CustomFields.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/Customer.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/setCustomerCustomFieldsPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/customerIdentityPayload.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isNil.js","webpack://@brandembassy/chat-web-sdk/./src/utils/getBrandIdAndChannelId.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/isUndefined.js","webpack://@brandembassy/chat-web-sdk/./src/sockets/EventPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/event/sendChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/createReconnectPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/handleRefreshToken.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isAuthorizationTokenGeneratedPostbackData.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isAuthSuccessEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/isTokenRefreshedSuccessResponse.ts","webpack://@brandembassy/chat-web-sdk/./src/env/Environments.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEventMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./src/event/ChatEventTarget.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/agentTyping.ts","webpack://@brandembassy/chat-web-sdk/./src/event/normalizeEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/event/middleware/ChatEventMapper.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/assignedAgentChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactCreated.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactStatusChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/contactToRoutingQueueAssignmentChanged.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/livechatRecovered.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/threadRecovered.ts","webpack://@brandembassy/chat-web-sdk/./src/message/MessageSuccessEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/SendMessageFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/sockets/WebSocketClientError.ts","webpack://@brandembassy/chat-web-sdk/./src/sockets/WebSocketClient.ts","webpack://@brandembassy/chat-web-sdk/./src/browserFingerprint/getBrowserFingerprint.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/UploadAttachmentError.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/sendAttachments.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/createPayloadForAttachmentUpload.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/localFileReader.ts","webpack://@brandembassy/chat-web-sdk/./src/attachment/uploadAttachment.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactStatusChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactCreatedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactToRoutingQueueAssignmentChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/contact/isContactRecipientsChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/createMessageData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/loadMoreMessagesEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/message/loadMoreMessagesPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/ArchiveThreadFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/GetMetadataFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isLoadMetadataSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isRecoverSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isThreadArchivedSuccessPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/LoadMoreMessagesFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/recoverThreadPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/SetThreadNameFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/ThreadRecoverFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/Thread.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getTextMessageContent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getPostbackMessageContent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOutboundMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOutboundMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/lastMessageSeenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/typingEvents.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/metadata.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/threadEventHandler.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/setThreadCustomFieldsPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/archiveThread.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/updateThread.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendMessagePreviewPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/transcript.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/recoverLivechatThreadPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/LivechatThread.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/createEndThreadPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/isThreadListFetchedPostbackData.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeContactId.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeContactIdMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/storeThreadScrollData.ts","webpack://@brandembassy/chat-web-sdk/./node_modules/lodash-es/last.js","webpack://@brandembassy/chat-web-sdk/./src/thread/storeThreadScrollDataMiddleware.ts","webpack://@brandembassy/chat-web-sdk/./src/error/AbortError.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/AbortablePromise.ts","webpack://@brandembassy/chat-web-sdk/./src/ChatSdk.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/createRefreshTokenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/env/appName.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/authorizationReconnect.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/authorizationPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/customer/isCustomerIdentityIdValid.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/generateAuthorizationTokenPayload.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOfflineMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/sendOfflineMessagePayload.ts","webpack://@brandembassy/chat-web-sdk/./src/utils/assert.ts","webpack://@brandembassy/chat-web-sdk/./src/request/getEventData.ts","webpack://@brandembassy/chat-web-sdk/./src/request/isS3ChatEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/request/messageHandler.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAssignedAgentChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAgentTypingStartedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/agent/isAgentTypingEndedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/getAuthor.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessage.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageCreatedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageSentEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/message/isMessageReadChangedEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/thread/livechatThread/isSetPositionInQueueEvent.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/CreateInvitationFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/createInvitation.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/JoinGroupChatFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/joinGroupChat.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/leaveGroupChat.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/SendEmailInvitaionFailedError.ts","webpack://@brandembassy/chat-web-sdk/./src/groupChat/sendEmailInvitation.ts","webpack://@brandembassy/chat-web-sdk/./src/authorization/CustomerReconnectSuccessPayloadData.ts","webpack://@brandembassy/chat-web-sdk/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"uuid\"), require(\"ua-parser-js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"uuid\", \"ua-parser-js\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"uuid\"), require(\"ua-parser-js\")) : factory(root[\"uuid\"], root[\"ua-parser-js\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__459__, __WEBPACK_EXTERNAL_MODULE__585__) => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseTimestampFromISO8601String = exports.fromISOString = exports.isISOStringDateWithTimezoneOffset = exports.toISOStringWithTimezoneOffset = exports.toISOStringWithMilliseconds = exports.toISOString = void 0;\nvar timezone_1 = require(\"./timezone\");\nvar misc_1 = require(\"./misc\");\nvar toISOString = function (date) {\n    return (date.getUTCFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCSeconds()) +\n        '+00:00');\n};\nexports.toISOString = toISOString;\nvar toISOStringWithMilliseconds = function (date) {\n    return (date.getUTCFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getUTCSeconds()) +\n        '.' +\n        (date.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n        '+00:00');\n};\nexports.toISOStringWithMilliseconds = toISOStringWithMilliseconds;\nvar toISOStringWithTimezoneOffset = function (date) {\n    return (date.getFullYear() +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getMonth() + 1) +\n        '-' +\n        (0, misc_1.padDateTimeUnit)(date.getDate()) +\n        'T' +\n        (0, misc_1.padDateTimeUnit)(date.getHours()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getMinutes()) +\n        ':' +\n        (0, misc_1.padDateTimeUnit)(date.getSeconds()) +\n        (0, timezone_1.getTimezoneISOOffset)(date));\n};\nexports.toISOStringWithTimezoneOffset = toISOStringWithTimezoneOffset;\nfunction isISOStringDateWithTimezoneOffset(isoDateString) {\n    return /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})$/.test(isoDateString);\n}\nexports.isISOStringDateWithTimezoneOffset = isISOStringDateWithTimezoneOffset;\nfunction fromISOString(isoString) {\n    var milliseconds = Date.parse(isoString);\n    if (isNaN(milliseconds)) {\n        milliseconds = parseTimestampFromISO8601String(isoString);\n    }\n    return new Date(milliseconds);\n}\nexports.fromISOString = fromISOString;\nfunction parseTimestampFromISO8601String(isoString) {\n    var day;\n    var rx = /^(\\d{4}-\\d\\d-\\d\\d([tT][\\d:.]*)?)([zZ]|([+-])(\\d\\d):?(\\d\\d))?$/;\n    var parsedDate = rx.exec(isoString) || [];\n    if (parsedDate[1]) {\n        day = parsedDate[1].split(/\\D/).map(function (itm) { return parseInt(itm, 10) || 0; });\n        day[1] -= 1;\n        //@ts-ignore\n        day = new Date(Date.UTC.apply(Date, day));\n        if (!day.getDate()) {\n            return NaN;\n        }\n        if (parsedDate[5]) {\n            var tz = parseInt(parsedDate[5], 10) * 60;\n            if (parsedDate[6]) {\n                tz += parseInt(parsedDate[6], 10);\n            }\n            if (parsedDate[4] === '+') {\n                tz *= -1;\n            }\n            if (tz) {\n                day.setUTCMinutes(day.getUTCMinutes() + tz);\n            }\n        }\n        return day.getTime();\n    }\n    return NaN;\n}\nexports.parseTimestampFromISO8601String = parseTimestampFromISO8601String;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTimeInMinutes = exports.getTimeInMilliseconds = exports.getTimeInSeconds = exports.padDateTimeUnit = void 0;\nvar padDateTimeUnit = function (dateTimeUnit) {\n    var norm = Math.abs(Math.floor(typeof dateTimeUnit === 'string' ? Number(dateTimeUnit) : dateTimeUnit));\n    return (norm < 10 ? '0' : '') + norm;\n};\nexports.padDateTimeUnit = padDateTimeUnit;\nvar getTimeInSeconds = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d;\n    return hours * 60 * 60 + minutes * 60 + seconds;\n};\nexports.getTimeInSeconds = getTimeInSeconds;\nvar getTimeInMilliseconds = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d, _e = _a.milliseconds, milliseconds = _e === void 0 ? 0 : _e;\n    return (0, exports.getTimeInSeconds)({ hours: hours, minutes: minutes, seconds: seconds }) * 1000 + milliseconds;\n};\nexports.getTimeInMilliseconds = getTimeInMilliseconds;\nvar getTimeInMinutes = function (_a) {\n    var _b = _a.hours, hours = _b === void 0 ? 0 : _b, _c = _a.minutes, minutes = _c === void 0 ? 0 : _c, _d = _a.seconds, seconds = _d === void 0 ? 0 : _d;\n    return (0, exports.getTimeInSeconds)({ hours: hours, minutes: minutes, seconds: seconds }) / 60;\n};\nexports.getTimeInMinutes = getTimeInMinutes;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTimezoneISOOffset = void 0;\nvar misc_1 = require(\"./misc\");\nvar getTimezoneISOOffset = function (date) {\n    if (date === void 0) { date = new Date(); }\n    var tzo = date.getTimezoneOffset();\n    var dif = tzo > 0 ? '-' : '+';\n    return \"\".concat(dif).concat((0, misc_1.padDateTimeUnit)(tzo / 60), \":\").concat((0, misc_1.padDateTimeUnit)(tzo % 60));\n};\nexports.getTimezoneISOOffset = getTimezoneISOOffset;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createQueryParametersAsString = void 0;\nfunction createQueryParametersAsString(queryParameters) {\n    return Object.keys(queryParameters)\n        .filter(function (key) { return queryParameters[key] !== null; })\n        .map(function (key) {\n        return [key, queryParameters[key]].map(encodeURIComponent).join('=');\n    })\n        .join('&');\n}\nexports.createQueryParametersAsString = createQueryParametersAsString;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LogLevels = void 0;\nvar LogLevels;\n(function (LogLevels) {\n    LogLevels[\"ERROR\"] = \"error\";\n    LogLevels[\"INFO\"] = \"info\";\n    LogLevels[\"WARN\"] = \"warn\";\n})(LogLevels = exports.LogLevels || (exports.LogLevels = {}));\n//# sourceMappingURL=Logger.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventTargetPolyfill = void 0;\nvar EventTargetPolyfill = (function () {\n    function EventTargetPolyfill() {\n        this.listeners = {};\n    }\n    EventTargetPolyfill.prototype.addEventListener = function (type, callback) {\n        if (!(type in this.listeners)) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(callback);\n    };\n    EventTargetPolyfill.prototype.removeEventListener = function (type, callback) {\n        if (!(type in this.listeners)) {\n            return;\n        }\n        var stack = this.listeners[type];\n        for (var i = 0, l = stack.length; i < l; i++) {\n            if (stack[i] === callback) {\n                stack.splice(i, 1);\n                return;\n            }\n        }\n    };\n    EventTargetPolyfill.prototype.dispatchEvent = function (event) {\n        if (!(event.type in this.listeners)) {\n            return true;\n        }\n        var stack = this.listeners[event.type].slice();\n        for (var i = 0, l = stack.length; i < l; i++) {\n            stack[i].call(this, event);\n        }\n        return !event.defaultPrevented;\n    };\n    return EventTargetPolyfill;\n}());\nexports.EventTargetPolyfill = EventTargetPolyfill;\n//# sourceMappingURL=EventTargetPolyfill.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketClientEvent = exports.WebSocketClient = exports.EventTargetPolyfill = exports.HeartBeatState = void 0;\nvar HeartBeatState_1 = require(\"./websocket/HeartBeatState\");\nObject.defineProperty(exports, \"HeartBeatState\", { enumerable: true, get: function () { return HeartBeatState_1.HeartBeatState; } });\nvar EventTargetPolyfill_1 = require(\"./eventTargetPolyfill/EventTargetPolyfill\");\nObject.defineProperty(exports, \"EventTargetPolyfill\", { enumerable: true, get: function () { return EventTargetPolyfill_1.EventTargetPolyfill; } });\nvar WebSocketClient_1 = require(\"./websocket/WebSocketClient\");\nObject.defineProperty(exports, \"WebSocketClient\", { enumerable: true, get: function () { return WebSocketClient_1.WebSocketClient; } });\nvar WebSocketClientEvent_1 = require(\"./websocket/WebSocketClientEvent\");\nObject.defineProperty(exports, \"WebSocketClientEvent\", { enumerable: true, get: function () { return WebSocketClientEvent_1.WebSocketClientEvent; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPushUpdateWebSocket = exports.setupSocketConnection = void 0;\nvar WebSocketClient_1 = require(\"../websocket/WebSocketClient\");\nvar WebSocketClientEvent_1 = require(\"../websocket/WebSocketClientEvent\");\nvar socket = null;\nfunction createWebSocketUrlWithProtocol(webSocketUrlWithoutProtocol, forceSecureProtocol) {\n    if (forceSecureProtocol) {\n        return \"wss://\" + webSocketUrlWithoutProtocol;\n    }\n    var protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    return protocol + \"//\" + webSocketUrlWithoutProtocol;\n}\nvar defaultConnectionOptions = {\n    forceSecureProtocol: false,\n    heartbeatAfterAuthorize: false,\n    maxRetries: 20,\n    maxReconnectionDelay: 1000,\n};\nvar setupSocketConnection = function (webSocketUrlWithoutProtocol, options) {\n    if (options === void 0) { options = {}; }\n    if (typeof options !== 'object') {\n        throw new TypeError(\"Options parameter must be an object not a \" + typeof options);\n    }\n    var connectionOptions = __assign(__assign({}, defaultConnectionOptions), options);\n    var forceSecureProtocol = connectionOptions.forceSecureProtocol, heartbeatAfterAuthorize = connectionOptions.heartbeatAfterAuthorize, wscOptions = __rest(connectionOptions, [\"forceSecureProtocol\", \"heartbeatAfterAuthorize\"]);\n    var url = createWebSocketUrlWithProtocol(webSocketUrlWithoutProtocol, forceSecureProtocol);\n    socket = new WebSocketClient_1.WebSocketClient(url, undefined, wscOptions);\n    if (heartbeatAfterAuthorize) {\n        socket.addEventListener(WebSocketClientEvent_1.WebSocketClientEvent.MESSAGE, function (event) {\n            if (JSON.parse(event.detail.data) === 'authorized') {\n                socket === null || socket === void 0 ? void 0 : socket.startHeartBeat();\n            }\n        });\n    }\n    else {\n        socket.startHeartBeat();\n    }\n    return socket;\n};\nexports.setupSocketConnection = setupSocketConnection;\nvar getPushUpdateWebSocket = function () { return socket; };\nexports.getPushUpdateWebSocket = getPushUpdateWebSocket;\n//# sourceMappingURL=pushUpdateWebSocket.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeartBeatState = void 0;\nvar HeartBeatState;\n(function (HeartBeatState) {\n    HeartBeatState[\"DIED\"] = \"died\";\n    HeartBeatState[\"DYING\"] = \"dying\";\n    HeartBeatState[\"LIVING\"] = \"living\";\n})(HeartBeatState = exports.HeartBeatState || (exports.HeartBeatState = {}));\n//# sourceMappingURL=HeartBeatState.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketClient = exports.HEART_BEAT_CHECK_TIMEOUT = exports.HEART_BEAT_INTERVAL = void 0;\nvar Logger_1 = require(\"../Logger\");\nvar reconnecting_websocket_1 = __importDefault(require(\"@brandembassy/reconnecting-websocket\"));\nvar EventTargetPolyfill_1 = require(\"../eventTargetPolyfill/EventTargetPolyfill\");\nvar HeartBeatState_1 = require(\"./HeartBeatState\");\nvar WebSocketClientEvent_1 = require(\"./WebSocketClientEvent\");\nexports.HEART_BEAT_INTERVAL = 15000;\nexports.HEART_BEAT_CHECK_TIMEOUT = exports.HEART_BEAT_INTERVAL * 3;\nvar HEART_BEAT_RESPONSE = 'pong';\nvar HEART_BEAT_ACTION_NAME = 'heartbeat';\nvar WebSocketClient = (function (_super) {\n    __extends(WebSocketClient, _super);\n    function WebSocketClient(url, protocols, options) {\n        var _this = _super.call(this) || this;\n        _this.heartBeatTimeout = null;\n        _this.heartBeatCheckTimeout = null;\n        _this.enableDebugMode = function () {\n            if (!_this.debugMode) {\n                _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--loggerEnabled');\n            }\n            _this.debugMode = true;\n        };\n        _this.disableDebugMode = function () {\n            _this.debugMode = false;\n        };\n        _this.log = function (level, message, args) {\n            if (_this.debugMode && _this.logger) {\n                _this.logger[level](message, args);\n            }\n        };\n        _this.sendHeartBeat = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--sendHeartBeat');\n            _this.send(JSON.stringify({ action: HEART_BEAT_ACTION_NAME }));\n        };\n        _this.handleHeartBeatResponse = function () {\n            if (_this.heartBeatState === HeartBeatState_1.HeartBeatState.DYING) {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.LIVING;\n                _this.dispatchHeartBeatState();\n            }\n            _this.setHeartBeatCheckTimeout();\n        };\n        _this.setHeartBeatCheckTimeout = function () {\n            if (_this.heartBeatCheckTimeout !== null) {\n                clearTimeout(_this.heartBeatCheckTimeout);\n            }\n            _this.heartBeatCheckTimeout = setTimeout(function () {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DYING;\n                _this.dispatchHeartBeatState();\n            }, exports.HEART_BEAT_CHECK_TIMEOUT);\n        };\n        _this.dispatchHeartBeatState = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--dispatchHeartBeatState', [\n                { hearbeatState: _this.heartBeatState },\n            ]);\n            if (_this.heartBeatState !== null) {\n                _this.dispatchEvent(new CustomEvent(_this.heartBeatState));\n            }\n        };\n        _this.isHeartBeatActive = function () { return _this.heartBeatState !== null; };\n        _this.heartBeatState = null;\n        _this.debugMode = false;\n        _this.socket = new reconnecting_websocket_1.default(url, protocols, options);\n        _this.socket.onopen = function () {\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.OPEN));\n        };\n        if (options === null || options === void 0 ? void 0 : options.logger) {\n            _this.logger = options.logger;\n        }\n        _this.socket.onclose = function (closeEvent) {\n            if (_this.socket.retryCount === (options === null || options === void 0 ? void 0 : options.maxRetries)) {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DIED;\n            }\n            else {\n                _this.heartBeatState = HeartBeatState_1.HeartBeatState.DYING;\n            }\n            _this.dispatchHeartBeatState();\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.CLOSE, { detail: closeEvent }));\n        };\n        _this.socket.onmessage = function (event) {\n            _this.handleHeartBeatResponse();\n            if (JSON.parse(event.data) !== HEART_BEAT_RESPONSE) {\n                _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--onmessage', [event]);\n                _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.MESSAGE, { detail: event }));\n            }\n        };\n        _this.socket.onerror = function (event) {\n            _this.log(Logger_1.LogLevels.ERROR, 'websocket-push-updates--onError', [event]);\n            _this.dispatchEvent(new CustomEvent(WebSocketClientEvent_1.WebSocketClientEvent.ERROR, { detail: event }));\n        };\n        return _this;\n    }\n    WebSocketClient.prototype.send = function (data) {\n        this.socket.send(data);\n    };\n    WebSocketClient.prototype.startHeartBeat = function () {\n        var _this = this;\n        this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--startHeartBeat', [\n            { interval: exports.HEART_BEAT_INTERVAL },\n        ]);\n        var heartBeatCallback = function () {\n            _this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--heartBeatCallback');\n            _this.sendHeartBeat();\n            _this.heartBeatTimeout = setTimeout(heartBeatCallback, exports.HEART_BEAT_INTERVAL);\n        };\n        this.setHeartBeatCheckTimeout();\n        heartBeatCallback();\n        this.heartBeatState = HeartBeatState_1.HeartBeatState.LIVING;\n    };\n    WebSocketClient.prototype.stopHeartBeat = function () {\n        this.log(Logger_1.LogLevels.INFO, 'websocket-push-updates--stopHeartBeat');\n        if (this.heartBeatTimeout !== null) {\n            clearTimeout(this.heartBeatTimeout);\n        }\n        if (this.heartBeatCheckTimeout !== null) {\n            clearTimeout(this.heartBeatCheckTimeout);\n        }\n        this.heartBeatState = null;\n    };\n    return WebSocketClient;\n}(EventTargetPolyfill_1.EventTargetPolyfill));\nexports.WebSocketClient = WebSocketClient;\n//# sourceMappingURL=WebSocketClient.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketClientEvent = void 0;\nvar WebSocketClientEvent;\n(function (WebSocketClientEvent) {\n    WebSocketClientEvent[\"CLOSE\"] = \"close\";\n    WebSocketClientEvent[\"ERROR\"] = \"error\";\n    WebSocketClientEvent[\"MESSAGE\"] = \"message\";\n    WebSocketClientEvent[\"OPEN\"] = \"open\";\n})(WebSocketClientEvent = exports.WebSocketClientEvent || (exports.WebSocketClientEvent = {}));\n//# sourceMappingURL=WebSocketClientEvent.js.map","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nfunction __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\n\nvar Event = /** @class */ (function () {\r\n    function Event(type, target) {\r\n        this.target = target;\r\n        this.type = type;\r\n    }\r\n    return Event;\r\n}());\r\nvar ErrorEvent = /** @class */ (function (_super) {\r\n    __extends(ErrorEvent, _super);\r\n    function ErrorEvent(error, target) {\r\n        var _this = _super.call(this, 'error', target) || this;\r\n        _this.message = error.message;\r\n        _this.error = error;\r\n        return _this;\r\n    }\r\n    return ErrorEvent;\r\n}(Event));\r\nvar CloseEvent = /** @class */ (function (_super) {\r\n    __extends(CloseEvent, _super);\r\n    function CloseEvent(code, reason, target) {\r\n        if (code === void 0) { code = 1000; }\r\n        if (reason === void 0) { reason = ''; }\r\n        var _this = _super.call(this, 'close', target) || this;\r\n        _this.wasClean = true;\r\n        _this.code = code;\r\n        _this.reason = reason;\r\n        return _this;\r\n    }\r\n    return CloseEvent;\r\n}(Event));\n\n/*!\r\n * Reconnecting WebSocket\r\n * by Pedro Ladaria <pedro.ladaria@gmail.com>\r\n * https://github.com/pladaria/reconnecting-websocket\r\n * License MIT\r\n */\r\nvar getGlobalWebSocket = function () {\r\n    if (typeof WebSocket !== 'undefined') {\r\n        // @ts-ignore\r\n        return WebSocket;\r\n    }\r\n};\r\n/**\r\n * Returns true if given argument looks like a WebSocket class\r\n */\r\nvar isWebSocket = function (w) { return typeof w !== 'undefined' && !!w && w.CLOSING === 2; };\r\nvar DEFAULT = {\r\n    maxReconnectionDelay: 10000,\r\n    minReconnectionDelay: 1000 + Math.random() * 4000,\r\n    minUptime: 5000,\r\n    reconnectionDelayGrowFactor: 1.3,\r\n    connectionTimeout: 4000,\r\n    maxRetries: Infinity,\r\n    maxEnqueuedMessages: Infinity,\r\n    startClosed: false,\r\n    debug: false,\r\n};\r\nvar ReconnectingWebSocket = /** @class */ (function () {\r\n    function ReconnectingWebSocket(url, protocols, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        this._listeners = {\r\n            error: [],\r\n            message: [],\r\n            open: [],\r\n            close: [],\r\n        };\r\n        this._retryCount = -1;\r\n        this._shouldReconnect = true;\r\n        this._connectLock = false;\r\n        this._binaryType = 'blob';\r\n        this._closeCalled = false;\r\n        this._messageQueue = [];\r\n        /**\r\n         * An event listener to be called when the WebSocket connection's readyState changes to CLOSED\r\n         */\r\n        this.onclose = null;\r\n        /**\r\n         * An event listener to be called when an error occurs\r\n         */\r\n        this.onerror = null;\r\n        /**\r\n         * An event listener to be called when a message is received from the server\r\n         */\r\n        this.onmessage = null;\r\n        /**\r\n         * An event listener to be called when the WebSocket connection's readyState changes to OPEN;\r\n         * this indicates that the connection is ready to send and receive data\r\n         */\r\n        this.onopen = null;\r\n        this._handleOpen = function (event) {\r\n            _this._debug('open event');\r\n            var _a = _this._options.minUptime, minUptime = _a === void 0 ? DEFAULT.minUptime : _a;\r\n            clearTimeout(_this._connectTimeout);\r\n            _this._uptimeTimeout = setTimeout(function () { return _this._acceptOpen(); }, minUptime);\r\n            _this._ws.binaryType = _this._binaryType;\r\n            // send enqueued messages (messages sent before websocket open event)\r\n            _this._messageQueue.forEach(function (message) { var _a; return (_a = _this._ws) === null || _a === void 0 ? void 0 : _a.send(message); });\r\n            _this._messageQueue = [];\r\n            if (_this.onopen) {\r\n                _this.onopen(event);\r\n            }\r\n            _this._listeners.open.forEach(function (listener) { return _this._callEventListener(event, listener); });\r\n        };\r\n        this._handleMessage = function (event) {\r\n            _this._debug('message event');\r\n            if (_this.onmessage) {\r\n                _this.onmessage(event);\r\n            }\r\n            _this._listeners.message.forEach(function (listener) { return _this._callEventListener(event, listener); });\r\n        };\r\n        this._handleError = function (event) {\r\n            _this._debug('error event', event.message);\r\n            _this._disconnect(undefined, event.message === 'TIMEOUT' ? 'timeout' : undefined);\r\n            if (_this.onerror) {\r\n                _this.onerror(event);\r\n            }\r\n            _this._debug('exec error listeners');\r\n            _this._listeners.error.forEach(function (listener) { return _this._callEventListener(event, listener); });\r\n            _this._connect();\r\n        };\r\n        this._handleClose = function (event) {\r\n            _this._debug('close event');\r\n            _this._clearTimeouts();\r\n            if (_this._shouldReconnect) {\r\n                _this._connect();\r\n            }\r\n            if (_this.onclose) {\r\n                _this.onclose(event);\r\n            }\r\n            _this._listeners.close.forEach(function (listener) { return _this._callEventListener(event, listener); });\r\n        };\r\n        this._url = url;\r\n        this._protocols = protocols;\r\n        this._options = options;\r\n        if (this._options.startClosed) {\r\n            this._shouldReconnect = false;\r\n        }\r\n        this._connect();\r\n    }\r\n    Object.defineProperty(ReconnectingWebSocket, \"CONNECTING\", {\r\n        get: function () {\r\n            return 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket, \"OPEN\", {\r\n        get: function () {\r\n            return 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket, \"CLOSING\", {\r\n        get: function () {\r\n            return 2;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket, \"CLOSED\", {\r\n        get: function () {\r\n            return 3;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"CONNECTING\", {\r\n        get: function () {\r\n            return ReconnectingWebSocket.CONNECTING;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"OPEN\", {\r\n        get: function () {\r\n            return ReconnectingWebSocket.OPEN;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"CLOSING\", {\r\n        get: function () {\r\n            return ReconnectingWebSocket.CLOSING;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"CLOSED\", {\r\n        get: function () {\r\n            return ReconnectingWebSocket.CLOSED;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"binaryType\", {\r\n        get: function () {\r\n            return this._ws ? this._ws.binaryType : this._binaryType;\r\n        },\r\n        set: function (value) {\r\n            this._binaryType = value;\r\n            if (this._ws) {\r\n                this._ws.binaryType = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"retryCount\", {\r\n        /**\r\n         * Returns the number or connection retries\r\n         */\r\n        get: function () {\r\n            return Math.max(this._retryCount, 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"bufferedAmount\", {\r\n        /**\r\n         * The number of bytes of data that have been queued using calls to send() but not yet\r\n         * transmitted to the network. This value resets to zero once all queued data has been sent.\r\n         * This value does not reset to zero when the connection is closed; if you keep calling send(),\r\n         * this will continue to climb. Read only\r\n         */\r\n        get: function () {\r\n            var bytes = this._messageQueue.reduce(function (acc, message) {\r\n                if (typeof message === 'string') {\r\n                    acc += message.length; // not byte size\r\n                }\r\n                else if (message instanceof Blob) {\r\n                    acc += message.size;\r\n                }\r\n                else {\r\n                    acc += message.byteLength;\r\n                }\r\n                return acc;\r\n            }, 0);\r\n            return bytes + (this._ws ? this._ws.bufferedAmount : 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"extensions\", {\r\n        /**\r\n         * The extensions selected by the server. This is currently only the empty string or a list of\r\n         * extensions as negotiated by the connection\r\n         */\r\n        get: function () {\r\n            return this._ws ? this._ws.extensions : '';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"protocol\", {\r\n        /**\r\n         * A string indicating the name of the sub-protocol the server selected;\r\n         * this will be one of the strings specified in the protocols parameter when creating the\r\n         * WebSocket object\r\n         */\r\n        get: function () {\r\n            return this._ws ? this._ws.protocol : '';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"readyState\", {\r\n        /**\r\n         * The current state of the connection; this is one of the Ready state constants\r\n         */\r\n        get: function () {\r\n            if (this._ws) {\r\n                return this._ws.readyState;\r\n            }\r\n            return this._options.startClosed\r\n                ? ReconnectingWebSocket.CLOSED\r\n                : ReconnectingWebSocket.CONNECTING;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"url\", {\r\n        /**\r\n         * The URL as resolved by the constructor\r\n         */\r\n        get: function () {\r\n            return this._ws ? this._ws.url : '';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Closes the WebSocket connection or connection attempt, if any. If the connection is already\r\n     * CLOSED, this method does nothing\r\n     */\r\n    ReconnectingWebSocket.prototype.close = function (code, reason) {\r\n        if (code === void 0) { code = 1000; }\r\n        this._closeCalled = true;\r\n        this._shouldReconnect = false;\r\n        this._clearTimeouts();\r\n        if (!this._ws) {\r\n            this._debug('close enqueued: no ws instance');\r\n            return;\r\n        }\r\n        if (this._ws.readyState === this.CLOSED) {\r\n            this._debug('close: already closed');\r\n            return;\r\n        }\r\n        this._ws.close(code, reason);\r\n    };\r\n    /**\r\n     * Closes the WebSocket connection or connection attempt and connects again.\r\n     * Resets retry counter;\r\n     */\r\n    ReconnectingWebSocket.prototype.reconnect = function (code, reason) {\r\n        this._shouldReconnect = true;\r\n        this._closeCalled = false;\r\n        this._retryCount = -1;\r\n        if (!this._ws || this._ws.readyState === this.CLOSED) {\r\n            this._connect();\r\n        }\r\n        else {\r\n            this._disconnect(code, reason);\r\n            this._connect();\r\n        }\r\n    };\r\n    /**\r\n     * Enqueue specified data to be transmitted to the server over the WebSocket connection\r\n     */\r\n    ReconnectingWebSocket.prototype.send = function (data) {\r\n        if (this._ws && this._ws.readyState === this.OPEN) {\r\n            this._debug('send', data);\r\n            this._ws.send(data);\r\n        }\r\n        else {\r\n            var _a = this._options.maxEnqueuedMessages, maxEnqueuedMessages = _a === void 0 ? DEFAULT.maxEnqueuedMessages : _a;\r\n            if (this._messageQueue.length < maxEnqueuedMessages) {\r\n                this._debug('enqueue', data);\r\n                this._messageQueue.push(data);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Register an event handler of a specific event type\r\n     */\r\n    ReconnectingWebSocket.prototype.addEventListener = function (type, listener) {\r\n        if (this._listeners[type]) {\r\n            // @ts-ignore\r\n            this._listeners[type].push(listener);\r\n        }\r\n    };\r\n    ReconnectingWebSocket.prototype.dispatchEvent = function (event) {\r\n        var e_1, _a;\r\n        var listeners = this._listeners[event.type];\r\n        if (listeners) {\r\n            try {\r\n                for (var listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {\r\n                    var listener = listeners_1_1.value;\r\n                    this._callEventListener(event, listener);\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (listeners_1_1 && !listeners_1_1.done && (_a = listeners_1.return)) _a.call(listeners_1);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Removes an event listener\r\n     */\r\n    ReconnectingWebSocket.prototype.removeEventListener = function (type, listener) {\r\n        if (this._listeners[type]) {\r\n            // @ts-ignore\r\n            this._listeners[type] = this._listeners[type].filter(function (l) { return l !== listener; });\r\n        }\r\n    };\r\n    ReconnectingWebSocket.prototype._debug = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (this._options.debug) {\r\n            // not using spread because compiled version uses Symbols\r\n            // tslint:disable-next-line\r\n            console.log.apply(console, __spread(['RWS>'], args));\r\n        }\r\n    };\r\n    ReconnectingWebSocket.prototype._getNextDelay = function () {\r\n        var _a = this._options, _b = _a.reconnectionDelayGrowFactor, reconnectionDelayGrowFactor = _b === void 0 ? DEFAULT.reconnectionDelayGrowFactor : _b, _c = _a.minReconnectionDelay, minReconnectionDelay = _c === void 0 ? DEFAULT.minReconnectionDelay : _c, _d = _a.maxReconnectionDelay, maxReconnectionDelay = _d === void 0 ? DEFAULT.maxReconnectionDelay : _d;\r\n        var delay = 0;\r\n        if (this._retryCount > 0) {\r\n            delay =\r\n                minReconnectionDelay * Math.pow(reconnectionDelayGrowFactor, this._retryCount - 1);\r\n            if (delay > maxReconnectionDelay) {\r\n                delay = maxReconnectionDelay;\r\n            }\r\n        }\r\n        this._debug('next delay', delay);\r\n        return delay;\r\n    };\r\n    ReconnectingWebSocket.prototype._wait = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            setTimeout(resolve, _this._getNextDelay());\r\n        });\r\n    };\r\n    ReconnectingWebSocket.prototype._getNextUrl = function (urlProvider) {\r\n        if (typeof urlProvider === 'string') {\r\n            return Promise.resolve(urlProvider);\r\n        }\r\n        if (typeof urlProvider === 'function') {\r\n            var url = urlProvider();\r\n            if (typeof url === 'string') {\r\n                return Promise.resolve(url);\r\n            }\r\n            // @ts-ignore redundant check\r\n            if (url.then) {\r\n                return url;\r\n            }\r\n        }\r\n        throw Error('Invalid URL');\r\n    };\r\n    ReconnectingWebSocket.prototype._connect = function () {\r\n        var _this = this;\r\n        if (this._connectLock || !this._shouldReconnect) {\r\n            return;\r\n        }\r\n        this._connectLock = true;\r\n        var _a = this._options, _b = _a.maxRetries, maxRetries = _b === void 0 ? DEFAULT.maxRetries : _b, _c = _a.connectionTimeout, connectionTimeout = _c === void 0 ? DEFAULT.connectionTimeout : _c, _d = _a.WebSocket, WebSocket = _d === void 0 ? getGlobalWebSocket() : _d;\r\n        if (this._retryCount >= maxRetries) {\r\n            this._debug('max retries reached', this._retryCount, '>=', maxRetries);\r\n            return;\r\n        }\r\n        this._retryCount++;\r\n        this._debug('connect', this._retryCount);\r\n        this._removeListeners();\r\n        if (!isWebSocket(WebSocket)) {\r\n            throw Error('No valid WebSocket class provided');\r\n        }\r\n        this._wait()\r\n            .then(function () { return _this._getNextUrl(_this._url); })\r\n            .then(function (url) {\r\n            // close could be called before creating the ws\r\n            if (_this._closeCalled) {\r\n                _this._connectLock = false;\r\n                return;\r\n            }\r\n            _this._debug('connect', { url: url, protocols: _this._protocols });\r\n            _this._ws = _this._protocols\r\n                ? new WebSocket(url, _this._protocols)\r\n                : new WebSocket(url);\r\n            _this._ws.binaryType = _this._binaryType;\r\n            _this._connectLock = false;\r\n            _this._addListeners();\r\n            _this._connectTimeout = setTimeout(function () { return _this._handleTimeout(); }, connectionTimeout);\r\n        })\r\n            .catch(function (err) {\r\n            _this._connectLock = false;\r\n            _this._handleError(new ErrorEvent(Error(err.message), _this));\r\n        });\r\n    };\r\n    ReconnectingWebSocket.prototype._handleTimeout = function () {\r\n        this._debug('timeout event');\r\n        this._handleError(new ErrorEvent(Error('TIMEOUT'), this));\r\n    };\r\n    ReconnectingWebSocket.prototype._disconnect = function (code, reason) {\r\n        if (code === void 0) { code = 1000; }\r\n        this._clearTimeouts();\r\n        if (!this._ws) {\r\n            return;\r\n        }\r\n        this._removeListeners();\r\n        try {\r\n            this._ws.close(code, reason);\r\n            this._handleClose(new CloseEvent(code, reason, this));\r\n        }\r\n        catch (error) {\r\n            // ignore\r\n        }\r\n    };\r\n    ReconnectingWebSocket.prototype._acceptOpen = function () {\r\n        this._debug('accept open');\r\n        this._retryCount = 0;\r\n    };\r\n    ReconnectingWebSocket.prototype._callEventListener = function (event, listener) {\r\n        if ('handleEvent' in listener) {\r\n            // @ts-ignore\r\n            listener.handleEvent(event);\r\n        }\r\n        else {\r\n            // @ts-ignore\r\n            listener(event);\r\n        }\r\n    };\r\n    ReconnectingWebSocket.prototype._removeListeners = function () {\r\n        if (!this._ws) {\r\n            return;\r\n        }\r\n        this._debug('removeListeners');\r\n        this._ws.removeEventListener('open', this._handleOpen);\r\n        this._ws.removeEventListener('close', this._handleClose);\r\n        this._ws.removeEventListener('message', this._handleMessage);\r\n        // @ts-ignore\r\n        this._ws.removeEventListener('error', this._handleError);\r\n    };\r\n    ReconnectingWebSocket.prototype._addListeners = function () {\r\n        if (!this._ws) {\r\n            return;\r\n        }\r\n        this._debug('addListeners');\r\n        this._ws.addEventListener('open', this._handleOpen);\r\n        this._ws.addEventListener('close', this._handleClose);\r\n        this._ws.addEventListener('message', this._handleMessage);\r\n        // @ts-ignore\r\n        this._ws.addEventListener('error', this._handleError);\r\n    };\r\n    ReconnectingWebSocket.prototype._clearTimeouts = function () {\r\n        clearTimeout(this._connectTimeout);\r\n        clearTimeout(this._uptimeTimeout);\r\n    };\r\n    return ReconnectingWebSocket;\r\n}());\n\nexport default ReconnectingWebSocket;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AwsChatWindowEventActionRoute;\n(function (AwsChatWindowEventActionRoute) {\n    AwsChatWindowEventActionRoute[\"CHAT_WINDOW_EVENT\"] = \"chatWindowEvent\";\n    AwsChatWindowEventActionRoute[\"REGISTER\"] = \"register\";\n})(AwsChatWindowEventActionRoute = exports.AwsChatWindowEventActionRoute || (exports.AwsChatWindowEventActionRoute = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AwsInputEventType;\n(function (AwsInputEventType) {\n    AwsInputEventType[\"SENDER_TYPING_STARTED\"] = \"SenderTypingStarted\";\n    AwsInputEventType[\"SENDER_TYPING_ENDED\"] = \"SenderTypingEnded\";\n    AwsInputEventType[\"LOAD_MORE_MESSAGES\"] = \"LoadMoreMessages\";\n    AwsInputEventType[\"RECOVER_LIVECHAT\"] = \"RecoverLivechat\";\n    AwsInputEventType[\"RECOVER_THREAD\"] = \"RecoverThread\";\n    AwsInputEventType[\"SEND_MESSAGE\"] = \"SendMessage\";\n    AwsInputEventType[\"SEND_OUTBOUND\"] = \"SendOutbound\";\n    AwsInputEventType[\"SEND_OFFLINE_MESSAGE\"] = \"SendOfflineMessage\";\n    AwsInputEventType[\"SEND_PAGE_VIEWS\"] = \"SendPageViews\";\n    AwsInputEventType[\"SEND_CONSUMER_CUSTOM_FIELDS\"] = \"SetConsumerCustomFields\";\n    AwsInputEventType[\"SET_CONSUMER_CONTACT_CUSTOM_FIELD\"] = \"SetConsumerContactCustomFields\";\n    AwsInputEventType[\"MESSAGE_SEEN\"] = \"MessageSeenByConsumer\";\n    AwsInputEventType[\"SEND_TRANSCRIPT\"] = \"SendTranscript\";\n    AwsInputEventType[\"FETCH_THREAD_LIST\"] = \"FetchThreadList\";\n    AwsInputEventType[\"END_CONTACT\"] = \"EndContact\";\n    AwsInputEventType[\"EXECUTE_TRIGGER\"] = \"ExecuteTrigger\";\n    AwsInputEventType[\"AUTHORIZE_CONSUMER\"] = \"AuthorizeConsumer\";\n    AwsInputEventType[\"AUTHORIZE_CUSTOMER\"] = \"AuthorizeCustomer\";\n    AwsInputEventType[\"RECONNECT_CONSUMER\"] = \"ReconnectConsumer\";\n    AwsInputEventType[\"UPDATE_THREAD\"] = \"UpdateThread\";\n    AwsInputEventType[\"ARCHIVE_THREAD\"] = \"ArchiveThread\";\n    AwsInputEventType[\"LOAD_THREAD_METADATA\"] = \"LoadThreadMetadata\";\n    AwsInputEventType[\"REFRESH_TOKEN\"] = \"RefreshToken\";\n    AwsInputEventType[\"STORE_VISITOR\"] = \"StoreVisitor\";\n    AwsInputEventType[\"STORE_VISITOR_EVENTS\"] = \"StoreVisitorEvents\";\n    AwsInputEventType[\"CREATE_GROUP_CHAT_INVITE\"] = \"CreateInvitationToGroupChat\";\n    AwsInputEventType[\"SEND_EMAIL_INVITE_TO_GROUP_CHAT\"] = \"SendEmailInvitationToGroupChat\";\n    AwsInputEventType[\"JOIN_GROUP_CHAT\"] = \"JoinGroupChat\";\n    AwsInputEventType[\"LEAVE_GROUP_CHAT\"] = \"LeaveGroupChat\";\n    AwsInputEventType[\"GENERATE_AUTHORIZATION_TOKEN\"] = \"GenerateAuthorizationToken\";\n    AwsInputEventType[\"ADD_VISITOR_TAGS\"] = \"AddVisitorTags\";\n    AwsInputEventType[\"REMOVE_VISITOR_TAGS\"] = \"RemoveVisitorTags\";\n    AwsInputEventType[\"SEND_MESSAGE_PREVIEW\"] = \"SendMessagePreview\";\n})(AwsInputEventType = exports.AwsInputEventType || (exports.AwsInputEventType = {}));\nvar AwsResponseEventType;\n(function (AwsResponseEventType) {\n    AwsResponseEventType[\"LIVECHAT_RECOVERED\"] = \"LivechatRecovered\";\n    AwsResponseEventType[\"MORE_MESSAGES_LOADED\"] = \"MoreMessagesLoaded\";\n    AwsResponseEventType[\"OFFLINE_MESSAGE_SENT\"] = \"OfflineMessageSent\";\n    AwsResponseEventType[\"THREAD_LIST_FETCHED\"] = \"ThreadListFetched\";\n    AwsResponseEventType[\"THREAD_RECOVERED\"] = \"ThreadRecovered\";\n    AwsResponseEventType[\"TRANSCRIPT_SENT\"] = \"TranscriptSent\";\n    AwsResponseEventType[\"CONSUMER_AUTHORIZED\"] = \"ConsumerAuthorized\";\n    AwsResponseEventType[\"THREAD_METADATA_LOADED\"] = \"ThreadMetadataLoaded\";\n    AwsResponseEventType[\"SET_POSITION_IN_QUEUE\"] = \"SetPositionInQueue\";\n    AwsResponseEventType[\"GROUP_CHAT_INVITE_CREATED\"] = \"InvitationToGroupChatCreated\";\n    AwsResponseEventType[\"GROUP_CHAT_INVITE_SENT\"] = \"EmailInvitationToGroupChatSent\";\n    AwsResponseEventType[\"GROUP_CHAT_JOINED\"] = \"GroupChatJoined\";\n    AwsResponseEventType[\"TOKEN_REFRESHED\"] = \"TokenRefreshed\";\n    AwsResponseEventType[\"AUTHORIZATION_TOKEN_GENERATED\"] = \"AuthorizationTokenGenerated\";\n    AwsResponseEventType[\"THREAD_ARCHIVED\"] = \"ThreadArchived\";\n})(AwsResponseEventType = exports.AwsResponseEventType || (exports.AwsResponseEventType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DeviceType;\n(function (DeviceType) {\n    DeviceType[\"DESKTOP\"] = \"desktop\";\n    DeviceType[\"MOBILE\"] = \"mobile\";\n    DeviceType[\"OTHER\"] = \"other\";\n    DeviceType[\"TABLET\"] = \"tablet\";\n})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));\nvar ApplicationType;\n(function (ApplicationType) {\n    ApplicationType[\"BROWSER\"] = \"browser\";\n})(ApplicationType = exports.ApplicationType || (exports.ApplicationType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CaseStatus_1 = require(\"../post/case/CaseStatus\");\nexports.ContactStatus = CaseStatus_1.CaseStatus;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CALLER_SERVICE_ID = 'X-Caller-Service-ID';\nexports.TRACE_ID = 'X-Trace-ID';\nexports.TRANSACTION_ID = 'X-Transaction-ID';\nexports.USER_AGENT = 'User-Agent';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MessageDirection;\n(function (MessageDirection) {\n    MessageDirection[\"INBOUND\"] = \"inbound\";\n    MessageDirection[\"OUTBOUND\"] = \"outbound\";\n})(MessageDirection = exports.MessageDirection || (exports.MessageDirection = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MessageType;\n(function (MessageType) {\n    MessageType[\"TEXT\"] = \"TEXT\";\n    MessageType[\"FILE\"] = \"FILE\";\n    MessageType[\"FORM\"] = \"FORM\";\n    MessageType[\"PLUGIN\"] = \"PLUGIN\";\n    MessageType[\"POSTBACK\"] = \"POSTBACK\";\n    MessageType[\"QUICK_REPLIES\"] = \"QUICK_REPLIES\";\n    MessageType[\"RICH_LINK\"] = \"RICH_LINK\";\n    MessageType[\"LIST_PICKER\"] = \"LIST_PICKER\";\n    MessageType[\"ADAPTIVE_CARD\"] = \"ADAPTIVE_CARD\";\n    MessageType[\"TIME_PICKER\"] = \"TIME_PICKER\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CaseStatus;\n(function (CaseStatus) {\n    CaseStatus[\"NEW\"] = \"new\";\n    CaseStatus[\"OPEN\"] = \"open\";\n    CaseStatus[\"PENDING\"] = \"pending\";\n    CaseStatus[\"ESCALATED\"] = \"escalated\";\n    CaseStatus[\"RESOLVED\"] = \"resolved\";\n    CaseStatus[\"CLOSED\"] = \"closed\";\n    CaseStatus[\"TRASHED\"] = \"trashed\";\n})(CaseStatus = exports.CaseStatus || (exports.CaseStatus = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PushUpdateEventType;\n(function (PushUpdateEventType) {\n    PushUpdateEventType[\"AUTHORIZE_CONSUMER\"] = \"AuthorizeConsumer\";\n    /** @deprecated use CONTACT_CREATED */\n    PushUpdateEventType[\"CASE_CREATED\"] = \"CaseCreated\";\n    /** @deprecated use ASSIGNED_AGENT_CHANGED */\n    PushUpdateEventType[\"CASE_INBOX_ASSIGNEE_CHANGED\"] = \"CaseInboxAssigneeChanged\";\n    /** @deprecated use CONTACT_STATUS_CHANGED */\n    PushUpdateEventType[\"CASE_STATUS_CHANGED\"] = \"CaseStatusChanged\";\n    /** @deprecated use CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED */\n    PushUpdateEventType[\"CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED\"] = \"CaseToRoutingQueueAssignmentChanged\";\n    PushUpdateEventType[\"CONTACT_CREATED\"] = \"CaseCreated\";\n    PushUpdateEventType[\"ASSIGNED_AGENT_CHANGED\"] = \"CaseInboxAssigneeChanged\";\n    PushUpdateEventType[\"CONTACT_STATUS_CHANGED\"] = \"CaseStatusChanged\";\n    PushUpdateEventType[\"CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED\"] = \"CaseToRoutingQueueAssignmentChanged\";\n    PushUpdateEventType[\"CONTACT_PREFERRED_USER_CHANGED\"] = \"ContactPreferredUserChanged\";\n    PushUpdateEventType[\"CONTACT_PROFICIENCY_CHANGED\"] = \"ContactProficiencyChanged\";\n    PushUpdateEventType[\"CONTACT_PRIORITY_CHANGED\"] = \"ContactPriorityChanged\";\n    PushUpdateEventType[\"CONTACT_SYNC\"] = \"ContactSync\";\n    PushUpdateEventType[\"CHANNEL_CREATED\"] = \"ChannelCreated\";\n    PushUpdateEventType[\"CHANNEL_DELETED\"] = \"ChannelDeleted\";\n    PushUpdateEventType[\"CHANNEL_UPDATED\"] = \"ChannelUpdated\";\n    PushUpdateEventType[\"MESSAGE_ADDED_INTO_CASE\"] = \"MessageAddedIntoCase\";\n    PushUpdateEventType[\"MESSAGE_CREATED\"] = \"MessageCreated\";\n    PushUpdateEventType[\"MESSAGE_DELIVERED_TO_END_USER\"] = \"MessageDeliveredToEndUser\";\n    PushUpdateEventType[\"MESSAGE_DELIVERED_TO_USER\"] = \"MessageDeliveredToUser\";\n    PushUpdateEventType[\"MESSAGE_NOTE_CREATED\"] = \"MessageNoteCreated\";\n    PushUpdateEventType[\"MESSAGE_NOTE_UPDATED\"] = \"MessageNoteUpdated\";\n    PushUpdateEventType[\"MESSAGE_NOTE_DELETED\"] = \"MessageNoteDeleted\";\n    PushUpdateEventType[\"MESSAGE_READ_CHANGED\"] = \"MessageReadChanged\";\n    PushUpdateEventType[\"MESSAGE_SEEN_BY_END_USER\"] = \"MessageSeenByEndUser\";\n    PushUpdateEventType[\"MESSAGE_SEEN_BY_USER\"] = \"MessageSeenByUser\";\n    PushUpdateEventType[\"MESSAGE_SENT\"] = \"MessageSent\";\n    PushUpdateEventType[\"MESSAGE_UPDATED\"] = \"MessageUpdated\";\n    PushUpdateEventType[\"PAGE_VIEW_CREATED\"] = \"PageViewCreated\";\n    PushUpdateEventType[\"ROUTING_QUEUE_CREATED\"] = \"RoutingQueueCreated\";\n    PushUpdateEventType[\"ROUTING_QUEUE_DELETED\"] = \"RoutingQueueDeleted\";\n    PushUpdateEventType[\"ROUTING_QUEUE_UPDATED\"] = \"RoutingQueueUpdated\";\n    PushUpdateEventType[\"SUBQUEUE_ASSIGNED_TO_ROUTING_QUEUE\"] = \"SubqueueAssignedToRoutingQueue\";\n    PushUpdateEventType[\"SUBQUEUE_UNASSIGNED_TO_ROUTING_QUEUE\"] = \"SubqueueUnassignedFromRoutingQueue\";\n    PushUpdateEventType[\"USER_ASSIGNED_TO_ROUTING_QUEUE\"] = \"UserAssignedToRoutingQueue\";\n    PushUpdateEventType[\"USER_STATUS_CHANGED\"] = \"UserStatusChanged\";\n    PushUpdateEventType[\"USER_UNASSIGNED_FROM_ROUTING_QUEUE\"] = \"UserUnassignedFromRoutingQueue\";\n    PushUpdateEventType[\"AGENT_CONTACT_STARTED\"] = \"AgentContactStarted\";\n    PushUpdateEventType[\"AGENT_CONTACT_ENDED\"] = \"AgentContactEnded\";\n    PushUpdateEventType[\"SENDER_TYPING_STARTED\"] = \"SenderTypingStarted\";\n    PushUpdateEventType[\"SENDER_TYPING_ENDED\"] = \"SenderTypingEnded\";\n    PushUpdateEventType[\"FIRE_PROACTIVE\"] = \"FireProactiveAction\";\n    PushUpdateEventType[\"CONTACT_INBOX_PRE_ASSIGNEE_CHANGED\"] = \"ConsumerContactInboxPreAssigneeChanged\";\n    PushUpdateEventType[\"CONTACT_RECIPIENTS_CHANGED\"] = \"ContactRecipientsChanged\";\n    PushUpdateEventType[\"MESSAGE_PREVIEW_CREATED\"] = \"MessagePreviewCreated\";\n    PushUpdateEventType[\"EVENT_IN_S3\"] = \"EventInS3\";\n})(PushUpdateEventType = exports.PushUpdateEventType || (exports.PushUpdateEventType = {}));\n","module.exports = __WEBPACK_EXTERNAL_MODULE__585__;","module.exports = __WEBPACK_EXTERNAL_MODULE__459__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export enum ChatSDKVariable {\n  ACCESS_TOKEN = 'ACCESS_TOKEN',\n  ACCESS_TOKEN_EXPIRES_IN = 'ACCESS_TOKEN_EXPIRES_IN',\n  APP_NAME = 'APP_NAME',\n  APP_VERSION = 'APP_VERSION',\n  AUTHORIZATION_CODE = 'AUTHORIZATION_CODE',\n  BRAND_ID = 'BRAND_ID',\n  CHANNEL_ID = 'CHANNEL_ID',\n  CUSTOMER_ID = 'CUSTOMER_ID',\n  CUSTOMER_IMAGE = 'CUSTOMER_IMAGE',\n  CUSTOMER_NAME = 'CUSTOMER_NAME',\n  ENDPOINT_CHAT = 'ENDPOINT_CHAT',\n  ENDPOINT_GATEWAY = 'ENDPOINT_GATEWAY',\n  THREAD_DATA = 'THREAD_DATA',\n}\n","import { ChatSDKVariable } from './ChatSDKVariable';\n\nclass VariablesStorage {\n  private _vars: Partial<Record<ChatSDKVariable, string | undefined>> = {};\n\n  set(variableName: ChatSDKVariable, value: string | undefined): void {\n    this._vars[variableName] = value;\n  }\n\n  get<D = undefined>(\n    variableName: ChatSDKVariable,\n    defaultValue?: D,\n  ): string | D {\n    return this._vars[variableName] ?? (defaultValue as D);\n  }\n\n  list() {\n    return Object.keys(this._vars);\n  }\n\n  clear() {\n    this._vars = {};\n  }\n}\n\nexport const SDKVariableStorage = new VariablesStorage();\n","/**\n * Checks if `value` is `null`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n * @example\n *\n * _.isNull(null);\n * // => true\n *\n * _.isNull(void 0);\n * // => false\n */\nfunction isNull(value) {\n  return value === null;\n}\n\nexport default isNull;\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\n\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { isNull } from '../utils/is';\n\nexport function setAccessToken(accessToken: AccessToken): void {\n  SDKVariableStorage.set(ChatSDKVariable.ACCESS_TOKEN, accessToken.token);\n  SDKVariableStorage.set(\n    ChatSDKVariable.ACCESS_TOKEN_EXPIRES_IN,\n    String(accessToken.expiresIn),\n  );\n}\n\nexport function getAccessToken(): AccessToken | null {\n  const token = SDKVariableStorage.get(ChatSDKVariable.ACCESS_TOKEN, null);\n  const expiresIn = SDKVariableStorage.get(\n    ChatSDKVariable.ACCESS_TOKEN_EXPIRES_IN,\n    null,\n  );\n\n  if (isNull(token) || isNull(expiresIn)) {\n    return null;\n  }\n\n  return {\n    token,\n    expiresIn: Number(expiresIn),\n  };\n}\n","export class ChatSDKError extends Error {\n  name: string = 'ChatSDKError';\n  data: unknown;\n\n  constructor(error: unknown, data?: unknown) {\n    super();\n\n    this.message = `[ChatSDKError]: ${this._getErrorMessage(error)}`;\n    this.data = data;\n  }\n\n  private _getErrorMessage(error: unknown): string {\n    if (error instanceof Error) {\n      return error.message;\n    }\n    if (typeof error === 'string') {\n      return error;\n    }\n\n    return JSON.stringify(error);\n  }\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\n\nexport class AuthorizationError extends ChatSDKError {\n  constructor(\n    message: string,\n    data: MessageFailedEventData['error'] | undefined,\n  ) {\n    super(message, data);\n\n    if (data !== undefined) {\n      this.message = `${message} because of (${data.errorMessage})`;\n    }\n  }\n}\n","import { VisitorInput } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nexport interface VisitorPayload {\n  visitor: VisitorInput;\n}\n\nexport function createVisitorPayload(visitorId: VisitorId): VisitorPayload {\n  return {\n    visitor: {\n      id: visitorId,\n    },\n  };\n}\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","import baseKeys from './_baseKeys.js';\nimport getTag from './_getTag.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLike from './isArrayLike.js';\nimport isBuffer from './isBuffer.js';\nimport isPrototype from './_isPrototype.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEmpty;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","import { ChatEventData } from '../event/ChatEvent';\n\nexport const requestQueue = new Map<string, (value: ChatEventData) => void>();\n","import { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { Event } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { generateId } from '../utils/generateId';\nimport { isEmpty, isNull } from '../utils/is';\n\nimport { requestQueue } from './requestQueue';\n\nexport const makeRequest = async (\n  event: Event<AwsInputEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> => {\n  if (isNull(wsClient)) {\n    throw new ChatSDKError('WebSocketClient is not initialized');\n  }\n  if (isEmpty(event.eventId)) {\n    event.eventId = generateId();\n  }\n\n  return new Promise<ChatEventData>((resolve) => {\n    requestQueue.set(event.eventId, resolve);\n    wsClient?.send(event);\n  });\n};\n","export function splitName(name: string): [string, string] {\n  const [firstName, ...names] = name.split(' ');\n  const lastName = names.join(' ');\n\n  return [firstName, lastName];\n}\n","import { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\n\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { isUndefined } from '../utils/is';\n\ntype Ident = CustomField['ident'];\ntype Value = CustomField['value'];\n\nexport type CustomFieldsObject = Record<Ident, Value>;\nexport type CustomFieldsMap = Map<Ident, Value>;\n\nexport function setCustomFields(\n  fields: CustomFieldsMap,\n  set: CustomFieldsObject = {},\n): void {\n  for (const name of Object.keys(set)) {\n    fields.set(name, set[name]);\n  }\n}\n\nexport function setCustomFieldsFromArray(\n  fields: CustomFieldsMap,\n  set: Array<CustomField> = [],\n): void {\n  for (const { ident, value } of set) {\n    fields.set(ident, value);\n  }\n}\n\nexport function setCustomField(\n  fields: CustomFieldsMap,\n  name: string,\n  value: CustomField['value'],\n): void {\n  if (isUndefined(name) || isUndefined(value)) {\n    throw new ChatSDKError('Custom field name and value must be set');\n  }\n\n  fields.set(name, value);\n}\n\nexport function getCustomFields(fields: CustomFieldsMap): CustomFieldsObject {\n  return Object.fromEntries(fields);\n}\n\nexport function getCustomFieldsArray(\n  fields: CustomFieldsMap,\n): Array<CustomField> {\n  return Array.from(fields).map<CustomField>(([ident, value]) => ({\n    ident,\n    value,\n  }));\n}\n","import { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\n\nimport {\n  CustomFieldsMap,\n  CustomFieldsObject,\n  getCustomFields,\n  getCustomFieldsArray,\n  setCustomFields,\n  setCustomFieldsFromArray,\n} from '../customField/CustomFields';\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { generateId } from '../utils/generateId';\n\nimport { createSetCustomerCustomFieldsPayloadData } from './setCustomerCustomFieldsPayload';\n\nexport class Customer {\n  protected _websocketClient: WebSocketClient | null;\n  protected _customFields: CustomFieldsMap = new Map();\n  protected _exists = false;\n\n  constructor(\n    id: CustomerIdentityIdOnExternalPlatform,\n    name: string | undefined,\n    image: string | undefined,\n    websocketClient: WebSocketClient | null,\n  ) {\n    this._websocketClient = websocketClient;\n    Customer.setId(id);\n    Customer.setName(name);\n    if (image) {\n      Customer.setImage(image);\n    }\n  }\n\n  static setId(id: CustomerIdentityIdOnExternalPlatform): void {\n    SDKVariableStorage.set(ChatSDKVariable.CUSTOMER_ID, id);\n  }\n\n  static getId(): CustomerIdentityIdOnExternalPlatform | null {\n    return SDKVariableStorage.get(ChatSDKVariable.CUSTOMER_ID, null);\n  }\n\n  static getName(): string | undefined {\n    return SDKVariableStorage.get(ChatSDKVariable.CUSTOMER_NAME);\n  }\n\n  static setName(name?: string): void {\n    SDKVariableStorage.set(ChatSDKVariable.CUSTOMER_NAME, name);\n  }\n\n  static getIdOrCreateNewOne(): CustomerIdentityIdOnExternalPlatform {\n    let customerId = this.getId();\n\n    if (!customerId) {\n      customerId = generateId();\n      this.setId(customerId);\n    }\n\n    return customerId;\n  }\n\n  static getImage(): string | undefined {\n    return SDKVariableStorage.get(ChatSDKVariable.CUSTOMER_IMAGE);\n  }\n\n  static setImage(image?: string): void {\n    SDKVariableStorage.set(ChatSDKVariable.CUSTOMER_IMAGE, image);\n  }\n\n  public getId(): CustomerIdentityIdOnExternalPlatform {\n    return Customer.getIdOrCreateNewOne();\n  }\n\n  public getName(): string | undefined {\n    return Customer.getName();\n  }\n\n  public setName(name?: string): void {\n    Customer.setName(name);\n  }\n\n  public setImage(image?: string): void {\n    Customer.setImage(image);\n  }\n\n  public setExists(exists: boolean): void {\n    this._exists = exists;\n  }\n\n  /**\n   * Set Customer Custom field\n   * @param name - Custom field name\n   * @param value - Custom field value\n   */\n  public setCustomField(\n    name: CustomField['ident'],\n    value: CustomField['value'],\n  ): Promise<ChatEventData> | undefined {\n    return this.setCustomFields({ [name]: value });\n  }\n\n  /**\n   * Set Customer Custom fields\n   * @param customFields - custom fields object\n   * @example setCustomFields(\\{ identName: 'value', identName2: 'value2' \\})\n   */\n  public setCustomFields(\n    customFields: CustomFieldsObject,\n  ): Promise<ChatEventData> | undefined {\n    setCustomFields(this._customFields, customFields);\n\n    if (this._exists) {\n      return this.sendCustomFields();\n    }\n  }\n\n  /**\n   * Get Customer Custom fields (as object)\n   */\n  public getCustomFields(): CustomFieldsObject {\n    return getCustomFields(this._customFields);\n  }\n\n  /**\n   * Set Customer Custom fields from an array of custom fields\n   * @param customFields - custom fields array\n   */\n  public setCustomFieldsFromArray(customFields: Array<CustomField>): void {\n    setCustomFieldsFromArray(this._customFields, customFields);\n  }\n\n  /**\n   * Get Customer Custom fields (as array of CustomField)\n   */\n  public getCustomFieldsArray(): Array<CustomField> {\n    return getCustomFieldsArray(this._customFields);\n  }\n\n  /**\n   * Send Customer Custom fields\n   * - call this only after the first message or recover event\n   * @returns Promise<ChatEventData>\n   */\n  public async sendCustomFields(): Promise<ChatEventData> {\n    const payloadData = createSetCustomerCustomFieldsPayloadData(\n      getCustomFieldsArray(this._customFields),\n    );\n\n    return sendChatEvent(payloadData, this._websocketClient);\n  }\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendConsumerCustomFieldsEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendConsumerCustomFields';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\ntype SendCustomerCustomFieldsEventData = SendConsumerCustomFieldsEventData;\n\nexport function createSetCustomerCustomFieldsPayloadData(\n  customFields: Array<CustomField>,\n): EventPayloadData<SendCustomerCustomFieldsEventData> {\n  return {\n    eventType: AwsInputEventType.SEND_CONSUMER_CUSTOM_FIELDS,\n    data: {\n      customFields,\n    },\n  };\n}\n","import { ConsumerIdentityInput } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { splitName } from '../utils/splitName';\n\nimport { Customer } from './Customer';\n\nexport type ConsumerIdentityPayload = ConsumerIdentityInput;\n\nexport function createCustomerIdentityPayload(\n  name?: string,\n  image?: string,\n): ConsumerIdentityPayload {\n  const storedName = name ?? Customer.getName();\n  const storedImage = image ?? Customer.getImage();\n\n  let customerIdentityNamePayload: Partial<ConsumerIdentityPayload> = {};\n  if (typeof storedName === 'string' && storedName.length > 0) {\n    const [firstName, lastName] = splitName(storedName);\n    customerIdentityNamePayload = { firstName, lastName };\n  }\n\n  if (storedImage) {\n    customerIdentityNamePayload.image = storedImage;\n  }\n\n  return {\n    idOnExternalPlatform: Customer.getIdOrCreateNewOne(),\n    ...customerIdentityNamePayload,\n  };\n}\n","/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nexport default isNil;\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\n\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { ChatSDKError } from '../error/ChatSDKError';\n\nimport { isNil } from './is';\n\nexport function getBrandIdAndChannelId(): {\n  brandId: BrandId;\n  channelId: ChannelId;\n} {\n  const brandId = parseInt(SDKVariableStorage.get(ChatSDKVariable.BRAND_ID));\n  const channelId = SDKVariableStorage.get(ChatSDKVariable.CHANNEL_ID);\n\n  if (isNil(brandId) || isNaN(brandId) || isNil(channelId)) {\n    throw new ChatSDKError(\n      `Cannot get BrandId and ChannelId from SDKVariableStorage \n      brandId (${brandId}) |\n      channelId (${channelId})`,\n    );\n  }\n\n  return {\n    brandId,\n    channelId,\n  };\n}\n","/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nexport default isUndefined;\n","import { AwsChatWindowEventActionRoute } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport {\n  AwsInputEvent,\n  AwsInputEventData,\n  ConsumerIdentityInput,\n  DestinationInput,\n  VisitorInput,\n} from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { createCustomerIdentityPayload } from '../customer/customerIdentityPayload';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { generateId } from '../utils/generateId';\nimport { getBrandIdAndChannelId } from '../utils/getBrandIdAndChannelId';\nimport { isUndefined } from '../utils/is';\n\nexport type EventActionRoute = AwsChatWindowEventActionRoute;\nexport type EventPayload<D extends AwsInputEventData> = AwsInputEvent<\n  AwsInputEventType,\n  D\n>;\n\nexport interface Event<D extends AwsInputEventData> {\n  action: EventActionRoute;\n  eventId: string;\n  payload: EventPayload<D>;\n}\n\nexport interface EventPayloadData<D extends AwsInputEventData> {\n  consumerIdentity?: ConsumerIdentityInput;\n  data: D;\n  destination?: DestinationInput;\n  eventType: AwsInputEventType;\n  visitor?: VisitorInput;\n}\n\nexport function createEventPayload<D extends AwsInputEventData>(\n  eventPayloadData: EventPayloadData<D>,\n): EventPayload<D> {\n  const {\n    eventType,\n    data,\n    consumerIdentity = createCustomerIdentityPayload(),\n    destination = {},\n    visitor = {},\n  } = eventPayloadData;\n  const { brandId, channelId } = getBrandIdAndChannelId();\n\n  if (isUndefined(eventType)) {\n    throw new ChatSDKError(\n      `Cannot create an event payload because of missing eventType (${eventType})`,\n    );\n  }\n\n  return {\n    eventType,\n    brand: {\n      id: Number(brandId),\n    },\n    channel: {\n      id: channelId,\n    },\n    consumerIdentity,\n    data,\n    destination,\n    visitor,\n  };\n}\n\nexport function createEvent<D extends AwsInputEventData>(\n  payload: EventPayload<D>,\n  eventId: string = generateId(),\n  actionRoute: EventActionRoute = AwsChatWindowEventActionRoute.CHAT_WINDOW_EVENT,\n): Event<D> {\n  return {\n    action: actionRoute,\n    eventId,\n    payload,\n  };\n}\n","import { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\n\nimport { makeRequest } from '../request/makeRequest';\nimport {\n  createEvent,\n  createEventPayload,\n  EventPayloadData,\n} from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { ChatEventData } from './ChatEvent';\n\n/**\n * Send chat event\n * @param payloadData - payload data\n * @param webSocketClient - websocket client\n */\nexport async function sendChatEvent<D extends AwsInputEventData>(\n  payloadData: EventPayloadData<D>,\n  webSocketClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const event = createEvent(createEventPayload(payloadData));\n\n  return makeRequest(event, webSocketClient);\n}\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ReconnectConsumerData } from '@brandembassy/ts-types-chat/dist/awsEvents/ReconnectConsumer';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport { createCustomerIdentityPayload } from '../customer/customerIdentityPayload';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { createVisitorPayload } from '../visitor/createVisitorPayload';\n\nexport function createReconnectPayloadData(\n  accessToken: AccessToken,\n  visitorId?: string,\n): EventPayloadData<ReconnectConsumerData> {\n  return {\n    ...createVisitorPayload(visitorId as VisitorId),\n    ...createCustomerIdentityPayload(),\n    eventType: AwsInputEventType.RECONNECT_CONSUMER,\n    data: {\n      accessToken: {\n        token: accessToken.token,\n      },\n    },\n  };\n}\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\n\nlet refreshTokenTimeoutId: NodeJS.Timeout | null = null;\n\nexport function getIdealTimeInSecondsForIssueRefreshToken(\n  accessTokenExpiresIn: number,\n): number {\n  const idealTimeToRefreshAccessToken = Math.round(accessTokenExpiresIn * 0.9);\n\n  if (idealTimeToRefreshAccessToken < 20) {\n    return 20;\n  }\n\n  return idealTimeToRefreshAccessToken;\n}\n\nexport function handleRefreshToken(\n  accessToken: AccessToken,\n  refreshTokenAction: () => Promise<void>,\n): void {\n  if (refreshTokenTimeoutId !== null) {\n    clearTimeout(refreshTokenTimeoutId);\n  }\n\n  refreshTokenTimeoutId = setTimeout(\n    refreshTokenAction,\n    getIdealTimeInSecondsForIssueRefreshToken(accessToken.expiresIn) * 1000,\n  );\n}\n","import { AuthorizationTokenGeneratedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/AuthorizationTokenGenerated';\n\nexport const isAuthorizationTokenGeneratedPostbackData = (\n  data: unknown,\n): data is AuthorizationTokenGeneratedPostbackData =>\n  'authorizationToken' in (data as AuthorizationTokenGeneratedPostbackData);\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nimport { AuthorizeConsumerEventSuccessResponse } from './AuthorizeConsumerEventResponse';\n\nexport const isAuthSuccessEvent = (\n  payload: ChatEventData,\n): payload is AuthorizeConsumerEventSuccessResponse => {\n  const status = (payload as AuthorizeConsumerEventSuccessResponse)?.data\n    ?.status;\n  const type = payload?.type;\n\n  return (\n    type === AwsResponseEventType.CONSUMER_AUTHORIZED && status === 'success'\n  );\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { TokenRefreshedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/TokenRefreshed';\n\nexport interface TokenRefreshedSuccessResponse {\n  data: TokenRefreshedPostbackData;\n  type: AwsResponseEventType.TOKEN_REFRESHED;\n}\n\nexport function isTokenRefreshedSuccessResponse(\n  response: unknown,\n): response is TokenRefreshedSuccessResponse {\n  return (\n    (response as TokenRefreshedSuccessResponse)?.type ===\n      AwsResponseEventType.TOKEN_REFRESHED &&\n    (response as TokenRefreshedSuccessResponse).data?.accessToken?.token !==\n      undefined\n  );\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport enum EnvironmentName {\n  AU1 = 'AU1',\n  CA1 = 'CA1',\n  EU1 = 'EU1',\n  JP1 = 'JP1',\n  NA1 = 'NA1',\n  UK1 = 'UK1',\n  custom = 'custom',\n}\n\nexport interface EnvironmentEndpoints {\n  chat: string;\n  gateway: string;\n  name: string;\n}\n\nexport function getEnvironmentEndpoints(\n  environment: EnvironmentName,\n): EnvironmentEndpoints {\n  const placeholder = '{ENV}';\n  const chatUrlTemplate = `https://channels-de-${placeholder}.niceincontact.com`;\n  const gatewayUrlTemplate = `wss://chat-gateway-de-${placeholder}.niceincontact.com`;\n\n  switch (environment) {\n    case EnvironmentName.AU1:\n      return {\n        chat: chatUrlTemplate.replace(placeholder, 'au1'),\n        name: 'Australia',\n        gateway: gatewayUrlTemplate.replace(placeholder, 'au1'),\n      };\n    case EnvironmentName.CA1:\n      return {\n        chat: chatUrlTemplate.replace(placeholder, 'ca1'),\n        name: 'Canada',\n        gateway: gatewayUrlTemplate.replace(placeholder, 'ca1'),\n      };\n    case EnvironmentName.EU1:\n      return {\n        chat: chatUrlTemplate.replace(placeholder, 'eu1'),\n        name: 'Europe',\n        gateway: gatewayUrlTemplate.replace(placeholder, 'eu1'),\n      };\n    case EnvironmentName.JP1:\n      return {\n        chat: chatUrlTemplate.replace(placeholder, 'jp1'),\n        name: 'Japan',\n        gateway: gatewayUrlTemplate.replace(placeholder, 'jp1'),\n      };\n    case EnvironmentName.NA1:\n      return {\n        chat: chatUrlTemplate.replace(placeholder, 'na1'),\n        name: 'North America',\n        gateway: gatewayUrlTemplate.replace(placeholder, 'na1'),\n      };\n    case EnvironmentName.UK1:\n      return {\n        chat: chatUrlTemplate.replace(placeholder, 'uk1'),\n        name: 'United Kingdom',\n        gateway: gatewayUrlTemplate.replace(placeholder, 'uk1'),\n      };\n    case EnvironmentName.custom:\n      return {\n        chat: '',\n        name: 'Custom',\n        gateway: '',\n      };\n    default:\n      throw new ChatSDKError(`Unknown environment: ${environment}`);\n  }\n}\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { PushUpdateContext } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateContext';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\n\nexport const ChatEvent = {\n  ...PushUpdateEventType,\n  ...AwsResponseEventType,\n  AGENT_TYPING_STARTED: 'AgentTypingStarted',\n  AGENT_TYPING_ENDED: 'AgentTypingEnded',\n  ASSIGNED_AGENT_CHANGED: 'AssignedAgentChanged',\n  CONTACT_CREATED: 'ContactCreated',\n  CONTACT_STATUS_CHANGED: 'ContactStatusChanged',\n  CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED:\n    'ContactToRoutingQueueAssignmentChanged',\n} as const;\n\nexport class ChatCustomEvent<\n  T extends ChatEventData = ChatEventData,\n> extends CustomEvent<T> {}\n\nexport interface ChatEventData {\n  context?: [] | PushUpdateContext;\n  createdAt: Date;\n  data: unknown;\n  error?: MessageFailedEventData['error'];\n  id: string;\n  type?: ChatEventType;\n}\n\nexport type ChatEventKey = keyof typeof ChatEvent;\nexport type ChatEventType = typeof ChatEvent[ChatEventKey];\n","import { isNil } from '../utils/is';\n\nimport { ChatEventData } from './ChatEvent';\n\nexport type EventMiddleware = (\n  eventData: ChatEventData,\n) => ChatEventData | null;\n\nexport class ChatEventMiddleware {\n  middlewares: Array<EventMiddleware> = [];\n\n  register(middleware: EventMiddleware): void {\n    this.middlewares.push(middleware);\n  }\n\n  process(event: ChatEventData | null): ChatEventData | null {\n    if (isNil(event)) {\n      return null;\n    }\n\n    let processedEvent: ChatEventData | null = event;\n\n    for (const middleware of this.middlewares) {\n      if (processedEvent === null) {\n        return null;\n      }\n      processedEvent = middleware(processedEvent);\n    }\n\n    return processedEvent;\n  }\n}\n","import { ChatCustomEvent, ChatEventType } from './ChatEvent';\n\nexport interface IChatEventTarget extends EventTarget {\n  addEventListener<K extends ChatEventType>(\n    type: K,\n    listener: (event: ChatCustomEvent) => void,\n    options?: boolean | AddEventListenerOptions,\n  ): void;\n  addEventListener(\n    type: string,\n    callback: EventListenerOrEventListenerObject | null,\n    options?: EventListenerOptions | boolean,\n  ): void;\n\n  dispatchEvent(event: ChatCustomEvent): boolean;\n\n  removeEventListener(\n    type: string,\n    callback: EventListenerOrEventListenerObject | null,\n    options?: boolean | EventListenerOptions | undefined,\n  ): void;\n  removeEventListener<K extends ChatEventType>(\n    type: K,\n    callback: (event: ChatCustomEvent) => void,\n    options?: boolean | EventListenerOptions | undefined,\n  ): void;\n}\n\nexport const ChatEventTarget = EventTarget as {\n  new (): IChatEventTarget;\n  prototype: IChatEventTarget;\n};\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { isNil } from '../utils/is';\n\ninterface UserData {\n  user: unknown;\n}\n\nfunction hasUserData(data: unknown): boolean {\n  return !isNil((data as UserData)?.user);\n}\n\nexport function agentTypingStarted(event: ChatEventData): ChatEventData {\n  if (hasUserData(event.data)) {\n    return {\n      ...event,\n      type: ChatEvent.AGENT_TYPING_STARTED,\n    };\n  }\n\n  return event;\n}\n\nexport function agentTypingEnded(event: ChatEventData): ChatEventData {\n  if (hasUserData(event.data)) {\n    return {\n      ...event,\n      type: ChatEvent.AGENT_TYPING_ENDED,\n    };\n  }\n\n  return event;\n}\n","import { fromISOString } from '@brandembassy/be-javascript-utils/dist/dateTime/isoString';\nimport { PushUpdateContext } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateContext';\n\nimport { MessageFailedEventData } from '../message/MessageSuccessEventData';\nimport { isEmpty } from '../utils/is';\n\nimport { ChatEventData, ChatEventType } from './ChatEvent';\n\ninterface EventBase {\n  createdAt: string;\n}\n\ninterface EventDataWithPostback extends EventBase {\n  postback: {\n    data: Record<string, unknown>;\n    eventType: ChatEventType;\n  };\n}\n\ninterface EventWithEventId extends EventBase {\n  eventId: string;\n}\n\ninterface EventWithData extends EventBase {\n  context?: [] | PushUpdateContext;\n  data: Record<string, unknown>;\n}\ninterface EventWithType extends EventBase {\n  eventType: ChatEventType;\n}\n\nconst EMPTY_EVENT = {\n  id: '',\n  data: null,\n  type: undefined,\n  createdAt: new Date(),\n};\n\nconst hasData = (event: unknown): event is EventWithData =>\n  'data' in (event as EventWithData);\n\nconst hasError = (event: unknown): event is MessageFailedEventData =>\n  'error' in (event as MessageFailedEventData);\n\nconst hasEventId = (event: unknown): event is EventWithEventId =>\n  'eventId' in (event as EventWithEventId);\n\nconst hasEventType = (event: unknown): event is EventWithType =>\n  'eventType' in (event as EventWithType);\n\nconst isDataWithPostback = (\n  eventDetailData: unknown,\n): eventDetailData is EventDataWithPostback => {\n  const postback = (eventDetailData as EventDataWithPostback)?.postback;\n\n  return isEmpty(postback) === false;\n};\n\nexport function normalizeEvent(event: unknown): ChatEventData {\n  if (!hasEventId(event)) {\n    return EMPTY_EVENT;\n  }\n\n  if (hasError(event)) {\n    return {\n      createdAt: fromISOString(event.createdAt),\n      data: null,\n      error: event.error,\n      id: event.eventId,\n    };\n  }\n\n  const eventType = hasEventType(event) ? event.eventType : undefined;\n\n  if (hasData(event)) {\n    return {\n      createdAt: fromISOString(event.createdAt),\n      context: event.context,\n      data: event.data,\n      id: event.eventId,\n      type: eventType,\n    };\n  }\n\n  if (isDataWithPostback(event)) {\n    const {\n      postback: { data: postbackData, eventType: postbackEventType },\n      eventId: rawEventId,\n      ...restEventData\n    } = event;\n\n    return {\n      type: postbackEventType,\n      data: {\n        ...restEventData,\n        ...postbackData,\n      },\n      createdAt: fromISOString(event.createdAt),\n      id: rawEventId,\n    };\n  }\n\n  const { eventId, ...eventRest } = event;\n\n  return {\n    data: undefined,\n    ...eventRest,\n    id: eventId,\n    type: eventType,\n    createdAt: fromISOString(event.createdAt),\n  };\n}\n","import { agentTypingEnded, agentTypingStarted } from '../../agent/agentTyping';\nimport { assignedAgentChanged } from '../../agent/assignedAgentChanged';\nimport { contactCreated } from '../../contact/contactCreated';\nimport { contactStatusChanged } from '../../contact/contactStatusChanged';\nimport { contactToRoutingQueueAssignmentChanged } from '../../contact/contactToRoutingQueueAssignmentChanged';\nimport { livechatRecovered } from '../../thread/livechatThread/livechatRecovered';\nimport { threadRecovered } from '../../thread/threadRecovered';\nimport { ChatEvent, ChatEventData } from '../ChatEvent';\nimport { EventMiddleware } from '../ChatEventMiddleware';\n\nconst eventTypeMap: Record<string, EventMiddleware> = {\n  [ChatEvent.SENDER_TYPING_STARTED]: agentTypingStarted,\n  [ChatEvent.SENDER_TYPING_ENDED]: agentTypingEnded,\n  [ChatEvent.CASE_INBOX_ASSIGNEE_CHANGED]: assignedAgentChanged,\n  [ChatEvent.CASE_CREATED]: contactCreated,\n  [ChatEvent.CASE_STATUS_CHANGED]: contactStatusChanged,\n  [ChatEvent.CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED]:\n    contactToRoutingQueueAssignmentChanged,\n  [ChatEvent.LIVECHAT_RECOVERED]: livechatRecovered,\n  [ChatEvent.THREAD_RECOVERED]: threadRecovered,\n};\n\nexport function chatEventMapper(event: ChatEventData): ChatEventData | null {\n  if (event.type && eventTypeMap[event.type] !== undefined) {\n    return eventTypeMap[event.type](event);\n  }\n\n  return event;\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport function assignedAgentChanged(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.ASSIGNED_AGENT_CHANGED,\n  };\n}\n","import { CaseCreatedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseCreatedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type ContactCreatedData = CaseCreatedData;\n\nexport interface ContactCreatedChatEvent extends ChatEventData {\n  data: ContactCreatedData;\n  type: typeof ChatEvent.CONTACT_CREATED;\n}\n\nexport function contactCreated(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.CONTACT_CREATED,\n  };\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport function contactStatusChanged(event: ChatEventData): ChatEventData {\n  return {\n    ...event,\n    type: ChatEvent.CONTACT_STATUS_CHANGED,\n  };\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nimport { ContactToRoutingQueueAssignmentChangedChatEvent } from './isContactToRoutingQueueAssignmentChangedEvent';\n\nexport function contactToRoutingQueueAssignmentChanged(\n  event: ChatEventData,\n): ContactToRoutingQueueAssignmentChangedChatEvent {\n  return {\n    ...(event as ContactToRoutingQueueAssignmentChangedChatEvent),\n    type: ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED,\n  };\n}\n","import { PushUpdateEventFields } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventFields';\n\nimport { ChatEventData } from '../../event/ChatEvent';\nimport { normalizeEvent } from '../../event/normalizeEvent';\n\nexport function livechatRecovered(event: ChatEventData): ChatEventData {\n  const normalizedContactHistoryItems = (\n    (event.data as Record<string, unknown>)\n      .contactHistory as Array<PushUpdateEventFields>\n  ).map(normalizeEvent);\n\n  return {\n    ...event,\n    data: {\n      ...(event.data as Record<string, unknown>),\n      contactHistory: normalizedContactHistoryItems,\n    },\n  };\n}\n","import { PushUpdateEventFields } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventFields';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { normalizeEvent } from '../event/normalizeEvent';\n\nexport function threadRecovered(event: ChatEventData): ChatEventData {\n  const normalizedContactHistoryItems = (\n    (event.data as Record<string, unknown>)\n      .contactHistory as Array<PushUpdateEventFields>\n  ).map(normalizeEvent);\n\n  return {\n    ...event,\n    data: {\n      ...(event.data as Record<string, unknown>),\n      contactHistory: normalizedContactHistoryItems,\n    },\n  };\n}\n","import { ChatEventData } from '../event/ChatEvent';\nimport { isUndefined } from '../utils/is';\n\nexport interface MessageSuccessEventData extends ChatEventData {\n  id: string;\n}\nexport interface MessageFailedEventData extends MessageSuccessEventData {\n  error: {\n    errorCode: string;\n    errorMessage: string;\n    transactionId: string;\n  };\n  id: string;\n}\n\nexport function isSendMessageSuccessEventData(\n  event: ChatEventData,\n): event is MessageSuccessEventData {\n  const hasEventId =\n    isUndefined((event as MessageSuccessEventData)?.id) === false;\n\n  const hasError =\n    isUndefined((event as MessageFailedEventData).error) === false;\n\n  return hasError === false && hasEventId;\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SendMessageFailedError extends ChatSDKError {}\n","export class WebSocketClientError extends Error {\n  name: string = 'WebSocketClientError';\n\n  constructor(message: string, reason: string = '') {\n    const reasonMessage = reason ? ` (${reason})` : '';\n    super(`[WebSocketClientError]: ${message}${reasonMessage}`);\n  }\n}\n","import { createQueryParametersAsString } from '@brandembassy/be-javascript-utils/dist/query/queryParameters';\nimport {\n  WebSocketClient as PushUpdateWSClient,\n  WebSocketClientEvent as PushUpdatesWebSocketClientEvent,\n} from '@brandembassy/push-updates-sdk';\nimport { setupSocketConnection } from '@brandembassy/push-updates-sdk/dist/pushUpdate/pushUpdateWebSocket';\nimport { CloseEvent, ErrorEvent } from '@brandembassy/reconnecting-websocket';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\n\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\n\nimport { WebSocketClientError } from './WebSocketClientError';\n\nfunction createSocketUrl(\n  host: string,\n  prefix: string,\n  brandId: BrandId,\n  channelId: ChannelId,\n  consumerIdOnExternalPlatform: CustomerIdentityIdOnExternalPlatform,\n): string {\n  const appVersion = SDKVariableStorage.get(ChatSDKVariable.APP_VERSION);\n  const queryParameters = {\n    brandId,\n    channelId,\n    consumerId: consumerIdOnExternalPlatform,\n    v: appVersion,\n  };\n\n  const queryParametersAsString =\n    createQueryParametersAsString(queryParameters);\n\n  return `${host}/${prefix}?${queryParametersAsString}`;\n}\n\nexport interface WebSocketClientOptions {\n  forceSecureProtocol?: boolean;\n  host?: string;\n  onError?: (error: WebSocketClientError) => void;\n  port?: string;\n  prefix?: string;\n}\n\n/**\n * Websocket client\n */\nexport class WebSocketClient {\n  private _connection: PushUpdateWSClient | null = null;\n\n  constructor(\n    private brandId: BrandId,\n    private channelId: ChannelId,\n    private customerId: CustomerIdentityIdOnExternalPlatform,\n    private options?: WebSocketClientOptions,\n    private onError?: (error: Error) => void,\n  ) {\n    this.connect();\n  }\n\n  /**\n   * Connect websocket\n   */\n  connect(): void {\n    const port = this.options?.port ? `:${this.options?.port}` : '';\n    const host = this.options?.host ? `${this.options?.host}${port}` : '';\n    const prefix = this.options?.prefix ?? '';\n    const forceSecureProtocol = this.options?.forceSecureProtocol ?? true;\n\n    const socketUrl = createSocketUrl(\n      host,\n      prefix,\n      this.brandId,\n      this.channelId,\n      this.customerId,\n    );\n\n    this._connection = setupSocketConnection(socketUrl, {\n      startClosed: true,\n      forceSecureProtocol,\n    });\n\n    const errorHandlerBound = this._errorHandler.bind(this);\n    this._connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.CLOSE,\n      errorHandlerBound,\n    );\n    this._connection?.addEventListener(\n      PushUpdatesWebSocketClientEvent.ERROR,\n      errorHandlerBound,\n    );\n\n    this._connection?.socket?.reconnect();\n  }\n\n  /**\n   * Disconnect websocket\n   */\n  disconnect(): void {\n    this._connection?.socket.close();\n  }\n\n  /**\n   * Reconnect websocket\n   */\n  reconnect(): void {\n    this._connection?.socket.reconnect();\n  }\n\n  /**\n   * Send data to active connection\n   * @param data - data to send\n   */\n  send(data: unknown): void {\n    const stringData = JSON.stringify(data);\n    this._connection?.send(stringData);\n  }\n\n  /**\n   * Register event handler to websocket event\n   * @param eventType - websocket event\n   * @param handlerCallback - event handler\n   */\n  on(\n    eventType: PushUpdatesWebSocketClientEvent,\n    handlerCallback: (event: CustomEvent) => void,\n  ): void {\n    this._connection?.addEventListener(eventType, handlerCallback);\n  }\n\n  /**\n   * Unregister event handler to websocket event\n   * @param eventType - websocket event\n   * @param handlerCallback - event handler\n   */\n  off(\n    eventType: PushUpdatesWebSocketClientEvent,\n    handlerCallback: (event: CustomEvent) => void,\n  ): void {\n    this._connection?.removeEventListener(eventType, handlerCallback);\n  }\n\n  /**\n   * Handle error from event listeners with onError callback or throw error\n   */\n  private _errorHandler(\n    event: CustomEvent<CloseEvent | ErrorEvent | Event>,\n  ): void {\n    const eventError = event.detail;\n    let error: WebSocketClientError | undefined;\n\n    if (eventError instanceof ErrorEvent) {\n      error = new WebSocketClientError('Connection error', eventError.message);\n    }\n    if (eventError instanceof CloseEvent) {\n      error = new WebSocketClientError('Connection closed', eventError.reason);\n    }\n    if (typeof error === 'undefined') {\n      error = new WebSocketClientError('Unknown error', eventError.type);\n    }\n\n    if (typeof this.onError === 'function') {\n      this.onError(error);\n    } else {\n      throw error;\n    }\n  }\n}\n","import UAParser from 'ua-parser-js';\n\nimport {\n  ApplicationType,\n  BrowserFingerprint,\n  DeviceType,\n} from '@brandembassy/ts-types-chat/dist/user/BrowserFingerprint';\n\nexport interface BrowserFingerprintOptions {\n  country?: string | null;\n  ip?: string | null;\n  language?: string;\n  location?: string | null;\n}\n\nexport const getBrowserLanguage = (): string => navigator.language;\nexport const getBrowserLocation = (): string =>\n  Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n/**\n * Get Device type\n * @param deviceType - device type\n */\nexport function getDeviceType(deviceType?: string): DeviceType {\n  switch (deviceType) {\n    case 'mobile':\n      return DeviceType.MOBILE;\n    case 'tablet':\n      return DeviceType.TABLET;\n    default:\n      return DeviceType.DESKTOP;\n  }\n}\n\n/**\n * Get Customer Browser fingerprint\n * @param options - options\n */\nexport const getBrowserFingerprint = (\n  options: BrowserFingerprintOptions = {},\n): BrowserFingerprint => {\n  const deviceInfoFromUserAgent = new UAParser(navigator.userAgent);\n\n  const {\n    country = '',\n    location = getBrowserLocation(),\n    language = getBrowserLanguage(),\n    ip = null,\n  } = options;\n\n  return {\n    browser: deviceInfoFromUserAgent.getBrowser().name ?? null,\n    browserVersion: deviceInfoFromUserAgent.getBrowser().version ?? null,\n    country,\n    ip,\n    language,\n    location,\n    os: deviceInfoFromUserAgent.getOS().name ?? null,\n    osVersion: deviceInfoFromUserAgent.getOS().version ?? null,\n    deviceType: getDeviceType(deviceInfoFromUserAgent.getDevice().type),\n    applicationType: ApplicationType.BROWSER,\n  };\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class UploadAttachmentError extends ChatSDKError {}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { AttachmentUpload } from '@brandembassy/ts-types-chat/dist/message/AttachmentUpload';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { SendMessageOptions } from '../thread/SendMessageOptions';\nimport { generateId } from '../utils/generateId';\nimport { getBrandIdAndChannelId } from '../utils/getBrandIdAndChannelId';\n\nimport { createPayloadForAttachmentUpload } from './createPayloadForAttachmentUpload';\nimport {\n  isUploadFailResponse,\n  isUploadSuccessResponse,\n  uploadAttachment,\n} from './uploadAttachment';\nimport { UploadAttachmentError } from './UploadAttachmentError';\n\nexport const createAttachmentPayload = async (\n  file: File,\n  brandId: BrandId,\n  channelId: ChannelId,\n): Promise<AttachmentUpload> => {\n  const attachment = await createPayloadForAttachmentUpload(file);\n  const uploadAttachmentResponse = await uploadAttachment(\n    brandId,\n    channelId,\n    attachment,\n  );\n\n  if (isUploadSuccessResponse(uploadAttachmentResponse)) {\n    return {\n      url: uploadAttachmentResponse.fileUrl,\n      friendlyName: attachment.name,\n    };\n  }\n\n  if (isUploadFailResponse(uploadAttachmentResponse)) {\n    throw new UploadAttachmentError(\n      'Upload attachment failed',\n      uploadAttachmentResponse,\n    );\n  }\n\n  throw new ChatSDKError(\n    `Unknown file upload response (${uploadAttachmentResponse})`,\n  );\n};\n\nexport const createAttachmentUploadMessageData = async (\n  files: FileList,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  options: SendMessageOptions = {},\n): Promise<SendMessageEventData> => {\n  const { brandId, channelId } = getBrandIdAndChannelId();\n\n  try {\n    const attachments = await Promise.all<AttachmentUpload>(\n      Array.from(files).map(async (file) =>\n        createAttachmentPayload(file, brandId, channelId),\n      ),\n    );\n\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    return {\n      messageContent: {\n        type: MessageType.TEXT,\n        payload: {\n          text: '',\n        },\n      },\n      attachments,\n      browserFingerprint,\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n      idOnExternalPlatform: messageId,\n      consumer: {\n        customFields: [],\n      },\n      consumerContact: {\n        customFields: [],\n      },\n    };\n  } catch (error: unknown) {\n    if (error instanceof UploadAttachmentError) {\n      throw error;\n    }\n\n    if (error instanceof Error) {\n      throw new ChatSDKError(\n        `Send attachment failed because of (${error.message})`,\n      );\n    }\n\n    throw new ChatSDKError(`Unknown error during file upload`);\n  }\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nimport { createLocalFileReader } from './localFileReader';\n\nexport interface AttachmentPayload {\n  mimeType: string;\n  name: string;\n  url: string;\n}\n\nexport const createPayloadForAttachmentUpload = async (\n  file: File,\n): Promise<AttachmentPayload> => {\n  const reader = await createLocalFileReader(file);\n\n  if (reader.error !== null) {\n    throw new ChatSDKError(\n      `Cannot create payload for attachment upload because of error (${reader.error.message})`,\n    );\n  }\n\n  if (typeof reader.result !== 'string') {\n    throw new ChatSDKError(\n      `Cannot create payload for attachment upload because of missing:\n      reader result (${reader.result})`,\n    );\n  }\n\n  return {\n    url: reader.result,\n    name: file.name,\n    mimeType: file.type,\n  };\n};\n","export function createLocalFileReader(file: File): Promise<FileReader> {\n  return new Promise((resolve, reject): void => {\n    const reader = new FileReader();\n    reader.onloadend = (): void => {\n      resolve(reader);\n    };\n    reader.onerror = (errorEvent: ProgressEvent<FileReader>): void =>\n      reject(errorEvent.target?.error?.message);\n    reader.readAsDataURL(file);\n  });\n}\n","import { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { CALLER_SERVICE_ID } from '@brandembassy/ts-types-platform/dist/http/headers';\n\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport { isUndefined } from '../utils/is';\n\nimport { AttachmentPayload } from './createPayloadForAttachmentUpload';\n\nexport interface UploadSuccessResponse {\n  fileUrl: string;\n}\n\nexport interface UploadFailResponse {\n  allowedFileSize: string;\n  allowedFileTypes: Array<{\n    description: string;\n    mimeType: string;\n  }>;\n}\n\nexport function isUploadSuccessResponse(\n  data: unknown,\n): data is UploadSuccessResponse {\n  return isUndefined((data as UploadSuccessResponse)?.fileUrl) === false;\n}\n\nexport function isUploadFailResponse(\n  data: unknown,\n): data is UploadFailResponse {\n  return isUndefined((data as UploadFailResponse)?.allowedFileSize) === false;\n}\n\nexport async function uploadAttachment(\n  brandId: BrandId,\n  channelId: string,\n  attachment: AttachmentPayload,\n): Promise<UploadSuccessResponse | UploadFailResponse> {\n  const CHANNEL_INTEGRATION_URL = SDKVariableStorage.get(\n    ChatSDKVariable.ENDPOINT_CHAT,\n  );\n  const { url, name: fileName, mimeType } = attachment;\n  const content = url.split(';base64,')[1];\n  const requestBody = { content, fileName, mimeType };\n  const response = await fetch(\n    `${CHANNEL_INTEGRATION_URL}/chat/1.0/brand/${brandId}/channel/${channelId}/attachment`,\n    {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        [CALLER_SERVICE_ID]: SDKVariableStorage.get(ChatSDKVariable.APP_NAME),\n      },\n    },\n  );\n\n  if (!response.ok) {\n    throw new ChatSDKError(\n      `Failed to upload Attachments. Status (${response.status})`,\n    );\n  }\n\n  return response.json();\n}\n","import { CaseStatusChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseStatusChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type ContactStatusChangedData = CaseStatusChangedData;\n\nexport interface ContactStatusChangedChatEvent extends ChatEventData {\n  data: ContactStatusChangedData;\n  type: typeof ChatEvent.CONTACT_STATUS_CHANGED;\n}\n\nexport function isContactStatusChangedEvent(\n  event: ChatEventData,\n): event is ContactStatusChangedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_STATUS_CHANGED &&\n    (event as ContactStatusChangedChatEvent).data?.case?.id !== undefined\n  );\n}\n","import { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nimport { ContactCreatedChatEvent } from './contactCreated';\n\nexport function isContactCreatedEvent(\n  event: ChatEventData,\n): event is ContactCreatedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_CREATED &&\n    (event as ContactCreatedChatEvent).data?.case?.id !== undefined\n  );\n}\n","import { ContactToRoutingQueueAssignmentChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseToRoutingQueueAssignmentChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface ContactToRoutingQueueAssignmentChangedChatEvent\n  extends ChatEventData {\n  data: ContactToRoutingQueueAssignmentChangedData;\n  type: typeof ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED;\n}\n\nexport function isContactToRoutingQueueAssignmentChangedEvent(\n  event: ChatEventData,\n): event is ContactToRoutingQueueAssignmentChangedChatEvent {\n  return (\n    event.type === ChatEvent.CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED &&\n    (event as ContactToRoutingQueueAssignmentChangedChatEvent).data?.case\n      ?.id !== undefined\n  );\n}\n","import { ContactRecipientsChangedData } from '@brandembassy/ts-types-platform/dist/groupChat/ContactRecipientsChangedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface ContactRecipientsChangedChatEvent extends ChatEventData {\n  data: ContactRecipientsChangedData;\n  type: PushUpdateEventType.CONTACT_RECIPIENTS_CHANGED;\n}\n\nexport function isContactRecipientsChangedEvent(\n  event: unknown,\n): event is ContactRecipientsChangedChatEvent {\n  return (\n    (event as ContactRecipientsChangedChatEvent).type ===\n    PushUpdateEventType.CONTACT_RECIPIENTS_CHANGED\n  );\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { BrowserFingerprint } from '@brandembassy/ts-types-chat/dist/user/BrowserFingerprint';\nimport { MessageId } from '@brandembassy/ts-types-platform/dist/message/MessageId';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\n\nexport type MessageContent = SendMessageEventData['messageContent'];\n\nexport const createMessageData = (\n  messageContent: MessageContent,\n  messageId: MessageId,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  browserFingerprint: BrowserFingerprint = getBrowserFingerprint(),\n): SendMessageEventData => ({\n  messageContent,\n  browserFingerprint,\n  idOnExternalPlatform: messageId,\n  thread: {\n    idOnExternalPlatform: threadIdOnExternalPlatform,\n  },\n  consumer: {\n    customFields: [],\n  },\n  consumerContact: {\n    customFields: [],\n  },\n  attachments: [],\n});\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { MoreMessagesLoadedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/MoreMessagesLoaded';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MoreMessagesLoadedEvent extends ChatEventData {\n  data: MoreMessagesLoadedPostbackData;\n}\n\nexport function isLoadMoreMessagesEventData(\n  event: ChatEventData,\n): event is MoreMessagesLoadedEvent {\n  return (\n    (event as MoreMessagesLoadedEvent).type ===\n      AwsResponseEventType.MORE_MESSAGES_LOADED &&\n    (event as MoreMessagesLoadedEvent)?.data?.messages !== undefined\n  );\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { LoadMoreMessagesEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LoadMoreMessages';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createLoadMoreMessagesPayloadData = (\n  eventData: LoadMoreMessagesEventData,\n): EventPayloadData<LoadMoreMessagesEventData> => ({\n  eventType: AwsInputEventType.LOAD_MORE_MESSAGES,\n  data: eventData,\n});\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class ArchiveThreadFailedError extends ChatSDKError {}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class GetMetadataFailedError extends ChatSDKError {}\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadMetadataLoadedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadMetadataLoaded';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface LoadThreadMetadataChatEvent extends ChatEventData {\n  data: ThreadMetadataLoadedPostbackData;\n  type: AwsResponseEventType.THREAD_METADATA_LOADED;\n}\n\nexport const isLoadMetadataSuccessPayload = (\n  response: ChatEventData,\n): response is LoadThreadMetadataChatEvent =>\n  (response as LoadThreadMetadataChatEvent).type ===\n    AwsResponseEventType.THREAD_METADATA_LOADED &&\n  (response as LoadThreadMetadataChatEvent).data.lastMessage !== undefined;\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadRecoveredPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadRecovered';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { isUndefined } from '../utils/is';\n\nexport interface ThreadRecoveredChatEvent extends ChatEventData {\n  data: ThreadRecoveredPostbackData;\n}\n\nexport const isRecoverSuccessPayload = (\n  response: ChatEventData,\n): response is ThreadRecoveredChatEvent => {\n  const testResponseData = response.data as ThreadRecoveredPostbackData;\n\n  const hasPostbackData = isUndefined(testResponseData) === false;\n  const hasMessages = isUndefined(testResponseData?.messages) === false;\n  const isCorrectEventType =\n    response.type === AwsResponseEventType.THREAD_RECOVERED ||\n    response.type === AwsResponseEventType.LIVECHAT_RECOVERED;\n  const hasNoError = isUndefined(response.error);\n\n  return hasPostbackData && hasMessages && hasNoError && isCorrectEventType;\n};\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface ThreadArchivedEvent extends ChatEventData {\n  type: AwsResponseEventType.THREAD_ARCHIVED;\n}\n\nexport function isThreadArchivedSuccessPayload(\n  response: ChatEventData,\n): response is ThreadArchivedEvent {\n  return (\n    (response as ThreadArchivedEvent).type ===\n    AwsResponseEventType.THREAD_ARCHIVED\n  );\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class LoadMoreMessagesFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RecoverThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/RecoverThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createRecoverThreadPayloadData(\n  threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform,\n): EventPayloadData<RecoverThreadEventData> {\n  const emptyData = {\n    eventType: AwsInputEventType.RECOVER_THREAD,\n    data: {},\n  };\n\n  if (threadIdOnExternalPlatform === undefined) {\n    return emptyData;\n  }\n\n  return {\n    ...emptyData,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SetThreadNameFailedError extends ChatSDKError {}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class ThreadRecoverFailedError extends ChatSDKError {}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\nimport { ContactNumber } from '@brandembassy/ts-types-platform/dist/contact/ContactNumber';\nimport { ContactStatus } from '@brandembassy/ts-types-platform/dist/contact/ContactStatus';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { createAttachmentUploadMessageData } from '../attachment/sendAttachments';\nimport { getAccessToken } from '../authorization/accessTokenStorage';\nimport { getBrowserFingerprint } from '../browserFingerprint/getBrowserFingerprint';\nimport { isContactStatusChangedEvent } from '../contact';\nimport { Customer } from '../customer/Customer';\nimport {\n  CustomFieldsMap,\n  CustomFieldsObject,\n  getCustomFieldsArray,\n  setCustomFields,\n  setCustomFieldsFromArray,\n} from '../customField/CustomFields';\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { ChatSDKError } from '../error/ChatSDKError';\nimport {\n  ChatCustomEvent,\n  ChatEvent,\n  ChatEventData,\n  ChatEventType,\n} from '../event/ChatEvent';\nimport { IChatEventTarget } from '../event/ChatEventTarget';\nimport {\n  EventListenerFunction,\n  RemoveListenerFunction,\n} from '../event/ListenerFunction';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { createMessageData } from '../message/createMessageData';\nimport { getPostbackMessageContent } from '../message/getPostbackMessageContent';\nimport { getTextMessageContent } from '../message/getTextMessageContent';\nimport {\n  isLoadMoreMessagesEventData,\n  MoreMessagesLoadedEvent,\n} from '../message/loadMoreMessagesEventData';\nimport { createLoadMoreMessagesPayloadData } from '../message/loadMoreMessagesPayload';\nimport { MessageSuccessEventData } from '../message/MessageSuccessEventData';\nimport { sendMessage } from '../message/sendMessage';\nimport { createSendMessagePreviewPayloadData } from '../message/sendMessagePreviewPayload';\nimport { sendOutboundMessage } from '../message/sendOutboundMessage';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\nimport { generateId } from '../utils/generateId';\nimport { isEmpty, isUndefined } from '../utils/is';\n\nimport { createArchiveThreadEventPayloadData } from './archiveThread';\nimport { ArchiveThreadFailedError } from './ArchiveThreadFailedError';\nimport { GetMetadataFailedError } from './GetMetadataFailedError';\nimport {\n  isLoadMetadataSuccessPayload,\n  LoadThreadMetadataChatEvent,\n} from './isLoadMetadataSuccessPayload';\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { isThreadArchivedSuccessPayload } from './isThreadArchivedSuccessPayload';\nimport { createLastMessageSeenPayloadData } from './lastMessageSeenPayload';\nimport { LoadMoreMessagesFailedError } from './LoadMoreMessagesFailedError';\nimport { createLoadThreadMetadataEventPayloadData } from './metadata';\nimport { createRecoverThreadPayloadData } from './recoverThreadPayload';\nimport { SendMessageOptions } from './SendMessageOptions';\nimport { createSetThreadCustomFieldsPayloadData } from './setThreadCustomFieldsPayload';\nimport { SetThreadNameFailedError } from './SetThreadNameFailedError';\nimport { filterCurrentThreadEventHandler } from './threadEventHandler';\nimport { ThreadRecoveredData } from './ThreadRecoveredData';\nimport { ThreadRecoverFailedError } from './ThreadRecoverFailedError';\nimport { createSendTranscriptPayloadData } from './transcript';\nimport {\n  createStartTypingEventPayloadData,\n  createStopTypingEventPayloadData,\n} from './typingEvents';\nimport {\n  createUpdateThreadPayloadData,\n  isUpdateThreadSuccess,\n} from './updateThread';\n\nexport class Thread {\n  public idOnExternalPlatform: ThreadIdOnExternalPlatform;\n\n  protected _websocketClient: WebSocketClient;\n  protected _exists: boolean = false;\n\n  protected _messageEmitter: IChatEventTarget;\n  protected _typingTimeoutID: ReturnType<typeof setTimeout> | undefined =\n    undefined;\n  protected _isAuthorizationEnabled: boolean = false;\n  protected _customer: Customer | null;\n  protected _customFields: CustomFieldsMap = new Map();\n  private _typingForPreviewTimeoutID: ReturnType<typeof setTimeout> | undefined;\n  private _typingPreviewText: string = '';\n\n  constructor(\n    idOnExternalPlatform: ThreadIdOnExternalPlatform,\n    websocketClient: WebSocketClient,\n    messageEmitter: IChatEventTarget,\n    customer: Customer | null,\n    customFields: CustomFieldsObject = {},\n    isAuthorizationEnabled: boolean = false,\n  ) {\n    this.idOnExternalPlatform = idOnExternalPlatform;\n    this._websocketClient = websocketClient;\n    this._messageEmitter = messageEmitter;\n    this._customer = customer;\n    this._isAuthorizationEnabled = isAuthorizationEnabled;\n\n    setCustomFields(this._customFields, customFields);\n    this._registerEventHandlers();\n  }\n\n  /**\n   * Recover existing chat\n   * @returns Promise<ThreadRecoveredData>\n   * @throws ThreadRecoverFailedError\n   *  * This exception is thrown when the recover fails or the thread does not exist.\n   */\n  public async recover(): Promise<ThreadRecoveredData> {\n    const response = await sendChatEvent(\n      createRecoverThreadPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n\n    if (isRecoverSuccessPayload(response)) {\n      const { contact, consumerContact, ...restData } = response.data;\n\n      return {\n        ...restData,\n        contact: contact ?? consumerContact,\n      };\n    }\n\n    throw new ThreadRecoverFailedError('Thread recover fail', response);\n  }\n\n  /**\n   * Send message\n   * @param messageData - message data\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error contains (`error.data`) a response from the backend with details.\n   */\n  public async sendMessage(\n    messageData: SendMessageEventData,\n  ): Promise<MessageSuccessEventData> {\n    const messageDataWithCustomFields =\n      this._mergeCustomFieldsAndAccessTokenWithMessageData(messageData, false);\n\n    return sendMessage(messageDataWithCustomFields, this._websocketClient);\n  }\n\n  /**\n   * Send text message\n   * @param messageText - text of message\n   * @param options - options\n   */\n  public async sendTextMessage(\n    messageText: string,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    const textMessageContent = getTextMessageContent(messageText);\n    const messageData = createMessageData(\n      textMessageContent,\n      messageId,\n      this.idOnExternalPlatform,\n      browserFingerprint,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send postback message\n   * @param postback - postback\n   * @param messageText - text of message\n   * @param options - options\n   */\n  public async sendPostbackMessage(\n    postback: string,\n    messageText: string,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    const {\n      messageId = generateId(),\n      browserFingerprint = getBrowserFingerprint(),\n    } = options;\n\n    const postbackMessageContent = getPostbackMessageContent(\n      postback,\n      messageText,\n    );\n    const messageData = createMessageData(\n      postbackMessageContent,\n      messageId,\n      this.idOnExternalPlatform,\n      browserFingerprint,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send Outbound Message\n   * @param messageData - message data\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error contains (`error.data`) a response from the backend with details.\n   */\n  public async sendOutboundMessage(\n    messageData: SendOutboundEventData,\n  ): Promise<MessageSuccessEventData> {\n    const outboundEventDataWithCustomFields =\n      this._mergeCustomFieldsAndAccessTokenWithMessageData(messageData, true);\n\n    return sendOutboundMessage(\n      outboundEventDataWithCustomFields,\n      this._websocketClient,\n    );\n  }\n\n  /**\n   * Load previous messages\n   * @returns Promise MoreMessagesLoadedEvent | null\n   * @throws LoadMoreMessagesFailedError\n   *  * This exception is thrown when the attempt to load more messages fails.\n   */\n  public async loadMoreMessages(): Promise<MoreMessagesLoadedEvent | null> {\n    const { scrollToken, oldestMessageDatetime } =\n      JSON.parse(SDKVariableStorage.get(ChatSDKVariable.THREAD_DATA, '{}')) ??\n      {};\n\n    if (isEmpty(scrollToken)) {\n      return null;\n    }\n\n    const loadMoreMessagesEventData = {\n      scrollToken,\n      oldestMessageDatetime,\n      thread: { idOnExternalPlatform: this.idOnExternalPlatform },\n    };\n\n    const response = await sendChatEvent(\n      createLoadMoreMessagesPayloadData(loadMoreMessagesEventData),\n      this._websocketClient,\n    );\n\n    if (isLoadMoreMessagesEventData(response)) {\n      return response;\n    }\n\n    throw new LoadMoreMessagesFailedError(\n      'Load more messages failed',\n      response,\n    );\n  }\n\n  /**\n   * Mark all messages in the thread as seen\n   */\n  public async lastMessageSeen(): Promise<ChatEventData> {\n    const payloadData = createLastMessageSeenPayloadData(\n      this.idOnExternalPlatform,\n    );\n\n    return sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  /**\n   * Send attachment\n   *\n   * Raw function to send attachments\n   * @param files - An object of this type is returned by the files' property of the HTML <input> element; this lets you access the list of files selected with the <input type=\"file\"> element.\n   * @param options - options\n   * @throws UploadAttachmentError\n   *  * This exception is thrown when the file upload fails. The `error.data` contains information about allowed file size and types.\n   */\n  public async sendAttachments(\n    files: FileList,\n    options: SendMessageOptions = {},\n  ): Promise<MessageSuccessEventData> {\n    if (isUndefined(files) || files.length === 0) {\n      throw new ChatSDKError(\n        'FileList must be provided to sendAttachment method',\n      );\n    }\n\n    const messageData = await createAttachmentUploadMessageData(\n      files,\n      this.idOnExternalPlatform,\n      options,\n    );\n\n    return this.sendMessage(messageData);\n  }\n\n  /**\n   * Send start and stop typing events. It sends stop typing event after the timeout. Repeated calls resets this timeout.\n   * @param timeout - The timeout in milliseconds.\n   * @param onSendCallback - Callback to be called after the stop typing event is sent.\n   */\n  public keystroke(timeout = 1000, onSendCallback?: () => void): void {\n    if (!this._typingTimeoutID) {\n      sendChatEvent(\n        createStartTypingEventPayloadData(this.idOnExternalPlatform),\n        this._websocketClient,\n      );\n    }\n\n    clearTimeout(this._typingTimeoutID);\n    this._typingTimeoutID = setTimeout(() => {\n      this._stopTypingCallback(onSendCallback);\n    }, timeout);\n  }\n\n  /**\n   * Manually send the stop typing event and clear the keystroke timeout.\n   */\n  public stopTyping(): void {\n    this._stopTypingCallback();\n  }\n\n  private _stopTypingCallback(onSendCallback?: () => void): void {\n    clearTimeout(this._typingTimeoutID);\n    this._typingTimeoutID = undefined;\n    sendChatEvent(\n      createStopTypingEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n    if (typeof onSendCallback === 'function') {\n      onSendCallback();\n    }\n  }\n\n  /**\n   * Send typing event for message preview after the timeout.\n   * @param currentText - current text\n   * @param timeout - timeout in milliseconds\n   * @returns void\n   *\n   */\n  keystrokeForPreview(currentText: string, timeout = 1250): void {\n    this._typingPreviewText = currentText;\n    if (this._typingForPreviewTimeoutID) {\n      return;\n    }\n\n    this._typingForPreviewTimeoutID = setTimeout(() => {\n      this.stopTypingForPreview();\n    }, timeout);\n  }\n\n  /**\n   * Manually send the stop typing event for message preview and clear the keystroke timeout.\n   * @param shouldSendPreview - should send preview\n   * @returns void\n   *\n   */\n  stopTypingForPreview(shouldSendPreview = true): void {\n    clearTimeout(this._typingForPreviewTimeoutID);\n    this._typingForPreviewTimeoutID = undefined;\n    const currentPreviewText = this._typingPreviewText;\n    this._typingPreviewText = '';\n\n    if (shouldSendPreview === false) {\n      return;\n    }\n    this.sendMessagePreview(currentPreviewText);\n  }\n\n  /**\n   * Get Thread Metadata\n   * @returns response otherwise throw an error response\n   * @throws GetMetadataFailedError\n   *  * This exception is thrown when getting thread metadata failed.\n   */\n  public async getMetadata(): Promise<LoadThreadMetadataChatEvent> {\n    const response = await sendChatEvent(\n      createLoadThreadMetadataEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n\n    if (isLoadMetadataSuccessPayload(response)) {\n      return response;\n    }\n\n    throw new GetMetadataFailedError('Get metadata failed', response);\n  }\n\n  public onThreadEvent(\n    type: ChatEventType,\n    handler: EventListenerFunction,\n  ): RemoveListenerFunction {\n    const filteredEventHandler = filterCurrentThreadEventHandler(\n      this.idOnExternalPlatform,\n      handler,\n    );\n\n    this._messageEmitter.addEventListener(type, filteredEventHandler);\n\n    return () => {\n      this._messageEmitter.removeEventListener(type, filteredEventHandler);\n    };\n  }\n\n  /**\n   * Send current Custom Fields\n   */\n  public async sendCustomFields(): Promise<ChatEventData> {\n    const customFieldsData = createSetThreadCustomFieldsPayloadData(\n      getCustomFieldsArray(this._customFields),\n      this.idOnExternalPlatform,\n    );\n\n    return sendChatEvent(customFieldsData, this._websocketClient);\n  }\n\n  /**\n   * Set thread custom fields and send them\n   * @param customFields - custom fields object\n   * @example \\{ indentName: 'value' \\}\n   */\n  public async setCustomFields(\n    customFields: CustomFieldsObject,\n  ): Promise<void> {\n    setCustomFields(this._customFields, customFields);\n\n    if (this._exists === false) {\n      // let customFields be sent by the first message\n      return;\n    }\n\n    await this.sendCustomFields();\n  }\n\n  /**\n   * Set thread custom field\n   * @param name - custom field name\n   * @param value - custom field value\n   */\n  public setCustomField(\n    name: CustomField['ident'],\n    value: CustomField['value'],\n  ): Promise<void> {\n    return this.setCustomFields({ [name]: value });\n  }\n\n  /**\n   * Set thread as archived\n   * @returns Promise true\n   * @throws ArchiveThreadFailedError\n   *  * This exception is thrown when the archive thread failed.\n   */\n  public async archive(): Promise<true> {\n    const response = await sendChatEvent(\n      createArchiveThreadEventPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n\n    if (isThreadArchivedSuccessPayload(response)) {\n      return true;\n    }\n\n    throw new ArchiveThreadFailedError('Archive Thread failed', response);\n  }\n\n  /**\n   * Set thread name\n   * @param name - New name of the Thread\n   * @returns Promise true\n   * @throws SetThreadNameFailedError\n   *  * This exception is thrown when the set thread name failed.\n   */\n  public async setName(name: string): Promise<true> {\n    const updateThreadData = createUpdateThreadPayloadData(\n      this.idOnExternalPlatform,\n      name,\n    );\n\n    const response = await sendChatEvent(\n      updateThreadData,\n      this._websocketClient,\n    );\n\n    if (isUpdateThreadSuccess(response)) {\n      return true;\n    }\n\n    throw new SetThreadNameFailedError('Set Thread name failed', response);\n  }\n\n  /**\n   * Send message preview\n   * @param text - text\n   */\n  public async sendMessagePreview(text: string): Promise<void> {\n    const payloadData = createSendMessagePreviewPayloadData(\n      this.idOnExternalPlatform,\n      text,\n    );\n\n    await sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  /**\n   * Send conversation transcript to email\n   */\n  public async sendTranscript(\n    contactNumber: ContactNumber,\n    email: string,\n  ): Promise<ChatEventData> {\n    const payloadData = createSendTranscriptPayloadData(contactNumber, email);\n\n    return sendChatEvent(payloadData, this._websocketClient);\n  }\n\n  protected _setThreadAndCustomerExists(): void {\n    this._exists = true;\n    this._customer?.setExists(true);\n  }\n\n  protected _clearCustomFieldsOnContactStatusChangedToClosed(\n    event: ChatCustomEvent,\n  ): void {\n    const eventDetail = event.detail;\n\n    if (!isContactStatusChangedEvent(eventDetail)) {\n      return;\n    }\n\n    if (eventDetail.data.case.status === ContactStatus.CLOSED) {\n      // Delete custom fields after contact closure to prevent sending custom fields from previous contact.\n      this._customFields.clear();\n    }\n  }\n\n  private _mergeCustomFieldsAndAccessTokenWithMessageData<\n    T extends SendMessageEventData | SendOutboundEventData,\n  >(messageData: T, isOutbound: boolean): T {\n    // Access token\n    let accessToken;\n    const storedAccessToken =\n      (this._isAuthorizationEnabled && getAccessToken()) ?? false;\n    if (storedAccessToken !== false) {\n      accessToken = { token: storedAccessToken.token };\n    }\n\n    // Update Thread (Contact) custom fields\n    setCustomFieldsFromArray(\n      this._customFields,\n      messageData.consumerContact.customFields,\n    );\n\n    const consumerContact = {\n      customFields: getCustomFieldsArray(this._customFields),\n    };\n\n    // Update Customer custom fields\n    let consumer;\n    if (!isOutbound) {\n      this._customer?.setCustomFieldsFromArray(\n        (messageData as SendMessageEventData).consumer?.customFields ?? [],\n      );\n      consumer = {\n        customFields: this._customer?.getCustomFieldsArray() ?? [],\n      };\n    }\n\n    return {\n      ...messageData,\n      accessToken,\n      consumer,\n      consumerContact,\n    };\n  }\n\n  private _registerEventHandlers() {\n    this.onThreadEvent(ChatEvent.CASE_CREATED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.CONTACT_CREATED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.THREAD_RECOVERED, () =>\n      this._setThreadAndCustomerExists(),\n    );\n    this.onThreadEvent(ChatEvent.CONTACT_STATUS_CHANGED, (event) =>\n      this._clearCustomFieldsOnContactStatusChangedToClosed(event),\n    );\n  }\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendMessagePayloadData } from './sendMessagePayload';\n\nexport const sendMessage = async (\n  messageData: SendMessageEventData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const sendMessagePayloadData = createSendMessagePayloadData(messageData);\n\n  const response = await sendChatEvent(sendMessagePayloadData, websocketClient);\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send message failed', response);\n};\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendMessagePayloadData = (\n  eventData: SendMessageEventData,\n): EventPayloadData<SendMessageEventData> => ({\n  eventType: AwsInputEventType.SEND_MESSAGE,\n  data: eventData,\n});\n","import { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { MessageContent } from './createMessageData';\n\nexport function getTextMessageContent(messageText: string): MessageContent {\n  return {\n    payload: {\n      text: messageText,\n    },\n    type: MessageType.TEXT,\n  };\n}\n","import { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { MessageContent } from './createMessageData';\n\nexport function getPostbackMessageContent(\n  postback: string,\n  messageText: string,\n): MessageContent {\n  return {\n    payload: {\n      text: messageText,\n      postback, // Leaving this here for backwards compatibility\n    },\n    postback,\n    type: MessageType.TEXT, // MessageType.POSTBACK is deprecated\n  };\n}\n","import { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendOutboundMessagePayloadData } from './sendOutboundMessagePayload';\n\nexport const sendOutboundMessage = async (\n  messageData: SendOutboundEventData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const sendOutboundMessagePayloadData =\n    createSendOutboundMessagePayloadData(messageData);\n\n  const response = await sendChatEvent(\n    sendOutboundMessagePayloadData,\n    websocketClient,\n  );\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send Outbound message failed', response);\n};\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendOutboundEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOutbound';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendOutboundMessagePayloadData = (\n  eventData: SendOutboundEventData,\n): EventPayloadData<SendOutboundEventData> => ({\n  eventType: AwsInputEventType.SEND_OUTBOUND,\n  data: eventData,\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { MessageSeenByConsumerEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/MessageSeenByConsumer';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createLastMessageSeenPayloadData(\n  threadIdOnExternalPlatform: string,\n): EventPayloadData<MessageSeenByConsumerEventData> {\n  return {\n    eventType: AwsInputEventType.MESSAGE_SEEN,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SenderTypingEndedEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SenderTypingEnded';\nimport { SenderTypingStartedEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SenderTypingStarted';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createStartTypingEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SenderTypingStartedEventData> {\n  return {\n    eventType: AwsInputEventType.SENDER_TYPING_STARTED,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n\nexport function createStopTypingEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SenderTypingEndedEventData> {\n  return {\n    eventType: AwsInputEventType.SENDER_TYPING_ENDED,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ArchiveThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/ArchiveThread';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createLoadThreadMetadataEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<ArchiveThreadEventData> {\n  return {\n    eventType: AwsInputEventType.LOAD_THREAD_METADATA,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { ChatCustomEvent } from '../event/ChatEvent';\nimport { EventListenerFunction } from '../event/ListenerFunction';\n\ninterface DataWithThread {\n  case?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  message?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  messagePreview?: {\n    threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n  thread?: {\n    idOnExternalPlatform?: ThreadIdOnExternalPlatform;\n  };\n}\n\nconst getThreadId = (data: unknown): ThreadIdOnExternalPlatform | undefined => {\n  const dataWithThread = data as DataWithThread;\n\n  return (\n    dataWithThread?.thread?.idOnExternalPlatform ??\n    dataWithThread?.case?.threadIdOnExternalPlatform ??\n    dataWithThread?.message?.threadIdOnExternalPlatform ??\n    dataWithThread?.messagePreview?.threadIdOnExternalPlatform\n  );\n};\n\nexport const filterCurrentThreadEventHandler =\n  (threadId: ThreadIdOnExternalPlatform, handler: EventListenerFunction) =>\n  (event: ChatCustomEvent): void => {\n    const eventData = event.detail.data;\n\n    const eventThreadId = getThreadId(eventData);\n\n    if (eventThreadId === threadId) {\n      handler(event);\n    }\n  };\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SetConsumerContactCustomFieldsEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SetConsumerContactCustomFields';\nimport { CustomField } from '@brandembassy/ts-types-platform/dist/customField/CustomField';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createSetThreadCustomFieldsPayloadData(\n  customFields: Array<CustomField>,\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<SetConsumerContactCustomFieldsEventData> {\n  return {\n    eventType: AwsInputEventType.SET_CONSUMER_CONTACT_CUSTOM_FIELD,\n    data: {\n      customFields,\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { ArchiveThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/ArchiveThread';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createArchiveThreadEventPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n): EventPayloadData<ArchiveThreadEventData> {\n  return {\n    eventType: AwsInputEventType.ARCHIVE_THREAD,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n      },\n    },\n  };\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { UpdateThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/UpdateThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { isUndefined } from '../utils/is';\n\nexport function createUpdateThreadPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  threadName: string,\n): EventPayloadData<UpdateThreadEventData> {\n  return {\n    eventType: AwsInputEventType.UPDATE_THREAD,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadIdOnExternalPlatform,\n        threadName,\n      },\n    },\n  };\n}\n\nexport function isUpdateThreadSuccess(response: ChatEventData): boolean {\n  return isUndefined(response.error);\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendMessagePreviewEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessagePreview';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendMessagePreviewPayloadData = (\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  text: string,\n): EventPayloadData<SendMessagePreviewEventData> => ({\n  eventType: AwsInputEventType.SEND_MESSAGE_PREVIEW,\n  data: {\n    thread: {\n      idOnExternalPlatform: threadIdOnExternalPlatform,\n    },\n    messageContent: {\n      payload: { text },\n      type: MessageType.TEXT,\n    },\n  },\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { AwsInputEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nimport { ContactNumber } from '@brandembassy/ts-types-platform/dist/contact/ContactNumber';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport const createSendTranscriptPayloadData = (\n  contactNumber: ContactNumber,\n  email: string,\n): EventPayloadData<AwsInputEventData> => ({\n  eventType: AwsInputEventType.SEND_TRANSCRIPT,\n  data: {\n    consumerContact: {\n      id: contactNumber,\n    },\n    consumerRecipients: [\n      {\n        idOnExternalPlatform: email,\n      },\n    ],\n  },\n});\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RecoverThreadEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/RecoverThread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../../sockets/EventPayload';\n\nexport function createRecoverLivechatThreadPayloadData(\n  threadIdOnExternalPlatform?: ThreadIdOnExternalPlatform,\n): EventPayloadData<RecoverThreadEventData> {\n  const emptyData = {\n    eventType: AwsInputEventType.RECOVER_LIVECHAT,\n    data: {},\n  };\n\n  if (threadIdOnExternalPlatform === undefined) {\n    return emptyData;\n  }\n\n  return {\n    ...emptyData,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n    },\n  };\n}\n","import { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { Customer } from '../../customer/Customer';\nimport { CustomFieldsObject } from '../../customField/CustomFields';\nimport { ChatSDKVariable } from '../../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../../env/getEnvVariable';\nimport { ChatSDKError } from '../../error/ChatSDKError';\nimport { ChatCustomEvent, ChatEvent } from '../../event/ChatEvent';\nimport { IChatEventTarget } from '../../event/ChatEventTarget';\nimport { sendChatEvent } from '../../event/sendChatEvent';\nimport {\n  isLoadMoreMessagesEventData,\n  MoreMessagesLoadedEvent,\n} from '../../message/loadMoreMessagesEventData';\nimport { createLoadMoreMessagesPayloadData } from '../../message/loadMoreMessagesPayload';\nimport { MessageSuccessEventData } from '../../message/MessageSuccessEventData';\nimport { WebSocketClient } from '../../sockets/WebSocketClient';\nimport { isEmpty, isUndefined } from '../../utils/is';\nimport { isRecoverSuccessPayload } from '../isRecoverSuccessPayload';\nimport { LoadMoreMessagesFailedError } from '../LoadMoreMessagesFailedError';\nimport { Thread } from '../Thread';\nimport { ThreadRecoveredData } from '../ThreadRecoveredData';\nimport { ThreadRecoverFailedError } from '../ThreadRecoverFailedError';\n\nimport { createEndThreadPayloadData } from './createEndThreadPayloadData';\nimport { createRecoverLivechatThreadPayloadData } from './recoverLivechatThreadPayload';\n\nexport class LivechatThread extends Thread {\n  protected _isInitialized: boolean = false;\n  protected _canSendMessage: boolean = true;\n\n  constructor(\n    idOnExternalPlatform: ThreadIdOnExternalPlatform,\n    websocketClient: WebSocketClient,\n    messageEmitter: IChatEventTarget,\n    customer: Customer | null,\n    customFields: CustomFieldsObject = {},\n    isAuthorizationEnabled: boolean = false,\n  ) {\n    super(\n      idOnExternalPlatform,\n      websocketClient,\n      messageEmitter,\n      customer,\n      customFields,\n      isAuthorizationEnabled,\n    );\n\n    this._registerLivechatEventHandlers();\n  }\n\n  /**\n   * Recover existing live chat\n   * @returns Promise ThreadRecoveredData\n   * @throws ThreadRecoverFailedError\n   *  * This exception is thrown when the recover fails or the thread does not exist.\n   */\n  public override async recover(): Promise<ThreadRecoveredData> {\n    const response = await sendChatEvent(\n      createRecoverLivechatThreadPayloadData(this.idOnExternalPlatform),\n      this._websocketClient,\n    );\n\n    if (isRecoverSuccessPayload(response)) {\n      const { contact, consumerContact, ...restData } = response.data;\n\n      return {\n        ...restData,\n        contact: contact ?? consumerContact,\n      };\n    }\n\n    throw new ThreadRecoverFailedError('Thread recover fail', response);\n  }\n\n  public override async sendMessage(\n    messageData: SendMessageEventData,\n  ): Promise<MessageSuccessEventData> {\n    if (this._canSendMessage === false) {\n      throw new ChatSDKError('Cannot send more messages to Contact');\n    }\n\n    return super.sendMessage(messageData);\n  }\n\n  /**\n   * Start livechat\n   * @param initialMessageText - initial message text\n   */\n  public async startChat(\n    initialMessageText = 'Begin conversation',\n  ): Promise<MessageSuccessEventData | void> {\n    if (this._isInitialized) {\n      throw new ChatSDKError('Chat is already initialized');\n    }\n\n    try {\n      const result = await this.sendTextMessage(initialMessageText);\n      this._isInitialized = true;\n\n      return result;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        throw new ChatSDKError(\n          `Sending initial message failed because of (${error.message})`,\n        );\n      }\n\n      return;\n    }\n  }\n\n  public async endChat(): Promise<void> {\n    const threadDataRaw = SDKVariableStorage.get(\n      ChatSDKVariable.THREAD_DATA,\n      '{}',\n    );\n    const threadData = JSON.parse(threadDataRaw);\n    const contactId = threadData?.contactId;\n\n    if (isUndefined(contactId)) {\n      throw new ChatSDKError(\n        'Cannot end Chat because of missing ContactId in the storage',\n      );\n    }\n\n    await sendChatEvent(\n      createEndThreadPayloadData(this.idOnExternalPlatform, contactId),\n      this._websocketClient,\n    );\n\n    return;\n  }\n\n  /**\n   * Load previous messages\n   * @returns Promise MoreMessagesLoadedEvent | null\n   * @throws LoadMoreMessagesFailedError\n   *  * This exception is thrown when the attempt to load more messages fails.\n   */\n  public async loadMoreMessages(): Promise<MoreMessagesLoadedEvent | null> {\n    const { scrollToken, oldestMessageDatetime, contactId } =\n      JSON.parse(SDKVariableStorage.get(ChatSDKVariable.THREAD_DATA, '{}')) ??\n      {};\n\n    if (isEmpty(scrollToken) || isEmpty(contactId)) {\n      return null;\n    }\n\n    const loadMoreMessagesEventData = {\n      scrollToken,\n      oldestMessageDatetime,\n      thread: { idOnExternalPlatform: this.idOnExternalPlatform },\n      // If a contactId is provided, the search will return messages only for this contact\n      contact: {\n        id: contactId,\n      },\n    };\n\n    const response = await sendChatEvent(\n      createLoadMoreMessagesPayloadData(loadMoreMessagesEventData),\n      this._websocketClient,\n    );\n\n    if (isLoadMoreMessagesEventData(response)) {\n      return response;\n    }\n\n    throw new LoadMoreMessagesFailedError(\n      'Load more messages failed',\n      response,\n    );\n  }\n\n  private _registerLivechatEventHandlers() {\n    this.onThreadEvent(\n      ChatEvent.LIVECHAT_RECOVERED,\n      (event: ChatCustomEvent) => {\n        if (!isRecoverSuccessPayload(event.detail)) {\n          return;\n        }\n\n        this._setThreadAndCustomerExists();\n      },\n    );\n  }\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { EndContactEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/EndContact';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../../sockets/EventPayload';\n\nexport function createEndThreadPayloadData(\n  threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n  contactId: CaseId,\n): EventPayloadData<EndContactEventData> {\n  return {\n    eventType: AwsInputEventType.END_CONTACT,\n    data: {\n      thread: { idOnExternalPlatform: threadIdOnExternalPlatform },\n      contact: { id: contactId },\n    },\n  };\n}\n","import { ThreadListFetchedPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadListFetched';\n\nexport const isThreadListFetchedPostbackData = (\n  data: unknown,\n): data is ThreadListFetchedPostbackData =>\n  'threads' in (data as ThreadListFetchedPostbackData);\n","import { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\n\nexport function storeContactId(contactId: CaseId): void {\n  const originalThreadDataRaw = SDKVariableStorage.get(\n    ChatSDKVariable.THREAD_DATA,\n    '{}',\n  );\n  const originalThreadData = JSON.parse(originalThreadDataRaw) || {};\n\n  SDKVariableStorage.set(\n    ChatSDKVariable.THREAD_DATA,\n    JSON.stringify({\n      ...originalThreadData,\n      contactId,\n    }),\n  );\n}\n","import { ContactNumber } from '@brandembassy/ts-types-platform/dist/contact/ContactNumber';\n\nimport { isContactCreatedEvent } from '../contact/isContactCreatedEvent';\nimport { ChatEventData } from '../event/ChatEvent';\n\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { storeContactId } from './storeContactId';\n\nexport function storeContactIdMiddleware(\n  eventData: ChatEventData,\n): ChatEventData {\n  if (isContactCreatedEvent(eventData)) {\n    const contactId = eventData.data.case.id;\n\n    storeContactId(contactId);\n  }\n\n  if (isRecoverSuccessPayload(eventData)) {\n    const contactId = (eventData.data.consumerContact?.caseId ??\n      eventData.data.contact?.id) as ContactNumber;\n\n    storeContactId(contactId);\n  }\n\n  return eventData;\n}\n","import { ChatSDKVariable } from '../env/ChatSDKVariable';\nimport { SDKVariableStorage } from '../env/getEnvVariable';\nimport { Message } from '../message';\nimport { isUndefined } from '../utils/is';\nimport { lastItemInArray } from '../utils/last';\n\nexport interface ScrollData {\n  messages: Array<Message>;\n  scrollToken: string;\n}\n\nexport function storeThreadScrollData(scrollData: ScrollData): void {\n  const oldestMessageDatetime = lastItemInArray(scrollData.messages)?.createdAt;\n\n  const oldThreadDataRaw = SDKVariableStorage.get(\n    ChatSDKVariable.THREAD_DATA,\n    '{}',\n  );\n  const oldThreadData = JSON.parse(oldThreadDataRaw) || {};\n\n  SDKVariableStorage.set(\n    ChatSDKVariable.THREAD_DATA,\n    JSON.stringify({\n      ...oldThreadData,\n      scrollToken: scrollData.scrollToken,\n      oldestMessageDatetime: isUndefined(oldestMessageDatetime)\n        ? ''\n        : oldestMessageDatetime,\n    }),\n  );\n}\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import { ChatEventData } from '../event/ChatEvent';\nimport { isLoadMoreMessagesEventData } from '../message/loadMoreMessagesEventData';\n\nimport { isRecoverSuccessPayload } from './isRecoverSuccessPayload';\nimport { storeThreadScrollData } from './storeThreadScrollData';\n\nexport function storeThreadScrollDataMiddleware(\n  eventData: ChatEventData,\n): ChatEventData {\n  if (isRecoverSuccessPayload(eventData)) {\n    const { messages, messagesScrollToken } = eventData.data;\n\n    storeThreadScrollData({\n      messages,\n      scrollToken: messagesScrollToken,\n    });\n  }\n\n  if (isLoadMoreMessagesEventData(eventData)) {\n    const { scrollToken, messages } = eventData.data;\n\n    storeThreadScrollData({ scrollToken, messages });\n  }\n\n  return eventData;\n}\n","export class AbortError extends Error {\n  constructor(message: string = 'Aborted') {\n    super(message);\n    this.name = 'AbortError';\n  }\n}\n","import { AbortError } from '../error/AbortError';\n\nexport interface Abortable {\n  abort: (reason?: string) => void;\n  readonly abortReason?: string;\n}\n\ntype ExecutorFunction<T> = (\n  resolve: (value: PromiseLike<T> | T) => void,\n  reject: (reason?: unknown) => void,\n) => void;\n\ntype AbortableExecutorFunction<T> = (\n  resolve: (value: PromiseLike<T> | T) => void,\n  reject: (reason?: unknown) => void,\n  abortSignal: AbortSignal,\n) => void;\n\n/**\n * AbortablePromise is a Promise that can be aborted.\n * Source: https://github.com/zzdjk6/simple-abortable-promise, MIT License\n */\nexport class AbortablePromise<T> extends Promise<T> implements Abortable {\n  public abort: Abortable['abort'];\n\n  constructor(executor: AbortableExecutorFunction<T>) {\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n\n    const normalExecutor: ExecutorFunction<T> = (resolve, reject) => {\n      abortSignal.addEventListener('abort', () => {\n        reject(new AbortError(this.abortReason));\n      });\n\n      executor?.(resolve, reject, abortSignal);\n    };\n\n    super(normalExecutor);\n    this.abort = (reason) => {\n      this._abortReason = reason ?? 'Aborted';\n      abortController.abort();\n    };\n  }\n\n  private _abortReason?: string;\n\n  public get abortReason(): string | undefined {\n    return this._abortReason;\n  }\n\n  static from = <P>(promise: Promise<P>): AbortablePromise<P> => {\n    // If promise is already an AbortablePromise, return it directly\n    if (promise instanceof AbortablePromise) {\n      return promise;\n    }\n\n    return new AbortablePromise<P>((resolve, reject) => {\n      promise.then(resolve).catch(reject);\n    });\n  };\n}\n","import { WebSocketClientEvent } from '@brandembassy/push-updates-sdk';\nimport { AuthorizationToken } from '@brandembassy/ts-types-chat/dist/authorization/AuthorizationToken';\nimport { ConsumerAuthorizationSuccessPayloadData } from '@brandembassy/ts-types-chat/dist/authorization/ConsumerAuthorizationSuccessPayloadData';\nimport { AwsChatWindowEventActionRoute } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsChatWindowEvent';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nimport { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nimport { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\nimport { Thread as ThreadView } from '@brandembassy/ts-types-platform/dist/thread/Thread';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport {\n  getAccessToken,\n  setAccessToken,\n} from './authorization/accessTokenStorage';\nimport { AuthorizationError } from './authorization/AuthorizationError';\nimport { createAuthorizationPayloadData } from './authorization/authorizationPayloadData';\nimport { authorizationReconnect } from './authorization/authorizationReconnect';\nimport { createRefreshTokenPayload } from './authorization/createRefreshTokenPayload';\nimport { CustomerReconnectSuccessPayloadData } from './authorization/CustomerReconnectSuccessPayloadData';\nimport { createGenerateAuthorizationTokenPayloadData } from './authorization/generateAuthorizationTokenPayload';\nimport { handleRefreshToken } from './authorization/handleRefreshToken';\nimport { isAuthorizationTokenGeneratedPostbackData } from './authorization/isAuthorizationTokenGeneratedPostbackData';\nimport { isAuthSuccessEvent } from './authorization/isAuthSuccessEvent';\nimport { isTokenRefreshedSuccessResponse } from './authorization/isTokenRefreshedSuccessResponse';\nimport { ChatSDKOptions } from './ChatSDKOptions';\nimport { Customer } from './customer/Customer';\nimport { isCustomerIdentityIdValid } from './customer/isCustomerIdentityIdValid';\nimport {\n  CustomFieldsMap,\n  getCustomFields,\n  setCustomFieldsFromArray,\n} from './customField/CustomFields';\nimport { APP_NAME } from './env/appName';\nimport { ChatSDKVariable } from './env/ChatSDKVariable';\nimport { EnvironmentName, getEnvironmentEndpoints } from './env/Environments';\nimport { SDKVariableStorage } from './env/getEnvVariable';\nimport { ChatSDKError } from './error/ChatSDKError';\nimport { ChatCustomEvent, ChatEventType } from './event/ChatEvent';\nimport { ChatEventMiddleware } from './event/ChatEventMiddleware';\nimport { ChatEventTarget, IChatEventTarget } from './event/ChatEventTarget';\nimport { RemoveListenerFunction } from './event/ListenerFunction';\nimport { chatEventMapper } from './event/middleware/ChatEventMapper';\nimport { sendChatEvent } from './event/sendChatEvent';\nimport { MessageSuccessEventData } from './message/MessageSuccessEventData';\nimport {\n  OfflineMessageData,\n  sendOfflineMessage,\n} from './message/sendOfflineMessage';\nimport { getEventData } from './request/getEventData';\nimport { makeRequest } from './request/makeRequest';\nimport {\n  onMessageHandler,\n  parseWsMessageEvent,\n} from './request/messageHandler';\nimport { createEvent, createEventPayload } from './sockets/EventPayload';\nimport {\n  WebSocketClient,\n  WebSocketClientOptions,\n} from './sockets/WebSocketClient';\nimport { LivechatThread, Thread } from './thread';\nimport {\n  isRecoverSuccessPayload,\n  ThreadRecoveredChatEvent,\n} from './thread/isRecoverSuccessPayload';\nimport { isThreadListFetchedPostbackData } from './thread/isThreadListFetchedPostbackData';\nimport { createRecoverLivechatThreadPayloadData } from './thread/livechatThread/recoverLivechatThreadPayload';\nimport { createRecoverThreadPayloadData } from './thread/recoverThreadPayload';\nimport { storeContactIdMiddleware } from './thread/storeContactIdMiddleware';\nimport { storeThreadScrollDataMiddleware } from './thread/storeThreadScrollDataMiddleware';\nimport { AbortablePromise } from './utils/AbortablePromise';\nimport { assertNonNullable } from './utils/assert';\nimport { generateId } from './utils/generateId';\nimport { getBrandIdAndChannelId } from './utils/getBrandIdAndChannelId';\nimport { isEmpty, isNil, isNull, isUndefined } from './utils/is';\n\nexport class ChatSdk {\n  onError?: (error: Error) => void;\n  onRawEvent?: (event: ChatCustomEvent) => void;\n  public isLivechat: boolean = false;\n  public channelId: ChannelId = '';\n  private websocketClient: WebSocketClient | null = null;\n  private customer: Customer | null = null;\n  private _incomingChatEventMiddleware = new ChatEventMiddleware();\n  private _messageEmitter: IChatEventTarget;\n  private isAuthorizationEnabled: boolean = false;\n  private _threadCache: Map<\n    ThreadIdOnExternalPlatform,\n    Thread | LivechatThread\n  > = new Map();\n  private _contactCustomFieldsQueue: CustomFieldsMap = new Map();\n\n  constructor(options: ChatSDKOptions) {\n    if (options === undefined) {\n      throw new ChatSDKError(\n        'No options was provided for initialization of ChatSdk',\n      );\n    }\n\n    SDKVariableStorage.set(\n      ChatSDKVariable.AUTHORIZATION_CODE,\n      options.authorizationCode,\n    );\n    SDKVariableStorage.set(ChatSDKVariable.BRAND_ID, `${options.brandId}`);\n    SDKVariableStorage.set(ChatSDKVariable.CHANNEL_ID, options.channelId);\n    SDKVariableStorage.set(\n      ChatSDKVariable.APP_NAME,\n      options.appName ?? APP_NAME,\n    );\n    SDKVariableStorage.set(\n      ChatSDKVariable.APP_VERSION,\n      `${options.appVersion ?? 0}`,\n    );\n\n    const { brandId, channelId } = getBrandIdAndChannelId();\n\n    this.onError = options.onError;\n    this.onRawEvent = options.onRawEvent;\n\n    // Register middleware for incoming chat events\n    this._incomingChatEventMiddleware.register(chatEventMapper);\n    this._incomingChatEventMiddleware.register(storeThreadScrollDataMiddleware);\n    this._incomingChatEventMiddleware.register(storeContactIdMiddleware);\n\n    this._messageEmitter = new ChatEventTarget();\n\n    try {\n      if (isNaN(brandId)) {\n        throw new Error('Missing BrandID');\n      }\n      if (channelId === undefined) {\n        throw new Error('Missing ChannelId');\n      }\n      if (options.customerId === undefined) {\n        throw new Error('Missing CustomerId');\n      }\n\n      this._initEnvironment(options);\n      this._initWS(brandId, channelId, options.customerId);\n      // Init Customer instance after the websocketClient is initialized\n      this.customer = new Customer(\n        options.customerId,\n        options.customerName,\n        options.customerImage,\n        this.websocketClient,\n      );\n      this.channelId = channelId;\n    } catch (error: unknown) {\n      this.onErrorHandler(error);\n    }\n  }\n\n  onErrorHandler(error: unknown): void {\n    if (typeof this.onError === 'function') {\n      this.onError(new ChatSDKError(error));\n    } else {\n      throw new ChatSDKError(error);\n    }\n  }\n\n  /**\n   * Send Authorization Event\n   * @param authorizationCode - authorization code\n   * @param visitorId - visitor id\n   * @throws AuthorizationError\n   *  * This exception is thrown when the authorization or refresh token fails\n   */\n  public async authorize(\n    authorizationCode?: string,\n    visitorId?: string,\n  ): Promise<\n    | ConsumerAuthorizationSuccessPayloadData\n    | CustomerReconnectSuccessPayloadData\n  > {\n    const accessToken = getAccessToken();\n\n    // Reconnect first\n    if (accessToken !== null) {\n      try {\n        const reconnectResponse = await authorizationReconnect(\n          this.websocketClient,\n          this._sendRefreshTokenEvent,\n          accessToken,\n          visitorId,\n        );\n\n        return reconnectResponse;\n      } catch (error) {\n        // invalid token, continue with authorization\n      }\n    }\n\n    // Authorization\n    const authorizationPayloadData = createAuthorizationPayloadData(\n      authorizationCode ??\n        SDKVariableStorage.get(ChatSDKVariable.AUTHORIZATION_CODE, null),\n      visitorId,\n    );\n\n    const authEvent = createEvent(\n      createEventPayload(authorizationPayloadData),\n      generateId(),\n      AwsChatWindowEventActionRoute.REGISTER,\n    );\n\n    const authResponse = await makeRequest(authEvent, this.websocketClient);\n    if (!isAuthSuccessEvent(authResponse)) {\n      this.websocketClient?.disconnect();\n\n      throw new AuthorizationError('Authorization failed', authResponse.error);\n    }\n\n    // Auth successful - Use the response data\n    const { consumerIdentity, customer, channel, contact } = authResponse.data;\n\n    // Setup Customer Identity and Customer Custom Fields\n    const customerId = consumerIdentity?.idOnExternalPlatform;\n    if (!isCustomerIdentityIdValid(customerId)) {\n      this.websocketClient?.disconnect();\n\n      throw new ChatSDKError('Invalid customer identity');\n    }\n\n    Customer.setId(customerId);\n\n    if (\n      consumerIdentity.firstName !== undefined ||\n      consumerIdentity.lastName !== undefined\n    ) {\n      Customer.setName(\n        `${consumerIdentity.firstName} ${consumerIdentity.lastName}`,\n      );\n    }\n\n    const customerImage = consumerIdentity.image;\n    if (customerImage !== undefined) {\n      Customer.setImage(customerImage);\n    }\n\n    if (customer?.customFields) {\n      this.customer?.setCustomFieldsFromArray(customer.customFields);\n    }\n\n    // Queue Contact Custom Fields from the response\n    if (contact?.customFields) {\n      setCustomFieldsFromArray(\n        this._contactCustomFieldsQueue,\n        contact.customFields,\n      );\n    }\n\n    // Set up the thread settings\n    this.isLivechat = channel?.settings?.isLivechat ?? false;\n    this.isAuthorizationEnabled =\n      channel?.settings.isAuthorizationEnabled ?? false;\n\n    // Set up the access token and its refresh\n    if (authResponse.data.accessToken?.token !== undefined) {\n      setAccessToken(authResponse.data.accessToken);\n      handleRefreshToken(\n        authResponse.data.accessToken,\n        this._sendRefreshTokenEvent,\n      );\n    }\n\n    return authResponse.data;\n  }\n\n  /**\n   * Generate Authorization Token from the given url\n   *\n   * @param threadIdOnExternalPlatform - Thread Id\n   * @param url - Authorization Service URL\n   */\n  public async generateAuthorizationToken(\n    threadIdOnExternalPlatform: ThreadIdOnExternalPlatform,\n    url: string,\n  ): Promise<AuthorizationToken> {\n    const result = await sendChatEvent(\n      createGenerateAuthorizationTokenPayloadData(\n        threadIdOnExternalPlatform,\n        url,\n      ),\n      this.websocketClient,\n    );\n\n    if (!isAuthorizationTokenGeneratedPostbackData(result.data)) {\n      throw new ChatSDKError(\n        'Invalid response from generate authorization token (generateAuthorizationToken)',\n      );\n    }\n\n    const { authorizationToken } = result.data;\n\n    return authorizationToken;\n  }\n\n  /**\n   * Register handler to chat event\n   *\n   * @param type - type of chat event\n   * @param handler - event handler\n   * @returns function to unregister handler\n   */\n  public onChatEvent(\n    type: ChatEventType,\n    handler: (event: ChatCustomEvent) => void,\n  ): RemoveListenerFunction {\n    this._messageEmitter.addEventListener(type, handler);\n\n    return () => {\n      this._messageEmitter.removeEventListener(type, handler);\n    };\n  }\n\n  /**\n   * Get Customer instance\n   */\n  public getCustomer(): Customer | null {\n    return this.customer;\n  }\n\n  /**\n   * Get Thread instance by id\n   * @param id - thread id\n   * @returns instance of thread based on channel settings\n   */\n  public getThread(id: ThreadIdOnExternalPlatform): Thread | LivechatThread {\n    if (isNull(this.websocketClient)) {\n      throw new ChatSDKError(\n        'Cannot get thread because websocket is disconnected',\n      );\n    }\n\n    if (isNil(id)) {\n      throw new ChatSDKError('Cannot get thread because id is undefined');\n    }\n\n    const cachedThread = this._threadCache.get(id);\n    if (!isUndefined(cachedThread)) {\n      return cachedThread;\n    }\n\n    if (this.isLivechat) {\n      const liveThread = new LivechatThread(\n        id,\n        this.websocketClient,\n        this._messageEmitter,\n        this.customer,\n        this._getContactCustomFieldsFromQueue(),\n        this.isAuthorizationEnabled,\n      );\n      this._threadCache.set(id, liveThread);\n\n      return liveThread;\n    }\n\n    const thread = new Thread(\n      id,\n      this.websocketClient,\n      this._messageEmitter,\n      this.customer,\n      this._getContactCustomFieldsFromQueue(),\n      this.isAuthorizationEnabled,\n    );\n    this._threadCache.set(id, thread);\n\n    return thread;\n  }\n\n  /**\n   * Get list of available threads\n   * @returns list of threads\n   */\n  public async getThreadList(): Promise<Array<ThreadView> | null> {\n    if (isNull(this.websocketClient)) {\n      throw new ChatSDKError(\n        'Cannot get thread list because websocket is disconnected',\n      );\n    }\n\n    const eventPayload = {\n      eventType: AwsInputEventType.FETCH_THREAD_LIST,\n      data: {},\n    };\n\n    const result = await sendChatEvent(eventPayload, this.websocketClient);\n\n    if (!isThreadListFetchedPostbackData(result.data)) {\n      throw new ChatSDKError(\n        'Invalid response from fetch thread list (getThreadList)',\n      );\n    }\n\n    return result.data.threads;\n  }\n\n  /**\n   * Get access to a websocket connection\n   * @returns WebSocketClient instance\n   */\n  public getWebsocketClient(): WebSocketClient | null {\n    return this.websocketClient;\n  }\n\n  /**\n   * Send the Offline Message\n   * @param offlineMessageData - offline message data (name, email, message)\n   * @returns success\n   * @throws SendMessageFailedError\n   *  * This exception is thrown when a message fails to send. The error contains (`error.data`) a response from the backend with details.\n   */\n  public async sendOfflineMessage(\n    offlineMessageData: OfflineMessageData,\n  ): Promise<MessageSuccessEventData> {\n    return sendOfflineMessage(offlineMessageData, this.websocketClient);\n  }\n\n  /**\n   * Recover thread data\n   * @param threadIdOnExternalPlatform - thread id on external platform\n   * @returns thread session data\n   */\n  public recoverThreadData(\n    threadIdOnExternalPlatform:\n      | ThreadIdOnExternalPlatform\n      | undefined = undefined,\n  ): AbortablePromise<ThreadRecoveredChatEvent> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const recoverEvent = createRecoverThreadPayloadData(\n        threadIdOnExternalPlatform,\n      );\n      const recoverResponse = await sendChatEvent(\n        recoverEvent,\n        this.websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(recoverResponse)) {\n        resolve(recoverResponse);\n      } else {\n        reject(\n          new ChatSDKError('Invalid response from recover livechat thread'),\n        );\n      }\n    });\n  }\n\n  /**\n   * Recover livechat thread data\n   * @param threadIdOnExternalPlatform - thread id on external platform\n   * @returns thread livechat session data\n   */\n  public recoverLivechatThreadData(\n    threadIdOnExternalPlatform:\n      | ThreadIdOnExternalPlatform\n      | undefined = undefined,\n  ): AbortablePromise<ThreadRecoveredChatEvent> {\n    return new AbortablePromise(async (resolve, reject) => {\n      const recoverEvent = createRecoverLivechatThreadPayloadData(\n        threadIdOnExternalPlatform,\n      );\n      const recoverResponse = await sendChatEvent(\n        recoverEvent,\n        this.websocketClient,\n      );\n\n      if (isRecoverSuccessPayload(recoverResponse)) {\n        resolve(recoverResponse);\n      } else {\n        reject(\n          new ChatSDKError('Invalid response from recover livechat thread'),\n        );\n      }\n    });\n  }\n\n  private _getContactCustomFieldsFromQueue() {\n    if (this._contactCustomFieldsQueue.size > 0) {\n      const fields = getCustomFields(this._contactCustomFieldsQueue);\n      this._contactCustomFieldsQueue.clear();\n\n      return fields;\n    }\n\n    return {};\n  }\n\n  private _sendRefreshTokenEvent = async (): Promise<void> => {\n    const accessToken = getAccessToken();\n    if (isNull(accessToken)) {\n      return;\n    }\n\n    const refreshTokenResponse = await sendChatEvent(\n      createRefreshTokenPayload(accessToken.token),\n      this.websocketClient,\n    );\n\n    if (isTokenRefreshedSuccessResponse(refreshTokenResponse)) {\n      setAccessToken(refreshTokenResponse.data.accessToken);\n\n      handleRefreshToken(\n        refreshTokenResponse.data.accessToken,\n        this._sendRefreshTokenEvent,\n      );\n\n      return;\n    }\n\n    throw new AuthorizationError(\n      'An error occurred while refreshing the access token',\n      refreshTokenResponse.error,\n    );\n  };\n\n  /**\n   * Setup Environment endpoints\n   */\n  private _initEnvironment(options: ChatSDKOptions): void {\n    // Set custom environment\n    if (options.environment === EnvironmentName.custom) {\n      if (isEmpty(options.customEnvironment)) {\n        throw new ChatSDKError(\n          'customEnvironment must be provided when environment is set to \"custom\"',\n        );\n      }\n      SDKVariableStorage.set(\n        ChatSDKVariable.ENDPOINT_GATEWAY,\n        options.customEnvironment?.gateway,\n      );\n      SDKVariableStorage.set(\n        ChatSDKVariable.ENDPOINT_CHAT,\n        options.customEnvironment?.chat,\n      );\n\n      return;\n    }\n\n    // Set predefined environment\n    const { gateway, chat } = getEnvironmentEndpoints(options.environment);\n    SDKVariableStorage.set(ChatSDKVariable.ENDPOINT_GATEWAY, gateway);\n    SDKVariableStorage.set(ChatSDKVariable.ENDPOINT_CHAT, chat);\n  }\n\n  private _initWS(\n    brandId: BrandId,\n    channelId: ChannelId,\n    customerId: CustomerIdentityIdOnExternalPlatform,\n  ): void {\n    const endpoint = SDKVariableStorage.get(ChatSDKVariable.ENDPOINT_GATEWAY);\n    assertNonNullable(endpoint);\n\n    const url = new URL(endpoint);\n    const protocol = url.protocol;\n    const host = url.hostname;\n    const port = url.port;\n    const prefix = url.pathname.substring(1);\n    const forceSecureProtocol = protocol === 'wss:';\n\n    const wsClientOptions: WebSocketClientOptions = {\n      host,\n      port,\n      prefix,\n      forceSecureProtocol,\n    };\n    this.websocketClient = new WebSocketClient(\n      brandId,\n      channelId,\n      customerId,\n      wsClientOptions,\n      this.onError,\n    );\n\n    this.websocketClient.on(\n      WebSocketClientEvent.MESSAGE,\n      async (event: ChatCustomEvent) => {\n        try {\n          if (typeof this.onRawEvent === 'function') {\n            this.onRawEvent(event);\n          }\n\n          const eventData = await getEventData(parseWsMessageEvent(event));\n\n          const parsedEvent =\n            this._incomingChatEventMiddleware.process(eventData);\n\n          if (!isNil(parsedEvent)) {\n            const { type } = parsedEvent;\n\n            onMessageHandler(parsedEvent);\n\n            this._messageEmitter.dispatchEvent(\n              new ChatCustomEvent(type ?? '', {\n                detail: parsedEvent,\n              }),\n            );\n          }\n        } catch (error: unknown) {\n          this.onErrorHandler(error);\n        }\n      },\n    );\n  }\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { RefreshTokenData } from '@brandembassy/ts-types-chat/dist/awsEvents/RefreshToken';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createRefreshTokenPayload(\n  token: string,\n): EventPayloadData<RefreshTokenData> {\n  return {\n    eventType: AwsInputEventType.REFRESH_TOKEN,\n    data: {\n      accessToken: {\n        token,\n      },\n    },\n  };\n}\n","export const APP_NAME = 'chat-web-sdk';\n","import { AccessToken } from '@brandembassy/ts-types-chat/dist/authorization/AccessToken';\n\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { AuthorizationError } from './AuthorizationError';\nimport { createReconnectPayloadData } from './createReconnectPayloadData';\nimport { CustomerReconnectSuccessPayloadData } from './CustomerReconnectSuccessPayloadData';\nimport { handleRefreshToken } from './handleRefreshToken';\n\nexport async function authorizationReconnect(\n  websocketClient: WebSocketClient | null,\n  refreshTokenEventCallback: () => Promise<void>,\n  accessToken: AccessToken,\n  visitorId?: string,\n): Promise<CustomerReconnectSuccessPayloadData> {\n  const reconnectPayload = createReconnectPayloadData(accessToken, visitorId);\n\n  const response = await sendChatEvent(reconnectPayload, websocketClient);\n\n  const hasError = response.error !== undefined;\n\n  if (hasError) {\n    throw new AuthorizationError(\n      'Authorization reconnect failed',\n      response.error,\n    );\n  }\n\n  const successReconnectResponse: CustomerReconnectSuccessPayloadData = {\n    reconnected: true,\n  };\n\n  handleRefreshToken(accessToken, refreshTokenEventCallback);\n\n  return successReconnectResponse;\n}\n","import { AuthorizeCustomerData } from '@brandembassy/ts-types-chat/dist/awsEvents/AuthorizeCustomer';\nimport { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { VisitorId } from '@brandembassy/ts-types-platform/dist/visitor/VisitorId';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { generateId } from '../utils/generateId';\nimport { createVisitorPayload } from '../visitor/createVisitorPayload';\n\nexport function createAuthorizationPayloadData(\n  authorizationCode: string | null,\n  visitorId: VisitorId = generateId(),\n): EventPayloadData<AuthorizeCustomerData> {\n  return {\n    eventType: AwsInputEventType.AUTHORIZE_CUSTOMER,\n    data: {\n      authorization: {\n        authorizationCode,\n      },\n    },\n    ...createVisitorPayload(visitorId as VisitorId),\n  };\n}\n","import { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/customer/CustomerIdentity';\n\nimport { isNil } from '../utils/is';\n\nexport function isCustomerIdentityIdValid(\n  customerIdentityIdOnExternalPlatform:\n    | CustomerIdentityIdOnExternalPlatform\n    | undefined,\n): customerIdentityIdOnExternalPlatform is CustomerIdentityIdOnExternalPlatform {\n  return (\n    !isNil(customerIdentityIdOnExternalPlatform) &&\n    customerIdentityIdOnExternalPlatform !== ''\n  );\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { GenerateAuthorizationTokenData } from '@brandembassy/ts-types-chat/dist/awsEvents/GenerateAuthorizationToken';\nimport { ThreadIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/thread/ThreadIdOnExternalPlatform';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nexport function createGenerateAuthorizationTokenPayloadData(\n  threadId: ThreadIdOnExternalPlatform,\n  url: string,\n): EventPayloadData<GenerateAuthorizationTokenData> {\n  return {\n    eventType: AwsInputEventType.GENERATE_AUTHORIZATION_TOKEN,\n    data: {\n      thread: {\n        idOnExternalPlatform: threadId,\n      },\n      url,\n    },\n  };\n}\n","import { sendChatEvent } from '../event/sendChatEvent';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport {\n  isSendMessageSuccessEventData,\n  MessageSuccessEventData,\n} from './MessageSuccessEventData';\nimport { SendMessageFailedError } from './SendMessageFailedError';\nimport { createSendOfflineMessagePayloadData } from './sendOfflineMessagePayload';\n\nexport interface OfflineMessageData {\n  email: string;\n  message: string;\n  name: string;\n}\n\nexport const sendOfflineMessage = async (\n  offlineMessageData: OfflineMessageData,\n  websocketClient: WebSocketClient | null,\n): Promise<MessageSuccessEventData> => {\n  const offlineMessagePayloadData =\n    createSendOfflineMessagePayloadData(offlineMessageData);\n\n  const response = await sendChatEvent(\n    offlineMessagePayloadData,\n    websocketClient,\n  );\n\n  if (isSendMessageSuccessEventData(response)) {\n    return response;\n  }\n\n  throw new SendMessageFailedError('Send offline message failed', response);\n};\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendOfflineMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendOfflineMessage';\nimport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\n\nimport { EventPayloadData } from '../sockets/EventPayload';\n\nimport { OfflineMessageData } from './sendOfflineMessage';\n\nexport const createSendOfflineMessagePayloadData = (\n  offlineMessageData: OfflineMessageData,\n): EventPayloadData<SendOfflineMessageEventData> => {\n  const [lastName, ...names] = offlineMessageData.name.split(' ').reverse();\n  const firstName = names.reverse().join(' ');\n\n  const consumerIdentity = {\n    idOnExternalPlatform: offlineMessageData.email,\n    firstName,\n    lastName,\n  };\n\n  const data = {\n    messageContent: {\n      type: MessageType.TEXT,\n      payload: {\n        text: offlineMessageData.message,\n      },\n    },\n  };\n\n  return {\n    eventType: AwsInputEventType.SEND_OFFLINE_MESSAGE,\n    consumerIdentity,\n    data,\n  };\n};\n","export function assertNonNullable<T>(\n  value: T,\n): asserts value is NonNullable<T> {\n  if (typeof value === 'undefined' || value === null) {\n    throw Error(`Expected non-nullish value, got ${value}`);\n  }\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\nimport { ChatEventData } from '../event/ChatEvent';\nimport { normalizeEvent } from '../event/normalizeEvent';\nimport { isNil } from '../utils/is';\n\nimport { isS3ChatEvent } from './isS3ChatEvent';\n\nexport const getEventData = async (\n  eventData: ChatEventData | undefined,\n): Promise<ChatEventData | null> => {\n  if (isNil(eventData)) {\n    return null;\n  }\n\n  if (!isS3ChatEvent(eventData)) {\n    return eventData;\n  }\n\n  const url = eventData.data.s3Object.url;\n\n  const response = await fetch(url);\n\n  if (response.ok) {\n    const responseData = await response.json();\n\n    return normalizeEvent(responseData);\n  }\n\n  throw new ChatSDKError('Failed to fetch S3 event data');\n};\n","import { S3EventData } from '@brandembassy/ts-types-platform/dist/largeEvent/S3Event';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface S3ChatEvent extends ChatEventData {\n  data: S3EventData;\n  type: typeof ChatEvent.EVENT_IN_S3;\n}\n\nexport function isS3ChatEvent(event: unknown): event is S3ChatEvent {\n  return (event as S3ChatEvent).type === PushUpdateEventType.EVENT_IN_S3;\n}\n","import { ChatEventData } from '../event/ChatEvent';\nimport { normalizeEvent } from '../event/normalizeEvent';\n\nimport { requestQueue } from './requestQueue';\n\nexport const parseWsMessageEvent = (\n  event: CustomEvent,\n): ChatEventData | undefined => {\n  const eventDetail = event?.detail;\n\n  if (!eventDetail) {\n    return;\n  }\n\n  let eventData;\n\n  try {\n    eventData = JSON.parse(eventDetail.data);\n  } catch (error) {\n    return;\n  }\n\n  return normalizeEvent(eventData);\n};\n\nexport const onMessageHandler = (event: ChatEventData): void => {\n  const { id } = event;\n\n  if (requestQueue.has(id)) {\n    const resolve = requestQueue.get(id);\n\n    if (typeof resolve === 'function') {\n      resolve(event);\n    }\n\n    requestQueue.delete(id);\n  }\n};\n","import { CaseInboxAssigneeChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseInboxAssigneeChangedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport interface AssignedAgentChangedEvent extends ChatEventData {\n  data: CaseInboxAssigneeChangedData;\n  type: typeof ChatEvent.ASSIGNED_AGENT_CHANGED;\n}\n\nexport function isAssignedAgentChangedEvent(\n  event: ChatEventData,\n): event is AssignedAgentChangedEvent {\n  return (\n    event.type === ChatEvent.ASSIGNED_AGENT_CHANGED &&\n    (event as AssignedAgentChangedEvent).data?.case?.id !== undefined\n  );\n}\n","import { SenderTypingStartedData } from '@brandembassy/ts-types-platform/dist/user/typing/SenderTypingStartedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type AgentTypingStartedData = SenderTypingStartedData;\n\nexport interface AgentTypingStartedEvent extends ChatEventData {\n  data: AgentTypingStartedData;\n  type: typeof ChatEvent.AGENT_TYPING_STARTED;\n}\n\nexport function isAgentTypingStartedEvent(\n  event: ChatEventData,\n): event is AgentTypingStartedEvent {\n  return (\n    event.type === ChatEvent.AGENT_TYPING_STARTED &&\n    (event as AgentTypingStartedEvent).data?.thread?.idOnExternalPlatform !==\n      undefined\n  );\n}\n","import { SenderTypingEndedData } from '@brandembassy/ts-types-platform/dist/user/typing/SenderTypingEndedEvent';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\n\nexport type AgentTypingEndedData = SenderTypingEndedData;\n\nexport interface AgentTypingEndedEvent extends ChatEventData {\n  data: AgentTypingEndedData;\n  type: typeof ChatEvent.AGENT_TYPING_ENDED;\n}\n\nexport function isAgentTypingEndedEvent(\n  event: ChatEventData,\n): event is AgentTypingEndedEvent {\n  return (\n    event.type === ChatEvent.AGENT_TYPING_ENDED &&\n    (event as AgentTypingEndedEvent).data?.thread?.idOnExternalPlatform !==\n      undefined\n  );\n}\n","import { Message } from '@brandembassy/ts-types-platform/dist/message/Message';\nimport { MessageDirection } from '@brandembassy/ts-types-platform/dist/message/MessageDirection';\n\n/**\n * Get message author name of given message\n * @param message - message\n * @returns message author name\n */\nexport const getAuthor = (message: Message): string =>\n  message.direction === MessageDirection.INBOUND\n    ? message.authorEndUserIdentity?.fullName ?? ''\n    : `${message.authorUser?.firstName ?? ''} ${\n        message.authorUser?.surname ?? ''\n      }`.trim();\n","import { Message } from '@brandembassy/ts-types-platform/dist/message/Message';\n\nimport { isUndefined } from '../utils/is';\n\nexport function isMessage(item: unknown): item is Message {\n  const hasId = isUndefined((item as Message).id) === false;\n  const hasDirection = isUndefined((item as Message).direction) === false;\n  const hasMessageContent =\n    isUndefined((item as Message).messageContent) === false;\n\n  return hasId && hasDirection && hasMessageContent;\n}\n","import { MessageCreatedData } from '@brandembassy/ts-types-platform/dist/message/MessageCreatedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageCreatedEvent extends ChatEventData {\n  data: MessageCreatedData;\n  type: PushUpdateEventType.MESSAGE_CREATED;\n}\n\nexport function isMessageCreatedEvent(\n  event: unknown,\n): event is MessageCreatedEvent {\n  return (\n    (event as MessageCreatedEvent).type === PushUpdateEventType.MESSAGE_CREATED\n  );\n}\n","import { MessageSentData } from '@brandembassy/ts-types-platform/dist/message/MessageSentEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageSentEvent extends ChatEventData {\n  data: MessageSentData;\n  type: PushUpdateEventType.MESSAGE_SENT;\n}\n\nexport function isMessageSentEvent(event: unknown): event is MessageSentEvent {\n  return (event as MessageSentEvent).type === PushUpdateEventType.MESSAGE_SENT;\n}\n","import { MessageReadChangedData } from '@brandembassy/ts-types-platform/dist/message/MessageReadChangedEvent';\nimport { PushUpdateEventType } from '@brandembassy/ts-types-platform/dist/pushUpdate/PushUpdateEventType';\n\nimport { ChatEventData } from '../event/ChatEvent';\n\nexport interface MessageReadChangedEvent extends ChatEventData {\n  data: MessageReadChangedData;\n  type: PushUpdateEventType.MESSAGE_READ_CHANGED;\n}\n\nexport function isMessageReadChangedEvent(\n  event: unknown,\n): event is MessageReadChangedEvent {\n  return (\n    (event as MessageReadChangedEvent).type ===\n    PushUpdateEventType.MESSAGE_READ_CHANGED\n  );\n}\n","import { AwsResponseEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SetPositionInQueuePayloadData } from '@brandembassy/ts-types-chat/dist/awsEvents/SetPositionInQueuePayload';\nimport { EventId } from '@brandembassy/ts-types-platform/dist/pushUpdate/EventId';\n\nimport { ChatEventData } from '../../event/ChatEvent';\nimport { isEmpty } from '../../utils/is';\n\nexport interface SetPositionInQueueChatEvent extends ChatEventData {\n  data: SetPositionInQueuePayloadData;\n  id: EventId;\n  type: AwsResponseEventType.SET_POSITION_IN_QUEUE;\n}\n\nexport const isSetPositionInQueueEvent = (\n  event: unknown,\n): event is SetPositionInQueueChatEvent => {\n  const setPositionInQueueEvent = event as SetPositionInQueueChatEvent;\n\n  return (\n    Number.isInteger(setPositionInQueueEvent?.data.positionInQueue) &&\n    isEmpty(setPositionInQueueEvent?.id) === false &&\n    setPositionInQueueEvent?.type === AwsResponseEventType.SET_POSITION_IN_QUEUE\n  );\n};\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class CreateInvitationFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { CreateInvitationToGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/InvitationToGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { CreateInvitationFailedError } from './CreateInvitationFailedError';\n\nexport function createCreateInvitationToGroupChatPayloadData(\n  id: CaseId,\n): EventPayloadData<CreateInvitationToGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.CREATE_GROUP_CHAT_INVITE,\n    data: {\n      contact: {\n        id,\n      },\n    },\n  };\n}\n\nexport function isInvitationToGroupChatCreated(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_INVITE_CREATED;\n}\n\nexport async function sendCreateInvitationToGroupChatEvent(\n  createInvitationPayloadData: EventPayloadData<CreateInvitationToGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(createInvitationPayloadData, wsClient);\n\n  if (isInvitationToGroupChatCreated(response)) {\n    return response;\n  }\n\n  throw new CreateInvitationFailedError('Create invitation failed', response);\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class JoinGroupChatFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { JoinGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/JoinGroupChat';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { JoinGroupChatFailedError } from './JoinGroupChatFailedError';\n\nexport function createJoinGroupChatPayloadData(\n  code: string,\n): EventPayloadData<JoinGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.JOIN_GROUP_CHAT,\n    data: {\n      invitation: {\n        code,\n      },\n    },\n  };\n}\n\nexport function isJoinGroupChatSuccessResponse(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_JOINED;\n}\n\nexport async function sendJoinGroupChatEvent(\n  joinGroupChatPayloadData: EventPayloadData<JoinGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(joinGroupChatPayloadData, wsClient);\n\n  if (isJoinGroupChatSuccessResponse(response)) {\n    return response;\n  }\n\n  throw new JoinGroupChatFailedError('Join Group chat failed', response);\n}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { LeaveGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/LeaveGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nexport function createLeaveGroupChatPayloadData(\n  id: CaseId,\n): EventPayloadData<LeaveGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.LEAVE_GROUP_CHAT,\n    data: {\n      contact: {\n        id,\n      },\n    },\n  };\n}\n\nexport async function sendLeaveGroupChatEvent(\n  leaveGroupChatPayloadData: EventPayloadData<LeaveGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  return sendChatEvent(leaveGroupChatPayloadData, wsClient);\n}\n","import { ChatSDKError } from '../error/ChatSDKError';\n\nexport class SendEmailInvitaionFailedError extends ChatSDKError {}\n","import { AwsInputEventType } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsEventType';\nimport { SendEmailInvitationToGroupChatEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendEmailInvitationToGroupChat';\nimport { CaseId } from '@brandembassy/ts-types-platform/dist/post/case/CaseId';\n\nimport { ChatEvent, ChatEventData } from '../event/ChatEvent';\nimport { sendChatEvent } from '../event/sendChatEvent';\nimport { EventPayloadData } from '../sockets/EventPayload';\nimport { WebSocketClient } from '../sockets/WebSocketClient';\n\nimport { SendEmailInvitaionFailedError } from './SendEmailInvitaionFailedError';\n\nexport function createSendEmailInvitationToGroupChatPayloadData(\n  caseId: CaseId,\n  invitationCode: string,\n  email: string,\n): EventPayloadData<SendEmailInvitationToGroupChatEventData> {\n  return {\n    eventType: AwsInputEventType.SEND_EMAIL_INVITE_TO_GROUP_CHAT,\n    data: {\n      contact: {\n        id: caseId,\n      },\n      invitation: {\n        code: invitationCode,\n      },\n      recipients: [\n        {\n          idOnExternalPlatform: email,\n        },\n      ],\n    },\n  };\n}\n\nexport function isEmailInvitationToGroupChatSent(\n  response: ChatEventData,\n): boolean {\n  return response.type === ChatEvent.GROUP_CHAT_INVITE_SENT;\n}\n\nexport async function sendEmailInvitationToGroupChatEvent(\n  createInvitationPayloadData: EventPayloadData<SendEmailInvitationToGroupChatEventData>,\n  wsClient: WebSocketClient | null,\n): Promise<ChatEventData> {\n  const response = await sendChatEvent(createInvitationPayloadData, wsClient);\n\n  if (isEmailInvitationToGroupChatSent(response)) {\n    return response;\n  }\n\n  throw new SendEmailInvitaionFailedError(\n    'Send Email Invitation failed',\n    response,\n  );\n}\n","export interface CustomerReconnectSuccessPayloadData {\n  reconnected: true;\n}\n\nexport function isCustomerReconnectSuccessPayloadData(\n  payload: unknown,\n): payload is CustomerReconnectSuccessPayloadData {\n  if (typeof payload !== 'object' || payload === null) {\n    return false;\n  }\n\n  if (!('reconnected' in payload)) {\n    return false;\n  }\n\n  return payload.reconnected === true;\n}\n","import { User } from '@brandembassy/ts-types-platform/dist/user/User';\nimport { UserId } from '@brandembassy/ts-types-platform/dist/user/UserId';\n\nimport { ChatSdk } from './ChatSdk';\n\n// Export runtime classes and types\nexport type { SendMessageEventData } from '@brandembassy/ts-types-chat/dist/awsEvents/SendMessage';\nexport type { ConsumerIdentityInput as CustomerIdentity } from '@brandembassy/ts-types-chat/dist/awsEvents/AwsInputEvent';\nexport type { CaseInboxAssigneeChangedData as AssignedAgentChangedData } from '@brandembassy/ts-types-platform/dist/post/case/CaseInboxAssigneeChangedEvent';\nexport { MessageType } from '@brandembassy/ts-types-platform/dist/message/MessageType';\nexport { WebSocketClientEvent } from '@brandembassy/push-updates-sdk';\nexport { WebSocketClientError } from './sockets/WebSocketClientError';\nexport { ChatEvent } from './event/ChatEvent';\nexport type { ChatEventType } from './event/ChatEvent';\nexport { sendChatEvent } from './event/sendChatEvent';\nexport { EnvironmentName, EnvironmentEndpoints } from './env/Environments';\nexport * from './agent';\nexport * from './thread';\nexport * from './contact';\nexport * from './ChatSdk';\nexport * from './message';\nexport { Customer } from './customer/Customer';\nexport type { Customer as CustomerView } from '@brandembassy/ts-types-platform/dist/customer/customer';\nexport * from './utils/narrowing';\nexport { generateId } from './utils/generateId';\nexport { splitName } from './utils/splitName';\nexport type { ChatSDKOptions } from './ChatSDKOptions';\nexport * from './groupChat';\nexport * from './utils/AbortablePromise';\nexport { AbortError } from './error/AbortError';\n\n// Export types for API Docs availability\nexport * from './authorization/AuthorizeConsumerEventResponse';\nexport type { BrandId } from '@brandembassy/ts-types-platform/dist/brand/BrandId';\nexport type { ChannelId } from '@brandembassy/ts-types-platform/dist/channel/ChannelId';\nexport { Thread as ThreadView } from '@brandembassy/ts-types-platform/dist/thread/Thread';\nexport type { CustomerIdentityIdOnExternalPlatform } from '@brandembassy/ts-types-platform/dist/endUser/EndUserIdentityId';\nexport type { WebSocketClient } from './sockets/WebSocketClient';\nexport type {\n  EventListenerFunction,\n  RemoveListenerFunction,\n} from './event/ListenerFunction';\nexport type { IChatEventTarget } from './event/ChatEventTarget';\nexport type { ChatEventData } from './event/ChatEvent';\nexport type { MoreMessagesLoadedEvent } from './message/loadMoreMessagesEventData';\nexport type { ThreadRecoveredPostbackData } from '@brandembassy/ts-types-chat/dist/awsEvents/ThreadRecovered';\nexport type { MessageSuccessEventData } from './message/MessageSuccessEventData';\nexport type { ConsumerAuthorizationSuccessPayloadData } from '@brandembassy/ts-types-chat/dist/authorization/ConsumerAuthorizationSuccessPayloadData';\nexport type { UploadFailResponse } from './attachment/uploadAttachment';\nexport { UploadAttachmentError } from './attachment/UploadAttachmentError';\nexport type Agent = User;\nexport type AgentId = UserId;\nexport type { AuthorizationToken } from '@brandembassy/ts-types-chat/dist/authorization/AuthorizationToken';\nexport type { OfflineMessageData } from './message/sendOfflineMessage';\nexport type { EventPayloadData } from './sockets/EventPayload';\nexport type { ThreadRecoveredChatEvent } from './thread/isRecoverSuccessPayload';\nexport * from './authorization/createReconnectPayloadData';\nexport * from './authorization/CustomerReconnectSuccessPayloadData';\nexport { AuthorizationError } from './authorization/AuthorizationError';\n\n// Export the ChatSDK as default\nexport default ChatSdk;\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__459__","__WEBPACK_EXTERNAL_MODULE__585__","isoString","milliseconds","Date","parse","isNaN","day","parsedDate","exec","split","map","itm","parseInt","UTC","apply","getDate","NaN","tz","setUTCMinutes","getUTCMinutes","getTime","parseTimestampFromISO8601String","Object","defineProperty","value","getTimeInMinutes","getTimeInMilliseconds","getTimeInSeconds","padDateTimeUnit","dateTimeUnit","norm","Math","abs","floor","Number","_a","_b","hours","_c","minutes","_d","seconds","_e","getTimezoneISOOffset","misc_1","date","tzo","getTimezoneOffset","concat","queryParameters","keys","filter","key","encodeURIComponent","join","LogLevels","EventTargetPolyfill","this","listeners","prototype","addEventListener","type","callback","push","removeEventListener","stack","l","length","splice","dispatchEvent","event","slice","call","defaultPrevented","WebSocketClientEvent_1","enumerable","get","WebSocketClientEvent","__assign","assign","t","s","n","arguments","p","hasOwnProperty","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","getPushUpdateWebSocket","setupSocketConnection","WebSocketClient_1","socket","defaultConnectionOptions","forceSecureProtocol","heartbeatAfterAuthorize","maxRetries","maxReconnectionDelay","webSocketUrlWithoutProtocol","options","TypeError","connectionOptions","wscOptions","url","window","location","protocol","createWebSocketUrlWithProtocol","WebSocketClient","undefined","MESSAGE","JSON","detail","data","startHeartBeat","HeartBeatState","extendStatics","__extends","d","b","setPrototypeOf","__proto__","Array","__","constructor","create","__importDefault","mod","__esModule","HEART_BEAT_CHECK_TIMEOUT","HEART_BEAT_INTERVAL","Logger_1","reconnecting_websocket_1","EventTargetPolyfill_1","HeartBeatState_1","_super","protocols","_this","heartBeatTimeout","heartBeatCheckTimeout","enableDebugMode","debugMode","log","INFO","disableDebugMode","level","message","args","logger","sendHeartBeat","send","stringify","action","handleHeartBeatResponse","heartBeatState","DYING","LIVING","dispatchHeartBeatState","setHeartBeatCheckTimeout","clearTimeout","setTimeout","hearbeatState","CustomEvent","isHeartBeatActive","default","onopen","OPEN","onclose","closeEvent","retryCount","DIED","CLOSE","onmessage","onerror","ERROR","interval","heartBeatCallback","stopHeartBeat","__read","o","m","Symbol","iterator","r","ar","next","done","error","__spread","Event","target","ErrorEvent","CloseEvent","code","reason","wasClean","getGlobalWebSocket","WebSocket","DEFAULT","minReconnectionDelay","random","minUptime","reconnectionDelayGrowFactor","connectionTimeout","Infinity","maxEnqueuedMessages","startClosed","debug","ReconnectingWebSocket","_listeners","open","close","_retryCount","_shouldReconnect","_connectLock","_binaryType","_closeCalled","_messageQueue","_handleOpen","_debug","_options","_connectTimeout","_uptimeTimeout","_acceptOpen","_ws","binaryType","forEach","listener","_callEventListener","_handleMessage","_handleError","_disconnect","_connect","_handleClose","_clearTimeouts","_url","_protocols","configurable","CONNECTING","CLOSING","CLOSED","set","max","reduce","acc","Blob","size","byteLength","bufferedAmount","extensions","readyState","reconnect","e_1","listeners_1","__values","listeners_1_1","e_1_1","return","_i","console","_getNextDelay","delay","pow","_wait","Promise","resolve","_getNextUrl","urlProvider","then","Error","_removeListeners","w","_addListeners","_handleTimeout","catch","err","handleEvent","AwsChatWindowEventActionRoute","AwsResponseEventType","AwsInputEventType","DeviceType","CaseStatus_1","CaseStatus","MessageDirection","MessageType","PushUpdateEventType","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","obj","prop","toStringTag","ChatSDKVariable","SDKVariableStorage","_vars","variableName","defaultValue","list","clear","setAccessToken","accessToken","ACCESS_TOKEN","token","ACCESS_TOKEN_EXPIRES_IN","String","expiresIn","getAccessToken","super","name","_getErrorMessage","AuthorizationError","errorMessage","createVisitorPayload","visitorId","visitor","id","objectProto","Ctor","func","transform","arg","global","freeSelf","Function","nativeObjectToString","toString","symToStringTag","isOwn","tag","unmasked","result","uid","maskSrcKey","funcToString","reIsHostCtor","reIsNative","RegExp","replace","test","object","mapTag","promiseTag","setTag","weakMapTag","dataViewTag","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","getTag","ArrayBuffer","ctorString","isArray","freeExports","nodeType","freeModule","Buffer","isBuffer","typedArrayTags","freeProcess","nodeUtil","types","binding","nodeIsTypedArray","requestQueue","Map","makeRequest","async","wsClient","eventId","splitName","firstName","names","setCustomFields","fields","setCustomFieldsFromArray","ident","getCustomFields","fromEntries","getCustomFieldsArray","from","Customer","image","websocketClient","_customFields","_exists","_websocketClient","setId","setName","setImage","static","CUSTOMER_ID","CUSTOMER_NAME","customerId","getId","CUSTOMER_IMAGE","getIdOrCreateNewOne","getName","setExists","exists","setCustomField","customFields","sendCustomFields","sendChatEvent","eventType","createCustomerIdentityPayload","storedName","storedImage","getImage","customerIdentityNamePayload","lastName","idOnExternalPlatform","getBrandIdAndChannelId","brandId","BRAND_ID","channelId","CHANNEL_ID","createEventPayload","eventPayloadData","consumerIdentity","destination","brand","channel","createEvent","payload","actionRoute","AwsChatWindowEvent","payloadData","webSocketClient","createReconnectPayloadData","refreshTokenTimeoutId","handleRefreshToken","refreshTokenAction","accessTokenExpiresIn","idealTimeToRefreshAccessToken","round","getIdealTimeInSecondsForIssueRefreshToken","isAuthSuccessEvent","status","isTokenRefreshedSuccessResponse","response","EnvironmentName","ChatEvent","AGENT_TYPING_STARTED","AGENT_TYPING_ENDED","ASSIGNED_AGENT_CHANGED","CONTACT_CREATED","CONTACT_STATUS_CHANGED","CONTACT_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED","ChatCustomEvent","ChatEventMiddleware","middlewares","register","middleware","process","processedEvent","ChatEventTarget","EventTarget","hasUserData","user","EMPTY_EVENT","createdAt","normalizeEvent","hasEventId","hasError","hasEventType","hasData","context","eventDetailData","postback","isDataWithPostback","postbackData","postbackEventType","rawEventId","restEventData","eventRest","eventTypeMap","SENDER_TYPING_STARTED","SENDER_TYPING_ENDED","CASE_INBOX_ASSIGNEE_CHANGED","CASE_CREATED","CASE_STATUS_CHANGED","CASE_TO_ROUTING_QUEUE_ASSIGNMENT_CHANGED","LIVECHAT_RECOVERED","normalizedContactHistoryItems","contactHistory","THREAD_RECOVERED","chatEventMapper","isSendMessageSuccessEventData","SendMessageFailedError","WebSocketClientError","onError","_connection","connect","port","host","prefix","socketUrl","consumerIdOnExternalPlatform","consumerId","v","APP_VERSION","createSocketUrl","errorHandlerBound","_errorHandler","bind","disconnect","stringData","on","handlerCallback","off","eventError","getBrowserLanguage","navigator","language","getBrowserLocation","Intl","DateTimeFormat","resolvedOptions","timeZone","getDeviceType","deviceType","getBrowserFingerprint","deviceInfoFromUserAgent","userAgent","country","ip","browser","getBrowser","browserVersion","version","os","getOS","osVersion","getDevice","applicationType","UploadAttachmentError","createAttachmentPayload","file","attachment","reader","reject","FileReader","onloadend","errorEvent","readAsDataURL","createLocalFileReader","mimeType","createPayloadForAttachmentUpload","uploadAttachmentResponse","CHANNEL_INTEGRATION_URL","ENDPOINT_CHAT","fileName","requestBody","content","fetch","method","body","headers","APP_NAME","ok","json","uploadAttachment","fileUrl","friendlyName","allowedFileSize","isUploadFailResponse","isContactStatusChangedEvent","case","isContactCreatedEvent","isContactToRoutingQueueAssignmentChangedEvent","isContactRecipientsChangedEvent","createMessageData","messageContent","messageId","threadIdOnExternalPlatform","browserFingerprint","thread","consumer","consumerContact","attachments","isLoadMoreMessagesEventData","messages","createLoadMoreMessagesPayloadData","eventData","ArchiveThreadFailedError","GetMetadataFailedError","isLoadMetadataSuccessPayload","lastMessage","isRecoverSuccessPayload","testResponseData","hasPostbackData","hasMessages","isCorrectEventType","hasNoError","isThreadArchivedSuccessPayload","LoadMoreMessagesFailedError","createRecoverThreadPayloadData","emptyData","SetThreadNameFailedError","ThreadRecoverFailedError","Thread","messageEmitter","customer","isAuthorizationEnabled","_typingTimeoutID","_isAuthorizationEnabled","_typingPreviewText","_messageEmitter","_customer","_registerEventHandlers","contact","restData","messageData","sendMessagePayloadData","sendMessage","_mergeCustomFieldsAndAccessTokenWithMessageData","messageText","textMessageContent","text","getTextMessageContent","postbackMessageContent","getPostbackMessageContent","sendOutboundMessagePayloadData","sendOutboundMessage","scrollToken","oldestMessageDatetime","THREAD_DATA","loadMoreMessagesEventData","files","all","createAttachmentUploadMessageData","keystroke","timeout","onSendCallback","_stopTypingCallback","stopTyping","keystrokeForPreview","currentText","_typingForPreviewTimeoutID","stopTypingForPreview","shouldSendPreview","currentPreviewText","sendMessagePreview","onThreadEvent","handler","filteredEventHandler","threadId","dataWithThread","messagePreview","getThreadId","filterCurrentThreadEventHandler","updateThreadData","threadName","isUpdateThreadSuccess","createSendMessagePreviewPayloadData","contactNumber","email","consumerRecipients","createSendTranscriptPayloadData","_setThreadAndCustomerExists","_clearCustomFieldsOnContactStatusChangedToClosed","eventDetail","ContactStatus","isOutbound","storedAccessToken","createRecoverLivechatThreadPayloadData","LivechatThread","_isInitialized","_canSendMessage","_registerLivechatEventHandlers","initialMessageText","sendTextMessage","threadDataRaw","threadData","contactId","createEndThreadPayloadData","isThreadListFetchedPostbackData","storeContactId","originalThreadDataRaw","originalThreadData","storeContactIdMiddleware","caseId","storeThreadScrollData","scrollData","array","oldThreadDataRaw","oldThreadData","storeThreadScrollDataMiddleware","messagesScrollToken","AbortError","AbortablePromise","executor","abortController","AbortController","abortSignal","signal","abortReason","abort","_abortReason","promise","ChatSdk","isLivechat","_incomingChatEventMiddleware","_threadCache","_contactCustomFieldsQueue","_sendRefreshTokenEvent","refreshTokenResponse","AUTHORIZATION_CODE","authorizationCode","appName","appVersion","onRawEvent","_initEnvironment","_initWS","customerName","customerImage","onErrorHandler","reconnectResponse","refreshTokenEventCallback","reconnectPayload","reconnected","authorizationReconnect","authorizationPayloadData","authorization","createAuthorizationPayloadData","authEvent","authResponse","customerIdentityIdOnExternalPlatform","settings","createGenerateAuthorizationTokenPayloadData","authorizationToken","onChatEvent","getCustomer","getThread","cachedThread","liveThread","_getContactCustomFieldsFromQueue","eventPayload","threads","getWebsocketClient","offlineMessageData","offlineMessagePayloadData","reverse","createSendOfflineMessagePayloadData","sendOfflineMessage","recoverThreadData","recoverEvent","recoverResponse","recoverLivechatThreadData","environment","custom","customEnvironment","ENDPOINT_GATEWAY","gateway","chat","placeholder","chatUrlTemplate","gatewayUrlTemplate","AU1","CA1","EU1","JP1","NA1","UK1","getEnvironmentEndpoints","endpoint","assertNonNullable","URL","wsClientOptions","hostname","pathname","substring","s3Object","getEventData","parseWsMessageEvent","parsedEvent","has","onMessageHandler","isAssignedAgentChangedEvent","isAgentTypingStartedEvent","isAgentTypingEndedEvent","getAuthor","direction","authorEndUserIdentity","fullName","authorUser","surname","trim","isMessage","item","hasId","hasDirection","hasMessageContent","isMessageCreatedEvent","isMessageSentEvent","isMessageReadChangedEvent","isSetPositionInQueueEvent","setPositionInQueueEvent","isInteger","positionInQueue","CreateInvitationFailedError","createCreateInvitationToGroupChatPayloadData","sendCreateInvitationToGroupChatEvent","createInvitationPayloadData","GROUP_CHAT_INVITE_CREATED","isInvitationToGroupChatCreated","JoinGroupChatFailedError","createJoinGroupChatPayloadData","invitation","sendJoinGroupChatEvent","joinGroupChatPayloadData","GROUP_CHAT_JOINED","isJoinGroupChatSuccessResponse","createLeaveGroupChatPayloadData","sendLeaveGroupChatEvent","leaveGroupChatPayloadData","SendEmailInvitaionFailedError","createSendEmailInvitationToGroupChatPayloadData","invitationCode","recipients","sendEmailInvitationToGroupChatEvent","GROUP_CHAT_INVITE_SENT","isEmailInvitationToGroupChatSent","isCustomerReconnectSuccessPayloadData"],"sourceRoot":""}