import { Brand } from '../../brand/Brand';
import { PushUpdateEventFields } from '../../pushUpdate/PushUpdateEventFields';
import * as yup from 'yup';
import { Channel } from '../../channel/Channel';
import { Case } from './Case';
import { PushUpdateEventObject } from '../../pushUpdate/PushUpdateEventObject';
import { PushUpdateEventType } from '../../pushUpdate/PushUpdateEventType';
import { Thread } from '../../thread/Thread';
declare const caseCreatedEventDataSchema: yup.ObjectSchema<{
    brand: object & {
        id: any;
        tenantId: any;
        businessUnitId: any;
    };
    case: object & {
        id: any;
        threadId: any;
        threadIdOnExternalPlatform: any;
        status: any;
        direction: any;
        routingQueueId: any;
        routingQueuePriority: any;
        inboxAssignee: any;
        inboxAssigneeUser: any;
        inboxPreAssigneeUser: any;
        ownerAssignee: any;
        ownerAssigneeUser: any;
        endUserRecipients: any;
        detailUrl: any;
        authorEndUserIdentity: any;
        statistics: any;
        recipientsCustomers: any;
        recipients: any;
    };
    channel: object & {
        id: any;
        name: any;
        integrationBoxIdentifier: any;
        idOnExternalPlatform: any;
        realExternalPlatformId: any;
        externalPlatformAvatar: any;
        canAgentInviteCustomersToContact: any;
        canReplyToAnyMessage: any;
        canSaveResponse: any;
        contentFormat: any;
        externalPlatformIcon: any;
        hasAbilityToDelete: any;
        hasAbilityToForwardMessage: any;
        hasAbilityToHide: any;
        hasAbilityToChangeFrom: any;
        hasAbilityToChangeRecipient: any;
        hasAbilityToLike: any;
        hasAbilityToQuoteMessage: any;
        hasAbilityToSendFiles: any;
        hasAbilityToShare: any;
        hasAbilityToTag: any;
        hasCcAndBcc: any;
        hasCustomerOnThirdParty: any;
        hasEditableTitle: any;
        hasMultipleRecipient: any;
        hasMultipleThreadsPerEndUser: any;
        hasOutboundFlow: any;
        hasOutboundTemplates: any;
        hasPostAsPlaceholder: any;
        hasPublishing: any;
        hasReply: any;
        hasTreeStructure: any;
        hasVisibleRecipients: any;
        hasVisibleTitle: any;
        channelIntegrationId: any;
        isAutomaticSignatureAttached: any;
        isCaseBasedStorage: any;
        isHidden: any;
        isDeleted: any;
        isLiveChat: any;
        isPostWritable: any;
        isPrivate: any;
        mediaType: any;
        nicknameOnExternalPlatform: any;
        ownerUserId: any;
        replyPrefixMentionTemplate: any;
        studioScript: any;
        translationGroup: any;
        wysiwygEnabled: any;
    };
    thread: object & {
        id: any;
        idOnExternalPlatform: any;
        threadName: any;
    };
}>;
export declare type CaseCreatedData = yup.InferType<typeof caseCreatedEventDataSchema> & {
    brand: Brand;
    case: Case;
    channel: Channel;
    thread: Thread;
};
export declare const caseCreatedEventSchema: yup.ObjectSchema<{
    data: object & {
        brand: any;
        case: any;
        channel: any;
        thread: any;
    };
} & {
    eventId: string;
    eventObject: string;
    eventType: string;
    context: (object & {
        initiator: any;
    }) | null;
    createdAt: Date;
}>;
export declare type CaseCreatedEvent = yup.InferType<typeof caseCreatedEventSchema> & PushUpdateEventFields & {
    eventObject: PushUpdateEventObject.CASE;
    eventType: PushUpdateEventType.CASE_CREATED;
    data: CaseCreatedData;
};
export {};
