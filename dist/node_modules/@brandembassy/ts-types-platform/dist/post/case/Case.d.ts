import * as yup from 'yup';
import '../../extensions/yup.extensions';
import { EndUserIdentity } from '../../endUser/EndUserIdentity';
import { CaseId } from './CaseId';
import { RoutingQueueId } from './routingQueue/RoutingQueueId';
import { CaseStatus } from './CaseStatus';
import { Recipient } from '../../recipient/Recipient';
import { Statistics } from '../../customerContact/statistics/Statistics';
import { ThreadId } from '../../thread/ThreadId';
import { User } from '../../user/User';
import { ThreadIdOnExternalPlatform } from '../../thread/ThreadIdOnExternalPlatform';
export declare const caseSchema: yup.ObjectSchema<{
    id: string;
    threadId: string;
    threadIdOnExternalPlatform: string;
    status: string;
    direction: string;
    routingQueueId: string;
    routingQueuePriority: number;
    inboxAssignee: number;
    inboxAssigneeUser: (object & {
        id: any;
        incontactId: any;
        emailAddress: any;
        loginUsername: any;
        firstName: any;
        surname: any;
        nickname: any;
        isBotUser: any;
        isSurveyUser: any;
        imageUrl: any;
        publicImageUrl: any;
    }) | null;
    inboxPreAssigneeUser: (object & {
        id: any;
        incontactId: any;
        emailAddress: any;
        loginUsername: any;
        firstName: any;
        surname: any;
        nickname: any;
        isBotUser: any;
        isSurveyUser: any;
        imageUrl: any;
        publicImageUrl: any;
    }) | null;
    ownerAssignee: number;
    ownerAssigneeUser: (object & {
        id: any;
        incontactId: any;
        emailAddress: any;
        loginUsername: any;
        firstName: any;
        surname: any;
        nickname: any;
        isBotUser: any;
        isSurveyUser: any;
        imageUrl: any;
        publicImageUrl: any;
    }) | null;
    endUserRecipients: Recipient[];
    detailUrl: string;
    authorEndUserIdentity: object & {
        id: any;
        idOnExternalPlatform: any;
        fullName: any;
        firstName: any;
        lastName: any;
        nickname: any;
        image: any;
    };
    statistics: object & {
        inboxAssigneeResponseTime: any;
    };
    recipientsCustomers: {
        fullName: any;
        firstName: any;
        surname: any;
        id: any;
        image: any;
        customFields: any;
    }[];
    recipients: Recipient[];
}>;
export declare type Case = yup.InferType<typeof caseSchema> & {
    id: CaseId;
    threadId: ThreadId;
    threadIdOnExternalPlatform: ThreadIdOnExternalPlatform;
    status: CaseStatus;
    routingQueueId?: RoutingQueueId;
    authorEndUserIdentity?: EndUserIdentity;
    statistics: Statistics;
    inboxAssigneeUser?: User | null;
    inboxPreAssigneeUser?: User | null;
    ownerAssigneeUser?: User | null;
};
