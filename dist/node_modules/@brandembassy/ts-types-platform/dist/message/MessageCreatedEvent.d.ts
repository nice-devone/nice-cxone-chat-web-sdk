import { Brand } from '../brand/Brand';
import { Channel } from '../channel/Channel';
import { Case } from '../post/case/Case';
import { Message } from './Message';
import { PushUpdateEventFields } from '../pushUpdate/PushUpdateEventFields';
import * as yup from 'yup';
import { PushUpdateEventObject } from '../pushUpdate/PushUpdateEventObject';
import { PushUpdateEventType } from '../pushUpdate/PushUpdateEventType';
import { Thread } from '../thread/Thread';
declare const messageCreatedDataSchema: yup.ObjectSchema<{
    brand: object & {
        id: any;
        tenantId: any;
        businessUnitId: any;
    };
    message: object & {
        id: any;
        idOnExternalPlatform: any;
        threadId: any;
        threadIdOnExternalPlatform: any;
        postId: any;
        contactNumber: any;
        replyToMessage: any;
        messageContent: any;
        hasAdditionalMessageContent: any;
        reactionStatistics: any;
        tags: any;
        sentiment: any;
        createdAt: any;
        direction: any;
        isRead: any;
        isReplyAllowed: any;
        readAt: any;
        authorUser: any;
        attachments: any;
        authorNameRemoved: any;
        contentRemoved: any;
        deletedOnExternalPlatform: any;
        isHiddenOnExternalPlatform: any;
        authorEndUserIdentity: any;
        url: any;
        user: any;
        recipients: any;
        title: any;
        replyChannel: any;
        customerStatistics: any;
        userStatistics: any;
        seen: any;
        delivered: any;
    };
    case: object & {
        id: any;
        threadId: any;
        threadIdOnExternalPlatform: any;
        status: any;
        direction: any;
        routingQueueId: any;
        routingQueuePriority: any;
        inboxAssignee: any;
        inboxAssigneeUser: any;
        inboxPreAssigneeUser: any;
        ownerAssignee: any;
        ownerAssigneeUser: any;
        endUserRecipients: any;
        detailUrl: any;
        authorEndUserIdentity: any;
        statistics: any;
        recipientsCustomers: any;
        recipients: any;
    };
    channel: object & {
        id: any;
        name: any;
        integrationBoxIdentifier: any;
        idOnExternalPlatform: any;
        realExternalPlatformId: any;
        externalPlatformAvatar: any;
        canAgentInviteCustomersToContact: any;
        canReplyToAnyMessage: any;
        canSaveResponse: any;
        contentFormat: any;
        externalPlatformIcon: any;
        hasAbilityToDelete: any;
        hasAbilityToForwardMessage: any;
        hasAbilityToHide: any;
        hasAbilityToChangeFrom: any;
        hasAbilityToChangeRecipient: any;
        hasAbilityToLike: any;
        hasAbilityToQuoteMessage: any;
        hasAbilityToSendFiles: any;
        hasAbilityToShare: any;
        hasAbilityToTag: any;
        hasCcAndBcc: any;
        hasCustomerOnThirdParty: any;
        hasEditableTitle: any;
        hasMultipleRecipient: any;
        hasMultipleThreadsPerEndUser: any;
        hasOutboundFlow: any;
        hasOutboundTemplates: any;
        hasPostAsPlaceholder: any;
        hasPublishing: any;
        hasReply: any;
        hasTreeStructure: any;
        hasVisibleRecipients: any;
        hasVisibleTitle: any;
        channelIntegrationId: any;
        isAutomaticSignatureAttached: any;
        isCaseBasedStorage: any;
        isHidden: any;
        isDeleted: any;
        isLiveChat: any;
        isPostWritable: any;
        isPrivate: any;
        mediaType: any;
        nicknameOnExternalPlatform: any;
        ownerUserId: any;
        replyPrefixMentionTemplate: any;
        studioScript: any;
        translationGroup: any;
        wysiwygEnabled: any;
    };
    thread: object & {
        id: any;
        idOnExternalPlatform: any;
        threadName: any;
    };
}>;
export declare type MessageCreatedData = yup.InferType<typeof messageCreatedDataSchema> & {
    brand: Brand;
    message: Message;
    case: Case;
    channel: Channel;
    thread: Thread;
};
export declare const messageCreatedEventSchema: yup.ObjectSchema<{
    data: object & {
        brand: any;
        message: any;
        case: any;
        channel: any;
        thread: any;
    };
} & {
    eventId: string;
    eventObject: string;
    eventType: string;
    context: (object & {
        initiator: any;
    }) | null;
    createdAt: Date;
}>;
export declare type MessageCreatedEvent = yup.InferType<typeof messageCreatedEventSchema> & PushUpdateEventFields & {
    eventObject: PushUpdateEventObject.MESSAGE;
    eventType: PushUpdateEventType.MESSAGE_CREATED;
    data: MessageCreatedData;
};
export {};
