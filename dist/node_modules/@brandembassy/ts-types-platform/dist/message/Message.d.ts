import { MessageContent } from './MessageContent';
import { EndUserIdentity } from '../endUser/EndUserIdentity';
import { Channel } from '../channel/Channel';
import { MessageId, MessageIdOnExternalPlatform } from './MessageId';
import { PostId } from '../post/PostId';
import { MessageDirection } from './MessageDirection';
import * as yup from 'yup';
import { User } from '../user/User';
import { Attachment } from '../attachments/Attachment';
import { ContentRemoved } from './ContentRemoved';
import { Tag } from '../tag/Tag';
import { Sentiment } from './Sentiment';
import { Recipient } from '../recipient/Recipient';
import { UserStatistics } from './UserStatistics';
import { ContactNumber } from '../contact/ContactNumber';
import { ThreadId } from '../thread/ThreadId';
import { ThreadIdOnExternalPlatform } from '../thread/ThreadIdOnExternalPlatform';
import { MessageSeen } from './MessageSeen';
import { MessageDelivered } from './MessageDelivered';
export declare const messageSchema: yup.ObjectSchema<{
    id: string;
    idOnExternalPlatform: string;
    threadId: string;
    threadIdOnExternalPlatform: string;
    postId: string;
    contactNumber: string;
    replyToMessage: {
        id: any;
        idOnExternalPlatform: any;
    } | null;
    messageContent: object & {
        text: any;
        type: any;
        payload: any;
        fallbackText: any;
        isAutoTranslated: any;
    };
    hasAdditionalMessageContent: boolean;
    reactionStatistics: {
        likes: any;
        shares: any;
        isLikedByChannel: any;
        isSharedByChannel: any;
    };
    tags: (object & {
        id: any;
        color: any;
        title: any;
        isActive: any;
    })[];
    sentiment: string;
    createdAt: string;
    direction: string;
    isRead: boolean;
    isReplyAllowed: boolean;
    readAt: Date | null;
    authorUser: (object & {
        id: any;
        incontactId: any;
        emailAddress: any;
        loginUsername: any;
        firstName: any;
        surname: any;
        nickname: any;
        isBotUser: any;
        isSurveyUser: any;
        imageUrl: any;
        publicImageUrl: any;
    }) | null;
    attachments: (object & {
        friendlyName: any;
        securedPermanentUrl: any;
        url: any;
        mimeType: any;
        previewUrl: any;
        isInline: any;
        canBeStored: any;
        id: any;
    })[];
    authorNameRemoved: (object & {
        reason: any;
        removedAt: any;
    }) | null;
    contentRemoved: (object & {
        reason: any;
        removedAt: any;
    }) | null;
    deletedOnExternalPlatform: boolean;
    isHiddenOnExternalPlatform: boolean;
    authorEndUserIdentity: (object & {
        id: any;
        idOnExternalPlatform: any;
        fullName: any;
        firstName: any;
        lastName: any;
        nickname: any;
        image: any;
    }) | null;
    url: string | null;
    user: (object & {
        id: any;
        incontactId: any;
        emailAddress: any;
        loginUsername: any;
        firstName: any;
        surname: any;
        nickname: any;
        isBotUser: any;
        isSurveyUser: any;
        imageUrl: any;
        publicImageUrl: any;
    }) | null | undefined;
    recipients: (object & {
        idOnExternalPlatform: any;
        name: any;
        isPrimary: any;
        isPrivate: any;
    })[];
    title: string;
    replyChannel: (object & {
        id: any;
        name: any;
        integrationBoxIdentifier: any;
        idOnExternalPlatform: any;
        realExternalPlatformId: any;
        externalPlatformAvatar: any;
        canAgentInviteCustomersToContact: any;
        canReplyToAnyMessage: any;
        canSaveResponse: any;
        contentFormat: any;
        externalPlatformIcon: any;
        hasAbilityToDelete: any;
        hasAbilityToForwardMessage: any;
        hasAbilityToHide: any;
        hasAbilityToChangeFrom: any;
        hasAbilityToChangeRecipient: any;
        hasAbilityToLike: any;
        hasAbilityToQuoteMessage: any;
        hasAbilityToSendFiles: any;
        hasAbilityToShare: any;
        hasAbilityToTag: any;
        hasCcAndBcc: any;
        hasCustomerOnThirdParty: any;
        hasEditableTitle: any;
        hasMultipleRecipient: any;
        hasMultipleThreadsPerEndUser: any;
        hasOutboundFlow: any;
        hasOutboundTemplates: any;
        hasPostAsPlaceholder: any;
        hasPublishing: any;
        hasReply: any;
        hasTreeStructure: any;
        hasVisibleRecipients: any;
        hasVisibleTitle: any;
        channelIntegrationId: any;
        isAutomaticSignatureAttached: any;
        isCaseBasedStorage: any;
        isHidden: any;
        isDeleted: any;
        isLiveChat: any;
        isPostWritable: any;
        isPrivate: any;
        mediaType: any;
        nicknameOnExternalPlatform: any;
        ownerUserId: any;
        replyPrefixMentionTemplate: any;
        studioScript: any;
        translationGroup: any;
        wysiwygEnabled: any;
    }) | null;
    customerStatistics: {
        seenAt: any;
    };
    userStatistics: object & {
        seenAt: any;
        readAt: any;
        createdToReadSeconds: any;
    };
    seen: (object & {
        userId: any;
        endUserId: any;
        seenAt: any;
    })[];
    delivered: (object & {
        userId: any;
        endUserId: any;
        deliveredAt: any;
    })[];
}>;
export declare type Message = yup.InferType<typeof messageSchema> & {
    id: MessageId;
    idOnExternalPlatform: MessageIdOnExternalPlatform;
    threadId: ThreadId;
    threadIdOnExternalPlatform: ThreadIdOnExternalPlatform;
    postId: PostId;
    contactNumber: ContactNumber;
    messageContent: MessageContent;
    authorUser: User | null;
    authorEndUserIdentity: EndUserIdentity | null;
    attachments: Array<Attachment>;
    direction: MessageDirection;
    authorNameRemoved: ContentRemoved;
    contentRemoved: ContentRemoved;
    replyChannel: Channel | null;
    recipients: Array<Recipient>;
    sentiment: Sentiment;
    tags: Array<Tag>;
    user?: User;
    userStatistics: UserStatistics;
    seen: Array<MessageSeen>;
    delivered: Array<MessageDelivered>;
};
